/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/**
  * @brief 系统状态机
  */
typedef enum
{
    STATE_INIT = 0,
    STATE_WORKMODE_SELECT,
    STATE_PREPROCESS_SELECT,
    STATE_ADVANCED_SELECT,
    STATE_RUNNING,
    STATE_ERROR
} SystemState_t;

/**
  * @brief 按键事件
  */
typedef enum
{
    PRESS_NONE = 0,
    PRESS_SHORT,
    PRESS_LONG
} PressType_t;

/**
  * @brief 测量类型
  */
typedef enum
{
    MEASURE_HR = 0,
    MEASURE_SPO2
} MeasureType_t;

/**
  * @brief 工作模式
  */
typedef enum
{
    MODE_RED = 0,
    MODE_IR
} WorkMode_t;

/**
  * @brief 预处理模式
  */
typedef enum
{
    PREPROC_SF = 0, // Squaring Filter
    PREPROC_EMA
} PreProcessType_t;

/**
  * @brief 错误码
  */
typedef enum
{
    ERR_NONE = 0,
    ERR_ADC_DMA_FAIL,
    ERR_UNKNOWN
} ErrorCode_t;

/**
  * @brief 环形缓冲区，用于存储日志字符串
  */
#define LOG_BUFFER_SIZE 512
typedef struct
{
    char  buffer[LOG_BUFFER_SIZE];
    int   head;
    int   tail;
} RingBuffer_t;

/**
  * @brief 预处理/高级处理函数指针类型
  */
// 预处理函数：入参为当前ADC值，返回 32位结果
typedef uint32_t (*PreprocFunc_t)(uint32_t);

// 高级处理(心率)：入参为 32位预处理后数据，返回16位
typedef uint16_t (*AdvProcFuncHR_t)(uint32_t);

// 高级处理(SpO2)：入参为 32位预处理后数据，返回8位
typedef uint8_t  (*AdvProcFuncSPO2_t)(uint32_t);
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// 长按2秒
#define LONG_PRESS_THRESHOLD   2000
#define DEBOUNCE_INTERVAL      50

// LED
#define LED_PIN                GPIO_PIN_5
#define LED_PORT               GPIOA

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define min(a,b) ((a)<(b)?(a):(b))
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
volatile PressType_t   g_pressEvent   = PRESS_NONE;
SystemState_t          g_systemState  = STATE_INIT;
MeasureType_t          g_measureType  = MEASURE_HR;
WorkMode_t             g_workMode     = MODE_RED;
PreProcessType_t       g_preprocType  = PREPROC_SF;

//=== 修改点：记录当前错误码
volatile ErrorCode_t   g_errorCode    = ERR_NONE;

//=== 修改点：环形缓冲区实例
static RingBuffer_t g_logRing = {0, 0, 0};

//=== 修改点：DMA采集用的buffer (示例: 采集一个值)
static uint32_t g_adcBuffer[1] = {0};
volatile uint32_t g_latestADCValue = 0;
volatile uint8_t  g_adcDataReady = 0;

/*
 * ============= 示例算法函数 ============
 * (和原先类似，只是展示了函数指针的用法)
 */
static uint32_t applySquaringFilter(uint32_t input)
{
    uint64_t squared = (uint64_t)input * input;
    if (squared > 0xFFFFFFFF) squared = 0xFFFFFFFF;
    return (uint32_t)squared;
}

static uint32_t applyExponentialMovingAverage(uint32_t input)
{
    static float emaVal = 0.0f;
    float alpha = 0.1f;
    emaVal = alpha * (float)input + (1.0f - alpha) * emaVal;
    return (uint32_t)emaVal;
}

static uint16_t computeHeartRate(uint32_t value)
{
    return 60 + (value % 40);
}

static uint8_t computeSpO2(uint32_t value)
{
    return 95 + (value % 5);
}

/*
 * ============= 函数指针数组 ============
 * 便于根据 g_preprocType / g_measureType 动态调用
 */
static PreprocFunc_t g_preprocFuncs[] = {
    applySquaringFilter,
    applyExponentialMovingAverage
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
//=== 修改点: 声明新的函数
static void enterErrorState(ErrorCode_t err);
static void updateLED(SystemState_t state);

//=== 修改点: 环形缓冲相关
static void initRingBuffer(RingBuffer_t* rb);
static void logWrite(RingBuffer_t* rb, const char* data, int len);
static int  logRead(RingBuffer_t* rb, char* out, int maxlen);
// 非阻塞“写日志”函数(带sprintf)
static void logPrintf(const char* fmt, ...);
// 处理环形缓冲里的日志并通过 UART 发送
static void processLogs(void);

//=== 修改点：ADC DMA采集回调
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	  char msg[100];
	  uint32_t adcValue = 0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  //=== 修改点：初始化环形缓冲
  initRingBuffer(&g_logRing);

  logPrintf("System Started. Current State: INIT\r\n");
  // 默认关闭红光和IR
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);

  //=== 修改点: 启动ADC DMA采集 (continuous)
  // 我们假设1次采样存1个数据，循环填充
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_adcBuffer, 1) != HAL_OK)
  {
    // DMA启动失败，进入ERROR
    enterErrorState(ERR_ADC_DMA_FAIL);
  }


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    //=== 1. 处理按钮事件
	    PressType_t currentPress = g_pressEvent;
	    if (currentPress != PRESS_NONE)
	    {
	      g_pressEvent = PRESS_NONE;
	      switch (g_systemState)
	      {
	        case STATE_INIT:
	          if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_WORKMODE_SELECT;
	            logPrintf("System -> WORKMODE_SELECT\r\n");
	          }
	          break;

	        case STATE_WORKMODE_SELECT:
	          if (currentPress == PRESS_SHORT)
	          {
	            g_workMode = (g_workMode == MODE_RED) ? MODE_IR : MODE_RED;
	            if (g_workMode == MODE_RED) logPrintf("Selected WorkMode: RED\r\n");
	            else                        logPrintf("Selected WorkMode: IR\r\n");
	          }
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_PREPROCESS_SELECT;
	            logPrintf("System -> PREPROCESS_SELECT\r\n");
	          }
	          break;

	        case STATE_PREPROCESS_SELECT:
	          if (currentPress == PRESS_SHORT)
	          {
	            g_preprocType = (g_preprocType == PREPROC_SF) ? PREPROC_EMA : PREPROC_SF;
	            if (g_preprocType == PREPROC_SF)
	              logPrintf("Selected PreProcessing: Squaring Filter\r\n");
	            else
	              logPrintf("Selected PreProcessing: Exponential Moving Average\r\n");
	          }
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_ADVANCED_SELECT;
	            logPrintf("System -> ADVANCED_SELECT\r\n");
	          }
	          break;

	        case STATE_ADVANCED_SELECT:
	          if (currentPress == PRESS_SHORT)
	          {
	            g_measureType = (g_measureType == MEASURE_HR) ? MEASURE_SPO2 : MEASURE_HR;
	            if (g_measureType == MEASURE_HR)
	              logPrintf("Selected Advanced: Heart Rate\r\n");
	            else
	              logPrintf("Selected Advanced: SpO2\r\n");
	          }
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_RUNNING;
	            logPrintf("System -> RUNNING\r\n");
	          }
	          break;

	        case STATE_RUNNING:
	          if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_INIT;
	            logPrintf("System -> INIT\r\n");
	            // 关闭所有LED
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	          }
	          break;

	        case STATE_ERROR:
	          // 在ERROR下，长按 => 回到INIT
	          if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_INIT;
	            g_errorCode = ERR_NONE; // 清除错误
	            logPrintf("System -> INIT (from ERROR)\r\n");
	            // 关灯
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	          }
	          break;

	        default:
	          enterErrorState(ERR_UNKNOWN);
	          break;
	      }
	    }

	    //=== 2. 状态行为
	    switch (g_systemState)
	    {
	      case STATE_INIT:
	      case STATE_WORKMODE_SELECT:
	      case STATE_PREPROCESS_SELECT:
	      case STATE_ADVANCED_SELECT:
	      {
	        // 都不采集, 只等用户操作
	        break;
	      }
	      case STATE_RUNNING:
	      {
	        //=== 修改点：不再在这里 Poll ADC，而是看 g_adcDataReady
	        if (g_adcDataReady)
	        {
	          g_adcDataReady = 0; // 清除标记

	          // 取得最新采样值
	          uint32_t adcValue = g_latestADCValue;

	          // 根据模式打开/关闭 LED
	          if (g_workMode == MODE_RED)
	          {
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	          }
	          else
	          {
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	          }

	          // 调用预处理函数指针
	          uint32_t preprocessedValue = g_preprocFuncs[g_preprocType](adcValue);

	          // 示例：只写 HR / SpO2 两种
	          if (g_measureType == MEASURE_HR)
	          {
	            uint16_t hrValue = computeHeartRate(preprocessedValue);
	            // 为了在同一行覆盖输出, 在行首添加 \r, 并留些空格覆盖旧内容
	            logPrintf("\rADC:%lu ->Pre:%lu ->HR:%u bpm      ",
	                      adcValue, preprocessedValue, hrValue);
	          }
	          else
	          {
	            uint8_t spo2Value = computeSpO2(preprocessedValue);
	            logPrintf("\rADC:%lu ->Pre:%lu ->SpO2:%u%%      ",
	                      adcValue, preprocessedValue, spo2Value);
	          }
	        }
	        break;
	      }
	      case STATE_ERROR:
	      {
	        // 可以依据 g_errorCode 来打印更多信息
	        // ...
	        break;
	      }
	      default:
	        enterErrorState(ERR_UNKNOWN);
	        break;
	    }

	    //=== 3. LED 闪烁(原有逻辑)
	    updateLED(g_systemState);

	    //=== 4. 发送环形缓冲中的日志
	    processLogs();

	    // 小延时
	    HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;  //=== 修改点: DMAContinuousRequests = ENABLE
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/* =========== 中断回调: EXTI 按键 =========== */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  static uint32_t pressStartTime = 0;
  static uint32_t lastInterruptTime = 0;

  if (GPIO_Pin == GPIO_PIN_13)
  {
    uint32_t now = HAL_GetTick();
    if ((now - lastInterruptTime) < DEBOUNCE_INTERVAL) return;
    lastInterruptTime = now;

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
    if (pinState == GPIO_PIN_RESET)
    {
      pressStartTime = now; // 按下
    }
    else
    {
      uint32_t pressDuration = now - pressStartTime;
      if (pressDuration >= LONG_PRESS_THRESHOLD)
        g_pressEvent = PRESS_LONG;
      else
        g_pressEvent = PRESS_SHORT;
    }
  }
}

/* =========== 中断回调: ADC DMA转换完成 =========== */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance == ADC1)
  {
    // 将最新采样值保存
    g_latestADCValue = g_adcBuffer[0];
    g_adcDataReady   = 1; // 通知主循环"有新数据"
  }
}

/* =========== 进入ERROR状态并记录错误码 =========== */
static void enterErrorState(ErrorCode_t err)
{
  g_systemState = STATE_ERROR;
  g_errorCode   = err;
  logPrintf("System -> ERROR (code=%d)\r\n", (int)err);
}

/* =========== updateLED: 不同状态不同闪烁节奏 =========== */
static void updateLED(SystemState_t state)
{
  static uint32_t lastToggleTime = 0;
  static GPIO_PinState ledState  = GPIO_PIN_SET;
  uint32_t now = HAL_GetTick();
  uint32_t blinkInterval = 0;

  switch (state)
  {
    case STATE_INIT:            blinkInterval = 0;         break;
    case STATE_WORKMODE_SELECT: blinkInterval = 500;       break;
    case STATE_PREPROCESS_SELECT: blinkInterval = 300;     break;
    case STATE_ADVANCED_SELECT: blinkInterval = 200;       break;
    case STATE_RUNNING:         blinkInterval = 0xFFFFFFFF;break;
    case STATE_ERROR:           blinkInterval = 100;       break;
    default:                    blinkInterval = 0;         break;
  }

  if (blinkInterval == 0)
  {
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
    ledState = GPIO_PIN_SET;
  }
  else if (blinkInterval == 0xFFFFFFFF)
  {
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
    ledState = GPIO_PIN_RESET;
  }
  else
  {
    if ((now - lastToggleTime) >= blinkInterval)
    {
      lastToggleTime = now;
      ledState = (ledState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
    }
  }
}

/* =========== 环形缓冲相关函数 =========== */
static void initRingBuffer(RingBuffer_t* rb)
{
  rb->head = 0;
  rb->tail = 0;
  memset(rb->buffer, 0, LOG_BUFFER_SIZE);
}

static void logWrite(RingBuffer_t* rb, const char* data, int len)
{
  for(int i=0; i<len; i++)
  {
    int next = (rb->head + 1) % LOG_BUFFER_SIZE;
    // 若缓冲满, 可选择覆盖或丢弃
    if (next == rb->tail)
      return; // 简单丢弃

    rb->buffer[rb->head] = data[i];
    rb->head = next;
  }
}

static int logRead(RingBuffer_t* rb, char* out, int maxlen)
{
  if (rb->tail == rb->head)
    return 0; // 空
  int count = 0;
  while(count < maxlen - 1 && rb->tail != rb->head)
  {
    out[count] = rb->buffer[rb->tail];
    rb->tail = (rb->tail + 1) % LOG_BUFFER_SIZE;
    count++;
  }
  out[count] = '\0';
  return count;
}

static void logPrintf(const char* fmt, ...)
{
  char tmp[128];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(tmp, sizeof(tmp), fmt, ap);
  va_end(ap);

  // 写入环形缓冲
  logWrite(&g_logRing, tmp, strlen(tmp));
}

static void processLogs(void)
{
  // 每次尝试发送一小段
  char out[64];
  int readCount = logRead(&g_logRing, out, sizeof(out));
  if (readCount > 0)
  {
    HAL_UART_Transmit(&huart2, (uint8_t*)out, readCount-1, 10);
    // readCount-1 是因为 out[readCount-1] = '\0'
    // 这里简单处理, 也可以一次性发 readCount
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
