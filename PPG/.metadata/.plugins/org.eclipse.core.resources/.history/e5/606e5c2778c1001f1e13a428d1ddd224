/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (Enhanced with English comments)
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#include "main.h"
#include <stdio.h>
#include <string.h>
#include <stdarg.h> // For variable-argument logPrintf

/**
  * @brief System State Machine enumeration
  */
typedef enum
{
    STATE_INIT = 0,             // Initial state
    STATE_WORKMODE_SELECT,      // Select RED or IR mode
    STATE_PREPROCESS_SELECT,    // Select preprocessing algorithm
    STATE_ADVANCED_SELECT,      // Select advanced processing (HR or SpO2)
    STATE_RUNNING,              // System in active data acquisition
    STATE_ERROR                 // Error state
} SystemState_t;

/**
  * @brief Button event types
  */
typedef enum
{
    PRESS_NONE = 0,
    PRESS_SHORT,
    PRESS_LONG
} PressType_t;

/**
  * @brief Measurement type (Heart Rate or SpO2)
  */
typedef enum
{
    MEASURE_HR = 0,
    MEASURE_SPO2
} MeasureType_t;

/**
  * @brief Operating mode (RED or IR)
  */
typedef enum
{
    MODE_RED = 0,
    MODE_IR
} WorkMode_t;

/**
  * @brief Preprocessing modes
  */
typedef enum
{
    PREPROC_SF = 0,   // Squaring Filter
    PREPROC_EMA       // Exponential Moving Average
} PreProcessType_t;

/**
  * @brief Function pointer types to decouple algorithms
  *        PreprocFunc_t: Input uint32_t (original ADC), Output uint32_t (processed)
  *        AdvancedFunc_t: Input uint32_t (preprocessed), Output uint32_t (result)
  */
typedef uint32_t (*PreprocFunc_t)(uint32_t);
typedef uint32_t (*AdvancedFunc_t)(uint32_t);

/**
  * @brief Simple ring buffer structure for storing logs or other data
  */
#define LOG_BUF_SIZE  256
typedef struct
{
    char  buffer[LOG_BUF_SIZE];
    int   head;
    int   tail;
} RingBuffer_t;

// Thresholds and intervals
#define LONG_PRESS_THRESHOLD   2000
#define DEBOUNCE_INTERVAL      50

// LED pin and port
#define LED_PIN                GPIO_PIN_5
#define LED_PORT               GPIOA

ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart2;

/**
  * @brief Global variables for the state machine and events
  */
volatile PressType_t   g_pressEvent   = PRESS_NONE;
SystemState_t          g_systemState  = STATE_INIT;

MeasureType_t    g_measureType  = MEASURE_HR;
WorkMode_t       g_workMode     = MODE_RED;
PreProcessType_t g_preprocType  = PREPROC_SF;

/**
  * @brief Function declarations for decoupled algorithms
  */
static uint32_t applySquaringFilter(uint32_t input);
static uint32_t applyExponentialMovingAverage(uint32_t input);
static uint32_t computeHeartRate(uint32_t value);
static uint32_t computeSpO2(uint32_t value);

/**
  * @brief Function pointer tables for preprocessing and advanced processing
  */
static PreprocFunc_t g_preprocFuncs[] =
{
    applySquaringFilter,
    applyExponentialMovingAverage
};

static AdvancedFunc_t g_advancedFuncs[] =
{
    computeHeartRate,
    computeSpO2
};

/**
  * @brief Simple ring buffer for log text
  */
static RingBuffer_t g_logRB = {
    .buffer = {0},
    .head   = 0,
    .tail   = 0
};

/**
  * @brief Variable for EMA calculations
  */
static float s_emaVal = 0.0f;

/* Function prototypes generated by STM32CubeMX */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);

/* Ring buffer functions */
static void RB_Init(RingBuffer_t* rb);
static int  RB_Write(RingBuffer_t* rb, const char* data, int len);
static int  RB_Read(RingBuffer_t* rb, char* out, int maxlen);

/* Local log functions */
static void logPrintf(const char* fmt, ...);
static void processLogBuffer(void);

/* Additional utility functions */
static void enterErrorState(void);
static void updateLED(SystemState_t state);

/* Decoupled function implementations */

/**
  * @brief Squaring Filter
  * @param input Original ADC value
  * @return Squared result, clipped to 32-bit
  */
static uint32_t applySquaringFilter(uint32_t input)
{
    uint64_t sq = (uint64_t)input * (uint64_t)input;
    if (sq > 0xFFFFFFFF) sq = 0xFFFFFFFF;
    return (uint32_t)sq;
}

/**
  * @brief Exponential Moving Average
  * @param input Original ADC value
  * @return EMA result (uint32_t)
  */
static uint32_t applyExponentialMovingAverage(uint32_t input)
{
    float alpha = 0.1f;
    s_emaVal = alpha * input + (1.0f - alpha) * s_emaVal;
    return (uint32_t)s_emaVal;
}

/**
  * @brief Compute Heart Rate
  * @param value Preprocessed result
  * @return Heart Rate
  */
static uint32_t computeHeartRate(uint32_t value)
{
    // 60 + (value mod 40) for demonstration
    return 60 + (value % 40);
}

/**
  * @brief Compute SpO2
  * @param value Preprocessed result
  * @return SpO2
  */
static uint32_t computeSpO2(uint32_t value)
{
    // 95 + (value mod 5) for demonstration
    return 95 + (value % 5);
}

/**
  * @brief Application entry point
  */
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();

  RB_Init(&g_logRB);
  logPrintf("System Started.\r\nCurrent State: INIT\r\n");

  // Disable RED/IR by default
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);

  while (1)
  {
    PressType_t currentPress = g_pressEvent;
    if (currentPress != PRESS_NONE)
    {
      g_pressEvent = PRESS_NONE;
      switch (g_systemState)
      {
        case STATE_INIT:
          if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_WORKMODE_SELECT;
            logPrintf("Current State: WORKMODE_SELECT\r\n");
          }
          break;

        case STATE_WORKMODE_SELECT:
          if (currentPress == PRESS_SHORT)
          {
            g_workMode = (g_workMode == MODE_RED) ? MODE_IR : MODE_RED;
            if (g_workMode == MODE_RED)
              logPrintf("Selected WorkMode: RED\r\n");
            else
              logPrintf("Selected WorkMode: IR\r\n");
          }
          else if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_PREPROCESS_SELECT;
            logPrintf("Current State: PREPROCESS_SELECT\r\n");
          }
          break;

        case STATE_PREPROCESS_SELECT:
          if (currentPress == PRESS_SHORT)
          {
            g_preprocType = (g_preprocType == PREPROC_SF) ? PREPROC_EMA : PREPROC_SF;
            if (g_preprocType == PREPROC_SF)
              logPrintf("Selected PreProcessing Algorithm: Squaring Filter\r\n");
            else
              logPrintf("Selected PreProcessing Algorithm: ExponentialMovingAverage\r\n");
          }
          else if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_ADVANCED_SELECT;
            logPrintf("Current State: ADVANCED_SELECT\r\n");
          }
          break;

        case STATE_ADVANCED_SELECT:
          if (currentPress == PRESS_SHORT)
          {
            g_measureType = (g_measureType == MEASURE_HR) ? MEASURE_SPO2 : MEASURE_HR;
            if (g_measureType == MEASURE_HR)
              logPrintf("Selected Advanced Processing Algorithm: Heart Rate\r\n");
            else
              logPrintf("Selected Advanced Processing Algorithm: SpO2\r\n");
          }
          else if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_RUNNING;
            logPrintf("Current State: RUNNING\r\n");
          }
          break;

        case STATE_RUNNING:
          if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_INIT;
            logPrintf("Current State: INIT\r\n");
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
          }
          break;

        case STATE_ERROR:
          if (currentPress == PRESS_LONG)
          {
            g_systemState = STATE_INIT;
            logPrintf("Current State: INIT (from ERROR)\r\n");
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
          }
          break;

        default:
          enterErrorState();
          break;
      }
    }

    switch (g_systemState)
    {
      case STATE_INIT:
      case STATE_WORKMODE_SELECT:
      case STATE_PREPROCESS_SELECT:
      case STATE_ADVANCED_SELECT:
        break;

      case STATE_RUNNING:
      {
        // Control LED based on mode
        if (g_workMode == MODE_RED)
        {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
        }
        else
        {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
        }

        HAL_ADC_Start(&hadc1);
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
        {
          uint32_t adcValue = HAL_ADC_GetValue(&hadc1);

          // Preprocessing + Advanced processing
          uint32_t preVal = g_preprocFuncs[g_preprocType](adcValue);
          uint32_t outVal = g_advancedFuncs[g_measureType](preVal);

          char line[80];
          if (g_measureType == MEASURE_HR)
          {
            sprintf(line, "ADC:%lu ->Pre:%lu ->HR:%lu bpm\r\n",
                    adcValue, preVal, outVal);
          }
          else
          {
            sprintf(line, "ADC:%lu ->Pre:%lu ->SpO2:%lu%%\r\n",
                    adcValue, preVal, outVal);
          }
          logPrintf(line);
        }
        break;
      }

      case STATE_ERROR:
        break;

      default:
        enterErrorState();
        break;
    }

    updateLED(g_systemState);
    processLogBuffer();
    HAL_Delay(10);
  }
}

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState           = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue= 0;
  RCC_OscInitStruct.MSIClockRange      = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState       = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization
  */
static void MX_ADC1_Init(void)
{
  ADC_MultiModeTypeDef multimode  = {0};
  ADC_ChannelConfTypeDef sConfig  = {0};

  hadc1.Instance                      = ADC1;
  hadc1.Init.ClockPrescaler          = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution              = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign               = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode            = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection            = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait        = DISABLE;
  hadc1.Init.ContinuousConvMode      = DISABLE;
  hadc1.Init.NbrOfConversion         = 1;
  hadc1.Init.DiscontinuousConvMode   = DISABLE;
  hadc1.Init.ExternalTrigConv        = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge    = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests   = DISABLE;
  hadc1.Init.Overrun                 = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode        = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel      = ADC_CHANNEL_11;
  sConfig.Rank         = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset       = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance                    = USART2;
  huart2.Init.BaudRate              = 115200;
  huart2.Init.WordLength            = UART_WORDLENGTH_8B;
  huart2.Init.StopBits              = UART_STOPBITS_1;
  huart2.Init.Parity                = UART_PARITY_NONE;
  huart2.Init.Mode                  = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl             = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling          = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling        = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit= UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin  = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin   = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

/**
  * @brief EXTI Callback: Detect short press / long press
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  static uint32_t pressStartTime = 0;
  static uint32_t lastInterruptTime = 0;

  if (GPIO_Pin == GPIO_PIN_13)
  {
    uint32_t now = HAL_GetTick();
    if ((now - lastInterruptTime) < DEBOUNCE_INTERVAL)
      return;
    lastInterruptTime = now;

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
    if (pinState == GPIO_PIN_RESET)
    {
      pressStartTime = now;
    }
    else
    {
      uint32_t pressDuration = now - pressStartTime;
      if (pressDuration >= LONG_PRESS_THRESHOLD)
        g_pressEvent = PRESS_LONG;
      else
        g_pressEvent = PRESS_SHORT;
    }
  }
}

/**
  * @brief Initialize the ring buffer
  */
static void RB_Init(RingBuffer_t* rb)
{
  rb->head = 0;
  rb->tail = 0;
  memset(rb->buffer, 0, LOG_BUF_SIZE);
}

/**
  * @brief Write data to the ring buffer (discard if full)
  */
static int RB_Write(RingBuffer_t* rb, const char* data, int len)
{
  int count = 0;
  for(int i = 0; i < len; i++)
  {
    int nextHead = (rb->head + 1) % LOG_BUF_SIZE;
    if(nextHead == rb->tail)
      break;

    rb->buffer[rb->head] = data[i];
    rb->head = nextHead;
    count++;
  }
  return count;
}

/**
  * @brief Read data from the ring buffer
  */
static int RB_Read(RingBuffer_t* rb, char* out, int maxlen)
{
  int count = 0;
  while(rb->tail != rb->head && count < (maxlen - 1))
  {
    out[count] = rb->buffer[rb->tail];
    rb->tail = (rb->tail + 1) % LOG_BUF_SIZE;
    count++;
  }
  out[count] = '\0';
  return count;
}

/**
  * @brief Log function with variable arguments, writing to ring buffer
  */
static void logPrintf(const char* fmt, ...)
{
  char tmp[128];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(tmp, sizeof(tmp), fmt, ap);
  va_end(ap);

  RB_Write(&g_logRB, tmp, strlen(tmp));
}

/**
  * @brief Process ring buffer logs and transmit via UART
  */
static void processLogBuffer(void)
{
  char out[64];
  int readCount = RB_Read(&g_logRB, out, sizeof(out));
  if(readCount > 0)
  {
    HAL_UART_Transmit(&huart2, (uint8_t*)out, readCount, HAL_MAX_DELAY);
  }
}

/**
  * @brief Switch to ERROR state
  */
static void enterErrorState(void)
{
  g_systemState = STATE_ERROR;
  logPrintf("System -> ERROR\r\n");

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
}

/**
  * @brief Update onboard LED (PA5) based on current state
  */
static void updateLED(SystemState_t state)
{
  static uint32_t lastToggleTime = 0;
  static GPIO_PinState ledState  = GPIO_PIN_SET;
  uint32_t now = HAL_GetTick();
  uint32_t blinkInterval = 0;

  switch (state)
  {
    case STATE_INIT:
      blinkInterval = 0;
      break;
    case STATE_WORKMODE_SELECT:
      blinkInterval = 500;
      break;
    case STATE_PREPROCESS_SELECT:
      blinkInterval = 300;
      break;
    case STATE_ADVANCED_SELECT:
      blinkInterval = 200;
      break;
    case STATE_RUNNING:
      blinkInterval = 0xFFFFFFFF;
      break;
    case STATE_ERROR:
      blinkInterval = 100;
      break;
    default:
      blinkInterval = 0;
      break;
  }

  if(blinkInterval == 0)
  {
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
    ledState = GPIO_PIN_SET;
  }
  else if(blinkInterval == 0xFFFFFFFF)
  {
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
    ledState = GPIO_PIN_RESET;
  }
  else
  {
    if((now - lastToggleTime) >= blinkInterval)
    {
      lastToggleTime = now;
      ledState = (ledState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
    }
  }
}

/**
  * @brief System clock configuration
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState           = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue= 0;
  RCC_OscInitStruct.MSIClockRange      = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState       = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization
  */
static void MX_ADC1_Init(void)
{
  ADC_MultiModeTypeDef multimode  = {0};
  ADC_ChannelConfTypeDef sConfig  = {0};

  hadc1.Instance                      = ADC1;
  hadc1.Init.ClockPrescaler          = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution              = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign               = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode            = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection            = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait        = DISABLE;
  hadc1.Init.ContinuousConvMode      = DISABLE;
  hadc1.Init.NbrOfConversion         = 1;
  hadc1.Init.DiscontinuousConvMode   = DISABLE;
  hadc1.Init.ExternalTrigConv        = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge    = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests   = DISABLE;
  hadc1.Init.Overrun                 = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode        = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel      = ADC_CHANNEL_11;
  sConfig.Rank         = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset       = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance                    = USART2;
  huart2.Init.BaudRate              = 115200;
  huart2.Init.WordLength            = UART_WORDLENGTH_8B;
  huart2.Init.StopBits              = UART_STOPBITS_1;
  huart2.Init.Parity                = UART_PARITY_NONE;
  huart2.Init.Mode                  = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl             = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling          = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling        = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit= UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin  = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin   = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif

