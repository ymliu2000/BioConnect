
PPG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005e3c  08005e3c  00006e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080060c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  08006134  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08006134  000084c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f89e  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f6  00000000  00000000  0001793e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00019b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9a  00000000  00000000  0001a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a0c  00000000  00000000  0001b382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f60f  00000000  00000000  00042d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb1c4  00000000  00000000  0005239d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  0014d5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00151484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e24 	.word	0x08005e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e24 	.word	0x08005e24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <applySquaringFilter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ================== 解耦的函数实现 ================== */
static uint32_t applySquaringFilter(uint32_t input)
{
 8000570:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    uint64_t sq = (uint64_t)input * (uint64_t)input;
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2000      	movs	r0, #0
 800057e:	4688      	mov	r8, r1
 8000580:	4681      	mov	r9, r0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	2000      	movs	r0, #0
 8000586:	460c      	mov	r4, r1
 8000588:	4605      	mov	r5, r0
 800058a:	fb04 f009 	mul.w	r0, r4, r9
 800058e:	fb08 f105 	mul.w	r1, r8, r5
 8000592:	4401      	add	r1, r0
 8000594:	fba8 2304 	umull	r2, r3, r8, r4
 8000598:	4419      	add	r1, r3
 800059a:	460b      	mov	r3, r1
 800059c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80005a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (sq > 0xFFFFFFFF) sq = 0xFFFFFFFF;
 80005a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d305      	bcc.n	80005b8 <applySquaringFilter+0x48>
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t)sq;
 80005b8:	68bb      	ldr	r3, [r7, #8]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80005c4:	4770      	bx	lr
	...

080005c8 <applyExponentialMovingAverage>:

static uint32_t applyExponentialMovingAverage(uint32_t input)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    float alpha = 0.1f;
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <applyExponentialMovingAverage+0x58>)
 80005d2:	60fb      	str	r3, [r7, #12]
    s_emaVal = alpha*input + (1.0f-alpha)*s_emaVal;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005de:	edd7 7a03 	vldr	s15, [r7, #12]
 80005e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80005ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 80005f4:	edd3 7a00 	vldr	s15, [r3]
 80005f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 8000602:	edc3 7a00 	vstr	s15, [r3]
    return (uint32_t)s_emaVal;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	3dcccccd 	.word	0x3dcccccd
 8000624:	20000360 	.word	0x20000360

08000628 <computeHeartRate>:

static uint32_t computeHeartRate(uint32_t value)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    // 简单映射: 60 + (value % 40)
    return 60 + (value % 40);
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <computeHeartRate+0x2c>)
 8000634:	fba3 2301 	umull	r2, r3, r3, r1
 8000638:	095a      	lsrs	r2, r3, #5
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	cccccccd 	.word	0xcccccccd

08000658 <computeSpO2>:

static uint32_t computeSpO2(uint32_t value)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    // 简单映射: 95 + (value % 5)
    return 95 + (value % 5);
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <computeSpO2+0x2c>)
 8000664:	fba3 2301 	umull	r2, r3, r3, r1
 8000668:	089a      	lsrs	r2, r3, #2
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	1aca      	subs	r2, r1, r3
 8000672:	f102 035f 	add.w	r3, r2, #95	@ 0x5f
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	cccccccd 	.word	0xcccccccd

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09a      	sub	sp, #104	@ 0x68
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fefc 	bl	800148a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f99b 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 fac1 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 800069a:	f000 fa91 	bl	8000bc0 <MX_DMA_Init>
  MX_ADC1_Init();
 800069e:	f000 f9e9 	bl	8000a74 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 fa5d 	bl	8000b60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //=== 初始化环形缓冲, 确保head/tail=0 ===
  RB_Init(&g_logRB);
 80006a6:	48b1      	ldr	r0, [pc, #708]	@ (800096c <main+0x2e4>)
 80006a8:	f000 fb4e 	bl	8000d48 <RB_Init>

  // 打印启动消息
  logPrintf("System Started. Current State: INIT\r\n");
 80006ac:	48b0      	ldr	r0, [pc, #704]	@ (8000970 <main+0x2e8>)
 80006ae:	f000 fbd7 	bl	8000e60 <logPrintf>

  // 默认关闭红光和IR
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2101      	movs	r1, #1
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f002 fddd 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f002 fdd7 	bl	8003278 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // 1. 读取本次的按键事件
	    PressType_t currentPress = g_pressEvent;
 80006ca:	4baa      	ldr	r3, [pc, #680]	@ (8000974 <main+0x2ec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	    if (currentPress != PRESS_NONE)
 80006d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 80d0 	beq.w	800087c <main+0x1f4>
	    {
	      g_pressEvent = PRESS_NONE;
 80006dc:	4ba5      	ldr	r3, [pc, #660]	@ (8000974 <main+0x2ec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	      switch (g_systemState)
 80006e2:	4ba5      	ldr	r3, [pc, #660]	@ (8000978 <main+0x2f0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	f200 80ba 	bhi.w	8000860 <main+0x1d8>
 80006ec:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <main+0x6c>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800070d 	.word	0x0800070d
 80006f8:	08000725 	.word	0x08000725
 80006fc:	08000771 	.word	0x08000771
 8000700:	080007bb 	.word	0x080007bb
 8000704:	08000805 	.word	0x08000805
 8000708:	08000833 	.word	0x08000833
	      {
	        case STATE_INIT:
	          if (currentPress == PRESS_LONG)
 800070c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000710:	2b02      	cmp	r3, #2
 8000712:	f040 80a8 	bne.w	8000866 <main+0x1de>
	          {
	            g_systemState = STATE_WORKMODE_SELECT;
 8000716:	4b98      	ldr	r3, [pc, #608]	@ (8000978 <main+0x2f0>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> WORKMODE_SELECT\r\n");
 800071c:	4897      	ldr	r0, [pc, #604]	@ (800097c <main+0x2f4>)
 800071e:	f000 fb9f 	bl	8000e60 <logPrintf>
	          }
	          break;
 8000722:	e0a0      	b.n	8000866 <main+0x1de>

	        case STATE_WORKMODE_SELECT:
	          if (currentPress == PRESS_SHORT)
 8000724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000728:	2b01      	cmp	r3, #1
 800072a:	d115      	bne.n	8000758 <main+0xd0>
	          {
	            g_workMode = (g_workMode == MODE_RED) ? MODE_IR : MODE_RED;
 800072c:	4b94      	ldr	r3, [pc, #592]	@ (8000980 <main+0x2f8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	4b90      	ldr	r3, [pc, #576]	@ (8000980 <main+0x2f8>)
 800073e:	701a      	strb	r2, [r3, #0]
	            if (g_workMode == MODE_RED)
 8000740:	4b8f      	ldr	r3, [pc, #572]	@ (8000980 <main+0x2f8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <main+0xc8>
	              logPrintf("Selected WorkMode: RED\r\n");
 8000748:	488e      	ldr	r0, [pc, #568]	@ (8000984 <main+0x2fc>)
 800074a:	f000 fb89 	bl	8000e60 <logPrintf>
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_PREPROCESS_SELECT;
	            logPrintf("System -> PREPROCESS_SELECT\r\n");
	          }
	          break;
 800074e:	e08c      	b.n	800086a <main+0x1e2>
	              logPrintf("Selected WorkMode: IR\r\n");
 8000750:	488d      	ldr	r0, [pc, #564]	@ (8000988 <main+0x300>)
 8000752:	f000 fb85 	bl	8000e60 <logPrintf>
	          break;
 8000756:	e088      	b.n	800086a <main+0x1e2>
	          else if (currentPress == PRESS_LONG)
 8000758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800075c:	2b02      	cmp	r3, #2
 800075e:	f040 8084 	bne.w	800086a <main+0x1e2>
	            g_systemState = STATE_PREPROCESS_SELECT;
 8000762:	4b85      	ldr	r3, [pc, #532]	@ (8000978 <main+0x2f0>)
 8000764:	2202      	movs	r2, #2
 8000766:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> PREPROCESS_SELECT\r\n");
 8000768:	4888      	ldr	r0, [pc, #544]	@ (800098c <main+0x304>)
 800076a:	f000 fb79 	bl	8000e60 <logPrintf>
	          break;
 800076e:	e07c      	b.n	800086a <main+0x1e2>

	        case STATE_PREPROCESS_SELECT:
	          if (currentPress == PRESS_SHORT)
 8000770:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000774:	2b01      	cmp	r3, #1
 8000776:	d115      	bne.n	80007a4 <main+0x11c>
	          {
	            g_preprocType = (g_preprocType==PREPROC_SF)? PREPROC_EMA: PREPROC_SF;
 8000778:	4b85      	ldr	r3, [pc, #532]	@ (8000990 <main+0x308>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf0c      	ite	eq
 8000780:	2301      	moveq	r3, #1
 8000782:	2300      	movne	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	4b81      	ldr	r3, [pc, #516]	@ (8000990 <main+0x308>)
 800078a:	701a      	strb	r2, [r3, #0]
	            if (g_preprocType == PREPROC_SF)
 800078c:	4b80      	ldr	r3, [pc, #512]	@ (8000990 <main+0x308>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <main+0x114>
	              logPrintf("Selected PreProcessing: Squaring Filter\r\n");
 8000794:	487f      	ldr	r0, [pc, #508]	@ (8000994 <main+0x30c>)
 8000796:	f000 fb63 	bl	8000e60 <logPrintf>
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_ADVANCED_SELECT;
	            logPrintf("System -> ADVANCED_SELECT\r\n");
	          }
	          break;
 800079a:	e068      	b.n	800086e <main+0x1e6>
	              logPrintf("Selected PreProcessing: ExponentialMovingAverage\r\n");
 800079c:	487e      	ldr	r0, [pc, #504]	@ (8000998 <main+0x310>)
 800079e:	f000 fb5f 	bl	8000e60 <logPrintf>
	          break;
 80007a2:	e064      	b.n	800086e <main+0x1e6>
	          else if (currentPress == PRESS_LONG)
 80007a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d160      	bne.n	800086e <main+0x1e6>
	            g_systemState = STATE_ADVANCED_SELECT;
 80007ac:	4b72      	ldr	r3, [pc, #456]	@ (8000978 <main+0x2f0>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> ADVANCED_SELECT\r\n");
 80007b2:	487a      	ldr	r0, [pc, #488]	@ (800099c <main+0x314>)
 80007b4:	f000 fb54 	bl	8000e60 <logPrintf>
	          break;
 80007b8:	e059      	b.n	800086e <main+0x1e6>

	        case STATE_ADVANCED_SELECT:
	          if (currentPress == PRESS_SHORT)
 80007ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d115      	bne.n	80007ee <main+0x166>
	          {
	            g_measureType = (g_measureType==MEASURE_HR)? MEASURE_SPO2: MEASURE_HR;
 80007c2:	4b77      	ldr	r3, [pc, #476]	@ (80009a0 <main+0x318>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b73      	ldr	r3, [pc, #460]	@ (80009a0 <main+0x318>)
 80007d4:	701a      	strb	r2, [r3, #0]
	            if (g_measureType == MEASURE_HR)
 80007d6:	4b72      	ldr	r3, [pc, #456]	@ (80009a0 <main+0x318>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <main+0x15e>
	              logPrintf("Selected Advanced: Heart Rate\r\n");
 80007de:	4871      	ldr	r0, [pc, #452]	@ (80009a4 <main+0x31c>)
 80007e0:	f000 fb3e 	bl	8000e60 <logPrintf>
	          else if (currentPress == PRESS_LONG)
	          {
	            g_systemState = STATE_RUNNING;
	            logPrintf("System -> RUNNING\r\n");
	          }
	          break;
 80007e4:	e045      	b.n	8000872 <main+0x1ea>
	              logPrintf("Selected Advanced: SpO2\r\n");
 80007e6:	4870      	ldr	r0, [pc, #448]	@ (80009a8 <main+0x320>)
 80007e8:	f000 fb3a 	bl	8000e60 <logPrintf>
	          break;
 80007ec:	e041      	b.n	8000872 <main+0x1ea>
	          else if (currentPress == PRESS_LONG)
 80007ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d13d      	bne.n	8000872 <main+0x1ea>
	            g_systemState = STATE_RUNNING;
 80007f6:	4b60      	ldr	r3, [pc, #384]	@ (8000978 <main+0x2f0>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> RUNNING\r\n");
 80007fc:	486b      	ldr	r0, [pc, #428]	@ (80009ac <main+0x324>)
 80007fe:	f000 fb2f 	bl	8000e60 <logPrintf>
	          break;
 8000802:	e036      	b.n	8000872 <main+0x1ea>

	        case STATE_RUNNING:
	          if (currentPress == PRESS_LONG)
 8000804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000808:	2b02      	cmp	r3, #2
 800080a:	d134      	bne.n	8000876 <main+0x1ee>
	          {
	            g_systemState = STATE_INIT;
 800080c:	4b5a      	ldr	r3, [pc, #360]	@ (8000978 <main+0x2f0>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> INIT\r\n");
 8000812:	4867      	ldr	r0, [pc, #412]	@ (80009b0 <main+0x328>)
 8000814:	f000 fb24 	bl	8000e60 <logPrintf>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f002 fd2a 	bl	8003278 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2102      	movs	r1, #2
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f002 fd24 	bl	8003278 <HAL_GPIO_WritePin>
	          }
	          break;
 8000830:	e021      	b.n	8000876 <main+0x1ee>

	        case STATE_ERROR:
	          if (currentPress == PRESS_LONG)
 8000832:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000836:	2b02      	cmp	r3, #2
 8000838:	d11f      	bne.n	800087a <main+0x1f2>
	          {
	            g_systemState = STATE_INIT;
 800083a:	4b4f      	ldr	r3, [pc, #316]	@ (8000978 <main+0x2f0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	            logPrintf("System -> INIT (from ERROR)\r\n");
 8000840:	485c      	ldr	r0, [pc, #368]	@ (80009b4 <main+0x32c>)
 8000842:	f000 fb0d 	bl	8000e60 <logPrintf>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f002 fd13 	bl	8003278 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f002 fd0d 	bl	8003278 <HAL_GPIO_WritePin>
	          }
	          break;
 800085e:	e00c      	b.n	800087a <main+0x1f2>

	        default:
	          enterErrorState();
 8000860:	f000 fb42 	bl	8000ee8 <enterErrorState>
	          break;
 8000864:	e00a      	b.n	800087c <main+0x1f4>
	          break;
 8000866:	bf00      	nop
 8000868:	e008      	b.n	800087c <main+0x1f4>
	          break;
 800086a:	bf00      	nop
 800086c:	e006      	b.n	800087c <main+0x1f4>
	          break;
 800086e:	bf00      	nop
 8000870:	e004      	b.n	800087c <main+0x1f4>
	          break;
 8000872:	bf00      	nop
 8000874:	e002      	b.n	800087c <main+0x1f4>
	          break;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <main+0x1f4>
	          break;
 800087a:	bf00      	nop
	      }
	    }

	    // 2. 根据当前状态执行“状态行为”
	    switch (g_systemState)
 800087c:	4b3e      	ldr	r3, [pc, #248]	@ (8000978 <main+0x2f0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d062      	beq.n	800094a <main+0x2c2>
 8000884:	2b05      	cmp	r3, #5
 8000886:	dc5d      	bgt.n	8000944 <main+0x2bc>
 8000888:	2b03      	cmp	r3, #3
 800088a:	dc02      	bgt.n	8000892 <main+0x20a>
 800088c:	2b00      	cmp	r3, #0
 800088e:	da5e      	bge.n	800094e <main+0x2c6>
 8000890:	e058      	b.n	8000944 <main+0x2bc>
 8000892:	2b04      	cmp	r3, #4
 8000894:	d156      	bne.n	8000944 <main+0x2bc>
	        break;

	      case STATE_RUNNING:
	      {
	        // 根据模式点亮对应LED
	        if (g_workMode == MODE_RED)
 8000896:	4b3a      	ldr	r3, [pc, #232]	@ (8000980 <main+0x2f8>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10c      	bne.n	80008b8 <main+0x230>
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f002 fce7 	bl	8003278 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2102      	movs	r1, #2
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f002 fce1 	bl	8003278 <HAL_GPIO_WritePin>
 80008b6:	e00b      	b.n	80008d0 <main+0x248>
	        }
	        else
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f002 fcda 	bl	8003278 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f002 fcd4 	bl	8003278 <HAL_GPIO_WritePin>
	        }

	        // 原先的轮询采ADC
	        HAL_ADC_Start(&hadc1);
 80008d0:	4839      	ldr	r0, [pc, #228]	@ (80009b8 <main+0x330>)
 80008d2:	f001 f9a7 	bl	8001c24 <HAL_ADC_Start>
	        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80008d6:	2164      	movs	r1, #100	@ 0x64
 80008d8:	4837      	ldr	r0, [pc, #220]	@ (80009b8 <main+0x330>)
 80008da:	f001 fa5d 	bl	8001d98 <HAL_ADC_PollForConversion>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d136      	bne.n	8000952 <main+0x2ca>
	        {
	          uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80008e4:	4834      	ldr	r0, [pc, #208]	@ (80009b8 <main+0x330>)
 80008e6:	f001 fb2f 	bl	8001f48 <HAL_ADC_GetValue>
 80008ea:	65b8      	str	r0, [r7, #88]	@ 0x58

	          //=== “解耦”处理：预处理 + 高级处理
	          // 先调用预处理函数指针
	          uint32_t preVal = g_preprocFuncs[g_preprocType](adcValue);
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <main+0x308>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <main+0x334>)
 80008f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80008fa:	4798      	blx	r3
 80008fc:	6578      	str	r0, [r7, #84]	@ 0x54
	          // 再调用高级处理函数指针
	          uint32_t outVal = g_advancedFuncs[g_measureType](preVal);
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <main+0x318>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <main+0x338>)
 8000906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800090c:	4798      	blx	r3
 800090e:	6538      	str	r0, [r7, #80]	@ 0x50

	          // 打印 (在同一行覆盖)
	          char line[80];
	          if (g_measureType == MEASURE_HR)
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <main+0x318>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d108      	bne.n	800092a <main+0x2a2>
	          {
	            sprintf(line, "\rADC:%lu ->Pre:%lu ->HR:%lu bpm     ",
 8000918:	4638      	mov	r0, r7
 800091a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000922:	4928      	ldr	r1, [pc, #160]	@ (80009c4 <main+0x33c>)
 8000924:	f004 fda4 	bl	8005470 <siprintf>
 8000928:	e007      	b.n	800093a <main+0x2b2>
	                    adcValue, preVal, outVal);
	          }
	          else
	          {
	            sprintf(line, "\rADC:%lu ->Pre:%lu ->SpO2:%lu%%     ",
 800092a:	4638      	mov	r0, r7
 800092c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000934:	4924      	ldr	r1, [pc, #144]	@ (80009c8 <main+0x340>)
 8000936:	f004 fd9b 	bl	8005470 <siprintf>
	                    adcValue, preVal, outVal);
	          }
	          logPrintf(line); // 写入环形缓冲
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fa8f 	bl	8000e60 <logPrintf>
	        }
	        break;
 8000942:	e006      	b.n	8000952 <main+0x2ca>
	      case STATE_ERROR:
	        // 这里可以进行LED快速闪烁或等长按回到INIT
	        break;

	      default:
	        enterErrorState();
 8000944:	f000 fad0 	bl	8000ee8 <enterErrorState>
	        break;
 8000948:	e004      	b.n	8000954 <main+0x2cc>
	        break;
 800094a:	bf00      	nop
 800094c:	e002      	b.n	8000954 <main+0x2cc>
	        break;
 800094e:	bf00      	nop
 8000950:	e000      	b.n	8000954 <main+0x2cc>
	        break;
 8000952:	bf00      	nop
	    }

	    // 3. LED更新
	    updateLED(g_systemState);
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <main+0x2f0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fadf 	bl	8000f1c <updateLED>

	    // 4. 处理日志队列 => 发送到UART
	    processLogBuffer();
 800095e:	f000 faa5 	bl	8000eac <processLogBuffer>

	    HAL_Delay(10);
 8000962:	200a      	movs	r0, #10
 8000964:	f000 fe06 	bl	8001574 <HAL_Delay>
  {
 8000968:	e6af      	b.n	80006ca <main+0x42>
 800096a:	bf00      	nop
 800096c:	20000258 	.word	0x20000258
 8000970:	08005e3c 	.word	0x08005e3c
 8000974:	20000250 	.word	0x20000250
 8000978:	20000251 	.word	0x20000251
 800097c:	08005e64 	.word	0x08005e64
 8000980:	20000253 	.word	0x20000253
 8000984:	08005e80 	.word	0x08005e80
 8000988:	08005e9c 	.word	0x08005e9c
 800098c:	08005eb4 	.word	0x08005eb4
 8000990:	20000254 	.word	0x20000254
 8000994:	08005ed4 	.word	0x08005ed4
 8000998:	08005f00 	.word	0x08005f00
 800099c:	08005f34 	.word	0x08005f34
 80009a0:	20000252 	.word	0x20000252
 80009a4:	08005f50 	.word	0x08005f50
 80009a8:	08005f70 	.word	0x08005f70
 80009ac:	08005f8c 	.word	0x08005f8c
 80009b0:	08005fa0 	.word	0x08005fa0
 80009b4:	08005fb4 	.word	0x08005fb4
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	08005fd4 	.word	0x08005fd4
 80009c8:	08005ffc 	.word	0x08005ffc

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	@ 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	@ 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fda2 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009f2:	f002 fc7f 	bl	80032f4 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fc:	f000 fb02 	bl	8001004 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a12:	2302      	movs	r3, #2
 8000a14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fcb6 	bl	80033a0 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a3a:	f000 fae3 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2303      	movs	r3, #3
 8000a44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f87c 	bl	8003b58 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a66:	f000 facd 	bl	8001004 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3758      	adds	r7, #88	@ 0x58
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a96:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000a98:	4a2f      	ldr	r2, [pc, #188]	@ (8000b58 <MX_ADC1_Init+0xe4>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af6:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000af8:	f000 ff44 	bl	8001984 <HAL_ADC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b02:	f000 fa7f 	bl	8001004 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000b12:	f001 fec5 	bl	80028a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b1c:	f000 fa72 	bl	8001004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_ADC1_Init+0xe8>)
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b24:	2306      	movs	r3, #6
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2c:	237f      	movs	r3, #127	@ 0x7f
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b30:	2304      	movs	r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000b3e:	f001 fa11 	bl	8001f64 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b48:	f000 fa5c 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000008c 	.word	0x2000008c
 8000b58:	50040000 	.word	0x50040000
 8000b5c:	2e300800 	.word	0x2e300800

08000b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b66:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <MX_USART2_UART_Init+0x5c>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f003 feb8 	bl	8004918 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bae:	f000 fa29 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000138 	.word	0x20000138
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_DMA_Init+0x58>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_DMA_Init+0x58>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_DMA_Init+0x58>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200b      	movs	r0, #11
 8000be4:	f001 ffe7 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000be8:	200b      	movs	r0, #11
 8000bea:	f002 f800 	bl	8002bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2010      	movs	r0, #16
 8000bf4:	f001 ffdf 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	f001 fff8 	bl	8002bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2011      	movs	r0, #17
 8000c04:	f001 ffd7 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c08:	2011      	movs	r0, #17
 8000c0a:	f001 fff0 	bl	8002bee <HAL_NVIC_EnableIRQ>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2123      	movs	r1, #35	@ 0x23
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f002 fb05 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <MX_GPIO_Init+0xa8>)
 8000c86:	f002 f935 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c8a:	2323      	movs	r3, #35	@ 0x23
 8000c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca4:	f002 f926 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2028      	movs	r0, #40	@ 0x28
 8000cae:	f001 ff82 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb2:	2028      	movs	r0, #40	@ 0x28
 8000cb4:	f001 ff9b 	bl	8002bee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000800 	.word	0x48000800

08000cc8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
  * @brief EXTI 回调：识别短按/长按
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
  static uint32_t pressStartTime = 0;
  static uint32_t lastInterruptTime = 0;

  if (GPIO_Pin == GPIO_PIN_13)
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cd8:	d12b      	bne.n	8000d32 <HAL_GPIO_EXTI_Callback+0x6a>
  {
    uint32_t now = HAL_GetTick();
 8000cda:	f000 fc3f 	bl	800155c <HAL_GetTick>
 8000cde:	6178      	str	r0, [r7, #20]
    if ((now - lastInterruptTime) < DEBOUNCE_INTERVAL)
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b31      	cmp	r3, #49	@ 0x31
 8000cea:	d921      	bls.n	8000d30 <HAL_GPIO_EXTI_Callback+0x68>
      return;
    lastInterruptTime = now;
 8000cec:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x70>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	6013      	str	r3, [r2, #0]

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf6:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x74>)
 8000cf8:	f002 faa6 	bl	8003248 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	74fb      	strb	r3, [r7, #19]
    if (pinState == GPIO_PIN_RESET)
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x46>
    {
      // 下降沿 => 按下
      pressStartTime = now;
 8000d06:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e011      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x6a>
    }
    else
    {
      // 上升沿 => 松开
      uint32_t pressDuration = now - pressStartTime;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	60fb      	str	r3, [r7, #12]
      if (pressDuration >= LONG_PRESS_THRESHOLD)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d1e:	d303      	bcc.n	8000d28 <HAL_GPIO_EXTI_Callback+0x60>
        g_pressEvent = PRESS_LONG;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x6a>
      else
        g_pressEvent = PRESS_SHORT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_EXTI_Callback+0x6a>
      return;
 8000d30:	bf00      	nop
    }
  }
}
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000364 	.word	0x20000364
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	20000368 	.word	0x20000368
 8000d44:	20000250 	.word	0x20000250

08000d48 <RB_Init>:

//=== 简易环形缓冲函数实现 ===
static void RB_Init(RingBuffer_t* rb)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    rb->tail = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    memset(rb->buffer, 0, LOG_BUF_SIZE);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 fbdb 	bl	8005524 <memset>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <RB_Write>:

static int RB_Write(RingBuffer_t* rb, const char* data, int len)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b089      	sub	sp, #36	@ 0x24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
    int count=0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<len; i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	e022      	b.n	8000dd2 <RB_Write+0x5c>
    {
        int nextHead = (rb->head+1) % LOG_BUF_SIZE;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000d92:	3301      	adds	r3, #1
 8000d94:	425a      	negs	r2, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	bf58      	it	pl
 8000d9c:	4253      	negpl	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
        // 队列满, 丢弃剩余数据
        if(nextHead == rb->tail)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d017      	beq.n	8000ddc <RB_Write+0x66>
            break; // 这里简单丢弃

        rb->buffer[rb->head] = data[i];
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	441a      	add	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000db8:	7811      	ldrb	r1, [r2, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	54d1      	strb	r1, [r2, r3]
        rb->head = nextHead;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        count++;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<len; i++)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbd8      	blt.n	8000d8c <RB_Write+0x16>
 8000dda:	e000      	b.n	8000dde <RB_Write+0x68>
            break; // 这里简单丢弃
 8000ddc:	bf00      	nop
    }
    return count;
 8000dde:	69fb      	ldr	r3, [r7, #28]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3724      	adds	r7, #36	@ 0x24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <RB_Read>:

static int RB_Read(RingBuffer_t* rb, char* out, int maxlen)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
    int count=0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    while(rb->tail != rb->head && count<(maxlen-1))
 8000dfc:	e017      	b.n	8000e2e <RB_Read+0x42>
    {
        out[count] = rb->buffer[rb->tail];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	440b      	add	r3, r1
 8000e0a:	68f9      	ldr	r1, [r7, #12]
 8000e0c:	5c8a      	ldrb	r2, [r1, r2]
 8000e0e:	701a      	strb	r2, [r3, #0]
        rb->tail = (rb->tail+1) % LOG_BUF_SIZE;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000e16:	3301      	adds	r3, #1
 8000e18:	425a      	negs	r2, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	bf58      	it	pl
 8000e20:	4253      	negpl	r3, r2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
        count++;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
    while(rb->tail != rb->head && count<(maxlen-1))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d004      	beq.n	8000e48 <RB_Read+0x5c>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbda      	blt.n	8000dfe <RB_Read+0x12>
    }
    out[count] = '\0';
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    return count;
 8000e52:	697b      	ldr	r3, [r7, #20]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <logPrintf>:

//=== 将可变参数字符串写入环形缓冲 (防止高频日志溢出) ===
static void logPrintf(const char* fmt, ...)
{
 8000e60:	b40f      	push	{r0, r1, r2, r3}
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b0a2      	sub	sp, #136	@ 0x88
 8000e66:	af00      	add	r7, sp, #0
    char tmp[128];
    va_list ap;
    va_start(ap, fmt);
 8000e68:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e6c:	607b      	str	r3, [r7, #4]
    vsnprintf(tmp, sizeof(tmp), fmt, ap);
 8000e6e:	f107 0008 	add.w	r0, r7, #8
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	f004 fb45 	bl	8005508 <vsniprintf>
    va_end(ap);

    // 写入环形缓冲
    RB_Write(&g_logRB, tmp, strlen(tmp));
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9a4 	bl	80001d0 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <logPrintf+0x48>)
 8000e94:	f7ff ff6f 	bl	8000d76 <RB_Write>
}
 8000e98:	bf00      	nop
 8000e9a:	3788      	adds	r7, #136	@ 0x88
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000258 	.word	0x20000258

08000eac <processLogBuffer>:

//=== 从环形缓冲中取数据并发送UART ===
static void processLogBuffer(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	@ 0x48
 8000eb0:	af00      	add	r7, sp, #0
    char out[64];
    int readCount = RB_Read(&g_logRB, out, sizeof(out));
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2240      	movs	r2, #64	@ 0x40
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <processLogBuffer+0x34>)
 8000eba:	f7ff ff97 	bl	8000dec <RB_Read>
 8000ebe:	6478      	str	r0, [r7, #68]	@ 0x44
    if(readCount>0)
 8000ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dd07      	ble.n	8000ed6 <processLogBuffer+0x2a>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)out, readCount, HAL_MAX_DELAY);
 8000ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	1d39      	adds	r1, r7, #4
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <processLogBuffer+0x38>)
 8000ed2:	f003 fd6f 	bl	80049b4 <HAL_UART_Transmit>
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	3748      	adds	r7, #72	@ 0x48
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000258 	.word	0x20000258
 8000ee4:	20000138 	.word	0x20000138

08000ee8 <enterErrorState>:

/**
  * @brief 切换到ERROR状态
  */
static void enterErrorState(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  g_systemState = STATE_ERROR;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <enterErrorState+0x2c>)
 8000eee:	2205      	movs	r2, #5
 8000ef0:	701a      	strb	r2, [r3, #0]
  logPrintf("System -> ERROR\r\n");
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <enterErrorState+0x30>)
 8000ef4:	f7ff ffb4 	bl	8000e60 <logPrintf>

  // 关灯
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f002 f9ba 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2102      	movs	r1, #2
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f002 f9b4 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000251 	.word	0x20000251
 8000f18:	08006024 	.word	0x08006024

08000f1c <updateLED>:

/**
  * @brief 根据当前状态让板载LED闪烁或常亮/熄灭
  */
static void updateLED(SystemState_t state)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  static uint32_t lastToggleTime = 0;
  static GPIO_PinState ledState  = GPIO_PIN_SET;
  uint32_t now = HAL_GetTick();
 8000f26:	f000 fb19 	bl	800155c <HAL_GetTick>
 8000f2a:	60b8      	str	r0, [r7, #8]
  uint32_t blinkInterval = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]

  switch (state)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d823      	bhi.n	8000f7e <updateLED+0x62>
 8000f36:	a201      	add	r2, pc, #4	@ (adr r2, 8000f3c <updateLED+0x20>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	08000f5b 	.word	0x08000f5b
 8000f44:	08000f63 	.word	0x08000f63
 8000f48:	08000f6b 	.word	0x08000f6b
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08000f79 	.word	0x08000f79
  {
    case STATE_INIT:
      blinkInterval = 0;         // 灭
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
      break;
 8000f58:	e014      	b.n	8000f84 <updateLED+0x68>
    case STATE_WORKMODE_SELECT:
      blinkInterval = 500;       // 慢闪
 8000f5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f5e:	60fb      	str	r3, [r7, #12]
      break;
 8000f60:	e010      	b.n	8000f84 <updateLED+0x68>
    case STATE_PREPROCESS_SELECT:
      blinkInterval = 300;       // 中闪
 8000f62:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f66:	60fb      	str	r3, [r7, #12]
      break;
 8000f68:	e00c      	b.n	8000f84 <updateLED+0x68>
    case STATE_ADVANCED_SELECT:
      blinkInterval = 200;       // 快闪
 8000f6a:	23c8      	movs	r3, #200	@ 0xc8
 8000f6c:	60fb      	str	r3, [r7, #12]
      break;
 8000f6e:	e009      	b.n	8000f84 <updateLED+0x68>
    case STATE_RUNNING:
      blinkInterval = 0xFFFFFFFF;// 常亮
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f74:	60fb      	str	r3, [r7, #12]
      break;
 8000f76:	e005      	b.n	8000f84 <updateLED+0x68>
    case STATE_ERROR:
      blinkInterval = 100;       // 超快闪
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	60fb      	str	r3, [r7, #12]
      break;
 8000f7c:	e002      	b.n	8000f84 <updateLED+0x68>
    default:
      blinkInterval = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
      break;
 8000f82:	bf00      	nop
  }

  if(blinkInterval == 0)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <updateLED+0x82>
  {
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f002 f971 	bl	8003278 <HAL_GPIO_WritePin>
    ledState = GPIO_PIN_SET;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <updateLED+0xe0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
      lastToggleTime = now;
      ledState = (ledState==GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
    }
  }
}
 8000f9c:	e029      	b.n	8000ff2 <updateLED+0xd6>
  else if(blinkInterval == 0xFFFFFFFF)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fa4:	d109      	bne.n	8000fba <updateLED+0x9e>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2120      	movs	r1, #32
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f002 f963 	bl	8003278 <HAL_GPIO_WritePin>
    ledState = GPIO_PIN_RESET;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <updateLED+0xe0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
}
 8000fb8:	e01b      	b.n	8000ff2 <updateLED+0xd6>
    if((now - lastToggleTime) >= blinkInterval)
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <updateLED+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d814      	bhi.n	8000ff2 <updateLED+0xd6>
      lastToggleTime = now;
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <updateLED+0xe4>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	6013      	str	r3, [r2, #0]
      ledState = (ledState==GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <updateLED+0xe0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <updateLED+0xe0>)
 8000fe0:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <updateLED+0xe0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2120      	movs	r1, #32
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f002 f943 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000010 	.word	0x20000010
 8001000:	2000036c 	.word	0x2000036c

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	@ 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	@ 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ac      	sub	sp, #176	@ 0xb0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2288      	movs	r2, #136	@ 0x88
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f004 fa53 	bl	8005524 <memset>
  if(hadc->Instance==ADC1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a3d      	ldr	r2, [pc, #244]	@ (8001178 <HAL_ADC_MspInit+0x120>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d173      	bne.n	8001170 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800108e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800109e:	2308      	movs	r3, #8
 80010a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 ff71 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010c4:	f7ff ff9e 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	4a2b      	ldr	r2, [pc, #172]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d4:	4b29      	ldr	r3, [pc, #164]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b26      	ldr	r3, [pc, #152]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a25      	ldr	r2, [pc, #148]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <HAL_ADC_MspInit+0x124>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010fe:	230b      	movs	r3, #11
 8001100:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001114:	f001 feee 	bl	8002ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 800111a:	4a1a      	ldr	r2, [pc, #104]	@ (8001184 <HAL_ADC_MspInit+0x12c>)
 800111c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001132:	2280      	movs	r2, #128	@ 0x80
 8001134:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 800114e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001156:	f001 fd65 	bl	8002c24 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8001160:	f7ff ff50 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 8001168:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0x128>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001170:	bf00      	nop
 8001172:	37b0      	adds	r7, #176	@ 0xb0
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	50040000 	.word	0x50040000
 800117c:	40021000 	.word	0x40021000
 8001180:	200000f0 	.word	0x200000f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ac      	sub	sp, #176	@ 0xb0
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2288      	movs	r2, #136	@ 0x88
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f9bb 	bl	8005524 <memset>
  if(huart->Instance==USART2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_UART_MspInit+0x15c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 8090 	bne.w	80012da <HAL_UART_MspInit+0x152>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 feea 	bl	8003fa0 <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d2:	f7ff ff17 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d6:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	4a43      	ldr	r2, [pc, #268]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e2:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b3e      	ldr	r3, [pc, #248]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a3d      	ldr	r2, [pc, #244]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_UART_MspInit+0x160>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001206:	230c      	movs	r3, #12
 8001208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121e:	2307      	movs	r3, #7
 8001220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122e:	f001 fe61 	bl	8002ef4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001234:	4a2e      	ldr	r2, [pc, #184]	@ (80012f0 <HAL_UART_MspInit+0x168>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001238:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <HAL_UART_MspInit+0x164>)
 800123a:	2202      	movs	r2, #2
 800123c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_UART_MspInit+0x164>)
 800124c:	2280      	movs	r2, #128	@ 0x80
 800124e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001250:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001256:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <HAL_UART_MspInit+0x164>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001264:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800126a:	4820      	ldr	r0, [pc, #128]	@ (80012ec <HAL_UART_MspInit+0x164>)
 800126c:	f001 fcda 	bl	8002c24 <HAL_DMA_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001276:	f7ff fec5 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <HAL_UART_MspInit+0x164>)
 800127e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001280:	4a1a      	ldr	r2, [pc, #104]	@ (80012ec <HAL_UART_MspInit+0x164>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_UART_MspInit+0x170>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 800128e:	2202      	movs	r2, #2
 8001290:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001294:	2210      	movs	r2, #16
 8001296:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012c0:	f001 fcb0 	bl	8002c24 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 80012ca:	f7ff fe9b 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	37b0      	adds	r7, #176	@ 0xb0
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	200001c0 	.word	0x200001c0
 80012f0:	4002006c 	.word	0x4002006c
 80012f4:	20000208 	.word	0x20000208
 80012f8:	40020080 	.word	0x40020080

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 f8ef 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <DMA1_Channel1_IRQHandler+0x10>)
 8001362:	f001 fd17 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000f0 	.word	0x200000f0

08001370 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <DMA1_Channel6_IRQHandler+0x10>)
 8001376:	f001 fd0d 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001c0 	.word	0x200001c0

08001384 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <DMA1_Channel7_IRQHandler+0x10>)
 800138a:	f001 fd03 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000208 	.word	0x20000208

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800139c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013a0:	f001 ff82 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f004 f8ac 	bl	8005534 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20018000 	.word	0x20018000
 8001408:	00000400 	.word	0x00000400
 800140c:	20000370 	.word	0x20000370
 8001410:	200004c0 	.word	0x200004c0

08001414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001470 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff ffea 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <LoopForever+0x6>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	@ (8001478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <LoopForever+0xe>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	@ (8001484 <LoopForever+0x16>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f004 f86b 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146a:	f7ff f90d 	bl	8000688 <main>

0800146e <LoopForever>:

LoopForever:
    b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001470:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800147c:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 8001480:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001484:	200004c0 	.word	0x200004c0

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>

0800148a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f001 fb83 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149a:	200f      	movs	r0, #15
 800149c:	f000 f80e 	bl	80014bc <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	e001      	b.n	80014b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ac:	f7ff fdb0 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_InitTick+0x6c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d023      	beq.n	8001518 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_InitTick+0x70>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <HAL_InitTick+0x6c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fb8f 	bl	8002c0a <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d809      	bhi.n	800150c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001500:	f001 fb59 	bl	8002bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_InitTick+0x74>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e007      	b.n	800151c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e004      	b.n	800151c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e001      	b.n	800151c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000001c 	.word	0x2000001c
 800152c:	20000014 	.word	0x20000014
 8001530:	20000018 	.word	0x20000018

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000001c 	.word	0x2000001c
 8001558:	20000374 	.word	0x20000374

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000374 	.word	0x20000374

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000001c 	.word	0x2000001c

080015bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3360      	adds	r3, #96	@ 0x60
 8001636:	461a      	mov	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <LL_ADC_SetOffset+0x44>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	4313      	orrs	r3, r2
 8001654:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	03fff000 	.word	0x03fff000

0800166c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3360      	adds	r3, #96	@ 0x60
 800167a:	461a      	mov	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3360      	adds	r3, #96	@ 0x60
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3330      	adds	r3, #48	@ 0x30
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	211f      	movs	r1, #31
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	f003 011f 	and.w	r1, r3, #31
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3314      	adds	r3, #20
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0e5b      	lsrs	r3, r3, #25
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0d1b      	lsrs	r3, r3, #20
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	2107      	movs	r1, #7
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	401a      	ands	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	0d1b      	lsrs	r3, r3, #20
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0318 	and.w	r3, r3, #24
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017c8:	40d9      	lsrs	r1, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	400b      	ands	r3, r1
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	0007ffff 	.word	0x0007ffff

080017ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 031f 	and.w	r3, r3, #31
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6093      	str	r3, [r2, #8]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800185c:	d101      	bne.n	8001862 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001884:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018ac:	d101      	bne.n	80018b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <LL_ADC_IsEnabled+0x18>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <LL_ADC_IsEnabled+0x1a>
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800191e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001922:	f043 0204 	orr.w	r2, r3, #4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d101      	bne.n	800194e <LL_ADC_REG_IsConversionOngoing+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b08      	cmp	r3, #8
 800196e:	d101      	bne.n	8001974 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e130      	b.n	8001c00 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fb53 	bl	8001058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff3f 	bl	8001848 <LL_ADC_IsDeepPowerDownEnabled>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff25 	bl	8001824 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff5a 	bl	8001898 <LL_ADC_IsInternalRegulatorEnabled>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff3e 	bl	8001870 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f4:	4b84      	ldr	r3, [pc, #528]	@ (8001c08 <HAL_ADC_Init+0x284>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	4a84      	ldr	r2, [pc, #528]	@ (8001c0c <HAL_ADC_Init+0x288>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff3c 	bl	8001898 <LL_ADC_IsInternalRegulatorEnabled>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff75 	bl	8001936 <LL_ADC_REG_IsConversionOngoing>
 8001a4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80c9 	bne.w	8001bee <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 80c5 	bne.w	8001bee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a6c:	f043 0202 	orr.w	r2, r3, #2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <LL_ADC_IsEnabled>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d115      	bne.n	8001ab0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a84:	4862      	ldr	r0, [pc, #392]	@ (8001c10 <HAL_ADC_Init+0x28c>)
 8001a86:	f7ff ff2f 	bl	80018e8 <LL_ADC_IsEnabled>
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	4861      	ldr	r0, [pc, #388]	@ (8001c14 <HAL_ADC_Init+0x290>)
 8001a8e:	f7ff ff2b 	bl	80018e8 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	431c      	orrs	r4, r3
 8001a96:	4860      	ldr	r0, [pc, #384]	@ (8001c18 <HAL_ADC_Init+0x294>)
 8001a98:	f7ff ff26 	bl	80018e8 <LL_ADC_IsEnabled>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	485c      	ldr	r0, [pc, #368]	@ (8001c1c <HAL_ADC_Init+0x298>)
 8001aac:	f7ff fd86 	bl	80015bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e5b      	ldrb	r3, [r3, #25]
 8001ab4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ac0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ac6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ace:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	045b      	lsls	r3, r3, #17
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <HAL_ADC_Init+0x29c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff1b 	bl	800195c <LL_ADC_INJ_IsConversionOngoing>
 8001b26:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d13d      	bne.n	8001baa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d13a      	bne.n	8001baa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b38:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b40:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b50:	f023 0302 	bic.w	r3, r3, #2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	69b9      	ldr	r1, [r7, #24]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d118      	bne.n	8001b9a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	e007      	b.n	8001baa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	f023 010f 	bic.w	r1, r3, #15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bca:	e007      	b.n	8001bdc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020f 	bic.w	r2, r2, #15
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	f023 0303 	bic.w	r3, r3, #3
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bec:	e007      	b.n	8001bfe <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f043 0210 	orr.w	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3724      	adds	r7, #36	@ 0x24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	20000014 	.word	0x20000014
 8001c0c:	053e2d63 	.word	0x053e2d63
 8001c10:	50040000 	.word	0x50040000
 8001c14:	50040100 	.word	0x50040100
 8001c18:	50040200 	.word	0x50040200
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	fff0c007 	.word	0xfff0c007

08001c24 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c2c:	4857      	ldr	r0, [pc, #348]	@ (8001d8c <HAL_ADC_Start+0x168>)
 8001c2e:	f7ff fddd 	bl	80017ec <LL_ADC_GetMultimode>
 8001c32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fe7c 	bl	8001936 <LL_ADC_REG_IsConversionOngoing>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 809c 	bne.w	8001d7e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_Start+0x30>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e097      	b.n	8001d84 <HAL_ADC_Start+0x160>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fd73 	bl	8002748 <ADC_Enable>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8083 	bne.w	8001d74 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a42      	ldr	r2, [pc, #264]	@ (8001d90 <HAL_ADC_Start+0x16c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d002      	beq.n	8001c92 <HAL_ADC_Start+0x6e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	e000      	b.n	8001c94 <HAL_ADC_Start+0x70>
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_ADC_Start+0x170>)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d002      	beq.n	8001ca2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cba:	d106      	bne.n	8001cca <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f023 0206 	bic.w	r2, r3, #6
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	221c      	movs	r2, #28
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <HAL_ADC_Start+0x16c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d002      	beq.n	8001cf0 <HAL_ADC_Start+0xcc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e000      	b.n	8001cf2 <HAL_ADC_Start+0xce>
 8001cf0:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <HAL_ADC_Start+0x170>)
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d008      	beq.n	8001d0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d002      	beq.n	8001d0c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d114      	bne.n	8001d36 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fded 	bl	800190e <LL_ADC_REG_StartConversion>
 8001d34:	e025      	b.n	8001d82 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <HAL_ADC_Start+0x16c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d002      	beq.n	8001d52 <HAL_ADC_Start+0x12e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_Start+0x130>
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_ADC_Start+0x170>)
 8001d54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00f      	beq.n	8001d82 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d72:	e006      	b.n	8001d82 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d7c:	e001      	b.n	8001d82 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	50040300 	.word	0x50040300
 8001d90:	50040100 	.word	0x50040100
 8001d94:	50040000 	.word	0x50040000

08001d98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da2:	4866      	ldr	r0, [pc, #408]	@ (8001f3c <HAL_ADC_PollForConversion+0x1a4>)
 8001da4:	f7ff fd22 	bl	80017ec <LL_ADC_GetMultimode>
 8001da8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001db2:	2308      	movs	r3, #8
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e02a      	b.n	8001e0e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d002      	beq.n	8001dca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b09      	cmp	r3, #9
 8001dc8:	d111      	bne.n	8001dee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0a4      	b.n	8001f32 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001de8:	2304      	movs	r3, #4
 8001dea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001dec:	e00f      	b.n	8001e0e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dee:	4853      	ldr	r0, [pc, #332]	@ (8001f3c <HAL_ADC_PollForConversion+0x1a4>)
 8001df0:	f7ff fd0a 	bl	8001808 <LL_ADC_GetMultiDMATransfer>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e093      	b.n	8001f32 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e0e:	f7ff fba5 	bl	800155c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e14:	e021      	b.n	8001e5a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e1c:	d01d      	beq.n	8001e5a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e1e:	f7ff fb9d 	bl	800155c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <HAL_ADC_PollForConversion+0x9c>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d112      	bne.n	8001e5a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10b      	bne.n	8001e5a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e06b      	b.n	8001f32 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0d6      	beq.n	8001e16 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc28 	bl	80016ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01c      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e5b      	ldrb	r3, [r3, #25]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d111      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_ADC_PollForConversion+0x1a8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_PollForConversion+0x136>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADC_PollForConversion+0x138>
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_ADC_PollForConversion+0x1ac>)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d008      	beq.n	8001eea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d002      	beq.n	8001eea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d104      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	e00c      	b.n	8001f0e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_ADC_PollForConversion+0x1a8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d002      	beq.n	8001f04 <HAL_ADC_PollForConversion+0x16c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_PollForConversion+0x16e>
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_ADC_PollForConversion+0x1ac>)
 8001f06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d104      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e008      	b.n	8001f30 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	50040300 	.word	0x50040300
 8001f40:	50040100 	.word	0x50040100
 8001f44:	50040000 	.word	0x50040000

08001f48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0b6      	sub	sp, #216	@ 0xd8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x22>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e3c9      	b.n	800271a <HAL_ADC_ConfigChannel+0x7b6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fccf 	bl	8001936 <LL_ADC_REG_IsConversionOngoing>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 83aa 	bne.w	80026f4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d824      	bhi.n	8001ffa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	3b02      	subs	r3, #2
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d81b      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x8e>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <HAL_ADC_ConfigChannel+0x5c>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fd9 	.word	0x08001fd9
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001fe9 	.word	0x08001fe9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fd6:	e010      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fde:	e00c      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001fe0:	2318      	movs	r3, #24
 8001fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fe6:	e008      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ff0:	e003      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ff8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002008:	f7ff fb74 	bl	80016f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fc90 	bl	8001936 <LL_ADC_REG_IsConversionOngoing>
 8002016:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc9c 	bl	800195c <LL_ADC_INJ_IsConversionOngoing>
 8002024:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 81a4 	bne.w	800237a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 819f 	bne.w	800237a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	461a      	mov	r2, r3
 800204a:	f7ff fb7f 	bl	800174c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d00a      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6919      	ldr	r1, [r3, #16]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002080:	f7ff fad0 	bl	8001624 <LL_ADC_SetOffset>
 8002084:	e179      	b.n	800237a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff faed 	bl	800166c <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x14e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fae2 	bl	800166c <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	e01e      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x18c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fad7 	bl	800166c <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80020e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1a4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	e018      	b.n	800213a <HAL_ADC_ConfigChannel+0x1d6>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800211c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e004      	b.n	800213a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002130:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800213a:	429a      	cmp	r2, r3
 800213c:	d106      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff faa6 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fa8a 	bl	800166c <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x214>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fa7f 	bl	800166c <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	e01e      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x252>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa74 	bl	800166c <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800219a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800219e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021a6:	2320      	movs	r3, #32
 80021a8:	e004      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x26a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	e018      	b.n	8002200 <HAL_ADC_ConfigChannel+0x29c>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80021e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80021ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80021f2:	2320      	movs	r3, #32
 80021f4:	e004      	b.n	8002200 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80021f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002200:	429a      	cmp	r2, r3
 8002202:	d106      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fa43 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2102      	movs	r1, #2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fa27 	bl	800166c <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <HAL_ADC_ConfigChannel+0x2da>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fa1c 	bl	800166c <LL_ADC_GetOffsetChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	e01e      	b.n	800227c <HAL_ADC_ConfigChannel+0x318>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2102      	movs	r1, #2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa11 	bl	800166c <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800225c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e004      	b.n	800227a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x330>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	e014      	b.n	80022be <HAL_ADC_ConfigChannel+0x35a>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9e4 	bl	8001698 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2103      	movs	r1, #3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f9c8 	bl	800166c <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x398>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2103      	movs	r1, #3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f9bd 	bl	800166c <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 021f 	and.w	r2, r3, #31
 80022fa:	e017      	b.n	800232c <HAL_ADC_ConfigChannel+0x3c8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2103      	movs	r1, #3
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f9b2 	bl	800166c <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002316:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3e0>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	e011      	b.n	8002368 <HAL_ADC_ConfigChannel+0x404>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002354:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e003      	b.n	8002368 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002368:	429a      	cmp	r2, r3
 800236a:	d106      	bne.n	800237a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	2103      	movs	r1, #3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f98f 	bl	8001698 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fab2 	bl	80018e8 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8140 	bne.w	800260c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff fa03 	bl	80017a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4a8f      	ldr	r2, [pc, #572]	@ (80025e0 <HAL_ADC_ConfigChannel+0x67c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	f040 8131 	bne.w	800260c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x46e>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	bf94      	ite	ls
 80023ca:	2301      	movls	r3, #1
 80023cc:	2300      	movhi	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e019      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4a2>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002406:	2b00      	cmp	r3, #0
 8002408:	d079      	beq.n	80024fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x4c2>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	3301      	adds	r3, #1
 800241e:	069b      	lsls	r3, r3, #26
 8002420:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002424:	e015      	b.n	8002452 <HAL_ADC_ConfigChannel+0x4ee>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002436:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e003      	b.n	800244a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x50e>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	3301      	adds	r3, #1
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	e017      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x53e>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002482:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800248e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x564>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 021f 	and.w	r2, r3, #31
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	e018      	b.n	80024fa <HAL_ADC_ConfigChannel+0x596>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fa:	430b      	orrs	r3, r1
 80024fc:	e081      	b.n	8002602 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <HAL_ADC_ConfigChannel+0x5b6>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0e9b      	lsrs	r3, r3, #26
 8002510:	3301      	adds	r3, #1
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002518:	e015      	b.n	8002546 <HAL_ADC_ConfigChannel+0x5e2>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800252c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e003      	b.n	800253e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x602>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	3301      	adds	r3, #1
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	e017      	b.n	8002596 <HAL_ADC_ConfigChannel+0x632>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	61bb      	str	r3, [r7, #24]
  return result;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e003      	b.n	800258a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	ea42 0103 	orr.w	r1, r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x65e>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	3b1e      	subs	r3, #30
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	e01e      	b.n	8002600 <HAL_ADC_ConfigChannel+0x69c>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	60fb      	str	r3, [r7, #12]
  return result;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d104      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e006      	b.n	80025ec <HAL_ADC_ConfigChannel+0x688>
 80025de:	bf00      	nop
 80025e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f003 021f 	and.w	r2, r3, #31
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1e      	subs	r3, #30
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002600:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002606:	4619      	mov	r1, r3
 8002608:	f7ff f8a0 	bl	800174c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <HAL_ADC_ConfigChannel+0x7c0>)
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d07a      	beq.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002618:	4843      	ldr	r0, [pc, #268]	@ (8002728 <HAL_ADC_ConfigChannel+0x7c4>)
 800261a:	f7fe fff5 	bl	8001608 <LL_ADC_GetCommonPathInternalCh>
 800261e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a41      	ldr	r2, [pc, #260]	@ (800272c <HAL_ADC_ConfigChannel+0x7c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d12c      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800262c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d126      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3c      	ldr	r2, [pc, #240]	@ (8002730 <HAL_ADC_ConfigChannel+0x7cc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_ADC_ConfigChannel+0x6e8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a3b      	ldr	r2, [pc, #236]	@ (8002734 <HAL_ADC_ConfigChannel+0x7d0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d15d      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002654:	4619      	mov	r1, r3
 8002656:	4834      	ldr	r0, [pc, #208]	@ (8002728 <HAL_ADC_ConfigChannel+0x7c4>)
 8002658:	f7fe ffc3 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800265c:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <HAL_ADC_ConfigChannel+0x7d4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	4a36      	ldr	r2, [pc, #216]	@ (800273c <HAL_ADC_ConfigChannel+0x7d8>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002676:	e002      	b.n	800267e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3b01      	subs	r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002684:	e040      	b.n	8002708 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2d      	ldr	r2, [pc, #180]	@ (8002740 <HAL_ADC_ConfigChannel+0x7dc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d118      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d112      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <HAL_ADC_ConfigChannel+0x7cc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x74c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <HAL_ADC_ConfigChannel+0x7d0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12d      	bne.n	800270c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b8:	4619      	mov	r1, r3
 80026ba:	481b      	ldr	r0, [pc, #108]	@ (8002728 <HAL_ADC_ConfigChannel+0x7c4>)
 80026bc:	f7fe ff91 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c0:	e024      	b.n	800270c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_ADC_ConfigChannel+0x7e0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d120      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11a      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_ADC_ConfigChannel+0x7cc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d115      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ea:	4619      	mov	r1, r3
 80026ec:	480e      	ldr	r0, [pc, #56]	@ (8002728 <HAL_ADC_ConfigChannel+0x7c4>)
 80026ee:	f7fe ff78 	bl	80015e2 <LL_ADC_SetCommonPathInternalCh>
 80026f2:	e00c      	b.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002706:	e002      	b.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002708:	bf00      	nop
 800270a:	e000      	b.n	800270e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800270c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002716:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800271a:	4618      	mov	r0, r3
 800271c:	37d8      	adds	r7, #216	@ 0xd8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	80080000 	.word	0x80080000
 8002728:	50040300 	.word	0x50040300
 800272c:	c7520000 	.word	0xc7520000
 8002730:	50040000 	.word	0x50040000
 8002734:	50040200 	.word	0x50040200
 8002738:	20000014 	.word	0x20000014
 800273c:	053e2d63 	.word	0x053e2d63
 8002740:	cb840000 	.word	0xcb840000
 8002744:	80000001 	.word	0x80000001

08002748 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f8c5 	bl	80018e8 <LL_ADC_IsEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d169      	bne.n	8002838 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <ADC_Enable+0xfc>)
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	f043 0210 	orr.w	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e055      	b.n	800283a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f894 	bl	80018c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002798:	482b      	ldr	r0, [pc, #172]	@ (8002848 <ADC_Enable+0x100>)
 800279a:	f7fe ff35 	bl	8001608 <LL_ADC_GetCommonPathInternalCh>
 800279e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <ADC_Enable+0x104>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <ADC_Enable+0x108>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027c2:	e002      	b.n	80027ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fec4 	bl	800155c <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d6:	e028      	b.n	800282a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f883 	bl	80018e8 <LL_ADC_IsEnabled>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f867 	bl	80018c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027f2:	f7fe feb3 	bl	800155c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d914      	bls.n	800282a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d00d      	beq.n	800282a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d1cf      	bne.n	80027d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	8000003f 	.word	0x8000003f
 8002848:	50040300 	.word	0x50040300
 800284c:	20000014 	.word	0x20000014
 8002850:	053e2d63 	.word	0x053e2d63

08002854 <LL_ADC_IsEnabled>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <LL_ADC_IsEnabled+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_IsEnabled+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b09f      	sub	sp, #124	@ 0x7c
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e093      	b.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028c6:	2300      	movs	r3, #0
 80028c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ca:	2300      	movs	r3, #0
 80028cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a47      	ldr	r2, [pc, #284]	@ (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d102      	bne.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e001      	b.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e072      	b.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ffb9 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002908:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ffb3 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d154      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800291a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800291c:	2b00      	cmp	r3, #0
 800291e:	d151      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002920:	4b35      	ldr	r3, [pc, #212]	@ (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002922:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02c      	beq.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800292c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800293e:	035b      	lsls	r3, r3, #13
 8002940:	430b      	orrs	r3, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002946:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002948:	4829      	ldr	r0, [pc, #164]	@ (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800294a:	f7ff ff83 	bl	8002854 <LL_ADC_IsEnabled>
 800294e:	4604      	mov	r4, r0
 8002950:	4828      	ldr	r0, [pc, #160]	@ (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002952:	f7ff ff7f 	bl	8002854 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	431c      	orrs	r4, r3
 800295a:	4828      	ldr	r0, [pc, #160]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800295c:	f7ff ff7a 	bl	8002854 <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d137      	bne.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002970:	f023 030f 	bic.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	6892      	ldr	r2, [r2, #8]
 800297c:	430a      	orrs	r2, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002982:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	e028      	b.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800298e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002990:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002992:	4817      	ldr	r0, [pc, #92]	@ (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002994:	f7ff ff5e 	bl	8002854 <LL_ADC_IsEnabled>
 8002998:	4604      	mov	r4, r0
 800299a:	4816      	ldr	r0, [pc, #88]	@ (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800299c:	f7ff ff5a 	bl	8002854 <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	431c      	orrs	r4, r3
 80029a4:	4815      	ldr	r0, [pc, #84]	@ (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029a6:	f7ff ff55 	bl	8002854 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4323      	orrs	r3, r4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d112      	bne.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029ba:	f023 030f 	bic.w	r3, r3, #15
 80029be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029c2:	e009      	b.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029d6:	e000      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	377c      	adds	r7, #124	@ 0x7c
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	50040000 	.word	0x50040000
 80029f4:	50040100 	.word	0x50040100
 80029f8:	50040300 	.word	0x50040300
 80029fc:	50040200 	.word	0x50040200

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	@ (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	@ (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e098      	b.n	8002d68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <HAL_DMA_Init+0x150>)
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d80f      	bhi.n	8002c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_DMA_Init+0x154>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_DMA_Init+0x158>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	@ (8002d80 <HAL_DMA_Init+0x15c>)
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c60:	e00e      	b.n	8002c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <HAL_DMA_Init+0x160>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a43      	ldr	r2, [pc, #268]	@ (8002d7c <HAL_DMA_Init+0x158>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	009a      	lsls	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	@ (8002d88 <HAL_DMA_Init+0x164>)
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cda:	d039      	beq.n	8002d50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <HAL_DMA_Init+0x15c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11a      	bne.n	8002d1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ce6:	4b29      	ldr	r3, [pc, #164]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 031c 	and.w	r3, r3, #28
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4924      	ldr	r1, [pc, #144]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f003 031c 	and.w	r3, r3, #28
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	491d      	ldr	r1, [pc, #116]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
 8002d1a:	e019      	b.n	8002d50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f003 031c 	and.w	r3, r3, #28
 8002d28:	210f      	movs	r1, #15
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4917      	ldr	r1, [pc, #92]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f003 031c 	and.w	r3, r3, #28
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	4911      	ldr	r1, [pc, #68]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40020407 	.word	0x40020407
 8002d78:	bffdfff8 	.word	0xbffdfff8
 8002d7c:	cccccccd 	.word	0xcccccccd
 8002d80:	40020000 	.word	0x40020000
 8002d84:	bffdfbf8 	.word	0xbffdfbf8
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	400200a8 	.word	0x400200a8
 8002d90:	400204a8 	.word	0x400204a8

08002d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	f003 031c 	and.w	r3, r3, #28
 8002db4:	2204      	movs	r2, #4
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d026      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x7a>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d021      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dec:	f003 021c 	and.w	r2, r3, #28
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	2104      	movs	r1, #4
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d071      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e0c:	e06c      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f003 031c 	and.w	r3, r3, #28
 8002e16:	2202      	movs	r2, #2
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xec>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d029      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 020a 	bic.w	r2, r2, #10
 8002e48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f003 021c 	and.w	r2, r3, #28
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	2102      	movs	r1, #2
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d038      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e7e:	e033      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	f003 031c 	and.w	r3, r3, #28
 8002e88:	2208      	movs	r2, #8
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02a      	beq.n	8002eea <HAL_DMA_IRQHandler+0x156>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d025      	beq.n	8002eea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 020e 	bic.w	r2, r2, #14
 8002eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 021c 	and.w	r2, r3, #28
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
}
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f02:	e17f      	b.n	8003204 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8171 	beq.w	80031fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d005      	beq.n	8002f34 <HAL_GPIO_Init+0x40>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d130      	bne.n	8002f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0201 	and.w	r2, r3, #1
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d118      	bne.n	8002fd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f003 0201 	and.w	r2, r3, #1
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d017      	beq.n	8003010 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d123      	bne.n	8003064 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3208      	adds	r2, #8
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	6939      	ldr	r1, [r7, #16]
 8003060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80ac 	beq.w	80031fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <HAL_GPIO_Init+0x330>)
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003224 <HAL_GPIO_Init+0x330>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80030b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <HAL_GPIO_Init+0x330>)
 80030b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030be:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_GPIO_Init+0x334>)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x242>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	@ (800322c <HAL_GPIO_Init+0x338>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x23e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003230 <HAL_GPIO_Init+0x33c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x23a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003234 <HAL_GPIO_Init+0x340>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x236>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4c      	ldr	r2, [pc, #304]	@ (8003238 <HAL_GPIO_Init+0x344>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x232>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4b      	ldr	r2, [pc, #300]	@ (800323c <HAL_GPIO_Init+0x348>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x22e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4a      	ldr	r2, [pc, #296]	@ (8003240 <HAL_GPIO_Init+0x34c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x22a>
 800311a:	2306      	movs	r3, #6
 800311c:	e00c      	b.n	8003138 <HAL_GPIO_Init+0x244>
 800311e:	2307      	movs	r3, #7
 8003120:	e00a      	b.n	8003138 <HAL_GPIO_Init+0x244>
 8003122:	2305      	movs	r3, #5
 8003124:	e008      	b.n	8003138 <HAL_GPIO_Init+0x244>
 8003126:	2304      	movs	r3, #4
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x244>
 800312a:	2303      	movs	r3, #3
 800312c:	e004      	b.n	8003138 <HAL_GPIO_Init+0x244>
 800312e:	2302      	movs	r3, #2
 8003130:	e002      	b.n	8003138 <HAL_GPIO_Init+0x244>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x244>
 8003136:	2300      	movs	r3, #0
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	4093      	lsls	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003148:	4937      	ldr	r1, [pc, #220]	@ (8003228 <HAL_GPIO_Init+0x334>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003156:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <HAL_GPIO_Init+0x350>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800317a:	4a32      	ldr	r2, [pc, #200]	@ (8003244 <HAL_GPIO_Init+0x350>)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <HAL_GPIO_Init+0x350>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031a4:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_GPIO_Init+0x350>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <HAL_GPIO_Init+0x350>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_GPIO_Init+0x350>)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <HAL_GPIO_Init+0x350>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f8:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <HAL_GPIO_Init+0x350>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f ae78 	bne.w	8002f04 <HAL_GPIO_Init+0x10>
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40010000 	.word	0x40010000
 800322c:	48000400 	.word	0x48000400
 8003230:	48000800 	.word	0x48000800
 8003234:	48000c00 	.word	0x48000c00
 8003238:	48001000 	.word	0x48001000
 800323c:	48001400 	.word	0x48001400
 8003240:	48001800 	.word	0x48001800
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003294:	e002      	b.n	800329c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fcfe 	bl	8000cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010400 	.word	0x40010400

080032d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032dc:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000

080032f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003302:	d130      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003304:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800330c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003310:	d038      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003312:	4b20      	ldr	r3, [pc, #128]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800331a:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2232      	movs	r2, #50	@ 0x32
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003338:	e002      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003340:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334c:	d102      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f2      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003354:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003360:	d110      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d007      	beq.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003374:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800337c:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40007000 	.word	0x40007000
 8003398:	20000014 	.word	0x20000014
 800339c:	431bde83 	.word	0x431bde83

080033a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e3ca      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b97      	ldr	r3, [pc, #604]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b94      	ldr	r3, [pc, #592]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80e4 	beq.w	800359c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_RCC_OscConfig+0x4a>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	f040 808b 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 8087 	bne.w	80034f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ea:	4b89      	ldr	r3, [pc, #548]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3a2      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_RCC_OscConfig+0x7c>
 8003412:	4b7f      	ldr	r3, [pc, #508]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341a:	e005      	b.n	8003428 <HAL_RCC_OscConfig+0x88>
 800341c:	4b7c      	ldr	r3, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003428:	4293      	cmp	r3, r2
 800342a:	d223      	bcs.n	8003474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fd55 	bl	8003ee0 <RCC_SetFlashLatencyFromMSIRange>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e383      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003440:	4b73      	ldr	r3, [pc, #460]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a72      	ldr	r2, [pc, #456]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	496d      	ldr	r1, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	4b6c      	ldr	r3, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	4968      	ldr	r1, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
 8003472:	e025      	b.n	80034c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b63      	ldr	r3, [pc, #396]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4960      	ldr	r1, [pc, #384]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	495b      	ldr	r1, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd15 	bl	8003ee0 <RCC_SetFlashLatencyFromMSIRange>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e343      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c0:	f000 fc4a 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b52      	ldr	r3, [pc, #328]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	4950      	ldr	r1, [pc, #320]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003618 <HAL_RCC_OscConfig+0x278>)
 80034de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034e0:	4b4e      	ldr	r3, [pc, #312]	@ (800361c <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd ffe9 	bl	80014bc <HAL_InitTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d052      	beq.n	800359a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	e327      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d032      	beq.n	8003566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003500:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a42      	ldr	r2, [pc, #264]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350c:	f7fe f826 	bl	800155c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003514:	f7fe f822 	bl	800155c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e310      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003526:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a36      	ldr	r2, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4931      	ldr	r1, [pc, #196]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003550:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	492c      	ldr	r1, [pc, #176]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	e01a      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003566:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a29      	ldr	r2, [pc, #164]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003572:	f7fd fff3 	bl	800155c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800357a:	f7fd ffef 	bl	800155c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e2dd      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x1da>
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800359a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d074      	beq.n	8003692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x21a>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d10b      	bne.n	80035d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d064      	beq.n	8003690 <HAL_RCC_OscConfig+0x2f0>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d160      	bne.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e2ba      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x24a>
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e026      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f2:	d115      	bne.n	8003620 <HAL_RCC_OscConfig+0x280>
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 80035fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x298>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	08006038 	.word	0x08006038
 8003618:	20000014 	.word	0x20000014
 800361c:	20000018 	.word	0x20000018
 8003620:	4ba0      	ldr	r3, [pc, #640]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9f      	ldr	r2, [pc, #636]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b9d      	ldr	r3, [pc, #628]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a9c      	ldr	r2, [pc, #624]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd ff8c 	bl	800155c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fd ff88 	bl	800155c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e276      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4b92      	ldr	r3, [pc, #584]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x2a8>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd ff78 	bl	800155c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd ff74 	bl	800155c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e262      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x2d0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d060      	beq.n	8003760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x310>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d119      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	4b7c      	ldr	r3, [pc, #496]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_OscConfig+0x328>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e23f      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4973      	ldr	r1, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	e040      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e6:	4b6f      	ldr	r3, [pc, #444]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6e      	ldr	r2, [pc, #440]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd ff33 	bl	800155c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd ff2f 	bl	800155c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e21d      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b62      	ldr	r3, [pc, #392]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	495f      	ldr	r1, [pc, #380]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	e018      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b5d      	ldr	r3, [pc, #372]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd ff0f 	bl	800155c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003742:	f7fd ff0b 	bl	800155c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1f9      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003774:	4b4b      	ldr	r3, [pc, #300]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd feea 	bl	800155c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd fee6 	bl	800155c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1d4      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x3ec>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ae:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	4a3b      	ldr	r2, [pc, #236]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fecd 	bl	800155c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fd fec9 	bl	800155c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1b7      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a6 	beq.w	8003940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037f8:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	4a26      	ldr	r2, [pc, #152]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003810:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	4b21      	ldr	r3, [pc, #132]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fd fe90 	bl	800155c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fe8c 	bl	800155c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e17a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_RCC_OscConfig+0x508>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d8>
 8003866:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003876:	e029      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d115      	bne.n	80038ac <HAL_RCC_OscConfig+0x50c>
 8003880:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	4a03      	ldr	r2, [pc, #12]	@ (80038a4 <HAL_RCC_OscConfig+0x504>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a0:	e014      	b.n	80038cc <HAL_RCC_OscConfig+0x52c>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	4a9b      	ldr	r2, [pc, #620]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038bc:	4b98      	ldr	r3, [pc, #608]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	4a97      	ldr	r2, [pc, #604]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fe42 	bl	800155c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd fe3e 	bl	800155c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e12a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ed      	beq.n	80038dc <HAL_RCC_OscConfig+0x53c>
 8003900:	e015      	b.n	800392e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fd fe2b 	bl	800155c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fd fe27 	bl	800155c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e113      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003920:	4b7f      	ldr	r3, [pc, #508]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ed      	bne.n	800390a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392e:	7ffb      	ldrb	r3, [r7, #31]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b7a      	ldr	r3, [pc, #488]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	4a79      	ldr	r2, [pc, #484]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80fe 	beq.w	8003b46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	2b02      	cmp	r3, #2
 8003950:	f040 80d0 	bne.w	8003af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003954:	4b72      	ldr	r3, [pc, #456]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d130      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	3b01      	subs	r3, #1
 8003974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d127      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11f      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003994:	2a07      	cmp	r2, #7
 8003996:	bf14      	ite	ne
 8003998:	2201      	movne	r2, #1
 800399a:	2200      	moveq	r2, #0
 800399c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d06e      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d069      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039d0:	4b53      	ldr	r3, [pc, #332]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039dc:	4b50      	ldr	r3, [pc, #320]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0ad      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f8:	f7fd fdb0 	bl	800155c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fdac 	bl	800155c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e09a      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a12:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1e:	4b40      	ldr	r3, [pc, #256]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <HAL_RCC_OscConfig+0x784>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	4311      	orrs	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a38:	0212      	lsls	r2, r2, #8
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a4c:	0852      	lsrs	r2, r2, #1
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	0652      	lsls	r2, r2, #25
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a58:	0912      	lsrs	r2, r2, #4
 8003a5a:	0452      	lsls	r2, r2, #17
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4930      	ldr	r1, [pc, #192]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a64:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b2b      	ldr	r3, [pc, #172]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a7c:	f7fd fd6e 	bl	800155c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fd6a 	bl	800155c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa2:	e050      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e04f      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d148      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b17      	ldr	r3, [pc, #92]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003acc:	f7fd fd46 	bl	800155c <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fd42 	bl	800155c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e030      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x734>
 8003af2:	e028      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d023      	beq.n	8003b42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_RCC_OscConfig+0x780>)
 8003b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fd29 	bl	800155c <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fd fd25 	bl	800155c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d905      	bls.n	8003b28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ec      	bne.n	8003b0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	4905      	ldr	r1, [pc, #20]	@ (8003b50 <HAL_RCC_OscConfig+0x7b0>)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_OscConfig+0x7b4>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
 8003b40:	e001      	b.n	8003b46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	feeefffc 	.word	0xfeeefffc

08003b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0e7      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b75      	ldr	r3, [pc, #468]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d910      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b72      	ldr	r3, [pc, #456]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	4970      	ldr	r1, [pc, #448]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cf      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d908      	bls.n	8003bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4960      	ldr	r1, [pc, #384]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04c      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b5a      	ldr	r3, [pc, #360]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0a6      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	4b54      	ldr	r3, [pc, #336]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e09a      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08e      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e086      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4943      	ldr	r1, [pc, #268]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd fc8c 	bl	800155c <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fd fc88 	bl	800155c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e06e      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b31      	ldr	r3, [pc, #196]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d208      	bcs.n	8003c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	492b      	ldr	r1, [pc, #172]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9e:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d210      	bcs.n	8003cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cac:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0207 	bic.w	r2, r3, #7
 8003cb4:	4923      	ldr	r1, [pc, #140]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCC_ClockConfig+0x1ec>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e036      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4918      	ldr	r1, [pc, #96]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4910      	ldr	r1, [pc, #64]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d0c:	f000 f824 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	490b      	ldr	r1, [pc, #44]	@ (8003d4c <HAL_RCC_ClockConfig+0x1f4>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d2c:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_RCC_ClockConfig+0x1fc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fbc3 	bl	80014bc <HAL_InitTick>
 8003d36:	4603      	mov	r3, r0
 8003d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	08006038 	.word	0x08006038
 8003d50:	20000014 	.word	0x20000014
 8003d54:	20000018 	.word	0x20000018

08003d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	@ 0x24
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d70:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x34>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d121      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d11e      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d8c:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e005      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003db4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd0:	4b25      	ldr	r3, [pc, #148]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e004      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ddc:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d134      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0xac>
 8003dfc:	e005      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e00:	617b      	str	r3, [r7, #20]
      break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e04:	4b19      	ldr	r3, [pc, #100]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e06:	617b      	str	r3, [r7, #20]
      break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	617b      	str	r3, [r7, #20]
      break;
 8003e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	fb03 f202 	mul.w	r2, r3, r2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	0e5b      	lsrs	r3, r3, #25
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	3301      	adds	r3, #1
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e50:	69bb      	ldr	r3, [r7, #24]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08006050 	.word	0x08006050
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	007a1200 	.word	0x007a1200

08003e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08006048 	.word	0x08006048

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eb8:	f7ff ffda 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0adb      	lsrs	r3, r3, #11
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4904      	ldr	r1, [pc, #16]	@ (8003edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08006048 	.word	0x08006048

08003ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eec:	4b2a      	ldr	r3, [pc, #168]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ef8:	f7ff f9ee 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003efc:	6178      	str	r0, [r7, #20]
 8003efe:	e014      	b.n	8003f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f00:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f04:	4a24      	ldr	r2, [pc, #144]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0c:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f18:	f7ff f9de 	bl	80032d8 <HAL_PWREx_GetVoltageRange>
 8003f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f30:	d10b      	bne.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b80      	cmp	r3, #128	@ 0x80
 8003f36:	d919      	bls.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f3c:	d902      	bls.n	8003f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f3e:	2302      	movs	r3, #2
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	e013      	b.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f44:	2301      	movs	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	e010      	b.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b80      	cmp	r3, #128	@ 0x80
 8003f4e:	d902      	bls.n	8003f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f50:	2303      	movs	r3, #3
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e00a      	b.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b80      	cmp	r3, #128	@ 0x80
 8003f5a:	d102      	bne.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e004      	b.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b70      	cmp	r3, #112	@ 0x70
 8003f66:	d101      	bne.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 0207 	bic.w	r2, r3, #7
 8003f74:	4909      	ldr	r1, [pc, #36]	@ (8003f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f7c:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40022000 	.word	0x40022000

08003fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fac:	2300      	movs	r3, #0
 8003fae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d041      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fc4:	d02a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fca:	d824      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fd6:	d81e      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe0:	d010      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fe2:	e018      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe4:	4b86      	ldr	r3, [pc, #536]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a85      	ldr	r2, [pc, #532]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff0:	e015      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fabb 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004002:	e00c      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3320      	adds	r3, #32
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fba6 	bl	800475c <RCCEx_PLLSAI2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	74fb      	strb	r3, [r7, #19]
      break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004024:	4b76      	ldr	r3, [pc, #472]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004032:	4973      	ldr	r1, [pc, #460]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d041      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004050:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004054:	d02a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800405a:	d824      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800405c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004066:	d81e      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800406c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004070:	d010      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004072:	e018      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004074:	4b62      	ldr	r3, [pc, #392]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a61      	ldr	r2, [pc, #388]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004080:	e015      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fa73 	bl	8004574 <RCCEx_PLLSAI1_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004092:	e00c      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3320      	adds	r3, #32
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb5e 	bl	800475c <RCCEx_PLLSAI2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	74fb      	strb	r3, [r7, #19]
      break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040b4:	4b52      	ldr	r3, [pc, #328]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c2:	494f      	ldr	r1, [pc, #316]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ca:	e001      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a0 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	4a40      	ldr	r2, [pc, #256]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58
 8004104:	4b3e      	ldr	r3, [pc, #248]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004114:	4b3b      	ldr	r3, [pc, #236]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3a      	ldr	r2, [pc, #232]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800411a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004120:	f7fd fa1c 	bl	800155c <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004126:	e009      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fd fa18 	bl	800155c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	74fb      	strb	r3, [r7, #19]
        break;
 800413a:	e005      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800413c:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d15c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414e:	4b2c      	ldr	r3, [pc, #176]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	429a      	cmp	r2, r3
 800416a:	d019      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800416c:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004178:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	4a1c      	ldr	r2, [pc, #112]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004198:	4a19      	ldr	r2, [pc, #100]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd f9d7 	bl	800155c <HAL_GetTick>
 80041ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b0:	e00b      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd f9d3 	bl	800155c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d902      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	74fb      	strb	r3, [r7, #19]
            break;
 80041c8:	e006      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ec      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041de:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ee:	4904      	ldr	r1, [pc, #16]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041f6:	e009      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000
 8004204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420c:	7c7b      	ldrb	r3, [r7, #17]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b9e      	ldr	r3, [pc, #632]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	4a9d      	ldr	r2, [pc, #628]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800422a:	4b98      	ldr	r3, [pc, #608]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004230:	f023 0203 	bic.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	4994      	ldr	r1, [pc, #592]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800424c:	4b8f      	ldr	r3, [pc, #572]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f023 020c 	bic.w	r2, r3, #12
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	498c      	ldr	r1, [pc, #560]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800426e:	4b87      	ldr	r3, [pc, #540]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	4983      	ldr	r1, [pc, #524]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004290:	4b7e      	ldr	r3, [pc, #504]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	497b      	ldr	r1, [pc, #492]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b2:	4b76      	ldr	r3, [pc, #472]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c0:	4972      	ldr	r1, [pc, #456]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d4:	4b6d      	ldr	r3, [pc, #436]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	496a      	ldr	r1, [pc, #424]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f6:	4b65      	ldr	r3, [pc, #404]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	4961      	ldr	r1, [pc, #388]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004318:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004326:	4959      	ldr	r1, [pc, #356]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800433a:	4b54      	ldr	r3, [pc, #336]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004340:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	4950      	ldr	r1, [pc, #320]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800435c:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	4948      	ldr	r1, [pc, #288]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800437e:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	493f      	ldr	r1, [pc, #252]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d028      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a0:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ae:	4937      	ldr	r1, [pc, #220]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043be:	d106      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c0:	4b32      	ldr	r3, [pc, #200]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a31      	ldr	r2, [pc, #196]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ca:	60d3      	str	r3, [r2, #12]
 80043cc:	e011      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f8c8 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d028      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043fe:	4b23      	ldr	r3, [pc, #140]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440c:	491f      	ldr	r1, [pc, #124]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441c:	d106      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a1a      	ldr	r2, [pc, #104]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004428:	60d3      	str	r3, [r2, #12]
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f899 	bl	8004574 <RCCEx_PLLSAI1_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	4908      	ldr	r1, [pc, #32]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800447a:	d109      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a02      	ldr	r2, [pc, #8]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004486:	60d3      	str	r3, [r2, #12]
 8004488:	e014      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f867 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ce:	4928      	ldr	r1, [pc, #160]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044de:	d10d      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f844 	bl	8004574 <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d014      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	74bb      	strb	r3, [r7, #18]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3320      	adds	r3, #32
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f925 	bl	800475c <RCCEx_PLLSAI2_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800452c:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800453a:	490d      	ldr	r1, [pc, #52]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800455e:	4904      	ldr	r1, [pc, #16]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004566:	7cbb      	ldrb	r3, [r7, #18]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000

08004574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004582:	4b75      	ldr	r3, [pc, #468]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800458e:	4b72      	ldr	r3, [pc, #456]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0203 	and.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d10d      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
       ||
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
       ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d047      	beq.n	800464a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e044      	b.n	800464a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d018      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x86>
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d825      	bhi.n	8004618 <RCCEx_PLLSAI1_Config+0xa4>
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d002      	beq.n	80045d6 <RCCEx_PLLSAI1_Config+0x62>
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d009      	beq.n	80045e8 <RCCEx_PLLSAI1_Config+0x74>
 80045d4:	e020      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d6:	4b60      	ldr	r3, [pc, #384]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11d      	bne.n	800461e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e6:	e01a      	b.n	800461e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e013      	b.n	8004622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045fa:	4b57      	ldr	r3, [pc, #348]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004606:	4b54      	ldr	r3, [pc, #336]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004616:	e006      	b.n	8004626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e004      	b.n	8004628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004626:	bf00      	nop
    }

    if(status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800462e:	4b4a      	ldr	r3, [pc, #296]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	430b      	orrs	r3, r1
 8004644:	4944      	ldr	r1, [pc, #272]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d17d      	bne.n	800474c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004650:	4b41      	ldr	r3, [pc, #260]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a40      	ldr	r2, [pc, #256]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800465a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465c:	f7fc ff7e 	bl	800155c <HAL_GetTick>
 8004660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004662:	e009      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004664:	f7fc ff7a 	bl	800155c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	73fb      	strb	r3, [r7, #15]
        break;
 8004676:	e005      	b.n	8004684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ef      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d160      	bne.n	800474c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d111      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004690:	4b31      	ldr	r3, [pc, #196]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6892      	ldr	r2, [r2, #8]
 80046a0:	0211      	lsls	r1, r2, #8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68d2      	ldr	r2, [r2, #12]
 80046a6:	0912      	lsrs	r2, r2, #4
 80046a8:	0452      	lsls	r2, r2, #17
 80046aa:	430a      	orrs	r2, r1
 80046ac:	492a      	ldr	r1, [pc, #168]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	610b      	str	r3, [r1, #16]
 80046b2:	e027      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d112      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ba:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6892      	ldr	r2, [r2, #8]
 80046ca:	0211      	lsls	r1, r2, #8
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6912      	ldr	r2, [r2, #16]
 80046d0:	0852      	lsrs	r2, r2, #1
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0552      	lsls	r2, r2, #21
 80046d6:	430a      	orrs	r2, r1
 80046d8:	491f      	ldr	r1, [pc, #124]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	610b      	str	r3, [r1, #16]
 80046de:	e011      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	0211      	lsls	r1, r2, #8
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6952      	ldr	r2, [r2, #20]
 80046f6:	0852      	lsrs	r2, r2, #1
 80046f8:	3a01      	subs	r2, #1
 80046fa:	0652      	lsls	r2, r2, #25
 80046fc:	430a      	orrs	r2, r1
 80046fe:	4916      	ldr	r1, [pc, #88]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004704:	4b14      	ldr	r3, [pc, #80]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a13      	ldr	r2, [pc, #76]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800470e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc ff24 	bl	800155c <HAL_GetTick>
 8004714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004716:	e009      	b.n	800472c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004718:	f7fc ff20 	bl	800155c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d902      	bls.n	800472c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	73fb      	strb	r3, [r7, #15]
          break;
 800472a:	e005      	b.n	8004738 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800472c:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ef      	beq.n	8004718 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800473e:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	4904      	ldr	r1, [pc, #16]	@ (8004758 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000

0800475c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800476a:	4b6a      	ldr	r3, [pc, #424]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d018      	beq.n	80047a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004776:	4b67      	ldr	r3, [pc, #412]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0203 	and.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d10d      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
       ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800478e:	4b61      	ldr	r3, [pc, #388]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
       ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d047      	beq.n	8004832 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
 80047a6:	e044      	b.n	8004832 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d018      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x86>
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d825      	bhi.n	8004800 <RCCEx_PLLSAI2_Config+0xa4>
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d002      	beq.n	80047be <RCCEx_PLLSAI2_Config+0x62>
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d009      	beq.n	80047d0 <RCCEx_PLLSAI2_Config+0x74>
 80047bc:	e020      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047be:	4b55      	ldr	r3, [pc, #340]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11d      	bne.n	8004806 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ce:	e01a      	b.n	8004806 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047d0:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e0:	e013      	b.n	800480a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ee:	4b49      	ldr	r3, [pc, #292]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047fe:	e006      	b.n	800480e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	e004      	b.n	8004810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800480e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004816:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	430b      	orrs	r3, r1
 800482c:	4939      	ldr	r1, [pc, #228]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d167      	bne.n	8004908 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fc fe8a 	bl	800155c <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800484a:	e009      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800484c:	f7fc fe86 	bl	800155c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	73fb      	strb	r3, [r7, #15]
        break;
 800485e:	e005      	b.n	800486c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004860:	4b2c      	ldr	r3, [pc, #176]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ef      	bne.n	800484c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d14a      	bne.n	8004908 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004878:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	0211      	lsls	r1, r2, #8
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	0912      	lsrs	r2, r2, #4
 8004890:	0452      	lsls	r2, r2, #17
 8004892:	430a      	orrs	r2, r1
 8004894:	491f      	ldr	r1, [pc, #124]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	614b      	str	r3, [r1, #20]
 800489a:	e011      	b.n	80048c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800489c:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6912      	ldr	r2, [r2, #16]
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0652      	lsls	r2, r2, #25
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4916      	ldr	r1, [pc, #88]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fc fe46 	bl	800155c <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048d4:	f7fc fe42 	bl	800155c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
          break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4904      	ldr	r1, [pc, #16]	@ (8004914 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000

08004918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e040      	b.n	80049ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fc24 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2224      	movs	r2, #36	@ 0x24
 8004944:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fb6a 	bl	8005038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8af 	bl	8004ac8 <UART_SetConfig>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e01b      	b.n	80049ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fbe9 	bl	800517c <UART_CheckIdleState>
 80049aa:	4603      	mov	r3, r0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	@ 0x28
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d177      	bne.n	8004abc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_Transmit+0x24>
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e070      	b.n	8004abe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2221      	movs	r2, #33	@ 0x21
 80049e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ea:	f7fc fdb7 	bl	800155c <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a08:	d108      	bne.n	8004a1c <HAL_UART_Transmit+0x68>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e003      	b.n	8004a24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a24:	e02f      	b.n	8004a86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	@ 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fc4b 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e03b      	b.n	8004abe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	3302      	adds	r3, #2
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	e007      	b.n	8004a74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1c9      	bne.n	8004a26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2140      	movs	r1, #64	@ 0x40
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fc15 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e005      	b.n	8004abe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b08a      	sub	sp, #40	@ 0x28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4ba4      	ldr	r3, [pc, #656]	@ (8004d88 <UART_SetConfig+0x2c0>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a99      	ldr	r2, [pc, #612]	@ (8004d8c <UART_SetConfig+0x2c4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b30:	4313      	orrs	r3, r2
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a90      	ldr	r2, [pc, #576]	@ (8004d90 <UART_SetConfig+0x2c8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d126      	bne.n	8004ba0 <UART_SetConfig+0xd8>
 8004b52:	4b90      	ldr	r3, [pc, #576]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d81b      	bhi.n	8004b98 <UART_SetConfig+0xd0>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0xa0>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e116      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e112      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e10e      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e10a      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e106      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8004d98 <UART_SetConfig+0x2d0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d138      	bne.n	8004c1c <UART_SetConfig+0x154>
 8004baa:	4b7a      	ldr	r3, [pc, #488]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d82d      	bhi.n	8004c14 <UART_SetConfig+0x14c>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <UART_SetConfig+0xf8>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c15 	.word	0x08004c15
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfa:	e0d8      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c02:	e0d4      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e0d0      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e0cc      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e0c8      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5e      	ldr	r2, [pc, #376]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d125      	bne.n	8004c72 <UART_SetConfig+0x1aa>
 8004c26:	4b5b      	ldr	r3, [pc, #364]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c30:	2b30      	cmp	r3, #48	@ 0x30
 8004c32:	d016      	beq.n	8004c62 <UART_SetConfig+0x19a>
 8004c34:	2b30      	cmp	r3, #48	@ 0x30
 8004c36:	d818      	bhi.n	8004c6a <UART_SetConfig+0x1a2>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d00a      	beq.n	8004c52 <UART_SetConfig+0x18a>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d814      	bhi.n	8004c6a <UART_SetConfig+0x1a2>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <UART_SetConfig+0x182>
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d008      	beq.n	8004c5a <UART_SetConfig+0x192>
 8004c48:	e00f      	b.n	8004c6a <UART_SetConfig+0x1a2>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c50:	e0ad      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c52:	2302      	movs	r3, #2
 8004c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c58:	e0a9      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c60:	e0a5      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c62:	2308      	movs	r3, #8
 8004c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c68:	e0a1      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c70:	e09d      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a4a      	ldr	r2, [pc, #296]	@ (8004da0 <UART_SetConfig+0x2d8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d125      	bne.n	8004cc8 <UART_SetConfig+0x200>
 8004c7c:	4b45      	ldr	r3, [pc, #276]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c88:	d016      	beq.n	8004cb8 <UART_SetConfig+0x1f0>
 8004c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c8c:	d818      	bhi.n	8004cc0 <UART_SetConfig+0x1f8>
 8004c8e:	2b80      	cmp	r3, #128	@ 0x80
 8004c90:	d00a      	beq.n	8004ca8 <UART_SetConfig+0x1e0>
 8004c92:	2b80      	cmp	r3, #128	@ 0x80
 8004c94:	d814      	bhi.n	8004cc0 <UART_SetConfig+0x1f8>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <UART_SetConfig+0x1d8>
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d008      	beq.n	8004cb0 <UART_SetConfig+0x1e8>
 8004c9e:	e00f      	b.n	8004cc0 <UART_SetConfig+0x1f8>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca6:	e082      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cae:	e07e      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb6:	e07a      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cbe:	e076      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	e072      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a35      	ldr	r2, [pc, #212]	@ (8004da4 <UART_SetConfig+0x2dc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d12a      	bne.n	8004d28 <UART_SetConfig+0x260>
 8004cd2:	4b30      	ldr	r3, [pc, #192]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce0:	d01a      	beq.n	8004d18 <UART_SetConfig+0x250>
 8004ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce6:	d81b      	bhi.n	8004d20 <UART_SetConfig+0x258>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cec:	d00c      	beq.n	8004d08 <UART_SetConfig+0x240>
 8004cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf2:	d815      	bhi.n	8004d20 <UART_SetConfig+0x258>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <UART_SetConfig+0x238>
 8004cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfc:	d008      	beq.n	8004d10 <UART_SetConfig+0x248>
 8004cfe:	e00f      	b.n	8004d20 <UART_SetConfig+0x258>
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d06:	e052      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e04e      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e04a      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e046      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e042      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <UART_SetConfig+0x2c4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d13a      	bne.n	8004da8 <UART_SetConfig+0x2e0>
 8004d32:	4b18      	ldr	r3, [pc, #96]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d40:	d01a      	beq.n	8004d78 <UART_SetConfig+0x2b0>
 8004d42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d46:	d81b      	bhi.n	8004d80 <UART_SetConfig+0x2b8>
 8004d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4c:	d00c      	beq.n	8004d68 <UART_SetConfig+0x2a0>
 8004d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d52:	d815      	bhi.n	8004d80 <UART_SetConfig+0x2b8>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <UART_SetConfig+0x298>
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5c:	d008      	beq.n	8004d70 <UART_SetConfig+0x2a8>
 8004d5e:	e00f      	b.n	8004d80 <UART_SetConfig+0x2b8>
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e022      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e01e      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d70:	2304      	movs	r3, #4
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e01a      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7e:	e016      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d86:	e012      	b.n	8004dae <UART_SetConfig+0x2e6>
 8004d88:	efff69f3 	.word	0xefff69f3
 8004d8c:	40008000 	.word	0x40008000
 8004d90:	40013800 	.word	0x40013800
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40004400 	.word	0x40004400
 8004d9c:	40004800 	.word	0x40004800
 8004da0:	40004c00 	.word	0x40004c00
 8004da4:	40005000 	.word	0x40005000
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a9f      	ldr	r2, [pc, #636]	@ (8005030 <UART_SetConfig+0x568>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d17a      	bne.n	8004eae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d824      	bhi.n	8004e0a <UART_SetConfig+0x342>
 8004dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc8 <UART_SetConfig+0x300>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004dfb 	.word	0x08004dfb
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e0b 	.word	0x08004e0b
 8004de4:	08004e0b 	.word	0x08004e0b
 8004de8:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dec:	f7ff f84c 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8004df0:	61f8      	str	r0, [r7, #28]
        break;
 8004df2:	e010      	b.n	8004e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b8f      	ldr	r3, [pc, #572]	@ (8005034 <UART_SetConfig+0x56c>)
 8004df6:	61fb      	str	r3, [r7, #28]
        break;
 8004df8:	e00d      	b.n	8004e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe ffad 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8004dfe:	61f8      	str	r0, [r7, #28]
        break;
 8004e00:	e009      	b.n	8004e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e06:	61fb      	str	r3, [r7, #28]
        break;
 8004e08:	e005      	b.n	8004e16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80fb 	beq.w	8005014 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d305      	bcc.n	8004e3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d903      	bls.n	8004e42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e40:	e0e8      	b.n	8005014 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2200      	movs	r2, #0
 8004e46:	461c      	mov	r4, r3
 8004e48:	4615      	mov	r5, r2
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	022b      	lsls	r3, r5, #8
 8004e54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e58:	0222      	lsls	r2, r4, #8
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	6849      	ldr	r1, [r1, #4]
 8004e5e:	0849      	lsrs	r1, r1, #1
 8004e60:	2000      	movs	r0, #0
 8004e62:	4688      	mov	r8, r1
 8004e64:	4681      	mov	r9, r0
 8004e66:	eb12 0a08 	adds.w	sl, r2, r8
 8004e6a:	eb43 0b09 	adc.w	fp, r3, r9
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e7c:	4650      	mov	r0, sl
 8004e7e:	4659      	mov	r1, fp
 8004e80:	f7fb f9fe 	bl	8000280 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e92:	d308      	bcc.n	8004ea6 <UART_SetConfig+0x3de>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d204      	bcs.n	8004ea6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e0b6      	b.n	8005014 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004eac:	e0b2      	b.n	8005014 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	d15e      	bne.n	8004f76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d828      	bhi.n	8004f12 <UART_SetConfig+0x44a>
 8004ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x400>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe ffcc 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	61f8      	str	r0, [r7, #28]
        break;
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe ffde 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61f8      	str	r0, [r7, #28]
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <UART_SetConfig+0x56c>)
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fe ff29 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8004f06:	61f8      	str	r0, [r7, #28]
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d077      	beq.n	8005014 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005a      	lsls	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d916      	bls.n	8004f6e <UART_SetConfig+0x4a6>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f46:	d212      	bcs.n	8004f6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f023 030f 	bic.w	r3, r3, #15
 8004f50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	8afa      	ldrh	r2, [r7, #22]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e052      	b.n	8005014 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f74:	e04e      	b.n	8005014 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d827      	bhi.n	8004fce <UART_SetConfig+0x506>
 8004f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0x4bc>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe ff6e 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e014      	b.n	8004fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe ff80 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	61f8      	str	r0, [r7, #28]
        break;
 8004fb6:	e010      	b.n	8004fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <UART_SetConfig+0x56c>)
 8004fba:	61fb      	str	r3, [r7, #28]
        break;
 8004fbc:	e00d      	b.n	8004fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fe fecb 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8004fc2:	61f8      	str	r0, [r7, #28]
        break;
 8004fc4:	e009      	b.n	8004fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e005      	b.n	8004fda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d019      	beq.n	8005014 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085a      	lsrs	r2, r3, #1
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d909      	bls.n	800500e <UART_SetConfig+0x546>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005000:	d205      	bcs.n	800500e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e002      	b.n	8005014 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005020:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005024:	4618      	mov	r0, r3
 8005026:	3728      	adds	r7, #40	@ 0x28
 8005028:	46bd      	mov	sp, r7
 800502a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502e:	bf00      	nop
 8005030:	40008000 	.word	0x40008000
 8005034:	00f42400 	.word	0x00f42400

08005038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005136:	d10a      	bne.n	800514e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b098      	sub	sp, #96	@ 0x60
 8005180:	af02      	add	r7, sp, #8
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800518c:	f7fc f9e6 	bl	800155c <HAL_GetTick>
 8005190:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d12e      	bne.n	80051fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f88c 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d021      	beq.n	80051fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e062      	b.n	80052c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d149      	bne.n	80052a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005214:	2200      	movs	r2, #0
 8005216:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f856 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d03c      	beq.n	80052a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	623b      	str	r3, [r7, #32]
   return(result);
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005244:	633b      	str	r3, [r7, #48]	@ 0x30
 8005246:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800524a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60fb      	str	r3, [r7, #12]
   return(result);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005278:	61fa      	str	r2, [r7, #28]
 800527a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	617b      	str	r3, [r7, #20]
   return(result);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e011      	b.n	80052c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3758      	adds	r7, #88	@ 0x58
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052dc:	e04f      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e4:	d04b      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7fc f939 	bl	800155c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <UART_WaitOnFlagUntilTimeout+0x30>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e04e      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d037      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b80      	cmp	r3, #128	@ 0x80
 8005312:	d034      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d031      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d110      	bne.n	800534a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f838 	bl	80053a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2208      	movs	r2, #8
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e029      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005358:	d111      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f81e 	bl	80053a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e00f      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	429a      	cmp	r2, r3
 800539a:	d0a0      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b095      	sub	sp, #84	@ 0x54
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005418:	2b01      	cmp	r3, #1
 800541a:	d118      	bne.n	800544e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	60bb      	str	r3, [r7, #8]
   return(result);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f023 0310 	bic.w	r3, r3, #16
 8005430:	647b      	str	r3, [r7, #68]	@ 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	613b      	str	r3, [r7, #16]
   return(result);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e6      	bne.n	800541c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005462:	bf00      	nop
 8005464:	3754      	adds	r7, #84	@ 0x54
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <siprintf>:
 8005470:	b40e      	push	{r1, r2, r3}
 8005472:	b500      	push	{lr}
 8005474:	b09c      	sub	sp, #112	@ 0x70
 8005476:	ab1d      	add	r3, sp, #116	@ 0x74
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	9006      	str	r0, [sp, #24]
 800547c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005480:	4809      	ldr	r0, [pc, #36]	@ (80054a8 <siprintf+0x38>)
 8005482:	9107      	str	r1, [sp, #28]
 8005484:	9104      	str	r1, [sp, #16]
 8005486:	4909      	ldr	r1, [pc, #36]	@ (80054ac <siprintf+0x3c>)
 8005488:	f853 2b04 	ldr.w	r2, [r3], #4
 800548c:	9105      	str	r1, [sp, #20]
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	a902      	add	r1, sp, #8
 8005494:	f000 f8d6 	bl	8005644 <_svfiprintf_r>
 8005498:	9b02      	ldr	r3, [sp, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	b01c      	add	sp, #112	@ 0x70
 80054a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a4:	b003      	add	sp, #12
 80054a6:	4770      	bx	lr
 80054a8:	20000020 	.word	0x20000020
 80054ac:	ffff0208 	.word	0xffff0208

080054b0 <_vsniprintf_r>:
 80054b0:	b530      	push	{r4, r5, lr}
 80054b2:	4614      	mov	r4, r2
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	b09b      	sub	sp, #108	@ 0x6c
 80054b8:	4605      	mov	r5, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	da05      	bge.n	80054ca <_vsniprintf_r+0x1a>
 80054be:	238b      	movs	r3, #139	@ 0x8b
 80054c0:	6003      	str	r3, [r0, #0]
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054c6:	b01b      	add	sp, #108	@ 0x6c
 80054c8:	bd30      	pop	{r4, r5, pc}
 80054ca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80054ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80054d2:	bf14      	ite	ne
 80054d4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80054d8:	4623      	moveq	r3, r4
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	9305      	str	r3, [sp, #20]
 80054de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054e2:	9100      	str	r1, [sp, #0]
 80054e4:	9104      	str	r1, [sp, #16]
 80054e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80054ea:	4669      	mov	r1, sp
 80054ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80054ee:	f000 f8a9 	bl	8005644 <_svfiprintf_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	bfbc      	itt	lt
 80054f6:	238b      	movlt	r3, #139	@ 0x8b
 80054f8:	602b      	strlt	r3, [r5, #0]
 80054fa:	2c00      	cmp	r4, #0
 80054fc:	d0e3      	beq.n	80054c6 <_vsniprintf_r+0x16>
 80054fe:	9b00      	ldr	r3, [sp, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e7df      	b.n	80054c6 <_vsniprintf_r+0x16>
	...

08005508 <vsniprintf>:
 8005508:	b507      	push	{r0, r1, r2, lr}
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	460a      	mov	r2, r1
 8005510:	4601      	mov	r1, r0
 8005512:	4803      	ldr	r0, [pc, #12]	@ (8005520 <vsniprintf+0x18>)
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f7ff ffcb 	bl	80054b0 <_vsniprintf_r>
 800551a:	b003      	add	sp, #12
 800551c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005520:	20000020 	.word	0x20000020

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	@ (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000020 	.word	0x20000020

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	@ (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	@ (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	@ (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	@ (8005584 <__libc_init_array+0x44>)
 8005554:	f000 fc66 	bl	8005e24 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	080060bc 	.word	0x080060bc
 800557c:	080060bc 	.word	0x080060bc
 8005580:	080060bc 	.word	0x080060bc
 8005584:	080060c0 	.word	0x080060c0

08005588 <__retarget_lock_acquire_recursive>:
 8005588:	4770      	bx	lr

0800558a <__retarget_lock_release_recursive>:
 800558a:	4770      	bx	lr

0800558c <__ssputs_r>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	688e      	ldr	r6, [r1, #8]
 8005592:	461f      	mov	r7, r3
 8005594:	42be      	cmp	r6, r7
 8005596:	680b      	ldr	r3, [r1, #0]
 8005598:	4682      	mov	sl, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4690      	mov	r8, r2
 800559e:	d82d      	bhi.n	80055fc <__ssputs_r+0x70>
 80055a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055a8:	d026      	beq.n	80055f8 <__ssputs_r+0x6c>
 80055aa:	6965      	ldr	r5, [r4, #20]
 80055ac:	6909      	ldr	r1, [r1, #16]
 80055ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055b2:	eba3 0901 	sub.w	r9, r3, r1
 80055b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ba:	1c7b      	adds	r3, r7, #1
 80055bc:	444b      	add	r3, r9
 80055be:	106d      	asrs	r5, r5, #1
 80055c0:	429d      	cmp	r5, r3
 80055c2:	bf38      	it	cc
 80055c4:	461d      	movcc	r5, r3
 80055c6:	0553      	lsls	r3, r2, #21
 80055c8:	d527      	bpl.n	800561a <__ssputs_r+0x8e>
 80055ca:	4629      	mov	r1, r5
 80055cc:	f000 f958 	bl	8005880 <_malloc_r>
 80055d0:	4606      	mov	r6, r0
 80055d2:	b360      	cbz	r0, 800562e <__ssputs_r+0xa2>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	464a      	mov	r2, r9
 80055d8:	f000 fbc4 	bl	8005d64 <memcpy>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	6126      	str	r6, [r4, #16]
 80055ea:	6165      	str	r5, [r4, #20]
 80055ec:	444e      	add	r6, r9
 80055ee:	eba5 0509 	sub.w	r5, r5, r9
 80055f2:	6026      	str	r6, [r4, #0]
 80055f4:	60a5      	str	r5, [r4, #8]
 80055f6:	463e      	mov	r6, r7
 80055f8:	42be      	cmp	r6, r7
 80055fa:	d900      	bls.n	80055fe <__ssputs_r+0x72>
 80055fc:	463e      	mov	r6, r7
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	4632      	mov	r2, r6
 8005602:	4641      	mov	r1, r8
 8005604:	f000 fb84 	bl	8005d10 <memmove>
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	1b9b      	subs	r3, r3, r6
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4433      	add	r3, r6
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	2000      	movs	r0, #0
 8005616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561a:	462a      	mov	r2, r5
 800561c:	f000 fb4a 	bl	8005cb4 <_realloc_r>
 8005620:	4606      	mov	r6, r0
 8005622:	2800      	cmp	r0, #0
 8005624:	d1e0      	bne.n	80055e8 <__ssputs_r+0x5c>
 8005626:	6921      	ldr	r1, [r4, #16]
 8005628:	4650      	mov	r0, sl
 800562a:	f000 fba9 	bl	8005d80 <_free_r>
 800562e:	230c      	movs	r3, #12
 8005630:	f8ca 3000 	str.w	r3, [sl]
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005640:	e7e9      	b.n	8005616 <__ssputs_r+0x8a>
	...

08005644 <_svfiprintf_r>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	4698      	mov	r8, r3
 800564a:	898b      	ldrh	r3, [r1, #12]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	b09d      	sub	sp, #116	@ 0x74
 8005650:	4607      	mov	r7, r0
 8005652:	460d      	mov	r5, r1
 8005654:	4614      	mov	r4, r2
 8005656:	d510      	bpl.n	800567a <_svfiprintf_r+0x36>
 8005658:	690b      	ldr	r3, [r1, #16]
 800565a:	b973      	cbnz	r3, 800567a <_svfiprintf_r+0x36>
 800565c:	2140      	movs	r1, #64	@ 0x40
 800565e:	f000 f90f 	bl	8005880 <_malloc_r>
 8005662:	6028      	str	r0, [r5, #0]
 8005664:	6128      	str	r0, [r5, #16]
 8005666:	b930      	cbnz	r0, 8005676 <_svfiprintf_r+0x32>
 8005668:	230c      	movs	r3, #12
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005670:	b01d      	add	sp, #116	@ 0x74
 8005672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005676:	2340      	movs	r3, #64	@ 0x40
 8005678:	616b      	str	r3, [r5, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	9309      	str	r3, [sp, #36]	@ 0x24
 800567e:	2320      	movs	r3, #32
 8005680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005684:	f8cd 800c 	str.w	r8, [sp, #12]
 8005688:	2330      	movs	r3, #48	@ 0x30
 800568a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005828 <_svfiprintf_r+0x1e4>
 800568e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005692:	f04f 0901 	mov.w	r9, #1
 8005696:	4623      	mov	r3, r4
 8005698:	469a      	mov	sl, r3
 800569a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800569e:	b10a      	cbz	r2, 80056a4 <_svfiprintf_r+0x60>
 80056a0:	2a25      	cmp	r2, #37	@ 0x25
 80056a2:	d1f9      	bne.n	8005698 <_svfiprintf_r+0x54>
 80056a4:	ebba 0b04 	subs.w	fp, sl, r4
 80056a8:	d00b      	beq.n	80056c2 <_svfiprintf_r+0x7e>
 80056aa:	465b      	mov	r3, fp
 80056ac:	4622      	mov	r2, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ff6b 	bl	800558c <__ssputs_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	f000 80a7 	beq.w	800580a <_svfiprintf_r+0x1c6>
 80056bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056be:	445a      	add	r2, fp
 80056c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 809f 	beq.w	800580a <_svfiprintf_r+0x1c6>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d6:	f10a 0a01 	add.w	sl, sl, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	9307      	str	r3, [sp, #28]
 80056de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80056e4:	4654      	mov	r4, sl
 80056e6:	2205      	movs	r2, #5
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	484e      	ldr	r0, [pc, #312]	@ (8005828 <_svfiprintf_r+0x1e4>)
 80056ee:	f7fa fd77 	bl	80001e0 <memchr>
 80056f2:	9a04      	ldr	r2, [sp, #16]
 80056f4:	b9d8      	cbnz	r0, 800572e <_svfiprintf_r+0xea>
 80056f6:	06d0      	lsls	r0, r2, #27
 80056f8:	bf44      	itt	mi
 80056fa:	2320      	movmi	r3, #32
 80056fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005700:	0711      	lsls	r1, r2, #28
 8005702:	bf44      	itt	mi
 8005704:	232b      	movmi	r3, #43	@ 0x2b
 8005706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005710:	d015      	beq.n	800573e <_svfiprintf_r+0xfa>
 8005712:	9a07      	ldr	r2, [sp, #28]
 8005714:	4654      	mov	r4, sl
 8005716:	2000      	movs	r0, #0
 8005718:	f04f 0c0a 	mov.w	ip, #10
 800571c:	4621      	mov	r1, r4
 800571e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005722:	3b30      	subs	r3, #48	@ 0x30
 8005724:	2b09      	cmp	r3, #9
 8005726:	d94b      	bls.n	80057c0 <_svfiprintf_r+0x17c>
 8005728:	b1b0      	cbz	r0, 8005758 <_svfiprintf_r+0x114>
 800572a:	9207      	str	r2, [sp, #28]
 800572c:	e014      	b.n	8005758 <_svfiprintf_r+0x114>
 800572e:	eba0 0308 	sub.w	r3, r0, r8
 8005732:	fa09 f303 	lsl.w	r3, r9, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	46a2      	mov	sl, r4
 800573c:	e7d2      	b.n	80056e4 <_svfiprintf_r+0xa0>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	1d19      	adds	r1, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	9103      	str	r1, [sp, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfbb      	ittet	lt
 800574a:	425b      	neglt	r3, r3
 800574c:	f042 0202 	orrlt.w	r2, r2, #2
 8005750:	9307      	strge	r3, [sp, #28]
 8005752:	9307      	strlt	r3, [sp, #28]
 8005754:	bfb8      	it	lt
 8005756:	9204      	strlt	r2, [sp, #16]
 8005758:	7823      	ldrb	r3, [r4, #0]
 800575a:	2b2e      	cmp	r3, #46	@ 0x2e
 800575c:	d10a      	bne.n	8005774 <_svfiprintf_r+0x130>
 800575e:	7863      	ldrb	r3, [r4, #1]
 8005760:	2b2a      	cmp	r3, #42	@ 0x2a
 8005762:	d132      	bne.n	80057ca <_svfiprintf_r+0x186>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	9203      	str	r2, [sp, #12]
 800576c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005770:	3402      	adds	r4, #2
 8005772:	9305      	str	r3, [sp, #20]
 8005774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005838 <_svfiprintf_r+0x1f4>
 8005778:	7821      	ldrb	r1, [r4, #0]
 800577a:	2203      	movs	r2, #3
 800577c:	4650      	mov	r0, sl
 800577e:	f7fa fd2f 	bl	80001e0 <memchr>
 8005782:	b138      	cbz	r0, 8005794 <_svfiprintf_r+0x150>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	eba0 000a 	sub.w	r0, r0, sl
 800578a:	2240      	movs	r2, #64	@ 0x40
 800578c:	4082      	lsls	r2, r0
 800578e:	4313      	orrs	r3, r2
 8005790:	3401      	adds	r4, #1
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005798:	4824      	ldr	r0, [pc, #144]	@ (800582c <_svfiprintf_r+0x1e8>)
 800579a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800579e:	2206      	movs	r2, #6
 80057a0:	f7fa fd1e 	bl	80001e0 <memchr>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d036      	beq.n	8005816 <_svfiprintf_r+0x1d2>
 80057a8:	4b21      	ldr	r3, [pc, #132]	@ (8005830 <_svfiprintf_r+0x1ec>)
 80057aa:	bb1b      	cbnz	r3, 80057f4 <_svfiprintf_r+0x1b0>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	3307      	adds	r3, #7
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	3308      	adds	r3, #8
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ba:	4433      	add	r3, r6
 80057bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057be:	e76a      	b.n	8005696 <_svfiprintf_r+0x52>
 80057c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c4:	460c      	mov	r4, r1
 80057c6:	2001      	movs	r0, #1
 80057c8:	e7a8      	b.n	800571c <_svfiprintf_r+0xd8>
 80057ca:	2300      	movs	r3, #0
 80057cc:	3401      	adds	r4, #1
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	4619      	mov	r1, r3
 80057d2:	f04f 0c0a 	mov.w	ip, #10
 80057d6:	4620      	mov	r0, r4
 80057d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057dc:	3a30      	subs	r2, #48	@ 0x30
 80057de:	2a09      	cmp	r2, #9
 80057e0:	d903      	bls.n	80057ea <_svfiprintf_r+0x1a6>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0c6      	beq.n	8005774 <_svfiprintf_r+0x130>
 80057e6:	9105      	str	r1, [sp, #20]
 80057e8:	e7c4      	b.n	8005774 <_svfiprintf_r+0x130>
 80057ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ee:	4604      	mov	r4, r0
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7f0      	b.n	80057d6 <_svfiprintf_r+0x192>
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <_svfiprintf_r+0x1f0>)
 80057fc:	a904      	add	r1, sp, #16
 80057fe:	4638      	mov	r0, r7
 8005800:	f3af 8000 	nop.w
 8005804:	1c42      	adds	r2, r0, #1
 8005806:	4606      	mov	r6, r0
 8005808:	d1d6      	bne.n	80057b8 <_svfiprintf_r+0x174>
 800580a:	89ab      	ldrh	r3, [r5, #12]
 800580c:	065b      	lsls	r3, r3, #25
 800580e:	f53f af2d 	bmi.w	800566c <_svfiprintf_r+0x28>
 8005812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005814:	e72c      	b.n	8005670 <_svfiprintf_r+0x2c>
 8005816:	ab03      	add	r3, sp, #12
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462a      	mov	r2, r5
 800581c:	4b05      	ldr	r3, [pc, #20]	@ (8005834 <_svfiprintf_r+0x1f0>)
 800581e:	a904      	add	r1, sp, #16
 8005820:	4638      	mov	r0, r7
 8005822:	f000 f91b 	bl	8005a5c <_printf_i>
 8005826:	e7ed      	b.n	8005804 <_svfiprintf_r+0x1c0>
 8005828:	08006080 	.word	0x08006080
 800582c:	0800608a 	.word	0x0800608a
 8005830:	00000000 	.word	0x00000000
 8005834:	0800558d 	.word	0x0800558d
 8005838:	08006086 	.word	0x08006086

0800583c <sbrk_aligned>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4e0f      	ldr	r6, [pc, #60]	@ (800587c <sbrk_aligned+0x40>)
 8005840:	460c      	mov	r4, r1
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	4605      	mov	r5, r0
 8005846:	b911      	cbnz	r1, 800584e <sbrk_aligned+0x12>
 8005848:	f000 fa7c 	bl	8005d44 <_sbrk_r>
 800584c:	6030      	str	r0, [r6, #0]
 800584e:	4621      	mov	r1, r4
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fa77 	bl	8005d44 <_sbrk_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d103      	bne.n	8005862 <sbrk_aligned+0x26>
 800585a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800585e:	4620      	mov	r0, r4
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d0f8      	beq.n	800585e <sbrk_aligned+0x22>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fa68 	bl	8005d44 <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d1f2      	bne.n	800585e <sbrk_aligned+0x22>
 8005878:	e7ef      	b.n	800585a <sbrk_aligned+0x1e>
 800587a:	bf00      	nop
 800587c:	200004b4 	.word	0x200004b4

08005880 <_malloc_r>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	1ccd      	adds	r5, r1, #3
 8005886:	f025 0503 	bic.w	r5, r5, #3
 800588a:	3508      	adds	r5, #8
 800588c:	2d0c      	cmp	r5, #12
 800588e:	bf38      	it	cc
 8005890:	250c      	movcc	r5, #12
 8005892:	2d00      	cmp	r5, #0
 8005894:	4606      	mov	r6, r0
 8005896:	db01      	blt.n	800589c <_malloc_r+0x1c>
 8005898:	42a9      	cmp	r1, r5
 800589a:	d904      	bls.n	80058a6 <_malloc_r+0x26>
 800589c:	230c      	movs	r3, #12
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	2000      	movs	r0, #0
 80058a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800597c <_malloc_r+0xfc>
 80058aa:	f000 f9f7 	bl	8005c9c <__malloc_lock>
 80058ae:	f8d8 3000 	ldr.w	r3, [r8]
 80058b2:	461c      	mov	r4, r3
 80058b4:	bb44      	cbnz	r4, 8005908 <_malloc_r+0x88>
 80058b6:	4629      	mov	r1, r5
 80058b8:	4630      	mov	r0, r6
 80058ba:	f7ff ffbf 	bl	800583c <sbrk_aligned>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	4604      	mov	r4, r0
 80058c2:	d158      	bne.n	8005976 <_malloc_r+0xf6>
 80058c4:	f8d8 4000 	ldr.w	r4, [r8]
 80058c8:	4627      	mov	r7, r4
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	d143      	bne.n	8005956 <_malloc_r+0xd6>
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	d04b      	beq.n	800596a <_malloc_r+0xea>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4639      	mov	r1, r7
 80058d6:	4630      	mov	r0, r6
 80058d8:	eb04 0903 	add.w	r9, r4, r3
 80058dc:	f000 fa32 	bl	8005d44 <_sbrk_r>
 80058e0:	4581      	cmp	r9, r0
 80058e2:	d142      	bne.n	800596a <_malloc_r+0xea>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	1a6d      	subs	r5, r5, r1
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f7ff ffa6 	bl	800583c <sbrk_aligned>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d03a      	beq.n	800596a <_malloc_r+0xea>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	442b      	add	r3, r5
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	f8d8 3000 	ldr.w	r3, [r8]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	bb62      	cbnz	r2, 800595c <_malloc_r+0xdc>
 8005902:	f8c8 7000 	str.w	r7, [r8]
 8005906:	e00f      	b.n	8005928 <_malloc_r+0xa8>
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	1b52      	subs	r2, r2, r5
 800590c:	d420      	bmi.n	8005950 <_malloc_r+0xd0>
 800590e:	2a0b      	cmp	r2, #11
 8005910:	d917      	bls.n	8005942 <_malloc_r+0xc2>
 8005912:	1961      	adds	r1, r4, r5
 8005914:	42a3      	cmp	r3, r4
 8005916:	6025      	str	r5, [r4, #0]
 8005918:	bf18      	it	ne
 800591a:	6059      	strne	r1, [r3, #4]
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	bf08      	it	eq
 8005920:	f8c8 1000 	streq.w	r1, [r8]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f9bd 	bl	8005ca8 <__malloc_unlock>
 800592e:	f104 000b 	add.w	r0, r4, #11
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	f020 0007 	bic.w	r0, r0, #7
 8005938:	1ac2      	subs	r2, r0, r3
 800593a:	bf1c      	itt	ne
 800593c:	1a1b      	subne	r3, r3, r0
 800593e:	50a3      	strne	r3, [r4, r2]
 8005940:	e7af      	b.n	80058a2 <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	f8c8 2000 	streq.w	r2, [r8]
 800594c:	605a      	strne	r2, [r3, #4]
 800594e:	e7eb      	b.n	8005928 <_malloc_r+0xa8>
 8005950:	4623      	mov	r3, r4
 8005952:	6864      	ldr	r4, [r4, #4]
 8005954:	e7ae      	b.n	80058b4 <_malloc_r+0x34>
 8005956:	463c      	mov	r4, r7
 8005958:	687f      	ldr	r7, [r7, #4]
 800595a:	e7b6      	b.n	80058ca <_malloc_r+0x4a>
 800595c:	461a      	mov	r2, r3
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	42a3      	cmp	r3, r4
 8005962:	d1fb      	bne.n	800595c <_malloc_r+0xdc>
 8005964:	2300      	movs	r3, #0
 8005966:	6053      	str	r3, [r2, #4]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa8>
 800596a:	230c      	movs	r3, #12
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	4630      	mov	r0, r6
 8005970:	f000 f99a 	bl	8005ca8 <__malloc_unlock>
 8005974:	e794      	b.n	80058a0 <_malloc_r+0x20>
 8005976:	6005      	str	r5, [r0, #0]
 8005978:	e7d6      	b.n	8005928 <_malloc_r+0xa8>
 800597a:	bf00      	nop
 800597c:	200004b8 	.word	0x200004b8

08005980 <_printf_common>:
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	4616      	mov	r6, r2
 8005986:	4698      	mov	r8, r3
 8005988:	688a      	ldr	r2, [r1, #8]
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005990:	4293      	cmp	r3, r2
 8005992:	bfb8      	it	lt
 8005994:	4613      	movlt	r3, r2
 8005996:	6033      	str	r3, [r6, #0]
 8005998:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800599c:	4607      	mov	r7, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b10a      	cbz	r2, 80059a6 <_printf_common+0x26>
 80059a2:	3301      	adds	r3, #1
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0699      	lsls	r1, r3, #26
 80059aa:	bf42      	ittt	mi
 80059ac:	6833      	ldrmi	r3, [r6, #0]
 80059ae:	3302      	addmi	r3, #2
 80059b0:	6033      	strmi	r3, [r6, #0]
 80059b2:	6825      	ldr	r5, [r4, #0]
 80059b4:	f015 0506 	ands.w	r5, r5, #6
 80059b8:	d106      	bne.n	80059c8 <_printf_common+0x48>
 80059ba:	f104 0a19 	add.w	sl, r4, #25
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	6832      	ldr	r2, [r6, #0]
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dc26      	bgt.n	8005a16 <_printf_common+0x96>
 80059c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	3b00      	subs	r3, #0
 80059d0:	bf18      	it	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d42b      	bmi.n	8005a30 <_printf_common+0xb0>
 80059d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059dc:	4641      	mov	r1, r8
 80059de:	4638      	mov	r0, r7
 80059e0:	47c8      	blx	r9
 80059e2:	3001      	adds	r0, #1
 80059e4:	d01e      	beq.n	8005a24 <_printf_common+0xa4>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	6922      	ldr	r2, [r4, #16]
 80059ea:	f003 0306 	and.w	r3, r3, #6
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	bf02      	ittt	eq
 80059f2:	68e5      	ldreq	r5, [r4, #12]
 80059f4:	6833      	ldreq	r3, [r6, #0]
 80059f6:	1aed      	subeq	r5, r5, r3
 80059f8:	68a3      	ldr	r3, [r4, #8]
 80059fa:	bf0c      	ite	eq
 80059fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a00:	2500      	movne	r5, #0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	bfc4      	itt	gt
 8005a06:	1a9b      	subgt	r3, r3, r2
 8005a08:	18ed      	addgt	r5, r5, r3
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	341a      	adds	r4, #26
 8005a0e:	42b5      	cmp	r5, r6
 8005a10:	d11a      	bne.n	8005a48 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e008      	b.n	8005a28 <_printf_common+0xa8>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	47c8      	blx	r9
 8005a20:	3001      	adds	r0, #1
 8005a22:	d103      	bne.n	8005a2c <_printf_common+0xac>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	e7c6      	b.n	80059be <_printf_common+0x3e>
 8005a30:	18e1      	adds	r1, r4, r3
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	2030      	movs	r0, #48	@ 0x30
 8005a36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a3a:	4422      	add	r2, r4
 8005a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a44:	3302      	adds	r3, #2
 8005a46:	e7c7      	b.n	80059d8 <_printf_common+0x58>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c8      	blx	r9
 8005a52:	3001      	adds	r0, #1
 8005a54:	d0e6      	beq.n	8005a24 <_printf_common+0xa4>
 8005a56:	3601      	adds	r6, #1
 8005a58:	e7d9      	b.n	8005a0e <_printf_common+0x8e>
	...

08005a5c <_printf_i>:
 8005a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	7e0f      	ldrb	r7, [r1, #24]
 8005a62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a64:	2f78      	cmp	r7, #120	@ 0x78
 8005a66:	4691      	mov	r9, r2
 8005a68:	4680      	mov	r8, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a72:	d807      	bhi.n	8005a84 <_printf_i+0x28>
 8005a74:	2f62      	cmp	r7, #98	@ 0x62
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x32>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	f000 80d2 	beq.w	8005c22 <_printf_i+0x1c6>
 8005a7e:	2f58      	cmp	r7, #88	@ 0x58
 8005a80:	f000 80b9 	beq.w	8005bf6 <_printf_i+0x19a>
 8005a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a8c:	e03a      	b.n	8005b04 <_printf_i+0xa8>
 8005a8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a92:	2b15      	cmp	r3, #21
 8005a94:	d8f6      	bhi.n	8005a84 <_printf_i+0x28>
 8005a96:	a101      	add	r1, pc, #4	@ (adr r1, 8005a9c <_printf_i+0x40>)
 8005a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005a85 	.word	0x08005a85
 8005aa8:	08005a85 	.word	0x08005a85
 8005aac:	08005a85 	.word	0x08005a85
 8005ab0:	08005a85 	.word	0x08005a85
 8005ab4:	08005b09 	.word	0x08005b09
 8005ab8:	08005a85 	.word	0x08005a85
 8005abc:	08005a85 	.word	0x08005a85
 8005ac0:	08005a85 	.word	0x08005a85
 8005ac4:	08005a85 	.word	0x08005a85
 8005ac8:	08005c09 	.word	0x08005c09
 8005acc:	08005b33 	.word	0x08005b33
 8005ad0:	08005bc3 	.word	0x08005bc3
 8005ad4:	08005a85 	.word	0x08005a85
 8005ad8:	08005a85 	.word	0x08005a85
 8005adc:	08005c2b 	.word	0x08005c2b
 8005ae0:	08005a85 	.word	0x08005a85
 8005ae4:	08005b33 	.word	0x08005b33
 8005ae8:	08005a85 	.word	0x08005a85
 8005aec:	08005a85 	.word	0x08005a85
 8005af0:	08005bcb 	.word	0x08005bcb
 8005af4:	6833      	ldr	r3, [r6, #0]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6032      	str	r2, [r6, #0]
 8005afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b04:	2301      	movs	r3, #1
 8005b06:	e09d      	b.n	8005c44 <_printf_i+0x1e8>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	1d19      	adds	r1, r3, #4
 8005b0e:	6031      	str	r1, [r6, #0]
 8005b10:	0606      	lsls	r6, r0, #24
 8005b12:	d501      	bpl.n	8005b18 <_printf_i+0xbc>
 8005b14:	681d      	ldr	r5, [r3, #0]
 8005b16:	e003      	b.n	8005b20 <_printf_i+0xc4>
 8005b18:	0645      	lsls	r5, r0, #25
 8005b1a:	d5fb      	bpl.n	8005b14 <_printf_i+0xb8>
 8005b1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	da03      	bge.n	8005b2c <_printf_i+0xd0>
 8005b24:	232d      	movs	r3, #45	@ 0x2d
 8005b26:	426d      	negs	r5, r5
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b2c:	4859      	ldr	r0, [pc, #356]	@ (8005c94 <_printf_i+0x238>)
 8005b2e:	230a      	movs	r3, #10
 8005b30:	e011      	b.n	8005b56 <_printf_i+0xfa>
 8005b32:	6821      	ldr	r1, [r4, #0]
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	0608      	lsls	r0, r1, #24
 8005b38:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b3c:	d402      	bmi.n	8005b44 <_printf_i+0xe8>
 8005b3e:	0649      	lsls	r1, r1, #25
 8005b40:	bf48      	it	mi
 8005b42:	b2ad      	uxthmi	r5, r5
 8005b44:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b46:	4853      	ldr	r0, [pc, #332]	@ (8005c94 <_printf_i+0x238>)
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	bf14      	ite	ne
 8005b4c:	230a      	movne	r3, #10
 8005b4e:	2308      	moveq	r3, #8
 8005b50:	2100      	movs	r1, #0
 8005b52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b56:	6866      	ldr	r6, [r4, #4]
 8005b58:	60a6      	str	r6, [r4, #8]
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	bfa2      	ittt	ge
 8005b5e:	6821      	ldrge	r1, [r4, #0]
 8005b60:	f021 0104 	bicge.w	r1, r1, #4
 8005b64:	6021      	strge	r1, [r4, #0]
 8005b66:	b90d      	cbnz	r5, 8005b6c <_printf_i+0x110>
 8005b68:	2e00      	cmp	r6, #0
 8005b6a:	d04b      	beq.n	8005c04 <_printf_i+0x1a8>
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b72:	fb03 5711 	mls	r7, r3, r1, r5
 8005b76:	5dc7      	ldrb	r7, [r0, r7]
 8005b78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b7c:	462f      	mov	r7, r5
 8005b7e:	42bb      	cmp	r3, r7
 8005b80:	460d      	mov	r5, r1
 8005b82:	d9f4      	bls.n	8005b6e <_printf_i+0x112>
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d10b      	bne.n	8005ba0 <_printf_i+0x144>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	07df      	lsls	r7, r3, #31
 8005b8c:	d508      	bpl.n	8005ba0 <_printf_i+0x144>
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	6861      	ldr	r1, [r4, #4]
 8005b92:	4299      	cmp	r1, r3
 8005b94:	bfde      	ittt	le
 8005b96:	2330      	movle	r3, #48	@ 0x30
 8005b98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005ba0:	1b92      	subs	r2, r2, r6
 8005ba2:	6122      	str	r2, [r4, #16]
 8005ba4:	f8cd a000 	str.w	sl, [sp]
 8005ba8:	464b      	mov	r3, r9
 8005baa:	aa03      	add	r2, sp, #12
 8005bac:	4621      	mov	r1, r4
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f7ff fee6 	bl	8005980 <_printf_common>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d14a      	bne.n	8005c4e <_printf_i+0x1f2>
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bbc:	b004      	add	sp, #16
 8005bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	4833      	ldr	r0, [pc, #204]	@ (8005c98 <_printf_i+0x23c>)
 8005bcc:	2778      	movs	r7, #120	@ 0x78
 8005bce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	6831      	ldr	r1, [r6, #0]
 8005bd6:	061f      	lsls	r7, r3, #24
 8005bd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bdc:	d402      	bmi.n	8005be4 <_printf_i+0x188>
 8005bde:	065f      	lsls	r7, r3, #25
 8005be0:	bf48      	it	mi
 8005be2:	b2ad      	uxthmi	r5, r5
 8005be4:	6031      	str	r1, [r6, #0]
 8005be6:	07d9      	lsls	r1, r3, #31
 8005be8:	bf44      	itt	mi
 8005bea:	f043 0320 	orrmi.w	r3, r3, #32
 8005bee:	6023      	strmi	r3, [r4, #0]
 8005bf0:	b11d      	cbz	r5, 8005bfa <_printf_i+0x19e>
 8005bf2:	2310      	movs	r3, #16
 8005bf4:	e7ac      	b.n	8005b50 <_printf_i+0xf4>
 8005bf6:	4827      	ldr	r0, [pc, #156]	@ (8005c94 <_printf_i+0x238>)
 8005bf8:	e7e9      	b.n	8005bce <_printf_i+0x172>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f023 0320 	bic.w	r3, r3, #32
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	e7f6      	b.n	8005bf2 <_printf_i+0x196>
 8005c04:	4616      	mov	r6, r2
 8005c06:	e7bd      	b.n	8005b84 <_printf_i+0x128>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	6825      	ldr	r5, [r4, #0]
 8005c0c:	6961      	ldr	r1, [r4, #20]
 8005c0e:	1d18      	adds	r0, r3, #4
 8005c10:	6030      	str	r0, [r6, #0]
 8005c12:	062e      	lsls	r6, r5, #24
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	d501      	bpl.n	8005c1c <_printf_i+0x1c0>
 8005c18:	6019      	str	r1, [r3, #0]
 8005c1a:	e002      	b.n	8005c22 <_printf_i+0x1c6>
 8005c1c:	0668      	lsls	r0, r5, #25
 8005c1e:	d5fb      	bpl.n	8005c18 <_printf_i+0x1bc>
 8005c20:	8019      	strh	r1, [r3, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	4616      	mov	r6, r2
 8005c28:	e7bc      	b.n	8005ba4 <_printf_i+0x148>
 8005c2a:	6833      	ldr	r3, [r6, #0]
 8005c2c:	1d1a      	adds	r2, r3, #4
 8005c2e:	6032      	str	r2, [r6, #0]
 8005c30:	681e      	ldr	r6, [r3, #0]
 8005c32:	6862      	ldr	r2, [r4, #4]
 8005c34:	2100      	movs	r1, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7fa fad2 	bl	80001e0 <memchr>
 8005c3c:	b108      	cbz	r0, 8005c42 <_printf_i+0x1e6>
 8005c3e:	1b80      	subs	r0, r0, r6
 8005c40:	6060      	str	r0, [r4, #4]
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	2300      	movs	r3, #0
 8005c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c4c:	e7aa      	b.n	8005ba4 <_printf_i+0x148>
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	4632      	mov	r2, r6
 8005c52:	4649      	mov	r1, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	47d0      	blx	sl
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d0ad      	beq.n	8005bb8 <_printf_i+0x15c>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	079b      	lsls	r3, r3, #30
 8005c60:	d413      	bmi.n	8005c8a <_printf_i+0x22e>
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	4298      	cmp	r0, r3
 8005c68:	bfb8      	it	lt
 8005c6a:	4618      	movlt	r0, r3
 8005c6c:	e7a6      	b.n	8005bbc <_printf_i+0x160>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4632      	mov	r2, r6
 8005c72:	4649      	mov	r1, r9
 8005c74:	4640      	mov	r0, r8
 8005c76:	47d0      	blx	sl
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d09d      	beq.n	8005bb8 <_printf_i+0x15c>
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	9903      	ldr	r1, [sp, #12]
 8005c82:	1a5b      	subs	r3, r3, r1
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dcf2      	bgt.n	8005c6e <_printf_i+0x212>
 8005c88:	e7eb      	b.n	8005c62 <_printf_i+0x206>
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	f104 0619 	add.w	r6, r4, #25
 8005c90:	e7f5      	b.n	8005c7e <_printf_i+0x222>
 8005c92:	bf00      	nop
 8005c94:	08006091 	.word	0x08006091
 8005c98:	080060a2 	.word	0x080060a2

08005c9c <__malloc_lock>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	@ (8005ca4 <__malloc_lock+0x8>)
 8005c9e:	f7ff bc73 	b.w	8005588 <__retarget_lock_acquire_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	200004b0 	.word	0x200004b0

08005ca8 <__malloc_unlock>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	@ (8005cb0 <__malloc_unlock+0x8>)
 8005caa:	f7ff bc6e 	b.w	800558a <__retarget_lock_release_recursive>
 8005cae:	bf00      	nop
 8005cb0:	200004b0 	.word	0x200004b0

08005cb4 <_realloc_r>:
 8005cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4615      	mov	r5, r2
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b921      	cbnz	r1, 8005cca <_realloc_r+0x16>
 8005cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	f7ff bddb 	b.w	8005880 <_malloc_r>
 8005cca:	b92a      	cbnz	r2, 8005cd8 <_realloc_r+0x24>
 8005ccc:	f000 f858 	bl	8005d80 <_free_r>
 8005cd0:	2400      	movs	r4, #0
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	f000 f89c 	bl	8005e14 <_malloc_usable_size_r>
 8005cdc:	4285      	cmp	r5, r0
 8005cde:	4606      	mov	r6, r0
 8005ce0:	d802      	bhi.n	8005ce8 <_realloc_r+0x34>
 8005ce2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ce6:	d8f4      	bhi.n	8005cd2 <_realloc_r+0x1e>
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fdc8 	bl	8005880 <_malloc_r>
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0ec      	beq.n	8005cd0 <_realloc_r+0x1c>
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	bf28      	it	cs
 8005cfe:	4632      	movcs	r2, r6
 8005d00:	f000 f830 	bl	8005d64 <memcpy>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4640      	mov	r0, r8
 8005d08:	f000 f83a 	bl	8005d80 <_free_r>
 8005d0c:	463c      	mov	r4, r7
 8005d0e:	e7e0      	b.n	8005cd2 <_realloc_r+0x1e>

08005d10 <memmove>:
 8005d10:	4288      	cmp	r0, r1
 8005d12:	b510      	push	{r4, lr}
 8005d14:	eb01 0402 	add.w	r4, r1, r2
 8005d18:	d902      	bls.n	8005d20 <memmove+0x10>
 8005d1a:	4284      	cmp	r4, r0
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	d807      	bhi.n	8005d30 <memmove+0x20>
 8005d20:	1e43      	subs	r3, r0, #1
 8005d22:	42a1      	cmp	r1, r4
 8005d24:	d008      	beq.n	8005d38 <memmove+0x28>
 8005d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d2e:	e7f8      	b.n	8005d22 <memmove+0x12>
 8005d30:	4402      	add	r2, r0
 8005d32:	4601      	mov	r1, r0
 8005d34:	428a      	cmp	r2, r1
 8005d36:	d100      	bne.n	8005d3a <memmove+0x2a>
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d42:	e7f7      	b.n	8005d34 <memmove+0x24>

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d06      	ldr	r5, [pc, #24]	@ (8005d60 <_sbrk_r+0x1c>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	f7fb fb2a 	bl	80013a8 <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	200004bc 	.word	0x200004bc

08005d64 <memcpy>:
 8005d64:	440a      	add	r2, r1
 8005d66:	4291      	cmp	r1, r2
 8005d68:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005d6c:	d100      	bne.n	8005d70 <memcpy+0xc>
 8005d6e:	4770      	bx	lr
 8005d70:	b510      	push	{r4, lr}
 8005d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	d1f9      	bne.n	8005d72 <memcpy+0xe>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <_free_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d041      	beq.n	8005e0c <_free_r+0x8c>
 8005d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8c:	1f0c      	subs	r4, r1, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	18e4      	addlt	r4, r4, r3
 8005d94:	f7ff ff82 	bl	8005c9c <__malloc_lock>
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <_free_r+0x90>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	b933      	cbnz	r3, 8005dac <_free_r+0x2c>
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	6014      	str	r4, [r2, #0]
 8005da2:	4628      	mov	r0, r5
 8005da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da8:	f7ff bf7e 	b.w	8005ca8 <__malloc_unlock>
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d908      	bls.n	8005dc2 <_free_r+0x42>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	1821      	adds	r1, r4, r0
 8005db4:	428b      	cmp	r3, r1
 8005db6:	bf01      	itttt	eq
 8005db8:	6819      	ldreq	r1, [r3, #0]
 8005dba:	685b      	ldreq	r3, [r3, #4]
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	e7ed      	b.n	8005d9e <_free_r+0x1e>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b10b      	cbz	r3, 8005dcc <_free_r+0x4c>
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	d9fa      	bls.n	8005dc2 <_free_r+0x42>
 8005dcc:	6811      	ldr	r1, [r2, #0]
 8005dce:	1850      	adds	r0, r2, r1
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d10b      	bne.n	8005dec <_free_r+0x6c>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	1850      	adds	r0, r2, r1
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	6011      	str	r1, [r2, #0]
 8005dde:	d1e0      	bne.n	8005da2 <_free_r+0x22>
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	6053      	str	r3, [r2, #4]
 8005de6:	4408      	add	r0, r1
 8005de8:	6010      	str	r0, [r2, #0]
 8005dea:	e7da      	b.n	8005da2 <_free_r+0x22>
 8005dec:	d902      	bls.n	8005df4 <_free_r+0x74>
 8005dee:	230c      	movs	r3, #12
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	e7d6      	b.n	8005da2 <_free_r+0x22>
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	1821      	adds	r1, r4, r0
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	bf04      	itt	eq
 8005dfc:	6819      	ldreq	r1, [r3, #0]
 8005dfe:	685b      	ldreq	r3, [r3, #4]
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	bf04      	itt	eq
 8005e04:	1809      	addeq	r1, r1, r0
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	6054      	str	r4, [r2, #4]
 8005e0a:	e7ca      	b.n	8005da2 <_free_r+0x22>
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	200004b8 	.word	0x200004b8

08005e14 <_malloc_usable_size_r>:
 8005e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e18:	1f18      	subs	r0, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bfbc      	itt	lt
 8005e1e:	580b      	ldrlt	r3, [r1, r0]
 8005e20:	18c0      	addlt	r0, r0, r3
 8005e22:	4770      	bx	lr

08005e24 <_init>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	bf00      	nop
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr

08005e30 <_fini>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr
