
PPG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000599c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cec  08005cec  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf4  08005cf4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005cfc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000005c  08005d58  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005d58  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4bd  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002173  00000000  00000000  00016549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000186c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5d  00000000  00000000  00019430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279a5  00000000  00000000  00019e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f415  00000000  00000000  00041832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf36  00000000  00000000  00050c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bb7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  0014bbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b14 	.word	0x08005b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005b14 	.word	0x08005b14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <computeHeartRate>:
WorkMode_t g_workMode = MODE_RED;                   // 默认工作模式 (红光)

// 这里演示用，实际项目中可能更复杂
// 例如一个滤波器、峰值检测或FFT等
static uint16_t computeHeartRate(uint32_t adcValue)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    // 简单映射：HR = 60 + (ADC值 mod 40)
    return 60 + (adcValue % 40);
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <computeHeartRate+0x30>)
 800057c:	fba3 2301 	umull	r2, r3, r3, r1
 8000580:	095a      	lsrs	r2, r3, #5
 8000582:	4613      	mov	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1aca      	subs	r2, r1, r3
 800058c:	b293      	uxth	r3, r2
 800058e:	333c      	adds	r3, #60	@ 0x3c
 8000590:	b29b      	uxth	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	cccccccd 	.word	0xcccccccd

080005a4 <computeSpO2>:

static uint8_t computeSpO2(uint32_t adcValue)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    // 简单映射：SpO2 = 95 + (ADC值 mod 5)
    return 95 + (adcValue % 5);
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <computeSpO2+0x2c>)
 80005b0:	fba3 2301 	umull	r2, r3, r3, r1
 80005b4:	089a      	lsrs	r2, r3, #2
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	b2d3      	uxtb	r3, r2
 80005c0:	335f      	adds	r3, #95	@ 0x5f
 80005c2:	b2db      	uxtb	r3, r3
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	cccccccd 	.word	0xcccccccd

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09c      	sub	sp, #112	@ 0x70
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  char msg[100];
	  uint32_t adcValue = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fe06 	bl	80011ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f9d5 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fafb 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 facb 	bl	8000b84 <MX_DMA_Init>
  MX_ADC1_Init();
 80005ee:	f000 fa23 	bl	8000a38 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 fa97 	bl	8000b24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg, "System Started. Current State: INIT\r\n");
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	49c0      	ldr	r1, [pc, #768]	@ (80008fc <main+0x328>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fdea 	bl	80051d4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fde4 	bl	80001d0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000612:	48bb      	ldr	r0, [pc, #748]	@ (8000900 <main+0x32c>)
 8000614:	f004 f880 	bl	8004718 <HAL_UART_Transmit>

  // 上电后，默认关闭红光和IR
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f002 fcdc 	bl	8002fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f002 fcd6 	bl	8002fdc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // 1. 读取本次的按键事件
	    PressType_t currentPress = g_pressEvent;
 8000630:	4bb4      	ldr	r3, [pc, #720]	@ (8000904 <main+0x330>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	    if (currentPress != PRESS_NONE)
 8000638:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800063c:	2b00      	cmp	r3, #0
 800063e:	f000 810c 	beq.w	800085a <main+0x286>
	    {
	      // 读取到后，马上清除，避免重复触发
	      g_pressEvent = PRESS_NONE;
 8000642:	4bb0      	ldr	r3, [pc, #704]	@ (8000904 <main+0x330>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]

	      // 根据当前系统状态和按键类型，做状态转移或动作
	      switch (g_systemState)
 8000648:	4baf      	ldr	r3, [pc, #700]	@ (8000908 <main+0x334>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b04      	cmp	r3, #4
 800064e:	f200 80f8 	bhi.w	8000842 <main+0x26e>
 8000652:	a201      	add	r2, pc, #4	@ (adr r2, 8000658 <main+0x84>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	0800066d 	.word	0x0800066d
 800065c:	080006a1 	.word	0x080006a1
 8000660:	08000729 	.word	0x08000729
 8000664:	080007af 	.word	0x080007af
 8000668:	080007f9 	.word	0x080007f9
	      {
	        case STATE_INIT:
	          // 在 INIT 下，仅识别长按 => 进入 ADVANCED_SELECT
	          if (currentPress == PRESS_LONG)
 800066c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000670:	2b02      	cmp	r3, #2
 8000672:	f040 80e9 	bne.w	8000848 <main+0x274>
	          {
	            g_systemState = STATE_ADVANCED_SELECT;
 8000676:	4ba4      	ldr	r3, [pc, #656]	@ (8000908 <main+0x334>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> ADVANCED_SELECT\r\n");
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	49a3      	ldr	r1, [pc, #652]	@ (800090c <main+0x338>)
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fda7 	bl	80051d4 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fda1 	bl	80001d0 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	1d39      	adds	r1, r7, #4
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000698:	4899      	ldr	r0, [pc, #612]	@ (8000900 <main+0x32c>)
 800069a:	f004 f83d 	bl	8004718 <HAL_UART_Transmit>
	          }
	          break;
 800069e:	e0d3      	b.n	8000848 <main+0x274>

	        case STATE_ADVANCED_SELECT:
	          if (currentPress == PRESS_SHORT)
 80006a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d125      	bne.n	80006f4 <main+0x120>
	          {
	            // 短按 => 在 心率 / 血氧 之间切换
	            g_measureType = (g_measureType == MEASURE_HR) ? MEASURE_SPO2 : MEASURE_HR;
 80006a8:	4b99      	ldr	r3, [pc, #612]	@ (8000910 <main+0x33c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b95      	ldr	r3, [pc, #596]	@ (8000910 <main+0x33c>)
 80006ba:	701a      	strb	r2, [r3, #0]
	            if (g_measureType == MEASURE_HR)
 80006bc:	4b94      	ldr	r3, [pc, #592]	@ (8000910 <main+0x33c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d105      	bne.n	80006d0 <main+0xfc>
	            {
	              sprintf(msg, "Selected: Heart Rate\r\n");
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4993      	ldr	r1, [pc, #588]	@ (8000914 <main+0x340>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fd83 	bl	80051d4 <siprintf>
 80006ce:	e004      	b.n	80006da <main+0x106>
	            }
	            else
	            {
	              sprintf(msg, "Selected: SpO2\r\n");
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4991      	ldr	r1, [pc, #580]	@ (8000918 <main+0x344>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fd7d 	bl	80051d4 <siprintf>
	            }
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd77 	bl	80001d0 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ec:	4884      	ldr	r0, [pc, #528]	@ (8000900 <main+0x32c>)
 80006ee:	f004 f813 	bl	8004718 <HAL_UART_Transmit>
	            // 长按 => 进入 WORKMODE_SELECT
	            g_systemState = STATE_WORKMODE_SELECT;
	            sprintf(msg, "System -> WORKMODE_SELECT\r\n");
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	          }
	          break;
 80006f2:	e0ab      	b.n	800084c <main+0x278>
	          else if (currentPress == PRESS_LONG)
 80006f4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	f040 80a7 	bne.w	800084c <main+0x278>
	            g_systemState = STATE_WORKMODE_SELECT;
 80006fe:	4b82      	ldr	r3, [pc, #520]	@ (8000908 <main+0x334>)
 8000700:	2202      	movs	r2, #2
 8000702:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> WORKMODE_SELECT\r\n");
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4985      	ldr	r1, [pc, #532]	@ (800091c <main+0x348>)
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fd63 	bl	80051d4 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd5d 	bl	80001d0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	1d39      	adds	r1, r7, #4
 800071c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000720:	4877      	ldr	r0, [pc, #476]	@ (8000900 <main+0x32c>)
 8000722:	f003 fff9 	bl	8004718 <HAL_UART_Transmit>
	          break;
 8000726:	e091      	b.n	800084c <main+0x278>

	        case STATE_WORKMODE_SELECT:
	          if (currentPress == PRESS_SHORT)
 8000728:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800072c:	2b01      	cmp	r3, #1
 800072e:	d125      	bne.n	800077c <main+0x1a8>
	          {
	            // 短按 => 在 RED / IR 模式之间切换
	            g_workMode = (g_workMode == MODE_RED) ? MODE_IR : MODE_RED;
 8000730:	4b7b      	ldr	r3, [pc, #492]	@ (8000920 <main+0x34c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf0c      	ite	eq
 8000738:	2301      	moveq	r3, #1
 800073a:	2300      	movne	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	4b77      	ldr	r3, [pc, #476]	@ (8000920 <main+0x34c>)
 8000742:	701a      	strb	r2, [r3, #0]
	            if (g_workMode == MODE_RED)
 8000744:	4b76      	ldr	r3, [pc, #472]	@ (8000920 <main+0x34c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d105      	bne.n	8000758 <main+0x184>
	            {
	              sprintf(msg, "Work Mode: RED\r\n");
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4975      	ldr	r1, [pc, #468]	@ (8000924 <main+0x350>)
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fd3f 	bl	80051d4 <siprintf>
 8000756:	e004      	b.n	8000762 <main+0x18e>
	            }
	            else
	            {
	              sprintf(msg, "Work Mode: IR\r\n");
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4973      	ldr	r1, [pc, #460]	@ (8000928 <main+0x354>)
 800075c:	4618      	mov	r0, r3
 800075e:	f004 fd39 	bl	80051d4 <siprintf>
	            }
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	1d39      	adds	r1, r7, #4
 8000770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000774:	4862      	ldr	r0, [pc, #392]	@ (8000900 <main+0x32c>)
 8000776:	f003 ffcf 	bl	8004718 <HAL_UART_Transmit>
	            // 长按 => 进入 RUNNING
	            g_systemState = STATE_RUNNING;
	            sprintf(msg, "System -> RUNNING\r\n");
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	          }
	          break;
 800077a:	e069      	b.n	8000850 <main+0x27c>
	          else if (currentPress == PRESS_LONG)
 800077c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000780:	2b02      	cmp	r3, #2
 8000782:	d165      	bne.n	8000850 <main+0x27c>
	            g_systemState = STATE_RUNNING;
 8000784:	4b60      	ldr	r3, [pc, #384]	@ (8000908 <main+0x334>)
 8000786:	2203      	movs	r2, #3
 8000788:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> RUNNING\r\n");
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4967      	ldr	r1, [pc, #412]	@ (800092c <main+0x358>)
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fd20 	bl	80051d4 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a6:	4856      	ldr	r0, [pc, #344]	@ (8000900 <main+0x32c>)
 80007a8:	f003 ffb6 	bl	8004718 <HAL_UART_Transmit>
	          break;
 80007ac:	e050      	b.n	8000850 <main+0x27c>

	        case STATE_RUNNING:
	          // 在 RUNNING 下，长按 => 回到 INIT
	          if (currentPress == PRESS_LONG)
 80007ae:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d14e      	bne.n	8000854 <main+0x280>
	          {
	            g_systemState = STATE_INIT;
 80007b6:	4b54      	ldr	r3, [pc, #336]	@ (8000908 <main+0x334>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> INIT\r\n");
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	495c      	ldr	r1, [pc, #368]	@ (8000930 <main+0x35c>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 fd07 	bl	80051d4 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd01 	bl	80001d0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	1d39      	adds	r1, r7, #4
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d8:	4849      	ldr	r0, [pc, #292]	@ (8000900 <main+0x32c>)
 80007da:	f003 ff9d 	bl	8004718 <HAL_UART_Transmit>

	            // 关闭所有LED
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2101      	movs	r1, #1
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f002 fbf9 	bl	8002fdc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2102      	movs	r1, #2
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f002 fbf3 	bl	8002fdc <HAL_GPIO_WritePin>
	          }
	          // 短按在 RUNNING 状态下此处不做任何处理
	          break;
 80007f6:	e02d      	b.n	8000854 <main+0x280>

	        case STATE_ERROR:
	          // 在 ERROR 下，长按 => 回到 INIT
	          if (currentPress == PRESS_LONG)
 80007f8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d12b      	bne.n	8000858 <main+0x284>
	          {
	            g_systemState = STATE_INIT;
 8000800:	4b41      	ldr	r3, [pc, #260]	@ (8000908 <main+0x334>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> INIT (from ERROR)\r\n");
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	494a      	ldr	r1, [pc, #296]	@ (8000934 <main+0x360>)
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fce2 	bl	80051d4 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	1d39      	adds	r1, r7, #4
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	4837      	ldr	r0, [pc, #220]	@ (8000900 <main+0x32c>)
 8000824:	f003 ff78 	bl	8004718 <HAL_UART_Transmit>

	            // 关闭所有LED
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000830:	f002 fbd4 	bl	8002fdc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2102      	movs	r1, #2
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f002 fbce 	bl	8002fdc <HAL_GPIO_WritePin>
	          }
	          break;
 8000840:	e00a      	b.n	8000858 <main+0x284>

	        default:
	          // 不期望进入的分支，进入 ERROR
	          enterErrorState();
 8000842:	f000 fa63 	bl	8000d0c <enterErrorState>
	          break;
 8000846:	e008      	b.n	800085a <main+0x286>
	          break;
 8000848:	bf00      	nop
 800084a:	e006      	b.n	800085a <main+0x286>
	          break;
 800084c:	bf00      	nop
 800084e:	e004      	b.n	800085a <main+0x286>
	          break;
 8000850:	bf00      	nop
 8000852:	e002      	b.n	800085a <main+0x286>
	          break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <main+0x286>
	          break;
 8000858:	bf00      	nop
	      }
	    }

	    // 2. 根据当前状态执行“状态行为”
	    switch (g_systemState)
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <main+0x334>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b04      	cmp	r3, #4
 8000860:	f200 8088 	bhi.w	8000974 <main+0x3a0>
 8000864:	a201      	add	r2, pc, #4	@ (adr r2, 800086c <main+0x298>)
 8000866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086a:	bf00      	nop
 800086c:	0800097b 	.word	0x0800097b
 8000870:	0800097b 	.word	0x0800097b
 8000874:	0800097b 	.word	0x0800097b
 8000878:	08000881 	.word	0x08000881
 800087c:	0800097b 	.word	0x0800097b
	        break;

	      case STATE_RUNNING:
	      {
	        // 根据选择，打开对应LED
	        if (g_workMode == MODE_RED)
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <main+0x34c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10c      	bne.n	80008a2 <main+0x2ce>
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // 打开红光(低电平有效)
 8000888:	2200      	movs	r2, #0
 800088a:	2101      	movs	r1, #1
 800088c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000890:	f002 fba4 	bl	8002fdc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // 关闭IR
 8000894:	2201      	movs	r2, #1
 8000896:	2102      	movs	r1, #2
 8000898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089c:	f002 fb9e 	bl	8002fdc <HAL_GPIO_WritePin>
 80008a0:	e00b      	b.n	80008ba <main+0x2e6>
	        }
	        else
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // 关闭红光
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008aa:	f002 fb97 	bl	8002fdc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // 打开IR
 80008ae:	2200      	movs	r2, #0
 80008b0:	2102      	movs	r1, #2
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f002 fb91 	bl	8002fdc <HAL_GPIO_WritePin>
	        }

	        // 采集ADC
	        HAL_ADC_Start(&hadc1);
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <main+0x364>)
 80008bc:	f001 f864 	bl	8001988 <HAL_ADC_Start>
	        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80008c0:	2164      	movs	r1, #100	@ 0x64
 80008c2:	481d      	ldr	r0, [pc, #116]	@ (8000938 <main+0x364>)
 80008c4:	f001 f91a 	bl	8001afc <HAL_ADC_PollForConversion>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d157      	bne.n	800097e <main+0x3aa>
	        {
	          adcValue = HAL_ADC_GetValue(&hadc1);
 80008ce:	481a      	ldr	r0, [pc, #104]	@ (8000938 <main+0x364>)
 80008d0:	f001 f9ec 	bl	8001cac <HAL_ADC_GetValue>
 80008d4:	66f8      	str	r0, [r7, #108]	@ 0x6c

	          // 根据测量类型，对 ADC 数据做不同的处理
	          if (g_measureType == MEASURE_HR)
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <main+0x33c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d130      	bne.n	8000940 <main+0x36c>
	          {
	            uint16_t hrValue = computeHeartRate(adcValue);
 80008de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80008e0:	f7ff fe46 	bl	8000570 <computeHeartRate>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	            sprintf(msg, "ADC: %lu -> HR: %u bpm\r\n", adcValue, hrValue);
 80008ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80008ee:	1d38      	adds	r0, r7, #4
 80008f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80008f2:	4912      	ldr	r1, [pc, #72]	@ (800093c <main+0x368>)
 80008f4:	f004 fc6e 	bl	80051d4 <siprintf>
 80008f8:	e02f      	b.n	800095a <main+0x386>
 80008fa:	bf00      	nop
 80008fc:	08005b2c 	.word	0x08005b2c
 8000900:	20000124 	.word	0x20000124
 8000904:	2000023c 	.word	0x2000023c
 8000908:	2000023d 	.word	0x2000023d
 800090c:	08005b54 	.word	0x08005b54
 8000910:	2000023e 	.word	0x2000023e
 8000914:	08005b70 	.word	0x08005b70
 8000918:	08005b88 	.word	0x08005b88
 800091c:	08005b9c 	.word	0x08005b9c
 8000920:	2000023f 	.word	0x2000023f
 8000924:	08005bb8 	.word	0x08005bb8
 8000928:	08005bcc 	.word	0x08005bcc
 800092c:	08005bdc 	.word	0x08005bdc
 8000930:	08005bf0 	.word	0x08005bf0
 8000934:	08005c04 	.word	0x08005c04
 8000938:	20000078 	.word	0x20000078
 800093c:	08005c24 	.word	0x08005c24
	          }
	          else
	          {
	            uint8_t spo2Value = computeSpO2(adcValue);
 8000940:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000942:	f7ff fe2f 	bl	80005a4 <computeSpO2>
 8000946:	4603      	mov	r3, r0
 8000948:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	            sprintf(msg, "ADC: %lu -> SpO2: %u%%\r\n", adcValue, spo2Value);
 800094c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000950:	1d38      	adds	r0, r7, #4
 8000952:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <main+0x3b4>)
 8000956:	f004 fc3d 	bl	80051d4 <siprintf>
	          }

	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc37 	bl	80001d0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	1d39      	adds	r1, r7, #4
 8000968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <main+0x3b8>)
 800096e:	f003 fed3 	bl	8004718 <HAL_UART_Transmit>
	        }
	        break;
 8000972:	e004      	b.n	800097e <main+0x3aa>
	        // 此处仅等待用户长按来回到INIT，不做其他操作
	        break;

	      default:
	        // 防御式处理：进入 ERROR
	        enterErrorState();
 8000974:	f000 f9ca 	bl	8000d0c <enterErrorState>
	        break;
 8000978:	e002      	b.n	8000980 <main+0x3ac>
	        break;
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <main+0x3ac>
	        break;
 800097e:	bf00      	nop
	    }

	    HAL_Delay(10); // 小延时，防止主循环过于频繁
 8000980:	200a      	movs	r0, #10
 8000982:	f000 fca9 	bl	80012d8 <HAL_Delay>
  {
 8000986:	e653      	b.n	8000630 <main+0x5c>
 8000988:	08005c40 	.word	0x08005c40
 800098c:	20000124 	.word	0x20000124

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	@ 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	@ 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fc38 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b6:	f002 fb4f 	bl	8003058 <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 f9d2 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d6:	2302      	movs	r3, #2
 80009d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009de:	230a      	movs	r3, #10
 80009e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e2:	2307      	movs	r3, #7
 80009e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb86 	bl	8003104 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009fe:	f000 f9b3 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2303      	movs	r3, #3
 8000a08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 ff4c 	bl	80038bc <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a2a:	f000 f99d 	bl	8000d68 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3758      	adds	r7, #88	@ 0x58
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b1c <MX_ADC1_Init+0xe4>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a60:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aba:	4817      	ldr	r0, [pc, #92]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000abc:	f000 fe14 	bl	80016e8 <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ac6:	f000 f94f 	bl	8000d68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000ad6:	f001 fd95 	bl	8002604 <HAL_ADCEx_MultiModeConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ae0:	f000 f942 	bl	8000d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_ADC1_Init+0xe8>)
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af0:	237f      	movs	r3, #127	@ 0x7f
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af4:	2304      	movs	r3, #4
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_ADC1_Init+0xe0>)
 8000b02:	f001 f8e1 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b0c:	f000 f92c 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000078 	.word	0x20000078
 8000b1c:	50040000 	.word	0x50040000
 8000b20:	2e300800 	.word	0x2e300800

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_USART2_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b68:	f003 fd88 	bl	800467c <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f8f9 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000124 	.word	0x20000124
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_DMA_Init+0x58>)
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8e:	4a13      	ldr	r2, [pc, #76]	@ (8000bdc <MX_DMA_Init+0x58>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_DMA_Init+0x58>)
 8000b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	200b      	movs	r0, #11
 8000ba8:	f001 feb7 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bac:	200b      	movs	r0, #11
 8000bae:	f001 fed0 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f001 feaf 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f001 fec8 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2011      	movs	r0, #17
 8000bc8:	f001 fea7 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000bcc:	2011      	movs	r0, #17
 8000bce:	f001 fec0 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2123      	movs	r1, #35	@ 0x23
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f002 f9d5 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <MX_GPIO_Init+0xa8>)
 8000c4a:	f002 f805 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c4e:	2323      	movs	r3, #35	@ 0x23
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c68:	f001 fff6 	bl	8002c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2028      	movs	r0, #40	@ 0x28
 8000c72:	f001 fe52 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c76:	2028      	movs	r0, #40	@ 0x28
 8000c78:	f001 fe6b 	bl	8002952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800

08000c8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  static uint32_t pressStartTime = 0;
  static uint32_t lastInterruptTime = 0;

  if (GPIO_Pin == GPIO_PIN_13)
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x6a>
  {
    uint32_t now = HAL_GetTick();
 8000c9e:	f000 fb0f 	bl	80012c0 <HAL_GetTick>
 8000ca2:	6178      	str	r0, [r7, #20]

    // 基础去抖判断：若距离上次中断 < DEBOUNCE_INTERVAL，则直接忽略
    if ((now - lastInterruptTime) < DEBOUNCE_INTERVAL)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x70>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b31      	cmp	r3, #49	@ 0x31
 8000cae:	d921      	bls.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x68>
      return;
    lastInterruptTime = now;
 8000cb0:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x70>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	6013      	str	r3, [r2, #0]

    // 判断当前引脚电平
    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x74>)
 8000cbc:	f002 f976 	bl	8002fac <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	74fb      	strb	r3, [r7, #19]

    if (pinState == GPIO_PIN_RESET)
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x46>
    {
      // 下降沿 => 按下
      pressStartTime = now;
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e011      	b.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x6a>
    }
    else
    {
      // 上升沿 => 松开
      uint32_t pressDuration = now - pressStartTime;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x78>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]
      if (pressDuration >= LONG_PRESS_THRESHOLD)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ce2:	d303      	bcc.n	8000cec <HAL_GPIO_EXTI_Callback+0x60>
      {
        g_pressEvent = PRESS_LONG;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x6a>
      }
      else
      {
        g_pressEvent = PRESS_SHORT;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x6a>
      return;
 8000cf4:	bf00      	nop
      }
    }
  }
}
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000240 	.word	0x20000240
 8000d00:	48000800 	.word	0x48000800
 8000d04:	20000244 	.word	0x20000244
 8000d08:	2000023c 	.word	0x2000023c

08000d0c <enterErrorState>:

/**
  * @brief 将系统切换到 ERROR 状态
  */
static void enterErrorState(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0
  g_systemState = STATE_ERROR;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <enterErrorState+0x50>)
 8000d14:	2204      	movs	r2, #4
 8000d16:	701a      	strb	r2, [r3, #0]
  char msg[50];
  sprintf(msg, "System -> ERROR\r\n");
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4911      	ldr	r1, [pc, #68]	@ (8000d60 <enterErrorState+0x54>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 fa59 	bl	80051d4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa53 	bl	80001d0 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	1d39      	adds	r1, r7, #4
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <enterErrorState+0x58>)
 8000d36:	f003 fcef 	bl	8004718 <HAL_UART_Transmit>

  // 关灯
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d42:	f002 f94b 	bl	8002fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f002 f945 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	@ 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000023d 	.word	0x2000023d
 8000d60:	08005c5c 	.word	0x08005c5c
 8000d64:	20000124 	.word	0x20000124

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2288      	movs	r2, #136	@ 0x88
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fa19 	bl	8005214 <memset>
  if(hadc->Instance==ADC1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a3d      	ldr	r2, [pc, #244]	@ (8000edc <HAL_ADC_MspInit+0x120>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d173      	bne.n	8000ed4 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000df0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000df2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e02:	2308      	movs	r3, #8
 8000e04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e06:	2307      	movs	r3, #7
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 ff71 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e28:	f7ff ff9e 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e38:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <HAL_ADC_MspInit+0x124>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e5c:	2340      	movs	r3, #64	@ 0x40
 8000e5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e62:	230b      	movs	r3, #11
 8000e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f001 feee 	bl	8002c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee8 <HAL_ADC_MspInit+0x12c>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000eba:	f001 fd65 	bl	8002988 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8000ec4:	f7ff ff50 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <HAL_ADC_MspInit+0x128>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ed4:	bf00      	nop
 8000ed6:	37b0      	adds	r7, #176	@ 0xb0
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	50040000 	.word	0x50040000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	200000dc 	.word	0x200000dc
 8000ee8:	40020008 	.word	0x40020008

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ac      	sub	sp, #176	@ 0xb0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2288      	movs	r2, #136	@ 0x88
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 f981 	bl	8005214 <memset>
  if(huart->Instance==USART2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_UART_MspInit+0x15c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	f040 8090 	bne.w	800103e <HAL_UART_MspInit+0x152>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 feea 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f36:	f7ff ff17 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b44      	ldr	r3, [pc, #272]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a43      	ldr	r2, [pc, #268]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f46:	4b41      	ldr	r3, [pc, #260]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_UART_MspInit+0x160>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f001 fe61 	bl	8002c58 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000f98:	4a2e      	ldr	r2, [pc, #184]	@ (8001054 <HAL_UART_MspInit+0x168>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fce:	4820      	ldr	r0, [pc, #128]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fd0:	f001 fcda 	bl	8002988 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000fda:	f7ff fec5 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fe2:	675a      	str	r2, [r3, #116]	@ 0x74
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8001050 <HAL_UART_MspInit+0x164>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <HAL_UART_MspInit+0x170>)
 8000fee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8001004:	2280      	movs	r2, #128	@ 0x80
 8001006:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 800101c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8001024:	f001 fcb0 	bl	8002988 <HAL_DMA_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800102e:	f7ff fe9b 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 8001036:	671a      	str	r2, [r3, #112]	@ 0x70
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_UART_MspInit+0x16c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800103e:	bf00      	nop
 8001040:	37b0      	adds	r7, #176	@ 0xb0
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000
 8001050:	200001ac 	.word	0x200001ac
 8001054:	4002006c 	.word	0x4002006c
 8001058:	200001f4 	.word	0x200001f4
 800105c:	40020080 	.word	0x40020080

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f8ef 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <DMA1_Channel1_IRQHandler+0x10>)
 80010c6:	f001 fd17 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000dc 	.word	0x200000dc

080010d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <DMA1_Channel6_IRQHandler+0x10>)
 80010da:	f001 fd0d 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001ac 	.word	0x200001ac

080010e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <DMA1_Channel7_IRQHandler+0x10>)
 80010ee:	f001 fd03 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f4 	.word	0x200001f4

080010fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001100:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001104:	f001 ff82 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f004 f872 	bl	8005224 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20018000 	.word	0x20018000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000248 	.word	0x20000248
 8001174:	20000398 	.word	0x20000398

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff ffea 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	@ (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	@ (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f004 f831 	bl	8005230 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ce:	f7ff fa01 	bl	80005d4 <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011e0:	08005cfc 	.word	0x08005cfc
  ldr r2, =_sbss
 80011e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011e8:	20000398 	.word	0x20000398

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>

080011ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f001 fb83 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f80e 	bl	8001220 <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e001      	b.n	8001214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001210:	f7ff fdb0 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001214:	79fb      	ldrb	r3, [r7, #7]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_InitTick+0x6c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_InitTick+0x70>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fb8f 	bl	800296e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d809      	bhi.n	8001270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f001 fb59 	bl	800291a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_InitTick+0x74>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e007      	b.n	8001280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e004      	b.n	8001280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e001      	b.n	8001280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000024c 	.word	0x2000024c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000024c 	.word	0x2000024c

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3360      	adds	r3, #96	@ 0x60
 800139a:	461a      	mov	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <LL_ADC_SetOffset+0x44>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	4313      	orrs	r3, r2
 80013b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	03fff000 	.word	0x03fff000

080013d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3360      	adds	r3, #96	@ 0x60
 80013de:	461a      	mov	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3360      	adds	r3, #96	@ 0x60
 800140c:	461a      	mov	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3330      	adds	r3, #48	@ 0x30
 8001468:	461a      	mov	r2, r3
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	211f      	movs	r1, #31
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	0e9b      	lsrs	r3, r3, #26
 8001490:	f003 011f 	and.w	r1, r3, #31
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3314      	adds	r3, #20
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	0e5b      	lsrs	r3, r3, #25
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	0d1b      	lsrs	r3, r3, #20
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	2107      	movs	r1, #7
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	0d1b      	lsrs	r3, r3, #20
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	431a      	orrs	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014fa:	bf00      	nop
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0318 	and.w	r3, r3, #24
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <LL_ADC_SetChannelSingleDiff+0x44>)
 800152c:	40d9      	lsrs	r1, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	400b      	ands	r3, r1
 8001532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	0007ffff 	.word	0x0007ffff

08001550 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 031f 	and.w	r3, r3, #31
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6093      	str	r3, [r2, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001610:	d101      	bne.n	8001616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <LL_ADC_IsEnabled+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_IsEnabled+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001682:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001686:	f043 0204 	orr.w	r2, r3, #4
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d101      	bne.n	80016b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d101      	bne.n	80016d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e130      	b.n	8001964 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fb53 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff3f 	bl	80015ac <LL_ADC_IsDeepPowerDownEnabled>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff25 	bl	8001588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff5a 	bl	80015fc <LL_ADC_IsInternalRegulatorEnabled>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d115      	bne.n	800177a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff3e 	bl	80015d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001758:	4b84      	ldr	r3, [pc, #528]	@ (800196c <HAL_ADC_Init+0x284>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	4a84      	ldr	r2, [pc, #528]	@ (8001970 <HAL_ADC_Init+0x288>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	3301      	adds	r3, #1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800176c:	e002      	b.n	8001774 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3b01      	subs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3c 	bl	80015fc <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff75 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 80017b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 80c9 	bne.w	8001952 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80c5 	bne.w	8001952 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d115      	bne.n	8001814 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e8:	4862      	ldr	r0, [pc, #392]	@ (8001974 <HAL_ADC_Init+0x28c>)
 80017ea:	f7ff ff2f 	bl	800164c <LL_ADC_IsEnabled>
 80017ee:	4604      	mov	r4, r0
 80017f0:	4861      	ldr	r0, [pc, #388]	@ (8001978 <HAL_ADC_Init+0x290>)
 80017f2:	f7ff ff2b 	bl	800164c <LL_ADC_IsEnabled>
 80017f6:	4603      	mov	r3, r0
 80017f8:	431c      	orrs	r4, r3
 80017fa:	4860      	ldr	r0, [pc, #384]	@ (800197c <HAL_ADC_Init+0x294>)
 80017fc:	f7ff ff26 	bl	800164c <LL_ADC_IsEnabled>
 8001800:	4603      	mov	r3, r0
 8001802:	4323      	orrs	r3, r4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4619      	mov	r1, r3
 800180e:	485c      	ldr	r0, [pc, #368]	@ (8001980 <HAL_ADC_Init+0x298>)
 8001810:	f7ff fd86 	bl	8001320 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7e5b      	ldrb	r3, [r3, #25]
 8001818:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001824:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800182a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001832:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d106      	bne.n	8001850 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	3b01      	subs	r3, #1
 8001848:	045b      	lsls	r3, r3, #17
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	4b44      	ldr	r3, [pc, #272]	@ (8001984 <HAL_ADC_Init+0x29c>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	430b      	orrs	r3, r1
 800187e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff1b 	bl	80016c0 <LL_ADC_INJ_IsConversionOngoing>
 800188a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d13d      	bne.n	800190e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d13a      	bne.n	800190e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800189c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018b4:	f023 0302 	bic.w	r3, r3, #2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	69b9      	ldr	r1, [r7, #24]
 80018be:	430b      	orrs	r3, r1
 80018c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d118      	bne.n	80018fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018ee:	430a      	orrs	r2, r1
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	e007      	b.n	800190e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d10c      	bne.n	8001930 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	f023 010f 	bic.w	r1, r3, #15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30
 800192e:	e007      	b.n	8001940 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 020f 	bic.w	r2, r2, #15
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	f023 0303 	bic.w	r3, r3, #3
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001950:	e007      	b.n	8001962 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001962:	7ffb      	ldrb	r3, [r7, #31]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3724      	adds	r7, #36	@ 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	053e2d63 	.word	0x053e2d63
 8001974:	50040000 	.word	0x50040000
 8001978:	50040100 	.word	0x50040100
 800197c:	50040200 	.word	0x50040200
 8001980:	50040300 	.word	0x50040300
 8001984:	fff0c007 	.word	0xfff0c007

08001988 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001990:	4857      	ldr	r0, [pc, #348]	@ (8001af0 <HAL_ADC_Start+0x168>)
 8001992:	f7ff fddd 	bl	8001550 <LL_ADC_GetMultimode>
 8001996:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe7c 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 809c 	bne.w	8001ae2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Start+0x30>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e097      	b.n	8001ae8 <HAL_ADC_Start+0x160>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fd73 	bl	80024ac <ADC_Enable>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 8083 	bne.w	8001ad8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <HAL_ADC_Start+0x16c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d002      	beq.n	80019f6 <HAL_ADC_Start+0x6e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e000      	b.n	80019f8 <HAL_ADC_Start+0x70>
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <HAL_ADC_Start+0x170>)
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d002      	beq.n	8001a06 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a1e:	d106      	bne.n	8001a2e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	f023 0206 	bic.w	r2, r3, #6
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a2c:	e002      	b.n	8001a34 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	221c      	movs	r2, #28
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_ADC_Start+0x16c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_Start+0xcc>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <HAL_ADC_Start+0xce>
 8001a54:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <HAL_ADC_Start+0x170>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d008      	beq.n	8001a70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d002      	beq.n	8001a70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d114      	bne.n	8001a9a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fded 	bl	8001672 <LL_ADC_REG_StartConversion>
 8001a98:	e025      	b.n	8001ae6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <HAL_ADC_Start+0x16c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d002      	beq.n	8001ab6 <HAL_ADC_Start+0x12e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_Start+0x130>
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_ADC_Start+0x170>)
 8001ab8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00f      	beq.n	8001ae6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ace:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ad6:	e006      	b.n	8001ae6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001ae0:	e001      	b.n	8001ae6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	50040300 	.word	0x50040300
 8001af4:	50040100 	.word	0x50040100
 8001af8:	50040000 	.word	0x50040000

08001afc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b06:	4866      	ldr	r0, [pc, #408]	@ (8001ca0 <HAL_ADC_PollForConversion+0x1a4>)
 8001b08:	f7ff fd22 	bl	8001550 <LL_ADC_GetMultimode>
 8001b0c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d102      	bne.n	8001b1c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b16:	2308      	movs	r3, #8
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e02a      	b.n	8001b72 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b09      	cmp	r3, #9
 8001b2c:	d111      	bne.n	8001b52 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0a4      	b.n	8001c96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b50:	e00f      	b.n	8001b72 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b52:	4853      	ldr	r0, [pc, #332]	@ (8001ca0 <HAL_ADC_PollForConversion+0x1a4>)
 8001b54:	f7ff fd0a 	bl	800156c <LL_ADC_GetMultiDMATransfer>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	f043 0220 	orr.w	r2, r3, #32
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e093      	b.n	8001c96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b6e:	2304      	movs	r3, #4
 8001b70:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b72:	f7ff fba5 	bl	80012c0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b78:	e021      	b.n	8001bbe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b80:	d01d      	beq.n	8001bbe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b82:	f7ff fb9d 	bl	80012c0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <HAL_ADC_PollForConversion+0x9c>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d112      	bne.n	8001bbe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10b      	bne.n	8001bbe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e06b      	b.n	8001c96 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0d6      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fc28 	bl	8001432 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e5b      	ldrb	r3, [r3, #25]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d118      	bne.n	8001c22 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d111      	bne.n	8001c22 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca4 <HAL_ADC_PollForConversion+0x1a8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d002      	beq.n	8001c32 <HAL_ADC_PollForConversion+0x136>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_PollForConversion+0x138>
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_ADC_PollForConversion+0x1ac>)
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d008      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d002      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d104      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e00c      	b.n	8001c72 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_ADC_PollForConversion+0x1a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d002      	beq.n	8001c68 <HAL_ADC_PollForConversion+0x16c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_PollForConversion+0x16e>
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_ADC_PollForConversion+0x1ac>)
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d104      	bne.n	8001c82 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e008      	b.n	8001c94 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d103      	bne.n	8001c94 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	220c      	movs	r2, #12
 8001c92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	50040300 	.word	0x50040300
 8001ca4:	50040100 	.word	0x50040100
 8001ca8:	50040000 	.word	0x50040000

08001cac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b6      	sub	sp, #216	@ 0xd8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x22>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e3c9      	b.n	800247e <HAL_ADC_ConfigChannel+0x7b6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fccf 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 83aa 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d824      	bhi.n	8001d5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	3b02      	subs	r3, #2
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d81b      	bhi.n	8001d56 <HAL_ADC_ConfigChannel+0x8e>
 8001d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d24 <HAL_ADC_ConfigChannel+0x5c>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d3d 	.word	0x08001d3d
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d4d 	.word	0x08001d4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d34:	230c      	movs	r3, #12
 8001d36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d3a:	e010      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d42:	e00c      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d44:	2318      	movs	r3, #24
 8001d46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d4a:	e008      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d54:	e003      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d56:	2306      	movs	r3, #6
 8001d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d6c:	f7ff fb74 	bl	8001458 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc90 	bl	800169a <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc9c 	bl	80016c0 <LL_ADC_INJ_IsConversionOngoing>
 8001d88:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 81a4 	bne.w	80020de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 819f 	bne.w	80020de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff fb7f 	bl	80014b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00a      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6919      	ldr	r1, [r3, #16]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001de4:	f7ff fad0 	bl	8001388 <LL_ADC_SetOffset>
 8001de8:	e179      	b.n	80020de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff faed 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x14e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fae2 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	e01e      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x18c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fad7 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e004      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1a4>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	e018      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1d6>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e004      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001e94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d106      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff faa6 	bl	80013fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa8a 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10a      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x214>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fa7f 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	e01e      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x252>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa74 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e004      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x26a>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	e018      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x29c>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e004      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fa43 	bl	80013fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fa27 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x2da>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fa1c 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	e01e      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x318>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fa11 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e004      	b.n	8001fde <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x330>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	e014      	b.n	8002022 <HAL_ADC_ConfigChannel+0x35a>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800200c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9e4 	bl	80013fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2103      	movs	r1, #3
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f9c8 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x398>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2103      	movs	r1, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f9bd 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	e017      	b.n	8002090 <HAL_ADC_ConfigChannel+0x3c8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2103      	movs	r1, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f9b2 	bl	80013d0 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800207a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800207c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x3e0>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	e011      	b.n	80020cc <HAL_ADC_ConfigChannel+0x404>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80020c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2103      	movs	r1, #3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f98f 	bl	80013fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fab2 	bl	800164c <LL_ADC_IsEnabled>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 8140 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7ff fa03 	bl	8001508 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a8f      	ldr	r2, [pc, #572]	@ (8002344 <HAL_ADC_ConfigChannel+0x67c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	f040 8131 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x46e>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	3301      	adds	r3, #1
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2b09      	cmp	r3, #9
 800212c:	bf94      	ite	ls
 800212e:	2301      	movls	r3, #1
 8002130:	2300      	movhi	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e019      	b.n	800216a <HAL_ADC_ConfigChannel+0x4a2>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002146:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b09      	cmp	r3, #9
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216a:	2b00      	cmp	r3, #0
 800216c:	d079      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_ADC_ConfigChannel+0x4c2>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	3301      	adds	r3, #1
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002188:	e015      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x4ee>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800219c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80021a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	069b      	lsls	r3, r3, #26
 80021b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x50e>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	3301      	adds	r3, #1
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	e017      	b.n	8002206 <HAL_ADC_ConfigChannel+0x53e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80021f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x564>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	e018      	b.n	800225e <HAL_ADC_ConfigChannel+0x596>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800223e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f003 021f 	and.w	r2, r3, #31
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225e:	430b      	orrs	r3, r1
 8002260:	e081      	b.n	8002366 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_ADC_ConfigChannel+0x5b6>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	3301      	adds	r3, #1
 8002276:	069b      	lsls	r3, r3, #26
 8002278:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800227c:	e015      	b.n	80022aa <HAL_ADC_ConfigChannel+0x5e2>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x602>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	e017      	b.n	80022fa <HAL_ADC_ConfigChannel+0x632>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	61bb      	str	r3, [r7, #24]
  return result;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e003      	b.n	80022ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	ea42 0103 	orr.w	r1, r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x65e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 021f 	and.w	r2, r3, #31
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	051b      	lsls	r3, r3, #20
 8002320:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x69c>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	60fb      	str	r3, [r7, #12]
  return result;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e006      	b.n	8002350 <HAL_ADC_ConfigChannel+0x688>
 8002342:	bf00      	nop
 8002344:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	051b      	lsls	r3, r3, #20
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff f8a0 	bl	80014b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_ADC_ConfigChannel+0x7c0>)
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d07a      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237c:	4843      	ldr	r0, [pc, #268]	@ (800248c <HAL_ADC_ConfigChannel+0x7c4>)
 800237e:	f7fe fff5 	bl	800136c <LL_ADC_GetCommonPathInternalCh>
 8002382:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a41      	ldr	r2, [pc, #260]	@ (8002490 <HAL_ADC_ConfigChannel+0x7c8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d12c      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d126      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002494 <HAL_ADC_ConfigChannel+0x7cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x6e8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002498 <HAL_ADC_ConfigChannel+0x7d0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d15d      	bne.n	800246c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023b8:	4619      	mov	r1, r3
 80023ba:	4834      	ldr	r0, [pc, #208]	@ (800248c <HAL_ADC_ConfigChannel+0x7c4>)
 80023bc:	f7fe ffc3 	bl	8001346 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_ADC_ConfigChannel+0x7d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	4a36      	ldr	r2, [pc, #216]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023da:	e002      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e8:	e040      	b.n	800246c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d118      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d112      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_ADC_ConfigChannel+0x7cc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x74c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_ADC_ConfigChannel+0x7d0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d12d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241c:	4619      	mov	r1, r3
 800241e:	481b      	ldr	r0, [pc, #108]	@ (800248c <HAL_ADC_ConfigChannel+0x7c4>)
 8002420:	f7fe ff91 	bl	8001346 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002424:	e024      	b.n	8002470 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <HAL_ADC_ConfigChannel+0x7e0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d120      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	@ (8002494 <HAL_ADC_ConfigChannel+0x7cc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d115      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800244a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800244e:	4619      	mov	r1, r3
 8002450:	480e      	ldr	r0, [pc, #56]	@ (800248c <HAL_ADC_ConfigChannel+0x7c4>)
 8002452:	f7fe ff78 	bl	8001346 <LL_ADC_SetCommonPathInternalCh>
 8002456:	e00c      	b.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800246a:	e002      	b.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800246c:	bf00      	nop
 800246e:	e000      	b.n	8002472 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002470:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800247a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800247e:	4618      	mov	r0, r3
 8002480:	37d8      	adds	r7, #216	@ 0xd8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	80080000 	.word	0x80080000
 800248c:	50040300 	.word	0x50040300
 8002490:	c7520000 	.word	0xc7520000
 8002494:	50040000 	.word	0x50040000
 8002498:	50040200 	.word	0x50040200
 800249c:	20000000 	.word	0x20000000
 80024a0:	053e2d63 	.word	0x053e2d63
 80024a4:	cb840000 	.word	0xcb840000
 80024a8:	80000001 	.word	0x80000001

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f8c5 	bl	800164c <LL_ADC_IsEnabled>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d169      	bne.n	800259c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <ADC_Enable+0xfc>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e055      	b.n	800259e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f894 	bl	8001624 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024fc:	482b      	ldr	r0, [pc, #172]	@ (80025ac <ADC_Enable+0x100>)
 80024fe:	f7fe ff35 	bl	800136c <LL_ADC_GetCommonPathInternalCh>
 8002502:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <ADC_Enable+0x104>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <ADC_Enable+0x108>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002526:	e002      	b.n	800252e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002534:	f7fe fec4 	bl	80012c0 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253a:	e028      	b.n	800258e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f883 	bl	800164c <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f867 	bl	8001624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002556:	f7fe feb3 	bl	80012c0 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d914      	bls.n	800258e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00d      	beq.n	800258e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d1cf      	bne.n	800253c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	8000003f 	.word	0x8000003f
 80025ac:	50040300 	.word	0x50040300
 80025b0:	20000000 	.word	0x20000000
 80025b4:	053e2d63 	.word	0x053e2d63

080025b8 <LL_ADC_IsEnabled>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_IsEnabled+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_IsEnabled+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_REG_IsConversionOngoing>:
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b09f      	sub	sp, #124	@ 0x7c
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800261e:	2302      	movs	r3, #2
 8002620:	e093      	b.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800262a:	2300      	movs	r3, #0
 800262c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800262e:	2300      	movs	r3, #0
 8002630:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a47      	ldr	r2, [pc, #284]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800263c:	4b46      	ldr	r3, [pc, #280]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	e001      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e072      	b.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ffb9 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 800266c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ffb3 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d154      	bne.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800267e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002680:	2b00      	cmp	r3, #0
 8002682:	d151      	bne.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002684:	4b35      	ldr	r3, [pc, #212]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002686:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02c      	beq.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a2:	035b      	lsls	r3, r3, #13
 80026a4:	430b      	orrs	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ac:	4829      	ldr	r0, [pc, #164]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026ae:	f7ff ff83 	bl	80025b8 <LL_ADC_IsEnabled>
 80026b2:	4604      	mov	r4, r0
 80026b4:	4828      	ldr	r0, [pc, #160]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026b6:	f7ff ff7f 	bl	80025b8 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	431c      	orrs	r4, r3
 80026be:	4828      	ldr	r0, [pc, #160]	@ (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026c0:	f7ff ff7a 	bl	80025b8 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4323      	orrs	r3, r4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d137      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026d4:	f023 030f 	bic.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6892      	ldr	r2, [r2, #8]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	e028      	b.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f6:	4817      	ldr	r0, [pc, #92]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026f8:	f7ff ff5e 	bl	80025b8 <LL_ADC_IsEnabled>
 80026fc:	4604      	mov	r4, r0
 80026fe:	4816      	ldr	r0, [pc, #88]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002700:	f7ff ff5a 	bl	80025b8 <LL_ADC_IsEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	431c      	orrs	r4, r3
 8002708:	4815      	ldr	r0, [pc, #84]	@ (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800270a:	f7ff ff55 	bl	80025b8 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	4323      	orrs	r3, r4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002724:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002726:	e009      	b.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800273a:	e000      	b.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800273c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002746:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800274a:	4618      	mov	r0, r3
 800274c:	377c      	adds	r7, #124	@ 0x7c
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	bf00      	nop
 8002754:	50040000 	.word	0x50040000
 8002758:	50040100 	.word	0x50040100
 800275c:	50040300 	.word	0x50040300
 8002760:	50040200 	.word	0x50040200

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e098      	b.n	8002acc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <HAL_DMA_Init+0x150>)
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d80f      	bhi.n	80029c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b4b      	ldr	r3, [pc, #300]	@ (8002adc <HAL_DMA_Init+0x154>)
 80029ae:	4413      	add	r3, r2
 80029b0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae0 <HAL_DMA_Init+0x158>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	009a      	lsls	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a48      	ldr	r2, [pc, #288]	@ (8002ae4 <HAL_DMA_Init+0x15c>)
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80029c4:	e00e      	b.n	80029e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <HAL_DMA_Init+0x160>)
 80029ce:	4413      	add	r3, r2
 80029d0:	4a43      	ldr	r2, [pc, #268]	@ (8002ae0 <HAL_DMA_Init+0x158>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a42      	ldr	r2, [pc, #264]	@ (8002aec <HAL_DMA_Init+0x164>)
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80029fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a3e:	d039      	beq.n	8002ab4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	4a27      	ldr	r2, [pc, #156]	@ (8002ae4 <HAL_DMA_Init+0x15c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d11a      	bne.n	8002a80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a4a:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_DMA_Init+0x168>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f003 031c 	and.w	r3, r3, #28
 8002a56:	210f      	movs	r1, #15
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4924      	ldr	r1, [pc, #144]	@ (8002af0 <HAL_DMA_Init+0x168>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a64:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_DMA_Init+0x168>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	f003 031c 	and.w	r3, r3, #28
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	491d      	ldr	r1, [pc, #116]	@ (8002af0 <HAL_DMA_Init+0x168>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
 8002a7e:	e019      	b.n	8002ab4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a80:	4b1c      	ldr	r3, [pc, #112]	@ (8002af4 <HAL_DMA_Init+0x16c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	f003 031c 	and.w	r3, r3, #28
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4917      	ldr	r1, [pc, #92]	@ (8002af4 <HAL_DMA_Init+0x16c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <HAL_DMA_Init+0x16c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f003 031c 	and.w	r3, r3, #28
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	4911      	ldr	r1, [pc, #68]	@ (8002af4 <HAL_DMA_Init+0x16c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40020407 	.word	0x40020407
 8002adc:	bffdfff8 	.word	0xbffdfff8
 8002ae0:	cccccccd 	.word	0xcccccccd
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	bffdfbf8 	.word	0xbffdfbf8
 8002aec:	40020400 	.word	0x40020400
 8002af0:	400200a8 	.word	0x400200a8
 8002af4:	400204a8 	.word	0x400204a8

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f003 031c 	and.w	r3, r3, #28
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d026      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x7a>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d021      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b50:	f003 021c 	and.w	r2, r3, #28
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	2104      	movs	r1, #4
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d071      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b70:	e06c      	b.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f003 031c 	and.w	r3, r3, #28
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02e      	beq.n	8002be4 <HAL_DMA_IRQHandler+0xec>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d029      	beq.n	8002be4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020a 	bic.w	r2, r2, #10
 8002bac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f003 021c 	and.w	r2, r3, #28
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d038      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002be2:	e033      	b.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	f003 031c 	and.w	r3, r3, #28
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02a      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f003 021c 	and.w	r2, r3, #28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
}
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	e17f      	b.n	8002f68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8171 	beq.w	8002f62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d005      	beq.n	8002c98 <HAL_GPIO_Init+0x40>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d130      	bne.n	8002cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cce:	2201      	movs	r2, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0201 	and.w	r2, r3, #1
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d118      	bne.n	8002d38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d017      	beq.n	8002d74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d123      	bne.n	8002dc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	6939      	ldr	r1, [r7, #16]
 8002dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80ac 	beq.w	8002f62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f88 <HAL_GPIO_Init+0x330>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f88 <HAL_GPIO_Init+0x330>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e16:	4b5c      	ldr	r3, [pc, #368]	@ (8002f88 <HAL_GPIO_Init+0x330>)
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e22:	4a5a      	ldr	r2, [pc, #360]	@ (8002f8c <HAL_GPIO_Init+0x334>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x242>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	@ (8002f90 <HAL_GPIO_Init+0x338>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x23e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4e      	ldr	r2, [pc, #312]	@ (8002f94 <HAL_GPIO_Init+0x33c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x23a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4d      	ldr	r2, [pc, #308]	@ (8002f98 <HAL_GPIO_Init+0x340>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x236>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	@ (8002f9c <HAL_GPIO_Init+0x344>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x232>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <HAL_GPIO_Init+0x348>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x22e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa4 <HAL_GPIO_Init+0x34c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x22a>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00c      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00a      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e86:	2305      	movs	r3, #5
 8002e88:	e008      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e004      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_GPIO_Init+0x244>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	f002 0203 	and.w	r2, r2, #3
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eac:	4937      	ldr	r1, [pc, #220]	@ (8002f8c <HAL_GPIO_Init+0x334>)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eba:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ede:	4a32      	ldr	r2, [pc, #200]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ee4:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f08:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f32:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f5c:	4a12      	ldr	r2, [pc, #72]	@ (8002fa8 <HAL_GPIO_Init+0x350>)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f47f ae78 	bne.w	8002c68 <HAL_GPIO_Init+0x10>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	48000400 	.word	0x48000400
 8002f94:	48000800 	.word	0x48000800
 8002f98:	48000c00 	.word	0x48000c00
 8002f9c:	48001000 	.word	0x48001000
 8002fa0:	48001400 	.word	0x48001400
 8002fa4:	48001800 	.word	0x48001800
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fe2e 	bl	8000c8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_PWREx_GetVoltageRange+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003066:	d130      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003068:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003074:	d038      	beq.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800307e:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003086:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2232      	movs	r2, #50	@ 0x32
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0c9b      	lsrs	r3, r3, #18
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309c:	e002      	b.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b0:	d102      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f2      	bne.n	800309e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d110      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d6:	d007      	beq.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030d8:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030e0:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000
 80030fc:	20000000 	.word	0x20000000
 8003100:	431bde83 	.word	0x431bde83

08003104 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e3ca      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4b97      	ldr	r3, [pc, #604]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	4b94      	ldr	r3, [pc, #592]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80e4 	beq.w	8003300 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_RCC_OscConfig+0x4a>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f040 808b 	bne.w	800325c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 8087 	bne.w	800325c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314e:	4b89      	ldr	r3, [pc, #548]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x62>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e3a2      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	4b82      	ldr	r3, [pc, #520]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_RCC_OscConfig+0x7c>
 8003176:	4b7f      	ldr	r3, [pc, #508]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317e:	e005      	b.n	800318c <HAL_RCC_OscConfig+0x88>
 8003180:	4b7c      	ldr	r3, [pc, #496]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800318c:	4293      	cmp	r3, r2
 800318e:	d223      	bcs.n	80031d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd55 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e383      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a4:	4b73      	ldr	r3, [pc, #460]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a72      	ldr	r2, [pc, #456]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b70      	ldr	r3, [pc, #448]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	496d      	ldr	r1, [pc, #436]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4968      	ldr	r1, [pc, #416]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
 80031d6:	e025      	b.n	8003224 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031de:	f043 0308 	orr.w	r3, r3, #8
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4960      	ldr	r1, [pc, #384]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	495b      	ldr	r1, [pc, #364]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fd15 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e343      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003224:	f000 fc4a 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b52      	ldr	r3, [pc, #328]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	4950      	ldr	r1, [pc, #320]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_RCC_OscConfig+0x278>)
 8003242:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003244:	4b4e      	ldr	r3, [pc, #312]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ffe9 	bl	8001220 <HAL_InitTick>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d052      	beq.n	80032fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	e327      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d032      	beq.n	80032ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003264:	4b43      	ldr	r3, [pc, #268]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003270:	f7fe f826 	bl	80012c0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003278:	f7fe f822 	bl	80012c0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e310      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003296:	4b37      	ldr	r3, [pc, #220]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a36      	ldr	r2, [pc, #216]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b34      	ldr	r3, [pc, #208]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4931      	ldr	r1, [pc, #196]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	492c      	ldr	r1, [pc, #176]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e01a      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fff3 	bl	80012c0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032de:	f7fd ffef 	bl	80012c0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e2dd      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f0:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x1da>
 80032fc:	e000      	b.n	8003300 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d074      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x21a>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d10e      	bne.n	8003336 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d064      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d160      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e2ba      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x24a>
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0b      	ldr	r2, [pc, #44]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e026      	b.n	800339c <HAL_RCC_OscConfig+0x298>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003356:	d115      	bne.n	8003384 <HAL_RCC_OscConfig+0x280>
 8003358:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800335e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a02      	ldr	r2, [pc, #8]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x298>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	08005c70 	.word	0x08005c70
 800337c:	20000000 	.word	0x20000000
 8003380:	20000004 	.word	0x20000004
 8003384:	4ba0      	ldr	r3, [pc, #640]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a9f      	ldr	r2, [pc, #636]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b9d      	ldr	r3, [pc, #628]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a9c      	ldr	r2, [pc, #624]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff8c 	bl	80012c0 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd ff88 	bl	80012c0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e276      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033be:	4b92      	ldr	r3, [pc, #584]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x2a8>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd ff78 	bl	80012c0 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fd ff74 	bl	80012c0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e262      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e6:	4b88      	ldr	r3, [pc, #544]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2d0>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d060      	beq.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x310>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d119      	bne.n	8003442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d116      	bne.n	8003442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003414:	4b7c      	ldr	r3, [pc, #496]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x328>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e23f      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	4973      	ldr	r1, [pc, #460]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003440:	e040      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d023      	beq.n	8003492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344a:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd ff33 	bl	80012c0 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345e:	f7fd ff2f 	bl	80012c0 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e21d      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	4b65      	ldr	r3, [pc, #404]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b62      	ldr	r3, [pc, #392]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	495f      	ldr	r1, [pc, #380]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
 8003490:	e018      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5c      	ldr	r2, [pc, #368]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd ff0f 	bl	80012c0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fd ff0b 	bl	80012c0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1f9      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b8:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d03c      	beq.n	800354a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01c      	beq.n	8003512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034de:	4a4a      	ldr	r2, [pc, #296]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fd feea 	bl	80012c0 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f0:	f7fd fee6 	bl	80012c0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1d4      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003502:	4b41      	ldr	r3, [pc, #260]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ef      	beq.n	80034f0 <HAL_RCC_OscConfig+0x3ec>
 8003510:	e01b      	b.n	800354a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003518:	4a3b      	ldr	r2, [pc, #236]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd fecd 	bl	80012c0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fd fec9 	bl	80012c0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1b7      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800353c:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ef      	bne.n	800352a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a6 	beq.w	80036a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800355c:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003572:	6593      	str	r3, [r2, #88]	@ 0x58
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003580:	2301      	movs	r3, #1
 8003582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <HAL_RCC_OscConfig+0x508>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d118      	bne.n	80035c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003590:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_RCC_OscConfig+0x508>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_RCC_OscConfig+0x508>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359c:	f7fd fe90 	bl	80012c0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fd fe8c 	bl	80012c0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e17a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b15      	ldr	r3, [pc, #84]	@ (800360c <HAL_RCC_OscConfig+0x508>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x4d8>
 80035ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035da:	e029      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d115      	bne.n	8003610 <HAL_RCC_OscConfig+0x50c>
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	4a07      	ldr	r2, [pc, #28]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f4:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	4a03      	ldr	r2, [pc, #12]	@ (8003608 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
 8003610:	4b9c      	ldr	r3, [pc, #624]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003616:	4a9b      	ldr	r2, [pc, #620]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003620:	4b98      	ldr	r3, [pc, #608]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003626:	4a97      	ldr	r2, [pc, #604]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d016      	beq.n	8003666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fe42 	bl	80012c0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd fe3e 	bl	80012c0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e12a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	4b8b      	ldr	r3, [pc, #556]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ed      	beq.n	8003640 <HAL_RCC_OscConfig+0x53c>
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd fe2b 	bl	80012c0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd fe27 	bl	80012c0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e113      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003684:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ed      	bne.n	800366e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b7a      	ldr	r3, [pc, #488]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	4a79      	ldr	r2, [pc, #484]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80fe 	beq.w	80038aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	f040 80d0 	bne.w	8003858 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036b8:	4b72      	ldr	r3, [pc, #456]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d130      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	3b01      	subs	r3, #1
 80036d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d127      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11f      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036f8:	2a07      	cmp	r2, #7
 80036fa:	bf14      	ite	ne
 80036fc:	2201      	movne	r2, #1
 80036fe:	2200      	moveq	r2, #0
 8003700:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d109      	bne.n	800372e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d06e      	beq.n	800380c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d069      	beq.n	8003808 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003734:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ad      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003750:	4b4c      	ldr	r3, [pc, #304]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4b      	ldr	r2, [pc, #300]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800375c:	f7fd fdb0 	bl	80012c0 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd fdac 	bl	80012c0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e09a      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003776:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003782:	4b40      	ldr	r3, [pc, #256]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <HAL_RCC_OscConfig+0x784>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003792:	3a01      	subs	r2, #1
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800379c:	0212      	lsls	r2, r2, #8
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0552      	lsls	r2, r2, #21
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037b0:	0852      	lsrs	r2, r2, #1
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0652      	lsls	r2, r2, #25
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037bc:	0912      	lsrs	r2, r2, #4
 80037be:	0452      	lsls	r2, r2, #17
 80037c0:	430a      	orrs	r2, r1
 80037c2:	4930      	ldr	r1, [pc, #192]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e0:	f7fd fd6e 	bl	80012c0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fd fd6a 	bl	80012c0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e058      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	4b22      	ldr	r3, [pc, #136]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003806:	e050      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04f      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d148      	bne.n	80038aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003818:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a16      	ldr	r2, [pc, #88]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003830:	f7fd fd46 	bl	80012c0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd fd42 	bl	80012c0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e030      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x734>
 8003856:	e028      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d023      	beq.n	80038a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <HAL_RCC_OscConfig+0x780>)
 8003864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd fd29 	bl	80012c0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003870:	e00c      	b.n	800388c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fd25 	bl	80012c0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d905      	bls.n	800388c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e013      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
 8003884:	40021000 	.word	0x40021000
 8003888:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ec      	bne.n	8003872 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4905      	ldr	r1, [pc, #20]	@ (80038b4 <HAL_RCC_OscConfig+0x7b0>)
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_OscConfig+0x7b4>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
 80038a4:	e001      	b.n	80038aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	feeefffc 	.word	0xfeeefffc

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0e7      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b75      	ldr	r3, [pc, #468]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b72      	ldr	r3, [pc, #456]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4970      	ldr	r1, [pc, #448]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cf      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b66      	ldr	r3, [pc, #408]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003918:	429a      	cmp	r2, r3
 800391a:	d908      	bls.n	800392e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b63      	ldr	r3, [pc, #396]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4960      	ldr	r1, [pc, #384]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d04c      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b5a      	ldr	r3, [pc, #360]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d121      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0a6      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b54      	ldr	r3, [pc, #336]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e09a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003972:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e08e      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003982:	4b4a      	ldr	r3, [pc, #296]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e086      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b46      	ldr	r3, [pc, #280]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4943      	ldr	r1, [pc, #268]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fd fc8c 	bl	80012c0 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fc88 	bl	80012c0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e06e      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d208      	bcs.n	8003a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b2e      	ldr	r3, [pc, #184]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	492b      	ldr	r1, [pc, #172]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a02:	4b29      	ldr	r3, [pc, #164]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d210      	bcs.n	8003a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	4923      	ldr	r1, [pc, #140]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e036      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4918      	ldr	r1, [pc, #96]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4910      	ldr	r1, [pc, #64]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a70:	f000 f824 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	490b      	ldr	r1, [pc, #44]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd fbc3 	bl	8001220 <HAL_InitTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08005c70 	.word	0x08005c70
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d11e      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af0:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003afc:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e005      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d102      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e004      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b40:	4b23      	ldr	r3, [pc, #140]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d134      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d003      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xac>
 8003b60:	e005      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003b64:	617b      	str	r3, [r7, #20]
      break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6a:	617b      	str	r3, [r7, #20]
      break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	617b      	str	r3, [r7, #20]
      break;
 8003b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b74:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	fb03 f202 	mul.w	r2, r3, r2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	0e5b      	lsrs	r3, r3, #25
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	@ 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08005c88 	.word	0x08005c88
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200

08003bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4904      	ldr	r1, [pc, #16]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	08005c80 	.word	0x08005c80

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c1c:	f7ff ffda 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0adb      	lsrs	r3, r3, #11
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4904      	ldr	r1, [pc, #16]	@ (8003c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	08005c80 	.word	0x08005c80

08003c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c50:	4b2a      	ldr	r3, [pc, #168]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff f9ee 	bl	800303c <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
 8003c62:	e014      	b.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	4a24      	ldr	r2, [pc, #144]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c70:	4b22      	ldr	r3, [pc, #136]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f9de 	bl	800303c <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	4a1d      	ldr	r2, [pc, #116]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c94:	d10b      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d919      	bls.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ca0:	d902      	bls.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e013      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e010      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d902      	bls.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e00a      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	@ 0x80
 8003cbe:	d102      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e004      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b70      	cmp	r3, #112	@ 0x70
 8003cca:	d101      	bne.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	4909      	ldr	r1, [pc, #36]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40022000 	.word	0x40022000

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d041      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d28:	d02a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d2e:	d824      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3a:	d81e      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d44:	d010      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d46:	e018      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d48:	4b86      	ldr	r3, [pc, #536]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a85      	ldr	r2, [pc, #532]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d54:	e015      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fabb 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d66:	e00c      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fba6 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d88:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d96:	4973      	ldr	r1, [pc, #460]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d041      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003db8:	d02a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dbe:	d824      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dca:	d81e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd8:	4b62      	ldr	r3, [pc, #392]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a61      	ldr	r2, [pc, #388]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003de4:	e015      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa73 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df6:	e00c      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb5e 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e18:	4b52      	ldr	r3, [pc, #328]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e26:	494f      	ldr	r1, [pc, #316]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e2e:	e001      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a0 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e46:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e60:	4a40      	ldr	r2, [pc, #256]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e68:	4b3e      	ldr	r3, [pc, #248]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e74:	2301      	movs	r3, #1
 8003e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e84:	f7fd fa1c 	bl	80012c0 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd fa18 	bl	80012c0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea0:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ef      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d15c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d019      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed0:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003edc:	4b21      	ldr	r3, [pc, #132]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	4a20      	ldr	r2, [pc, #128]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eec:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003efc:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd f9d7 	bl	80012c0 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	e00b      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd f9d3 	bl	80012c0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f2c:	e006      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ec      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f42:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f52:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f5a:	e009      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f70:	7c7b      	ldrb	r3, [r7, #17]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b9e      	ldr	r3, [pc, #632]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	4a9d      	ldr	r2, [pc, #628]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8e:	4b98      	ldr	r3, [pc, #608]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	4994      	ldr	r1, [pc, #592]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f023 020c 	bic.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	498c      	ldr	r1, [pc, #560]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd2:	4b87      	ldr	r3, [pc, #540]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	4983      	ldr	r1, [pc, #524]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	497b      	ldr	r1, [pc, #492]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004016:	4b76      	ldr	r3, [pc, #472]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004024:	4972      	ldr	r1, [pc, #456]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	4b6d      	ldr	r3, [pc, #436]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	496a      	ldr	r1, [pc, #424]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b65      	ldr	r3, [pc, #404]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	4961      	ldr	r1, [pc, #388]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407c:	4b5c      	ldr	r3, [pc, #368]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	4959      	ldr	r1, [pc, #356]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800409e:	4b54      	ldr	r3, [pc, #336]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	4950      	ldr	r1, [pc, #320]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040c0:	4b4b      	ldr	r3, [pc, #300]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	4948      	ldr	r1, [pc, #288]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040e2:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	493f      	ldr	r1, [pc, #252]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d028      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004104:	4b3a      	ldr	r3, [pc, #232]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004112:	4937      	ldr	r1, [pc, #220]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004122:	d106      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b32      	ldr	r3, [pc, #200]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a31      	ldr	r2, [pc, #196]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e011      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004136:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800413a:	d10c      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f8c8 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004162:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	491f      	ldr	r1, [pc, #124]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004180:	d106      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004182:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418c:	60d3      	str	r3, [r2, #12]
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f899 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d02b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ce:	4908      	ldr	r1, [pc, #32]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041de:	d109      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a02      	ldr	r2, [pc, #8]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
 80041ec:	e014      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f867 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02f      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004224:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004232:	4928      	ldr	r1, [pc, #160]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800423e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004242:	d10d      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f844 	bl	80042d8 <RCCEx_PLLSAI1_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	74bb      	strb	r3, [r7, #18]
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3320      	adds	r3, #32
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f925 	bl	80044c0 <RCCEx_PLLSAI2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004290:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429e:	490d      	ldr	r1, [pc, #52]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c2:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000

080042d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e6:	4b75      	ldr	r3, [pc, #468]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042f2:	4b72      	ldr	r3, [pc, #456]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0203 	and.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10d      	bne.n	800431e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
       ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
       ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d047      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e044      	b.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d018      	beq.n	800435e <RCCEx_PLLSAI1_Config+0x86>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d825      	bhi.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <RCCEx_PLLSAI1_Config+0x62>
 8004334:	2b02      	cmp	r3, #2
 8004336:	d009      	beq.n	800434c <RCCEx_PLLSAI1_Config+0x74>
 8004338:	e020      	b.n	800437c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800433a:	4b60      	ldr	r3, [pc, #384]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e01a      	b.n	8004382 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e013      	b.n	8004386 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b57      	ldr	r3, [pc, #348]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800436a:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e004      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438a:	bf00      	nop
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004392:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4944      	ldr	r1, [pc, #272]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d17d      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043b4:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a40      	ldr	r2, [pc, #256]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fc ff7e 	bl	80012c0 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c8:	f7fc ff7a 	bl	80012c0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        break;
 80043da:	e005      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043dc:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ef      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d160      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f4:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	0912      	lsrs	r2, r2, #4
 800440c:	0452      	lsls	r2, r2, #17
 800440e:	430a      	orrs	r2, r1
 8004410:	492a      	ldr	r1, [pc, #168]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]
 8004416:	e027      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d112      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441e:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004426:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	0211      	lsls	r1, r2, #8
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6912      	ldr	r2, [r2, #16]
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0552      	lsls	r2, r2, #21
 800443a:	430a      	orrs	r2, r1
 800443c:	491f      	ldr	r1, [pc, #124]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
 8004442:	e011      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800444c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6952      	ldr	r2, [r2, #20]
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0652      	lsls	r2, r2, #25
 8004460:	430a      	orrs	r2, r1
 8004462:	4916      	ldr	r1, [pc, #88]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004468:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fc ff24 	bl	80012c0 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800447a:	e009      	b.n	8004490 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800447c:	f7fc ff20 	bl	80012c0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	73fb      	strb	r3, [r7, #15]
          break;
 800448e:	e005      	b.n	800449c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	4904      	ldr	r1, [pc, #16]	@ (80044bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000

080044c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044da:	4b67      	ldr	r3, [pc, #412]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
       ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044f2:	4b61      	ldr	r3, [pc, #388]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
       ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d047      	beq.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e044      	b.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d018      	beq.n	8004546 <RCCEx_PLLSAI2_Config+0x86>
 8004514:	2b03      	cmp	r3, #3
 8004516:	d825      	bhi.n	8004564 <RCCEx_PLLSAI2_Config+0xa4>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <RCCEx_PLLSAI2_Config+0x62>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d009      	beq.n	8004534 <RCCEx_PLLSAI2_Config+0x74>
 8004520:	e020      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004522:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d11d      	bne.n	800456a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004532:	e01a      	b.n	800456a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004534:	4b50      	ldr	r3, [pc, #320]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e013      	b.n	800456e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004546:	4b4c      	ldr	r3, [pc, #304]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	4b49      	ldr	r3, [pc, #292]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004562:	e006      	b.n	8004572 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e004      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004572:	bf00      	nop
    }

    if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800457a:	4b3f      	ldr	r3, [pc, #252]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	430b      	orrs	r3, r1
 8004590:	4939      	ldr	r1, [pc, #228]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d167      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fc fe8a 	bl	80012c0 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b0:	f7fc fe86 	bl	80012c0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
        break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ef      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14a      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d111      	bne.n	8004600 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045dc:	4b26      	ldr	r3, [pc, #152]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	0211      	lsls	r1, r2, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	0912      	lsrs	r2, r2, #4
 80045f4:	0452      	lsls	r2, r2, #17
 80045f6:	430a      	orrs	r2, r1
 80045f8:	491f      	ldr	r1, [pc, #124]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	614b      	str	r3, [r1, #20]
 80045fe:	e011      	b.n	8004624 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004608:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	0211      	lsls	r1, r2, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6912      	ldr	r2, [r2, #16]
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	430a      	orrs	r2, r1
 800461e:	4916      	ldr	r1, [pc, #88]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004624:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fc fe46 	bl	80012c0 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004636:	e009      	b.n	800464c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004638:	f7fc fe42 	bl	80012c0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
          break;
 800464a:	e005      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4904      	ldr	r1, [pc, #16]	@ (8004678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fc24 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fb6a 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8af 	bl	800482c <UART_SetConfig>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01b      	b.n	8004710 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fbe9 	bl	8004ee0 <UART_CheckIdleState>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800472c:	2b20      	cmp	r3, #32
 800472e:	d177      	bne.n	8004820 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Transmit+0x24>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e070      	b.n	8004822 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	@ 0x21
 800474c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474e:	f7fc fdb7 	bl	80012c0 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476c:	d108      	bne.n	8004780 <HAL_UART_Transmit+0x68>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e003      	b.n	8004788 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004788:	e02f      	b.n	80047ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fc4b 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e03b      	b.n	8004822 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	881a      	ldrh	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047bc:	b292      	uxth	r2, r2
 80047be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	3302      	adds	r3, #2
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e007      	b.n	80047d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1c9      	bne.n	800478a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2140      	movs	r1, #64	@ 0x40
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fc15 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e005      	b.n	8004822 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b08a      	sub	sp, #40	@ 0x28
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4ba4      	ldr	r3, [pc, #656]	@ (8004aec <UART_SetConfig+0x2c0>)
 800485c:	4013      	ands	r3, r2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004864:	430b      	orrs	r3, r1
 8004866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a99      	ldr	r2, [pc, #612]	@ (8004af0 <UART_SetConfig+0x2c4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004894:	4313      	orrs	r3, r2
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a90      	ldr	r2, [pc, #576]	@ (8004af4 <UART_SetConfig+0x2c8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d126      	bne.n	8004904 <UART_SetConfig+0xd8>
 80048b6:	4b90      	ldr	r3, [pc, #576]	@ (8004af8 <UART_SetConfig+0x2cc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d81b      	bhi.n	80048fc <UART_SetConfig+0xd0>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0xa0>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e116      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e112      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e10e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e10a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e106      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <UART_SetConfig+0x2d0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d138      	bne.n	8004980 <UART_SetConfig+0x154>
 800490e:	4b7a      	ldr	r3, [pc, #488]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d82d      	bhi.n	8004978 <UART_SetConfig+0x14c>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0xf8>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004979 	.word	0x08004979
 800492c:	08004979 	.word	0x08004979
 8004930:	08004979 	.word	0x08004979
 8004934:	08004969 	.word	0x08004969
 8004938:	08004979 	.word	0x08004979
 800493c:	08004979 	.word	0x08004979
 8004940:	08004979 	.word	0x08004979
 8004944:	08004961 	.word	0x08004961
 8004948:	08004979 	.word	0x08004979
 800494c:	08004979 	.word	0x08004979
 8004950:	08004979 	.word	0x08004979
 8004954:	08004971 	.word	0x08004971
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e0d8      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004966:	e0d4      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496e:	e0d0      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004976:	e0cc      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497e:	e0c8      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <UART_SetConfig+0x2d4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d125      	bne.n	80049d6 <UART_SetConfig+0x1aa>
 800498a:	4b5b      	ldr	r3, [pc, #364]	@ (8004af8 <UART_SetConfig+0x2cc>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004994:	2b30      	cmp	r3, #48	@ 0x30
 8004996:	d016      	beq.n	80049c6 <UART_SetConfig+0x19a>
 8004998:	2b30      	cmp	r3, #48	@ 0x30
 800499a:	d818      	bhi.n	80049ce <UART_SetConfig+0x1a2>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d00a      	beq.n	80049b6 <UART_SetConfig+0x18a>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d814      	bhi.n	80049ce <UART_SetConfig+0x1a2>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <UART_SetConfig+0x182>
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d008      	beq.n	80049be <UART_SetConfig+0x192>
 80049ac:	e00f      	b.n	80049ce <UART_SetConfig+0x1a2>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b4:	e0ad      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049b6:	2302      	movs	r3, #2
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049bc:	e0a9      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049be:	2304      	movs	r3, #4
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c4:	e0a5      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049c6:	2308      	movs	r3, #8
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049cc:	e0a1      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049ce:	2310      	movs	r3, #16
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d4:	e09d      	b.n	8004b12 <UART_SetConfig+0x2e6>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4a      	ldr	r2, [pc, #296]	@ (8004b04 <UART_SetConfig+0x2d8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d125      	bne.n	8004a2c <UART_SetConfig+0x200>
 80049e0:	4b45      	ldr	r3, [pc, #276]	@ (8004af8 <UART_SetConfig+0x2cc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ec:	d016      	beq.n	8004a1c <UART_SetConfig+0x1f0>
 80049ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f0:	d818      	bhi.n	8004a24 <UART_SetConfig+0x1f8>
 80049f2:	2b80      	cmp	r3, #128	@ 0x80
 80049f4:	d00a      	beq.n	8004a0c <UART_SetConfig+0x1e0>
 80049f6:	2b80      	cmp	r3, #128	@ 0x80
 80049f8:	d814      	bhi.n	8004a24 <UART_SetConfig+0x1f8>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0x1d8>
 80049fe:	2b40      	cmp	r3, #64	@ 0x40
 8004a00:	d008      	beq.n	8004a14 <UART_SetConfig+0x1e8>
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x1f8>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e082      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e07e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e07a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e076      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e072      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	@ (8004b08 <UART_SetConfig+0x2dc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d12a      	bne.n	8004a8c <UART_SetConfig+0x260>
 8004a36:	4b30      	ldr	r3, [pc, #192]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a44:	d01a      	beq.n	8004a7c <UART_SetConfig+0x250>
 8004a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4a:	d81b      	bhi.n	8004a84 <UART_SetConfig+0x258>
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a50:	d00c      	beq.n	8004a6c <UART_SetConfig+0x240>
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a56:	d815      	bhi.n	8004a84 <UART_SetConfig+0x258>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <UART_SetConfig+0x238>
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a60:	d008      	beq.n	8004a74 <UART_SetConfig+0x248>
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x258>
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e052      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e04e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a74:	2304      	movs	r3, #4
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e04a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e046      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e042      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <UART_SetConfig+0x2c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d13a      	bne.n	8004b0c <UART_SetConfig+0x2e0>
 8004a96:	4b18      	ldr	r3, [pc, #96]	@ (8004af8 <UART_SetConfig+0x2cc>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa4:	d01a      	beq.n	8004adc <UART_SetConfig+0x2b0>
 8004aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aaa:	d81b      	bhi.n	8004ae4 <UART_SetConfig+0x2b8>
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab0:	d00c      	beq.n	8004acc <UART_SetConfig+0x2a0>
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab6:	d815      	bhi.n	8004ae4 <UART_SetConfig+0x2b8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <UART_SetConfig+0x298>
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d008      	beq.n	8004ad4 <UART_SetConfig+0x2a8>
 8004ac2:	e00f      	b.n	8004ae4 <UART_SetConfig+0x2b8>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e022      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e01e      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e01a      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e016      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0x2e6>
 8004aec:	efff69f3 	.word	0xefff69f3
 8004af0:	40008000 	.word	0x40008000
 8004af4:	40013800 	.word	0x40013800
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a9f      	ldr	r2, [pc, #636]	@ (8004d94 <UART_SetConfig+0x568>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d17a      	bne.n	8004c12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d824      	bhi.n	8004b6e <UART_SetConfig+0x342>
 8004b24:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <UART_SetConfig+0x300>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b5f 	.word	0x08004b5f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b6f 	.word	0x08004b6f
 8004b4c:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7ff f84c 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b8f      	ldr	r3, [pc, #572]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe ffad 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80fb 	beq.w	8004d78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4413      	add	r3, r2
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d305      	bcc.n	8004b9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d903      	bls.n	8004ba6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ba4:	e0e8      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	461c      	mov	r4, r3
 8004bac:	4615      	mov	r5, r2
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	022b      	lsls	r3, r5, #8
 8004bb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bbc:	0222      	lsls	r2, r4, #8
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6849      	ldr	r1, [r1, #4]
 8004bc2:	0849      	lsrs	r1, r1, #1
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4681      	mov	r9, r0
 8004bca:	eb12 0a08 	adds.w	sl, r2, r8
 8004bce:	eb43 0b09 	adc.w	fp, r3, r9
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	4650      	mov	r0, sl
 8004be2:	4659      	mov	r1, fp
 8004be4:	f7fb fb4c 	bl	8000280 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf6:	d308      	bcc.n	8004c0a <UART_SetConfig+0x3de>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bfe:	d204      	bcs.n	8004c0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	e0b6      	b.n	8004d78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c10:	e0b2      	b.n	8004d78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1a:	d15e      	bne.n	8004cda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d828      	bhi.n	8004c76 <UART_SetConfig+0x44a>
 8004c24:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <UART_SetConfig+0x400>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7fe ffcc 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004c54:	61f8      	str	r0, [r7, #28]
        break;
 8004c56:	e014      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7fe ffde 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fe ff29 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004c6a:	61f8      	str	r0, [r7, #28]
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d077      	beq.n	8004d78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005a      	lsls	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d916      	bls.n	8004cd2 <UART_SetConfig+0x4a6>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d212      	bcs.n	8004cd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f023 030f 	bic.w	r3, r3, #15
 8004cb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	8afb      	ldrh	r3, [r7, #22]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	8afa      	ldrh	r2, [r7, #22]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e052      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cd8:	e04e      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d827      	bhi.n	8004d32 <UART_SetConfig+0x506>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x4bc>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe ff6e 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fe ff80 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <UART_SetConfig+0x56c>)
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe fecb 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8004d26:	61f8      	str	r0, [r7, #28]
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61fb      	str	r3, [r7, #28]
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	085a      	lsrs	r2, r3, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d909      	bls.n	8004d72 <UART_SetConfig+0x546>
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d205      	bcs.n	8004d72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e002      	b.n	8004d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3728      	adds	r7, #40	@ 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d92:	bf00      	nop
 8004d94:	40008000 	.word	0x40008000
 8004d98:	00f42400 	.word	0x00f42400

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b098      	sub	sp, #96	@ 0x60
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc f9e6 	bl	80012c0 <HAL_GetTick>
 8004ef4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d12e      	bne.n	8004f62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f88c 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d021      	beq.n	8004f62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e062      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d149      	bne.n	8005004 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f856 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03c      	beq.n	8005004 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	623b      	str	r3, [r7, #32]
   return(result);
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e011      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3758      	adds	r7, #88	@ 0x58
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	e04f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005048:	d04b      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fc f939 	bl	80012c0 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e04e      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d037      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b80      	cmp	r3, #128	@ 0x80
 8005076:	d034      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d031      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d110      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f838 	bl	800510a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e029      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050bc:	d111      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f81e 	bl	800510a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d0a0      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b095      	sub	sp, #84	@ 0x54
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005130:	643b      	str	r3, [r7, #64]	@ 0x40
 8005132:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005136:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	61fb      	str	r3, [r7, #28]
   return(result);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800517c:	2b01      	cmp	r3, #1
 800517e:	d118      	bne.n	80051b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	60bb      	str	r3, [r7, #8]
   return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051c6:	bf00      	nop
 80051c8:	3754      	adds	r7, #84	@ 0x54
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <siprintf>:
 80051d4:	b40e      	push	{r1, r2, r3}
 80051d6:	b500      	push	{lr}
 80051d8:	b09c      	sub	sp, #112	@ 0x70
 80051da:	ab1d      	add	r3, sp, #116	@ 0x74
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	9006      	str	r0, [sp, #24]
 80051e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051e4:	4809      	ldr	r0, [pc, #36]	@ (800520c <siprintf+0x38>)
 80051e6:	9107      	str	r1, [sp, #28]
 80051e8:	9104      	str	r1, [sp, #16]
 80051ea:	4909      	ldr	r1, [pc, #36]	@ (8005210 <siprintf+0x3c>)
 80051ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f0:	9105      	str	r1, [sp, #20]
 80051f2:	6800      	ldr	r0, [r0, #0]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	a902      	add	r1, sp, #8
 80051f8:	f000 f89c 	bl	8005334 <_svfiprintf_r>
 80051fc:	9b02      	ldr	r3, [sp, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	b01c      	add	sp, #112	@ 0x70
 8005204:	f85d eb04 	ldr.w	lr, [sp], #4
 8005208:	b003      	add	sp, #12
 800520a:	4770      	bx	lr
 800520c:	2000000c 	.word	0x2000000c
 8005210:	ffff0208 	.word	0xffff0208

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <__errno>:
 8005224:	4b01      	ldr	r3, [pc, #4]	@ (800522c <__errno+0x8>)
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	2000000c 	.word	0x2000000c

08005230 <__libc_init_array>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4d0d      	ldr	r5, [pc, #52]	@ (8005268 <__libc_init_array+0x38>)
 8005234:	4c0d      	ldr	r4, [pc, #52]	@ (800526c <__libc_init_array+0x3c>)
 8005236:	1b64      	subs	r4, r4, r5
 8005238:	10a4      	asrs	r4, r4, #2
 800523a:	2600      	movs	r6, #0
 800523c:	42a6      	cmp	r6, r4
 800523e:	d109      	bne.n	8005254 <__libc_init_array+0x24>
 8005240:	4d0b      	ldr	r5, [pc, #44]	@ (8005270 <__libc_init_array+0x40>)
 8005242:	4c0c      	ldr	r4, [pc, #48]	@ (8005274 <__libc_init_array+0x44>)
 8005244:	f000 fc66 	bl	8005b14 <_init>
 8005248:	1b64      	subs	r4, r4, r5
 800524a:	10a4      	asrs	r4, r4, #2
 800524c:	2600      	movs	r6, #0
 800524e:	42a6      	cmp	r6, r4
 8005250:	d105      	bne.n	800525e <__libc_init_array+0x2e>
 8005252:	bd70      	pop	{r4, r5, r6, pc}
 8005254:	f855 3b04 	ldr.w	r3, [r5], #4
 8005258:	4798      	blx	r3
 800525a:	3601      	adds	r6, #1
 800525c:	e7ee      	b.n	800523c <__libc_init_array+0xc>
 800525e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005262:	4798      	blx	r3
 8005264:	3601      	adds	r6, #1
 8005266:	e7f2      	b.n	800524e <__libc_init_array+0x1e>
 8005268:	08005cf4 	.word	0x08005cf4
 800526c:	08005cf4 	.word	0x08005cf4
 8005270:	08005cf4 	.word	0x08005cf4
 8005274:	08005cf8 	.word	0x08005cf8

08005278 <__retarget_lock_acquire_recursive>:
 8005278:	4770      	bx	lr

0800527a <__retarget_lock_release_recursive>:
 800527a:	4770      	bx	lr

0800527c <__ssputs_r>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	688e      	ldr	r6, [r1, #8]
 8005282:	461f      	mov	r7, r3
 8005284:	42be      	cmp	r6, r7
 8005286:	680b      	ldr	r3, [r1, #0]
 8005288:	4682      	mov	sl, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4690      	mov	r8, r2
 800528e:	d82d      	bhi.n	80052ec <__ssputs_r+0x70>
 8005290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005298:	d026      	beq.n	80052e8 <__ssputs_r+0x6c>
 800529a:	6965      	ldr	r5, [r4, #20]
 800529c:	6909      	ldr	r1, [r1, #16]
 800529e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a2:	eba3 0901 	sub.w	r9, r3, r1
 80052a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052aa:	1c7b      	adds	r3, r7, #1
 80052ac:	444b      	add	r3, r9
 80052ae:	106d      	asrs	r5, r5, #1
 80052b0:	429d      	cmp	r5, r3
 80052b2:	bf38      	it	cc
 80052b4:	461d      	movcc	r5, r3
 80052b6:	0553      	lsls	r3, r2, #21
 80052b8:	d527      	bpl.n	800530a <__ssputs_r+0x8e>
 80052ba:	4629      	mov	r1, r5
 80052bc:	f000 f958 	bl	8005570 <_malloc_r>
 80052c0:	4606      	mov	r6, r0
 80052c2:	b360      	cbz	r0, 800531e <__ssputs_r+0xa2>
 80052c4:	6921      	ldr	r1, [r4, #16]
 80052c6:	464a      	mov	r2, r9
 80052c8:	f000 fbc4 	bl	8005a54 <memcpy>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	6126      	str	r6, [r4, #16]
 80052da:	6165      	str	r5, [r4, #20]
 80052dc:	444e      	add	r6, r9
 80052de:	eba5 0509 	sub.w	r5, r5, r9
 80052e2:	6026      	str	r6, [r4, #0]
 80052e4:	60a5      	str	r5, [r4, #8]
 80052e6:	463e      	mov	r6, r7
 80052e8:	42be      	cmp	r6, r7
 80052ea:	d900      	bls.n	80052ee <__ssputs_r+0x72>
 80052ec:	463e      	mov	r6, r7
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	4632      	mov	r2, r6
 80052f2:	4641      	mov	r1, r8
 80052f4:	f000 fb84 	bl	8005a00 <memmove>
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	1b9b      	subs	r3, r3, r6
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	4433      	add	r3, r6
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	2000      	movs	r0, #0
 8005306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530a:	462a      	mov	r2, r5
 800530c:	f000 fb4a 	bl	80059a4 <_realloc_r>
 8005310:	4606      	mov	r6, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d1e0      	bne.n	80052d8 <__ssputs_r+0x5c>
 8005316:	6921      	ldr	r1, [r4, #16]
 8005318:	4650      	mov	r0, sl
 800531a:	f000 fba9 	bl	8005a70 <_free_r>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005330:	e7e9      	b.n	8005306 <__ssputs_r+0x8a>
	...

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	b09d      	sub	sp, #116	@ 0x74
 8005340:	4607      	mov	r7, r0
 8005342:	460d      	mov	r5, r1
 8005344:	4614      	mov	r4, r2
 8005346:	d510      	bpl.n	800536a <_svfiprintf_r+0x36>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b973      	cbnz	r3, 800536a <_svfiprintf_r+0x36>
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	f000 f90f 	bl	8005570 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b930      	cbnz	r0, 8005366 <_svfiprintf_r+0x32>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005360:	b01d      	add	sp, #116	@ 0x74
 8005362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005366:	2340      	movs	r3, #64	@ 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	2330      	movs	r3, #48	@ 0x30
 800537a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005518 <_svfiprintf_r+0x1e4>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x60>
 8005390:	2a25      	cmp	r2, #37	@ 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x54>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7e>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6b 	bl	800527c <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a7 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 809f 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	484e      	ldr	r0, [pc, #312]	@ (8005518 <_svfiprintf_r+0x1e4>)
 80053de:	f7fa feff 	bl	80001e0 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xea>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	@ 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xfa>
 8005402:	9a07      	ldr	r2, [sp, #28]
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	@ 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94b      	bls.n	80054b0 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x114>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x114>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	46a2      	mov	sl, r4
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0xa0>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	@ 0x2e
 800544c:	d10a      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	@ 0x2a
 8005452:	d132      	bne.n	80054ba <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005460:	3402      	adds	r4, #2
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005528 <_svfiprintf_r+0x1f4>
 8005468:	7821      	ldrb	r1, [r4, #0]
 800546a:	2203      	movs	r2, #3
 800546c:	4650      	mov	r0, sl
 800546e:	f7fa feb7 	bl	80001e0 <memchr>
 8005472:	b138      	cbz	r0, 8005484 <_svfiprintf_r+0x150>
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	eba0 000a 	sub.w	r0, r0, sl
 800547a:	2240      	movs	r2, #64	@ 0x40
 800547c:	4082      	lsls	r2, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	3401      	adds	r4, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4824      	ldr	r0, [pc, #144]	@ (800551c <_svfiprintf_r+0x1e8>)
 800548a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800548e:	2206      	movs	r2, #6
 8005490:	f7fa fea6 	bl	80001e0 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d036      	beq.n	8005506 <_svfiprintf_r+0x1d2>
 8005498:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <_svfiprintf_r+0x1ec>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_svfiprintf_r+0x1b0>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054aa:	4433      	add	r3, r6
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	e76a      	b.n	8005386 <_svfiprintf_r+0x52>
 80054b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b4:	460c      	mov	r4, r1
 80054b6:	2001      	movs	r0, #1
 80054b8:	e7a8      	b.n	800540c <_svfiprintf_r+0xd8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	3401      	adds	r4, #1
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	4619      	mov	r1, r3
 80054c2:	f04f 0c0a 	mov.w	ip, #10
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	@ 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_svfiprintf_r+0x1a6>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c4      	b.n	8005464 <_svfiprintf_r+0x130>
 80054da:	fb0c 2101 	mla	r1, ip, r1, r2
 80054de:	4604      	mov	r4, r0
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7f0      	b.n	80054c6 <_svfiprintf_r+0x192>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <_svfiprintf_r+0x1f0>)
 80054ec:	a904      	add	r1, sp, #16
 80054ee:	4638      	mov	r0, r7
 80054f0:	f3af 8000 	nop.w
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	d1d6      	bne.n	80054a8 <_svfiprintf_r+0x174>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af2d 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005504:	e72c      	b.n	8005360 <_svfiprintf_r+0x2c>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <_svfiprintf_r+0x1f0>)
 800550e:	a904      	add	r1, sp, #16
 8005510:	4638      	mov	r0, r7
 8005512:	f000 f91b 	bl	800574c <_printf_i>
 8005516:	e7ed      	b.n	80054f4 <_svfiprintf_r+0x1c0>
 8005518:	08005cb8 	.word	0x08005cb8
 800551c:	08005cc2 	.word	0x08005cc2
 8005520:	00000000 	.word	0x00000000
 8005524:	0800527d 	.word	0x0800527d
 8005528:	08005cbe 	.word	0x08005cbe

0800552c <sbrk_aligned>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4e0f      	ldr	r6, [pc, #60]	@ (800556c <sbrk_aligned+0x40>)
 8005530:	460c      	mov	r4, r1
 8005532:	6831      	ldr	r1, [r6, #0]
 8005534:	4605      	mov	r5, r0
 8005536:	b911      	cbnz	r1, 800553e <sbrk_aligned+0x12>
 8005538:	f000 fa7c 	bl	8005a34 <_sbrk_r>
 800553c:	6030      	str	r0, [r6, #0]
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fa77 	bl	8005a34 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d103      	bne.n	8005552 <sbrk_aligned+0x26>
 800554a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800554e:	4620      	mov	r0, r4
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	1cc4      	adds	r4, r0, #3
 8005554:	f024 0403 	bic.w	r4, r4, #3
 8005558:	42a0      	cmp	r0, r4
 800555a:	d0f8      	beq.n	800554e <sbrk_aligned+0x22>
 800555c:	1a21      	subs	r1, r4, r0
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fa68 	bl	8005a34 <_sbrk_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d1f2      	bne.n	800554e <sbrk_aligned+0x22>
 8005568:	e7ef      	b.n	800554a <sbrk_aligned+0x1e>
 800556a:	bf00      	nop
 800556c:	2000038c 	.word	0x2000038c

08005570 <_malloc_r>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4606      	mov	r6, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d904      	bls.n	8005596 <_malloc_r+0x26>
 800558c:	230c      	movs	r3, #12
 800558e:	6033      	str	r3, [r6, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800566c <_malloc_r+0xfc>
 800559a:	f000 f9f7 	bl	800598c <__malloc_lock>
 800559e:	f8d8 3000 	ldr.w	r3, [r8]
 80055a2:	461c      	mov	r4, r3
 80055a4:	bb44      	cbnz	r4, 80055f8 <_malloc_r+0x88>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7ff ffbf 	bl	800552c <sbrk_aligned>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	4604      	mov	r4, r0
 80055b2:	d158      	bne.n	8005666 <_malloc_r+0xf6>
 80055b4:	f8d8 4000 	ldr.w	r4, [r8]
 80055b8:	4627      	mov	r7, r4
 80055ba:	2f00      	cmp	r7, #0
 80055bc:	d143      	bne.n	8005646 <_malloc_r+0xd6>
 80055be:	2c00      	cmp	r4, #0
 80055c0:	d04b      	beq.n	800565a <_malloc_r+0xea>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	4639      	mov	r1, r7
 80055c6:	4630      	mov	r0, r6
 80055c8:	eb04 0903 	add.w	r9, r4, r3
 80055cc:	f000 fa32 	bl	8005a34 <_sbrk_r>
 80055d0:	4581      	cmp	r9, r0
 80055d2:	d142      	bne.n	800565a <_malloc_r+0xea>
 80055d4:	6821      	ldr	r1, [r4, #0]
 80055d6:	1a6d      	subs	r5, r5, r1
 80055d8:	4629      	mov	r1, r5
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff ffa6 	bl	800552c <sbrk_aligned>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d03a      	beq.n	800565a <_malloc_r+0xea>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	442b      	add	r3, r5
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	f8d8 3000 	ldr.w	r3, [r8]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	bb62      	cbnz	r2, 800564c <_malloc_r+0xdc>
 80055f2:	f8c8 7000 	str.w	r7, [r8]
 80055f6:	e00f      	b.n	8005618 <_malloc_r+0xa8>
 80055f8:	6822      	ldr	r2, [r4, #0]
 80055fa:	1b52      	subs	r2, r2, r5
 80055fc:	d420      	bmi.n	8005640 <_malloc_r+0xd0>
 80055fe:	2a0b      	cmp	r2, #11
 8005600:	d917      	bls.n	8005632 <_malloc_r+0xc2>
 8005602:	1961      	adds	r1, r4, r5
 8005604:	42a3      	cmp	r3, r4
 8005606:	6025      	str	r5, [r4, #0]
 8005608:	bf18      	it	ne
 800560a:	6059      	strne	r1, [r3, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	bf08      	it	eq
 8005610:	f8c8 1000 	streq.w	r1, [r8]
 8005614:	5162      	str	r2, [r4, r5]
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f9bd 	bl	8005998 <__malloc_unlock>
 800561e:	f104 000b 	add.w	r0, r4, #11
 8005622:	1d23      	adds	r3, r4, #4
 8005624:	f020 0007 	bic.w	r0, r0, #7
 8005628:	1ac2      	subs	r2, r0, r3
 800562a:	bf1c      	itt	ne
 800562c:	1a1b      	subne	r3, r3, r0
 800562e:	50a3      	strne	r3, [r4, r2]
 8005630:	e7af      	b.n	8005592 <_malloc_r+0x22>
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	42a3      	cmp	r3, r4
 8005636:	bf0c      	ite	eq
 8005638:	f8c8 2000 	streq.w	r2, [r8]
 800563c:	605a      	strne	r2, [r3, #4]
 800563e:	e7eb      	b.n	8005618 <_malloc_r+0xa8>
 8005640:	4623      	mov	r3, r4
 8005642:	6864      	ldr	r4, [r4, #4]
 8005644:	e7ae      	b.n	80055a4 <_malloc_r+0x34>
 8005646:	463c      	mov	r4, r7
 8005648:	687f      	ldr	r7, [r7, #4]
 800564a:	e7b6      	b.n	80055ba <_malloc_r+0x4a>
 800564c:	461a      	mov	r2, r3
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	42a3      	cmp	r3, r4
 8005652:	d1fb      	bne.n	800564c <_malloc_r+0xdc>
 8005654:	2300      	movs	r3, #0
 8005656:	6053      	str	r3, [r2, #4]
 8005658:	e7de      	b.n	8005618 <_malloc_r+0xa8>
 800565a:	230c      	movs	r3, #12
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f99a 	bl	8005998 <__malloc_unlock>
 8005664:	e794      	b.n	8005590 <_malloc_r+0x20>
 8005666:	6005      	str	r5, [r0, #0]
 8005668:	e7d6      	b.n	8005618 <_malloc_r+0xa8>
 800566a:	bf00      	nop
 800566c:	20000390 	.word	0x20000390

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4698      	mov	r8, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005680:	4293      	cmp	r3, r2
 8005682:	bfb8      	it	lt
 8005684:	4613      	movlt	r3, r2
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800568c:	4607      	mov	r7, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc26      	bgt.n	8005706 <_printf_common+0x96>
 80056b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	3b00      	subs	r3, #0
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d42b      	bmi.n	8005720 <_printf_common+0xb0>
 80056c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056cc:	4641      	mov	r1, r8
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c8      	blx	r9
 80056d2:	3001      	adds	r0, #1
 80056d4:	d01e      	beq.n	8005714 <_printf_common+0xa4>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	f003 0306 	and.w	r3, r3, #6
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf02      	ittt	eq
 80056e2:	68e5      	ldreq	r5, [r4, #12]
 80056e4:	6833      	ldreq	r3, [r6, #0]
 80056e6:	1aed      	subeq	r5, r5, r3
 80056e8:	68a3      	ldr	r3, [r4, #8]
 80056ea:	bf0c      	ite	eq
 80056ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f0:	2500      	movne	r5, #0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfc4      	itt	gt
 80056f6:	1a9b      	subgt	r3, r3, r2
 80056f8:	18ed      	addgt	r5, r5, r3
 80056fa:	2600      	movs	r6, #0
 80056fc:	341a      	adds	r4, #26
 80056fe:	42b5      	cmp	r5, r6
 8005700:	d11a      	bne.n	8005738 <_printf_common+0xc8>
 8005702:	2000      	movs	r0, #0
 8005704:	e008      	b.n	8005718 <_printf_common+0xa8>
 8005706:	2301      	movs	r3, #1
 8005708:	4652      	mov	r2, sl
 800570a:	4641      	mov	r1, r8
 800570c:	4638      	mov	r0, r7
 800570e:	47c8      	blx	r9
 8005710:	3001      	adds	r0, #1
 8005712:	d103      	bne.n	800571c <_printf_common+0xac>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571c:	3501      	adds	r5, #1
 800571e:	e7c6      	b.n	80056ae <_printf_common+0x3e>
 8005720:	18e1      	adds	r1, r4, r3
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	2030      	movs	r0, #48	@ 0x30
 8005726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800572a:	4422      	add	r2, r4
 800572c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005734:	3302      	adds	r3, #2
 8005736:	e7c7      	b.n	80056c8 <_printf_common+0x58>
 8005738:	2301      	movs	r3, #1
 800573a:	4622      	mov	r2, r4
 800573c:	4641      	mov	r1, r8
 800573e:	4638      	mov	r0, r7
 8005740:	47c8      	blx	r9
 8005742:	3001      	adds	r0, #1
 8005744:	d0e6      	beq.n	8005714 <_printf_common+0xa4>
 8005746:	3601      	adds	r6, #1
 8005748:	e7d9      	b.n	80056fe <_printf_common+0x8e>
	...

0800574c <_printf_i>:
 800574c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	7e0f      	ldrb	r7, [r1, #24]
 8005752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005754:	2f78      	cmp	r7, #120	@ 0x78
 8005756:	4691      	mov	r9, r2
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	469a      	mov	sl, r3
 800575e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005762:	d807      	bhi.n	8005774 <_printf_i+0x28>
 8005764:	2f62      	cmp	r7, #98	@ 0x62
 8005766:	d80a      	bhi.n	800577e <_printf_i+0x32>
 8005768:	2f00      	cmp	r7, #0
 800576a:	f000 80d2 	beq.w	8005912 <_printf_i+0x1c6>
 800576e:	2f58      	cmp	r7, #88	@ 0x58
 8005770:	f000 80b9 	beq.w	80058e6 <_printf_i+0x19a>
 8005774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800577c:	e03a      	b.n	80057f4 <_printf_i+0xa8>
 800577e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005782:	2b15      	cmp	r3, #21
 8005784:	d8f6      	bhi.n	8005774 <_printf_i+0x28>
 8005786:	a101      	add	r1, pc, #4	@ (adr r1, 800578c <_printf_i+0x40>)
 8005788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800578c:	080057e5 	.word	0x080057e5
 8005790:	080057f9 	.word	0x080057f9
 8005794:	08005775 	.word	0x08005775
 8005798:	08005775 	.word	0x08005775
 800579c:	08005775 	.word	0x08005775
 80057a0:	08005775 	.word	0x08005775
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005775 	.word	0x08005775
 80057ac:	08005775 	.word	0x08005775
 80057b0:	08005775 	.word	0x08005775
 80057b4:	08005775 	.word	0x08005775
 80057b8:	080058f9 	.word	0x080058f9
 80057bc:	08005823 	.word	0x08005823
 80057c0:	080058b3 	.word	0x080058b3
 80057c4:	08005775 	.word	0x08005775
 80057c8:	08005775 	.word	0x08005775
 80057cc:	0800591b 	.word	0x0800591b
 80057d0:	08005775 	.word	0x08005775
 80057d4:	08005823 	.word	0x08005823
 80057d8:	08005775 	.word	0x08005775
 80057dc:	08005775 	.word	0x08005775
 80057e0:	080058bb 	.word	0x080058bb
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6032      	str	r2, [r6, #0]
 80057ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057f4:	2301      	movs	r3, #1
 80057f6:	e09d      	b.n	8005934 <_printf_i+0x1e8>
 80057f8:	6833      	ldr	r3, [r6, #0]
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	1d19      	adds	r1, r3, #4
 80057fe:	6031      	str	r1, [r6, #0]
 8005800:	0606      	lsls	r6, r0, #24
 8005802:	d501      	bpl.n	8005808 <_printf_i+0xbc>
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	e003      	b.n	8005810 <_printf_i+0xc4>
 8005808:	0645      	lsls	r5, r0, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0xb8>
 800580c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005810:	2d00      	cmp	r5, #0
 8005812:	da03      	bge.n	800581c <_printf_i+0xd0>
 8005814:	232d      	movs	r3, #45	@ 0x2d
 8005816:	426d      	negs	r5, r5
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800581c:	4859      	ldr	r0, [pc, #356]	@ (8005984 <_printf_i+0x238>)
 800581e:	230a      	movs	r3, #10
 8005820:	e011      	b.n	8005846 <_printf_i+0xfa>
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	0608      	lsls	r0, r1, #24
 8005828:	f853 5b04 	ldr.w	r5, [r3], #4
 800582c:	d402      	bmi.n	8005834 <_printf_i+0xe8>
 800582e:	0649      	lsls	r1, r1, #25
 8005830:	bf48      	it	mi
 8005832:	b2ad      	uxthmi	r5, r5
 8005834:	2f6f      	cmp	r7, #111	@ 0x6f
 8005836:	4853      	ldr	r0, [pc, #332]	@ (8005984 <_printf_i+0x238>)
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	bf14      	ite	ne
 800583c:	230a      	movne	r3, #10
 800583e:	2308      	moveq	r3, #8
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005846:	6866      	ldr	r6, [r4, #4]
 8005848:	60a6      	str	r6, [r4, #8]
 800584a:	2e00      	cmp	r6, #0
 800584c:	bfa2      	ittt	ge
 800584e:	6821      	ldrge	r1, [r4, #0]
 8005850:	f021 0104 	bicge.w	r1, r1, #4
 8005854:	6021      	strge	r1, [r4, #0]
 8005856:	b90d      	cbnz	r5, 800585c <_printf_i+0x110>
 8005858:	2e00      	cmp	r6, #0
 800585a:	d04b      	beq.n	80058f4 <_printf_i+0x1a8>
 800585c:	4616      	mov	r6, r2
 800585e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005862:	fb03 5711 	mls	r7, r3, r1, r5
 8005866:	5dc7      	ldrb	r7, [r0, r7]
 8005868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800586c:	462f      	mov	r7, r5
 800586e:	42bb      	cmp	r3, r7
 8005870:	460d      	mov	r5, r1
 8005872:	d9f4      	bls.n	800585e <_printf_i+0x112>
 8005874:	2b08      	cmp	r3, #8
 8005876:	d10b      	bne.n	8005890 <_printf_i+0x144>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07df      	lsls	r7, r3, #31
 800587c:	d508      	bpl.n	8005890 <_printf_i+0x144>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6861      	ldr	r1, [r4, #4]
 8005882:	4299      	cmp	r1, r3
 8005884:	bfde      	ittt	le
 8005886:	2330      	movle	r3, #48	@ 0x30
 8005888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800588c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005890:	1b92      	subs	r2, r2, r6
 8005892:	6122      	str	r2, [r4, #16]
 8005894:	f8cd a000 	str.w	sl, [sp]
 8005898:	464b      	mov	r3, r9
 800589a:	aa03      	add	r2, sp, #12
 800589c:	4621      	mov	r1, r4
 800589e:	4640      	mov	r0, r8
 80058a0:	f7ff fee6 	bl	8005670 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d14a      	bne.n	800593e <_printf_i+0x1f2>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058ac:	b004      	add	sp, #16
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f043 0320 	orr.w	r3, r3, #32
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	4833      	ldr	r0, [pc, #204]	@ (8005988 <_printf_i+0x23c>)
 80058bc:	2778      	movs	r7, #120	@ 0x78
 80058be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6831      	ldr	r1, [r6, #0]
 80058c6:	061f      	lsls	r7, r3, #24
 80058c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80058cc:	d402      	bmi.n	80058d4 <_printf_i+0x188>
 80058ce:	065f      	lsls	r7, r3, #25
 80058d0:	bf48      	it	mi
 80058d2:	b2ad      	uxthmi	r5, r5
 80058d4:	6031      	str	r1, [r6, #0]
 80058d6:	07d9      	lsls	r1, r3, #31
 80058d8:	bf44      	itt	mi
 80058da:	f043 0320 	orrmi.w	r3, r3, #32
 80058de:	6023      	strmi	r3, [r4, #0]
 80058e0:	b11d      	cbz	r5, 80058ea <_printf_i+0x19e>
 80058e2:	2310      	movs	r3, #16
 80058e4:	e7ac      	b.n	8005840 <_printf_i+0xf4>
 80058e6:	4827      	ldr	r0, [pc, #156]	@ (8005984 <_printf_i+0x238>)
 80058e8:	e7e9      	b.n	80058be <_printf_i+0x172>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f023 0320 	bic.w	r3, r3, #32
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	e7f6      	b.n	80058e2 <_printf_i+0x196>
 80058f4:	4616      	mov	r6, r2
 80058f6:	e7bd      	b.n	8005874 <_printf_i+0x128>
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	6961      	ldr	r1, [r4, #20]
 80058fe:	1d18      	adds	r0, r3, #4
 8005900:	6030      	str	r0, [r6, #0]
 8005902:	062e      	lsls	r6, r5, #24
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	d501      	bpl.n	800590c <_printf_i+0x1c0>
 8005908:	6019      	str	r1, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0x1c6>
 800590c:	0668      	lsls	r0, r5, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0x1bc>
 8005910:	8019      	strh	r1, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	4616      	mov	r6, r2
 8005918:	e7bc      	b.n	8005894 <_printf_i+0x148>
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	1d1a      	adds	r2, r3, #4
 800591e:	6032      	str	r2, [r6, #0]
 8005920:	681e      	ldr	r6, [r3, #0]
 8005922:	6862      	ldr	r2, [r4, #4]
 8005924:	2100      	movs	r1, #0
 8005926:	4630      	mov	r0, r6
 8005928:	f7fa fc5a 	bl	80001e0 <memchr>
 800592c:	b108      	cbz	r0, 8005932 <_printf_i+0x1e6>
 800592e:	1b80      	subs	r0, r0, r6
 8005930:	6060      	str	r0, [r4, #4]
 8005932:	6863      	ldr	r3, [r4, #4]
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	2300      	movs	r3, #0
 8005938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593c:	e7aa      	b.n	8005894 <_printf_i+0x148>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	4632      	mov	r2, r6
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d0ad      	beq.n	80058a8 <_printf_i+0x15c>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	d413      	bmi.n	800597a <_printf_i+0x22e>
 8005952:	68e0      	ldr	r0, [r4, #12]
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	4298      	cmp	r0, r3
 8005958:	bfb8      	it	lt
 800595a:	4618      	movlt	r0, r3
 800595c:	e7a6      	b.n	80058ac <_printf_i+0x160>
 800595e:	2301      	movs	r3, #1
 8005960:	4632      	mov	r2, r6
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d09d      	beq.n	80058a8 <_printf_i+0x15c>
 800596c:	3501      	adds	r5, #1
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	9903      	ldr	r1, [sp, #12]
 8005972:	1a5b      	subs	r3, r3, r1
 8005974:	42ab      	cmp	r3, r5
 8005976:	dcf2      	bgt.n	800595e <_printf_i+0x212>
 8005978:	e7eb      	b.n	8005952 <_printf_i+0x206>
 800597a:	2500      	movs	r5, #0
 800597c:	f104 0619 	add.w	r6, r4, #25
 8005980:	e7f5      	b.n	800596e <_printf_i+0x222>
 8005982:	bf00      	nop
 8005984:	08005cc9 	.word	0x08005cc9
 8005988:	08005cda 	.word	0x08005cda

0800598c <__malloc_lock>:
 800598c:	4801      	ldr	r0, [pc, #4]	@ (8005994 <__malloc_lock+0x8>)
 800598e:	f7ff bc73 	b.w	8005278 <__retarget_lock_acquire_recursive>
 8005992:	bf00      	nop
 8005994:	20000388 	.word	0x20000388

08005998 <__malloc_unlock>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__malloc_unlock+0x8>)
 800599a:	f7ff bc6e 	b.w	800527a <__retarget_lock_release_recursive>
 800599e:	bf00      	nop
 80059a0:	20000388 	.word	0x20000388

080059a4 <_realloc_r>:
 80059a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	4680      	mov	r8, r0
 80059aa:	4615      	mov	r5, r2
 80059ac:	460c      	mov	r4, r1
 80059ae:	b921      	cbnz	r1, 80059ba <_realloc_r+0x16>
 80059b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	4611      	mov	r1, r2
 80059b6:	f7ff bddb 	b.w	8005570 <_malloc_r>
 80059ba:	b92a      	cbnz	r2, 80059c8 <_realloc_r+0x24>
 80059bc:	f000 f858 	bl	8005a70 <_free_r>
 80059c0:	2400      	movs	r4, #0
 80059c2:	4620      	mov	r0, r4
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	f000 f89c 	bl	8005b04 <_malloc_usable_size_r>
 80059cc:	4285      	cmp	r5, r0
 80059ce:	4606      	mov	r6, r0
 80059d0:	d802      	bhi.n	80059d8 <_realloc_r+0x34>
 80059d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059d6:	d8f4      	bhi.n	80059c2 <_realloc_r+0x1e>
 80059d8:	4629      	mov	r1, r5
 80059da:	4640      	mov	r0, r8
 80059dc:	f7ff fdc8 	bl	8005570 <_malloc_r>
 80059e0:	4607      	mov	r7, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d0ec      	beq.n	80059c0 <_realloc_r+0x1c>
 80059e6:	42b5      	cmp	r5, r6
 80059e8:	462a      	mov	r2, r5
 80059ea:	4621      	mov	r1, r4
 80059ec:	bf28      	it	cs
 80059ee:	4632      	movcs	r2, r6
 80059f0:	f000 f830 	bl	8005a54 <memcpy>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f000 f83a 	bl	8005a70 <_free_r>
 80059fc:	463c      	mov	r4, r7
 80059fe:	e7e0      	b.n	80059c2 <_realloc_r+0x1e>

08005a00 <memmove>:
 8005a00:	4288      	cmp	r0, r1
 8005a02:	b510      	push	{r4, lr}
 8005a04:	eb01 0402 	add.w	r4, r1, r2
 8005a08:	d902      	bls.n	8005a10 <memmove+0x10>
 8005a0a:	4284      	cmp	r4, r0
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	d807      	bhi.n	8005a20 <memmove+0x20>
 8005a10:	1e43      	subs	r3, r0, #1
 8005a12:	42a1      	cmp	r1, r4
 8005a14:	d008      	beq.n	8005a28 <memmove+0x28>
 8005a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a1e:	e7f8      	b.n	8005a12 <memmove+0x12>
 8005a20:	4402      	add	r2, r0
 8005a22:	4601      	mov	r1, r0
 8005a24:	428a      	cmp	r2, r1
 8005a26:	d100      	bne.n	8005a2a <memmove+0x2a>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a32:	e7f7      	b.n	8005a24 <memmove+0x24>

08005a34 <_sbrk_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4d06      	ldr	r5, [pc, #24]	@ (8005a50 <_sbrk_r+0x1c>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	f7fb fb64 	bl	800110c <_sbrk>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_sbrk_r+0x1a>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_sbrk_r+0x1a>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	20000394 	.word	0x20000394

08005a54 <memcpy>:
 8005a54:	440a      	add	r2, r1
 8005a56:	4291      	cmp	r1, r2
 8005a58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a5c:	d100      	bne.n	8005a60 <memcpy+0xc>
 8005a5e:	4770      	bx	lr
 8005a60:	b510      	push	{r4, lr}
 8005a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	d1f9      	bne.n	8005a62 <memcpy+0xe>
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <_free_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4605      	mov	r5, r0
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d041      	beq.n	8005afc <_free_r+0x8c>
 8005a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7c:	1f0c      	subs	r4, r1, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfb8      	it	lt
 8005a82:	18e4      	addlt	r4, r4, r3
 8005a84:	f7ff ff82 	bl	800598c <__malloc_lock>
 8005a88:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <_free_r+0x90>)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	b933      	cbnz	r3, 8005a9c <_free_r+0x2c>
 8005a8e:	6063      	str	r3, [r4, #4]
 8005a90:	6014      	str	r4, [r2, #0]
 8005a92:	4628      	mov	r0, r5
 8005a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a98:	f7ff bf7e 	b.w	8005998 <__malloc_unlock>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d908      	bls.n	8005ab2 <_free_r+0x42>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	bf01      	itttt	eq
 8005aa8:	6819      	ldreq	r1, [r3, #0]
 8005aaa:	685b      	ldreq	r3, [r3, #4]
 8005aac:	1809      	addeq	r1, r1, r0
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	e7ed      	b.n	8005a8e <_free_r+0x1e>
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b10b      	cbz	r3, 8005abc <_free_r+0x4c>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d9fa      	bls.n	8005ab2 <_free_r+0x42>
 8005abc:	6811      	ldr	r1, [r2, #0]
 8005abe:	1850      	adds	r0, r2, r1
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	d10b      	bne.n	8005adc <_free_r+0x6c>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	1850      	adds	r0, r2, r1
 8005aca:	4283      	cmp	r3, r0
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	d1e0      	bne.n	8005a92 <_free_r+0x22>
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	6053      	str	r3, [r2, #4]
 8005ad6:	4408      	add	r0, r1
 8005ad8:	6010      	str	r0, [r2, #0]
 8005ada:	e7da      	b.n	8005a92 <_free_r+0x22>
 8005adc:	d902      	bls.n	8005ae4 <_free_r+0x74>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	e7d6      	b.n	8005a92 <_free_r+0x22>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf04      	itt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	bf04      	itt	eq
 8005af4:	1809      	addeq	r1, r1, r0
 8005af6:	6021      	streq	r1, [r4, #0]
 8005af8:	6054      	str	r4, [r2, #4]
 8005afa:	e7ca      	b.n	8005a92 <_free_r+0x22>
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	bf00      	nop
 8005b00:	20000390 	.word	0x20000390

08005b04 <_malloc_usable_size_r>:
 8005b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b08:	1f18      	subs	r0, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfbc      	itt	lt
 8005b0e:	580b      	ldrlt	r3, [r1, r0]
 8005b10:	18c0      	addlt	r0, r0, r3
 8005b12:	4770      	bx	lr

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
