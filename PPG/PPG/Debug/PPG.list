
PPG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006038  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  08006094  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006094  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f614  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002174  00000000  00000000  000176a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00019818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  0001a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279b1  00000000  00000000  0001b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f522  00000000  00000000  000429c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb035  00000000  00000000  00051ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cf18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  0014cf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00150d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d94 	.word	0x08005d94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005d94 	.word	0x08005d94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <applySquaringFilter>:

/**
  * @brief 用于演示的“Squaring Filter”预处理
  */
static uint32_t applySquaringFilter(uint32_t input)
{
 8000570:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    uint64_t squared = (uint64_t)input * (uint64_t)input;
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2000      	movs	r0, #0
 800057e:	4688      	mov	r8, r1
 8000580:	4681      	mov	r9, r0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	2000      	movs	r0, #0
 8000586:	460c      	mov	r4, r1
 8000588:	4605      	mov	r5, r0
 800058a:	fb04 f009 	mul.w	r0, r4, r9
 800058e:	fb08 f105 	mul.w	r1, r8, r5
 8000592:	4401      	add	r1, r0
 8000594:	fba8 2304 	umull	r2, r3, r8, r4
 8000598:	4419      	add	r1, r3
 800059a:	460b      	mov	r3, r1
 800059c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80005a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (squared > 0xFFFFFFFF)
 80005a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d305      	bcc.n	80005b8 <applySquaringFilter+0x48>
        squared = 0xFFFFFFFF;
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t)squared;
 80005b8:	68bb      	ldr	r3, [r7, #8]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80005c4:	4770      	bx	lr
	...

080005c8 <applyExponentialMovingAverage>:

/**
  * @brief 用于演示的“Exponential Moving Average”预处理
  */
static uint32_t applyExponentialMovingAverage(uint32_t input)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    static float emaVal = 0.0f;
    float alpha = 0.1f;
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <applyExponentialMovingAverage+0x58>)
 80005d2:	60fb      	str	r3, [r7, #12]

    emaVal = alpha * (float)input + (1.0f - alpha) * emaVal;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005de:	edd7 7a03 	vldr	s15, [r7, #12]
 80005e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80005ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 80005f4:	edd3 7a00 	vldr	s15, [r3]
 80005f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 8000602:	edc3 7a00 	vstr	s15, [r3]
    return (uint32_t)emaVal;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <applyExponentialMovingAverage+0x5c>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	3dcccccd 	.word	0x3dcccccd
 8000624:	20000244 	.word	0x20000244

08000628 <computeHeartRate>:

/**
  * @brief 用于演示的“心率”计算
  */
static uint16_t computeHeartRate(uint32_t value)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    // 简单映射：HR = 60 + (value % 40)
    return 60 + (value % 40);
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <computeHeartRate+0x30>)
 8000634:	fba3 2301 	umull	r2, r3, r3, r1
 8000638:	095a      	lsrs	r2, r3, #5
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	b293      	uxth	r3, r2
 8000646:	333c      	adds	r3, #60	@ 0x3c
 8000648:	b29b      	uxth	r3, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	cccccccd 	.word	0xcccccccd

0800065c <computeSpO2>:

/**
  * @brief 用于演示的“血氧”计算
  */
static uint8_t computeSpO2(uint32_t value)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    // 简单映射：SpO2 = 95 + (value % 5)
    return 95 + (value % 5);
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <computeSpO2+0x2c>)
 8000668:	fba3 2301 	umull	r2, r3, r3, r1
 800066c:	089a      	lsrs	r2, r3, #2
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	b2d3      	uxtb	r3, r2
 8000678:	335f      	adds	r3, #95	@ 0x5f
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	cccccccd 	.word	0xcccccccd

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09e      	sub	sp, #120	@ 0x78
 8000690:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	  char msg[100];
	  uint32_t adcValue = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 feea 	bl	800146e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 fa45 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fb6b 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 fb3b 	bl	8000d1c <MX_DMA_Init>
  MX_ADC1_Init();
 80006a6:	f000 fa93 	bl	8000bd0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006aa:	f000 fb07 	bl	8000cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg, "System Started. Current State: INIT\r\n");
 80006ae:	463b      	mov	r3, r7
 80006b0:	49bb      	ldr	r1, [pc, #748]	@ (80009a0 <main+0x314>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fece 	bl	8005454 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd88 	bl	80001d0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4639      	mov	r1, r7
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ca:	48b6      	ldr	r0, [pc, #728]	@ (80009a4 <main+0x318>)
 80006cc:	f004 f964 	bl	8004998 <HAL_UART_Transmit>

  // 上电后，默认关闭红光和IR
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f002 fdc0 	bl	800325c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2102      	movs	r1, #2
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f002 fdba 	bl	800325c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // 1. 读取本次的按键事件
	    PressType_t currentPress = g_pressEvent;
 80006e8:	4baf      	ldr	r3, [pc, #700]	@ (80009a8 <main+0x31c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	    if (currentPress != PRESS_NONE)
 80006f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 817a 	beq.w	80009ee <main+0x362>
	    {
	      g_pressEvent = PRESS_NONE; // 清除事件，避免重复触发
 80006fa:	4bab      	ldr	r3, [pc, #684]	@ (80009a8 <main+0x31c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]

	      // 根据当前系统状态 & 按键类型，做状态转移或动作
	      switch (g_systemState)
 8000700:	4baa      	ldr	r3, [pc, #680]	@ (80009ac <main+0x320>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b05      	cmp	r3, #5
 8000706:	f200 813e 	bhi.w	8000986 <main+0x2fa>
 800070a:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <main+0x84>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	08000729 	.word	0x08000729
 8000714:	0800075d 	.word	0x0800075d
 8000718:	080007e5 	.word	0x080007e5
 800071c:	0800086d 	.word	0x0800086d
 8000720:	080008f3 	.word	0x080008f3
 8000724:	0800093d 	.word	0x0800093d
	      {
	        case STATE_INIT:
	          // INIT 下，仅识别长按 => 进入 WORKMODE_SELECT
	          if (currentPress == PRESS_LONG)
 8000728:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800072c:	2b02      	cmp	r3, #2
 800072e:	f040 812d 	bne.w	800098c <main+0x300>
	          {
	            g_systemState = STATE_WORKMODE_SELECT;
 8000732:	4b9e      	ldr	r3, [pc, #632]	@ (80009ac <main+0x320>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> WORKMODE_SELECT\r\n");
 8000738:	463b      	mov	r3, r7
 800073a:	499d      	ldr	r1, [pc, #628]	@ (80009b0 <main+0x324>)
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fe89 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000742:	463b      	mov	r3, r7
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	4639      	mov	r1, r7
 8000750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000754:	4893      	ldr	r0, [pc, #588]	@ (80009a4 <main+0x318>)
 8000756:	f004 f91f 	bl	8004998 <HAL_UART_Transmit>
	          }
	          break;
 800075a:	e117      	b.n	800098c <main+0x300>

	        case STATE_WORKMODE_SELECT:
	          // 短按 => 在RED和IR之间切换
	          // 长按 => 进入PREPROCESS_SELECT
	          if (currentPress == PRESS_SHORT)
 800075c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000760:	2b01      	cmp	r3, #1
 8000762:	d125      	bne.n	80007b0 <main+0x124>
	          {
	            g_workMode = (g_workMode == MODE_RED) ? MODE_IR : MODE_RED;
 8000764:	4b93      	ldr	r3, [pc, #588]	@ (80009b4 <main+0x328>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4b8f      	ldr	r3, [pc, #572]	@ (80009b4 <main+0x328>)
 8000776:	701a      	strb	r2, [r3, #0]
	            if (g_workMode == MODE_RED)
 8000778:	4b8e      	ldr	r3, [pc, #568]	@ (80009b4 <main+0x328>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <main+0x100>
	              sprintf(msg, "Selected WorkMode: RED\r\n");
 8000780:	463b      	mov	r3, r7
 8000782:	498d      	ldr	r1, [pc, #564]	@ (80009b8 <main+0x32c>)
 8000784:	4618      	mov	r0, r3
 8000786:	f004 fe65 	bl	8005454 <siprintf>
 800078a:	e004      	b.n	8000796 <main+0x10a>
	            else
	              sprintf(msg, "Selected WorkMode: IR\r\n");
 800078c:	463b      	mov	r3, r7
 800078e:	498b      	ldr	r1, [pc, #556]	@ (80009bc <main+0x330>)
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fe5f 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000796:	463b      	mov	r3, r7
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd19 	bl	80001d0 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4639      	mov	r1, r7
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	487e      	ldr	r0, [pc, #504]	@ (80009a4 <main+0x318>)
 80007aa:	f004 f8f5 	bl	8004998 <HAL_UART_Transmit>
	          {
	            g_systemState = STATE_PREPROCESS_SELECT;
	            sprintf(msg, "System -> PREPROCESS_SELECT\r\n");
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	          }
	          break;
 80007ae:	e0ef      	b.n	8000990 <main+0x304>
	          else if (currentPress == PRESS_LONG)
 80007b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	f040 80eb 	bne.w	8000990 <main+0x304>
	            g_systemState = STATE_PREPROCESS_SELECT;
 80007ba:	4b7c      	ldr	r3, [pc, #496]	@ (80009ac <main+0x320>)
 80007bc:	2202      	movs	r2, #2
 80007be:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> PREPROCESS_SELECT\r\n");
 80007c0:	463b      	mov	r3, r7
 80007c2:	497f      	ldr	r1, [pc, #508]	@ (80009c0 <main+0x334>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fe45 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007ca:	463b      	mov	r3, r7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fcff 	bl	80001d0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4639      	mov	r1, r7
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007dc:	4871      	ldr	r0, [pc, #452]	@ (80009a4 <main+0x318>)
 80007de:	f004 f8db 	bl	8004998 <HAL_UART_Transmit>
	          break;
 80007e2:	e0d5      	b.n	8000990 <main+0x304>

	        case STATE_PREPROCESS_SELECT:
	          // 短按 => SF / EMA 切换
	          // 长按 => 进入ADVANCED_SELECT
	          if (currentPress == PRESS_SHORT)
 80007e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d125      	bne.n	8000838 <main+0x1ac>
	          {
	            g_preprocType = (g_preprocType == PREPROC_SF) ? PREPROC_EMA : PREPROC_SF;
 80007ec:	4b75      	ldr	r3, [pc, #468]	@ (80009c4 <main+0x338>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b71      	ldr	r3, [pc, #452]	@ (80009c4 <main+0x338>)
 80007fe:	701a      	strb	r2, [r3, #0]
	            if (g_preprocType == PREPROC_SF)
 8000800:	4b70      	ldr	r3, [pc, #448]	@ (80009c4 <main+0x338>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d105      	bne.n	8000814 <main+0x188>
	              sprintf(msg, "Selected PreProcessing: Squaring Filter\r\n");
 8000808:	463b      	mov	r3, r7
 800080a:	496f      	ldr	r1, [pc, #444]	@ (80009c8 <main+0x33c>)
 800080c:	4618      	mov	r0, r3
 800080e:	f004 fe21 	bl	8005454 <siprintf>
 8000812:	e004      	b.n	800081e <main+0x192>
	            else
	              sprintf(msg, "Selected PreProcessing: Exponential Moving Average\r\n");
 8000814:	463b      	mov	r3, r7
 8000816:	496d      	ldr	r1, [pc, #436]	@ (80009cc <main+0x340>)
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fe1b 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800081e:	463b      	mov	r3, r7
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcd5 	bl	80001d0 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	4639      	mov	r1, r7
 800082c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000830:	485c      	ldr	r0, [pc, #368]	@ (80009a4 <main+0x318>)
 8000832:	f004 f8b1 	bl	8004998 <HAL_UART_Transmit>
	          {
	            g_systemState = STATE_ADVANCED_SELECT;
	            sprintf(msg, "System -> ADVANCED_SELECT\r\n");
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	          }
	          break;
 8000836:	e0ad      	b.n	8000994 <main+0x308>
	          else if (currentPress == PRESS_LONG)
 8000838:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800083c:	2b02      	cmp	r3, #2
 800083e:	f040 80a9 	bne.w	8000994 <main+0x308>
	            g_systemState = STATE_ADVANCED_SELECT;
 8000842:	4b5a      	ldr	r3, [pc, #360]	@ (80009ac <main+0x320>)
 8000844:	2203      	movs	r2, #3
 8000846:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> ADVANCED_SELECT\r\n");
 8000848:	463b      	mov	r3, r7
 800084a:	4961      	ldr	r1, [pc, #388]	@ (80009d0 <main+0x344>)
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fe01 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fcbb 	bl	80001d0 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	4639      	mov	r1, r7
 8000860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000864:	484f      	ldr	r0, [pc, #316]	@ (80009a4 <main+0x318>)
 8000866:	f004 f897 	bl	8004998 <HAL_UART_Transmit>
	          break;
 800086a:	e093      	b.n	8000994 <main+0x308>

	        case STATE_ADVANCED_SELECT:
	          // 短按 => 心率 / 血氧 切换
	          // 长按 => RUNNING
	          if (currentPress == PRESS_SHORT)
 800086c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000870:	2b01      	cmp	r3, #1
 8000872:	d125      	bne.n	80008c0 <main+0x234>
	          {
	            g_measureType = (g_measureType == MEASURE_HR) ? MEASURE_SPO2 : MEASURE_HR;
 8000874:	4b57      	ldr	r3, [pc, #348]	@ (80009d4 <main+0x348>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf0c      	ite	eq
 800087c:	2301      	moveq	r3, #1
 800087e:	2300      	movne	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	4b53      	ldr	r3, [pc, #332]	@ (80009d4 <main+0x348>)
 8000886:	701a      	strb	r2, [r3, #0]
	            if (g_measureType == MEASURE_HR)
 8000888:	4b52      	ldr	r3, [pc, #328]	@ (80009d4 <main+0x348>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <main+0x210>
	              sprintf(msg, "Selected Advanced: Heart Rate\r\n");
 8000890:	463b      	mov	r3, r7
 8000892:	4951      	ldr	r1, [pc, #324]	@ (80009d8 <main+0x34c>)
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fddd 	bl	8005454 <siprintf>
 800089a:	e004      	b.n	80008a6 <main+0x21a>
	            else
	              sprintf(msg, "Selected Advanced: SpO2\r\n");
 800089c:	463b      	mov	r3, r7
 800089e:	494f      	ldr	r1, [pc, #316]	@ (80009dc <main+0x350>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fdd7 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc91 	bl	80001d0 <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4639      	mov	r1, r7
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b8:	483a      	ldr	r0, [pc, #232]	@ (80009a4 <main+0x318>)
 80008ba:	f004 f86d 	bl	8004998 <HAL_UART_Transmit>
	          {
	            g_systemState = STATE_RUNNING;
	            sprintf(msg, "System -> RUNNING\r\n");
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	          }
	          break;
 80008be:	e06b      	b.n	8000998 <main+0x30c>
	          else if (currentPress == PRESS_LONG)
 80008c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d167      	bne.n	8000998 <main+0x30c>
	            g_systemState = STATE_RUNNING;
 80008c8:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <main+0x320>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> RUNNING\r\n");
 80008ce:	463b      	mov	r3, r7
 80008d0:	4943      	ldr	r1, [pc, #268]	@ (80009e0 <main+0x354>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fdbe 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc78 	bl	80001d0 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4639      	mov	r1, r7
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ea:	482e      	ldr	r0, [pc, #184]	@ (80009a4 <main+0x318>)
 80008ec:	f004 f854 	bl	8004998 <HAL_UART_Transmit>
	          break;
 80008f0:	e052      	b.n	8000998 <main+0x30c>

	        case STATE_RUNNING:
	          // 在 RUNNING 下，长按 => 回到 INIT
	          if (currentPress == PRESS_LONG)
 80008f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d150      	bne.n	800099c <main+0x310>
	          {
	            g_systemState = STATE_INIT;
 80008fa:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <main+0x320>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> INIT\r\n");
 8000900:	463b      	mov	r3, r7
 8000902:	4938      	ldr	r1, [pc, #224]	@ (80009e4 <main+0x358>)
 8000904:	4618      	mov	r0, r3
 8000906:	f004 fda5 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc5f 	bl	80001d0 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	4639      	mov	r1, r7
 8000918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800091c:	4821      	ldr	r0, [pc, #132]	@ (80009a4 <main+0x318>)
 800091e:	f004 f83b 	bl	8004998 <HAL_UART_Transmit>

	            // 关闭所有LED
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2101      	movs	r1, #1
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f002 fc97 	bl	800325c <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2102      	movs	r1, #2
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f002 fc91 	bl	800325c <HAL_GPIO_WritePin>
	          }
	          // 短按在 RUNNING 暂不处理
	          break;
 800093a:	e02f      	b.n	800099c <main+0x310>

	        case STATE_ERROR:
	          // 在 ERROR 下，长按 => 回到 INIT
	          if (currentPress == PRESS_LONG)
 800093c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000940:	2b02      	cmp	r3, #2
 8000942:	d153      	bne.n	80009ec <main+0x360>
	          {
	            g_systemState = STATE_INIT;
 8000944:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <main+0x320>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
	            sprintf(msg, "System -> INIT (from ERROR)\r\n");
 800094a:	463b      	mov	r3, r7
 800094c:	4926      	ldr	r1, [pc, #152]	@ (80009e8 <main+0x35c>)
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fd80 	bl	8005454 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000954:	463b      	mov	r3, r7
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc3a 	bl	80001d0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	4639      	mov	r1, r7
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <main+0x318>)
 8000968:	f004 f816 	bl	8004998 <HAL_UART_Transmit>

	            // 关闭所有LED
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f002 fc72 	bl	800325c <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2102      	movs	r1, #2
 800097c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000980:	f002 fc6c 	bl	800325c <HAL_GPIO_WritePin>
	          }
	          break;
 8000984:	e032      	b.n	80009ec <main+0x360>

	        default:
	          // 防御式处理 => ERROR
	          enterErrorState();
 8000986:	f000 fb01 	bl	8000f8c <enterErrorState>
	          break;
 800098a:	e030      	b.n	80009ee <main+0x362>
	          break;
 800098c:	bf00      	nop
 800098e:	e02e      	b.n	80009ee <main+0x362>
	          break;
 8000990:	bf00      	nop
 8000992:	e02c      	b.n	80009ee <main+0x362>
	          break;
 8000994:	bf00      	nop
 8000996:	e02a      	b.n	80009ee <main+0x362>
	          break;
 8000998:	bf00      	nop
 800099a:	e028      	b.n	80009ee <main+0x362>
	          break;
 800099c:	bf00      	nop
 800099e:	e026      	b.n	80009ee <main+0x362>
 80009a0:	08005dac 	.word	0x08005dac
 80009a4:	20000124 	.word	0x20000124
 80009a8:	2000023c 	.word	0x2000023c
 80009ac:	2000023d 	.word	0x2000023d
 80009b0:	08005dd4 	.word	0x08005dd4
 80009b4:	2000023f 	.word	0x2000023f
 80009b8:	08005df0 	.word	0x08005df0
 80009bc:	08005e0c 	.word	0x08005e0c
 80009c0:	08005e24 	.word	0x08005e24
 80009c4:	20000240 	.word	0x20000240
 80009c8:	08005e44 	.word	0x08005e44
 80009cc:	08005e70 	.word	0x08005e70
 80009d0:	08005ea8 	.word	0x08005ea8
 80009d4:	2000023e 	.word	0x2000023e
 80009d8:	08005ec4 	.word	0x08005ec4
 80009dc:	08005ee4 	.word	0x08005ee4
 80009e0:	08005f00 	.word	0x08005f00
 80009e4:	08005f14 	.word	0x08005f14
 80009e8:	08005f28 	.word	0x08005f28
	          break;
 80009ec:	bf00      	nop
	      }
	    }

	    // 2. 根据当前状态执行“状态行为”
	    switch (g_systemState)
 80009ee:	4b46      	ldr	r3, [pc, #280]	@ (8000b08 <main+0x47c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d878      	bhi.n	8000ae8 <main+0x45c>
 80009f6:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <main+0x370>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000aef 	.word	0x08000aef
 8000a00:	08000aef 	.word	0x08000aef
 8000a04:	08000aef 	.word	0x08000aef
 8000a08:	08000aef 	.word	0x08000aef
 8000a0c:	08000a15 	.word	0x08000a15
 8000a10:	08000aef 	.word	0x08000aef
	        break;

	      case STATE_RUNNING:
	      {
	        // 根据工作模式开/关对应LED
	        if (g_workMode == MODE_RED)
 8000a14:	4b3d      	ldr	r3, [pc, #244]	@ (8000b0c <main+0x480>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10c      	bne.n	8000a36 <main+0x3aa>
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // 打开红光(低电平有效)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2101      	movs	r1, #1
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f002 fc1a 	bl	800325c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // 关闭IR
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a30:	f002 fc14 	bl	800325c <HAL_GPIO_WritePin>
 8000a34:	e00b      	b.n	8000a4e <main+0x3c2>
	        }
	        else
	        {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // 关闭红光
 8000a36:	2201      	movs	r2, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f002 fc0d 	bl	800325c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // 打开IR
 8000a42:	2200      	movs	r2, #0
 8000a44:	2102      	movs	r1, #2
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4a:	f002 fc07 	bl	800325c <HAL_GPIO_WritePin>
	        }

	        // 采集ADC
	        HAL_ADC_Start(&hadc1);
 8000a4e:	4830      	ldr	r0, [pc, #192]	@ (8000b10 <main+0x484>)
 8000a50:	f001 f8da 	bl	8001c08 <HAL_ADC_Start>
	        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000a54:	2164      	movs	r1, #100	@ 0x64
 8000a56:	482e      	ldr	r0, [pc, #184]	@ (8000b10 <main+0x484>)
 8000a58:	f001 f990 	bl	8001d7c <HAL_ADC_PollForConversion>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d147      	bne.n	8000af2 <main+0x466>
	        {
	          adcValue = HAL_ADC_GetValue(&hadc1);
 8000a62:	482b      	ldr	r0, [pc, #172]	@ (8000b10 <main+0x484>)
 8000a64:	f001 fa62 	bl	8001f2c <HAL_ADC_GetValue>
 8000a68:	66b8      	str	r0, [r7, #104]	@ 0x68

	          // 先做预处理
	          uint32_t preprocessedValue = adcValue;
 8000a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	          if (g_preprocType == PREPROC_SF)
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <main+0x488>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <main+0x3f4>
	          {
	            preprocessedValue = applySquaringFilter(adcValue);
 8000a76:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000a78:	f7ff fd7a 	bl	8000570 <applySquaringFilter>
 8000a7c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8000a7e:	e003      	b.n	8000a88 <main+0x3fc>
	          }
	          else
	          {
	            preprocessedValue = applyExponentialMovingAverage(adcValue);
 8000a80:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000a82:	f7ff fda1 	bl	80005c8 <applyExponentialMovingAverage>
 8000a86:	66f8      	str	r0, [r7, #108]	@ 0x6c
	          }

	          // 再做高级处理
	          if (g_measureType == MEASURE_HR)
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <main+0x48c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10f      	bne.n	8000ab0 <main+0x424>
	          {
	            uint16_t hrValue = computeHeartRate(preprocessedValue);
 8000a90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000a92:	f7ff fdc9 	bl	8000628 <computeHeartRate>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	            sprintf(msg, "\rADC:%lu ->Pre:%lu ->HR:%u bpm      ",
 8000a9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000aa8:	491c      	ldr	r1, [pc, #112]	@ (8000b1c <main+0x490>)
 8000aaa:	f004 fcd3 	bl	8005454 <siprintf>
 8000aae:	e00e      	b.n	8000ace <main+0x442>
	                    adcValue, preprocessedValue, hrValue);
	          }
	          else
	          {
	            uint8_t spo2Value = computeSpO2(preprocessedValue);
 8000ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000ab2:	f7ff fdd3 	bl	800065c <computeSpO2>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	            sprintf(msg, "\rADC:%lu ->Pre:%lu ->SpO2:%u%%      ",
 8000abc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ac6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ac8:	4915      	ldr	r1, [pc, #84]	@ (8000b20 <main+0x494>)
 8000aca:	f004 fcc3 	bl	8005454 <siprintf>
	                    adcValue, preprocessedValue, spo2Value);
	          }
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fb7d 	bl	80001d0 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4639      	mov	r1, r7
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae0:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <main+0x498>)
 8000ae2:	f003 ff59 	bl	8004998 <HAL_UART_Transmit>
	        }
	        break;
 8000ae6:	e004      	b.n	8000af2 <main+0x466>
	        // 在 ERROR 状态下，你可让 LED 快速闪烁，或等待用户长按恢复
	        break;

	      default:
	        // 防御式处理 => ERROR
	        enterErrorState();
 8000ae8:	f000 fa50 	bl	8000f8c <enterErrorState>
	        break;
 8000aec:	e002      	b.n	8000af4 <main+0x468>
	        break;
 8000aee:	bf00      	nop
 8000af0:	e000      	b.n	8000af4 <main+0x468>
	        break;
 8000af2:	bf00      	nop
	    }

	    // 3. 每次循环调用LED更新函数，让板载LED指示当前状态
	    updateLED(g_systemState);
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <main+0x47c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f9d3 	bl	8000ea4 <updateLED>

	    HAL_Delay(10); // 小延时，防止主循环过于频繁
 8000afe:	200a      	movs	r0, #10
 8000b00:	f000 fd2a 	bl	8001558 <HAL_Delay>
  {
 8000b04:	e5f0      	b.n	80006e8 <main+0x5c>
 8000b06:	bf00      	nop
 8000b08:	2000023d 	.word	0x2000023d
 8000b0c:	2000023f 	.word	0x2000023f
 8000b10:	20000078 	.word	0x20000078
 8000b14:	20000240 	.word	0x20000240
 8000b18:	2000023e 	.word	0x2000023e
 8000b1c:	08005f48 	.word	0x08005f48
 8000b20:	08005f70 	.word	0x08005f70
 8000b24:	20000124 	.word	0x20000124

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b096      	sub	sp, #88	@ 0x58
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2244      	movs	r2, #68	@ 0x44
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fcac 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b4e:	f002 fbc3 	bl	80032d8 <HAL_PWREx_ControlVoltageScaling>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b58:	f000 fa46 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b66:	2310      	movs	r3, #16
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b76:	230a      	movs	r3, #10
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fbfa 	bl	8003384 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b96:	f000 fa27 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000baa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 ffc0 	bl	8003b3c <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bc2:	f000 fa11 	bl	8000fe8 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3758      	adds	r7, #88	@ 0x58
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <MX_ADC1_Init+0xe4>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c16:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c22:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c54:	f000 fe88 	bl	8001968 <HAL_ADC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 f9c3 	bl	8000fe8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c6e:	f001 fe09 	bl	8002884 <HAL_ADCEx_MultiModeConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c78:	f000 f9b6 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_ADC1_Init+0xe8>)
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2306      	movs	r3, #6
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000c84:	2303      	movs	r3, #3
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c88:	237f      	movs	r3, #127	@ 0x7f
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c9a:	f001 f955 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ca4:	f000 f9a0 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	50040000 	.word	0x50040000
 8000cb8:	2e300800 	.word	0x2e300800

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <MX_USART2_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000d00:	f003 fdfc 	bl	80048fc <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f96d 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000124 	.word	0x20000124
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_DMA_Init+0x58>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d26:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <MX_DMA_Init+0x58>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_DMA_Init+0x58>)
 8000d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200b      	movs	r0, #11
 8000d40:	f001 ff2b 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d44:	200b      	movs	r0, #11
 8000d46:	f001 ff44 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f001 ff23 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f001 ff3c 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2011      	movs	r0, #17
 8000d60:	f001 ff1b 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d64:	2011      	movs	r0, #17
 8000d66:	f001 ff34 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4a22      	ldr	r2, [pc, #136]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0xa4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2123      	movs	r1, #35	@ 0x23
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f002 fa49 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <MX_GPIO_Init+0xa8>)
 8000de2:	f002 f879 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000de6:	2323      	movs	r3, #35	@ 0x23
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e00:	f002 f86a 	bl	8002ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2028      	movs	r0, #40	@ 0x28
 8000e0a:	f001 fec6 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0e:	2028      	movs	r0, #40	@ 0x28
 8000e10:	f001 fedf 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000800 	.word	0x48000800

08000e24 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
  * @brief EXTI 回调函数：识别短按/长按
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  static uint32_t pressStartTime = 0;
  static uint32_t lastInterruptTime = 0;

  if (GPIO_Pin == GPIO_PIN_13)
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e34:	d12b      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x6a>
  {
    uint32_t now = HAL_GetTick();
 8000e36:	f000 fb83 	bl	8001540 <HAL_GetTick>
 8000e3a:	6178      	str	r0, [r7, #20]

    // 简单去抖
    if ((now - lastInterruptTime) < DEBOUNCE_INTERVAL)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b31      	cmp	r3, #49	@ 0x31
 8000e46:	d921      	bls.n	8000e8c <HAL_GPIO_EXTI_Callback+0x68>
      return;
    lastInterruptTime = now;
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	6013      	str	r3, [r2, #0]

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000e4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e52:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e54:	f002 f9ea 	bl	800322c <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	74fb      	strb	r3, [r7, #19]

    if (pinState == GPIO_PIN_RESET)
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <HAL_GPIO_EXTI_Callback+0x46>
    {
      // 下降沿 => 按下
      pressStartTime = now;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0x78>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e011      	b.n	8000e8e <HAL_GPIO_EXTI_Callback+0x6a>
    }
    else
    {
      // 上升沿 => 松开
      uint32_t pressDuration = now - pressStartTime;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0x78>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	60fb      	str	r3, [r7, #12]
      if (pressDuration >= LONG_PRESS_THRESHOLD)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e7a:	d303      	bcc.n	8000e84 <HAL_GPIO_EXTI_Callback+0x60>
      {
        g_pressEvent = PRESS_LONG;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_EXTI_Callback+0x6a>
      }
      else
      {
        g_pressEvent = PRESS_SHORT;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_EXTI_Callback+0x6a>
      return;
 8000e8c:	bf00      	nop
      }
    }
  }
}
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000248 	.word	0x20000248
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	2000024c 	.word	0x2000024c
 8000ea0:	2000023c 	.word	0x2000023c

08000ea4 <updateLED>:

/**
  * @brief 根据当前状态让板载LED闪烁或常亮/熄灭
  */
static void updateLED(SystemState_t state)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  // 假设高电平=灭，低电平=亮
  static uint32_t lastToggleTime = 0;
  static GPIO_PinState ledState  = GPIO_PIN_RESET; // 初始默认熄灭/亮，可以微调

  uint32_t now = HAL_GetTick();
 8000eae:	f000 fb47 	bl	8001540 <HAL_GetTick>
 8000eb2:	60b8      	str	r0, [r7, #8]
  uint32_t blinkInterval = 0; // 0=熄灭, 0xFFFFFFFF=常亮, 其他=闪烁周期
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]

  switch (state)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d823      	bhi.n	8000f06 <updateLED+0x62>
 8000ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <updateLED+0x20>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000edd 	.word	0x08000edd
 8000ec8:	08000ee3 	.word	0x08000ee3
 8000ecc:	08000eeb 	.word	0x08000eeb
 8000ed0:	08000ef3 	.word	0x08000ef3
 8000ed4:	08000ef9 	.word	0x08000ef9
 8000ed8:	08000f01 	.word	0x08000f01
  {
    case STATE_INIT:
      // 灭灯
      blinkInterval = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
      break;
 8000ee0:	e014      	b.n	8000f0c <updateLED+0x68>
    case STATE_WORKMODE_SELECT:
      blinkInterval = 500; // 慢闪
 8000ee2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ee6:	60fb      	str	r3, [r7, #12]
      break;
 8000ee8:	e010      	b.n	8000f0c <updateLED+0x68>
    case STATE_PREPROCESS_SELECT:
      blinkInterval = 300; // 中闪
 8000eea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000eee:	60fb      	str	r3, [r7, #12]
      break;
 8000ef0:	e00c      	b.n	8000f0c <updateLED+0x68>
    case STATE_ADVANCED_SELECT:
      blinkInterval = 200; // 快闪
 8000ef2:	23c8      	movs	r3, #200	@ 0xc8
 8000ef4:	60fb      	str	r3, [r7, #12]
      break;
 8000ef6:	e009      	b.n	8000f0c <updateLED+0x68>
    case STATE_RUNNING:
      blinkInterval = 0xFFFFFFFF; // 常亮
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000efc:	60fb      	str	r3, [r7, #12]
      break;
 8000efe:	e005      	b.n	8000f0c <updateLED+0x68>
    case STATE_ERROR:
      blinkInterval = 100; // 超快闪
 8000f00:	2364      	movs	r3, #100	@ 0x64
 8000f02:	60fb      	str	r3, [r7, #12]
      break;
 8000f04:	e002      	b.n	8000f0c <updateLED+0x68>
    default:
      blinkInterval = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
      break;
 8000f0a:	bf00      	nop
  }

  if (blinkInterval == 0)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <updateLED+0x82>
  {
    // 始终灭
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2120      	movs	r1, #32
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1a:	f002 f99f 	bl	800325c <HAL_GPIO_WritePin>
    ledState = GPIO_PIN_SET;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <updateLED+0xe0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
      // 翻转电平
      ledState = (ledState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
    }
  }
}
 8000f24:	e029      	b.n	8000f7a <updateLED+0xd6>
  else if (blinkInterval == 0xFFFFFFFF)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f2c:	d109      	bne.n	8000f42 <updateLED+0x9e>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f36:	f002 f991 	bl	800325c <HAL_GPIO_WritePin>
    ledState = GPIO_PIN_RESET;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <updateLED+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	e01b      	b.n	8000f7a <updateLED+0xd6>
    if ((now - lastToggleTime) >= blinkInterval)
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <updateLED+0xe4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d814      	bhi.n	8000f7a <updateLED+0xd6>
      lastToggleTime = now;
 8000f50:	4a0d      	ldr	r2, [pc, #52]	@ (8000f88 <updateLED+0xe4>)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	6013      	str	r3, [r2, #0]
      ledState = (ledState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <updateLED+0xe0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <updateLED+0xe0>)
 8000f68:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_PORT, LED_PIN, ledState);
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <updateLED+0xe0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2120      	movs	r1, #32
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f002 f971 	bl	800325c <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000250 	.word	0x20000250
 8000f88:	20000254 	.word	0x20000254

08000f8c <enterErrorState>:

/**
  * @brief 切换到ERROR状态
  */
static void enterErrorState(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08e      	sub	sp, #56	@ 0x38
 8000f90:	af00      	add	r7, sp, #0
  g_systemState = STATE_ERROR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <enterErrorState+0x50>)
 8000f94:	2205      	movs	r2, #5
 8000f96:	701a      	strb	r2, [r3, #0]
  char msg[50];
  sprintf(msg, "System -> ERROR\r\n");
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4911      	ldr	r1, [pc, #68]	@ (8000fe0 <enterErrorState+0x54>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fa59 	bl	8005454 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f913 	bl	80001d0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	1d39      	adds	r1, r7, #4
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <enterErrorState+0x58>)
 8000fb6:	f003 fcef 	bl	8004998 <HAL_UART_Transmit>

  // 关灯
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f002 f94b 	bl	800325c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2102      	movs	r1, #2
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f002 f945 	bl	800325c <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	3738      	adds	r7, #56	@ 0x38
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000023d 	.word	0x2000023d
 8000fe0:	08005f98 	.word	0x08005f98
 8000fe4:	20000124 	.word	0x20000124

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <Error_Handler+0x8>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	@ 0x60
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	@ 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ac      	sub	sp, #176	@ 0xb0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2288      	movs	r2, #136	@ 0x88
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fa19 	bl	8005494 <memset>
  if(hadc->Instance==ADC1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a3d      	ldr	r2, [pc, #244]	@ (800115c <HAL_ADC_MspInit+0x120>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d173      	bne.n	8001154 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800106c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001070:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001072:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001082:	2308      	movs	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001092:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f002 ff71 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010a8:	f7ff ff9e 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b8:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d0:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_ADC_MspInit+0x124>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010dc:	2340      	movs	r3, #64	@ 0x40
 80010de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e2:	230b      	movs	r3, #11
 80010e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f001 feee 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 80010fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001168 <HAL_ADC_MspInit+0x12c>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 800111c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001132:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001138:	480a      	ldr	r0, [pc, #40]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 800113a:	f001 fd65 	bl	8002c08 <HAL_DMA_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8001144:	f7ff ff50 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 800114c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <HAL_ADC_MspInit+0x128>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001154:	bf00      	nop
 8001156:	37b0      	adds	r7, #176	@ 0xb0
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50040000 	.word	0x50040000
 8001160:	40021000 	.word	0x40021000
 8001164:	200000dc 	.word	0x200000dc
 8001168:	40020008 	.word	0x40020008

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ac      	sub	sp, #176	@ 0xb0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2288      	movs	r2, #136	@ 0x88
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f981 	bl	8005494 <memset>
  if(huart->Instance==USART2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a4c      	ldr	r2, [pc, #304]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8090 	bne.w	80012be <HAL_UART_MspInit+0x152>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 feea 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011b6:	f7ff ff17 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ba:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	4a43      	ldr	r2, [pc, #268]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a3d      	ldr	r2, [pc, #244]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001202:	2307      	movs	r3, #7
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f001 fe61 	bl	8002ed8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001218:	4a2e      	ldr	r2, [pc, #184]	@ (80012d4 <HAL_UART_MspInit+0x168>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800121e:	2202      	movs	r2, #2
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001246:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001248:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800124c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800124e:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001250:	f001 fcda 	bl	8002c08 <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800125a:	f7ff fec5 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001262:	675a      	str	r2, [r3, #116]	@ 0x74
 8001264:	4a1a      	ldr	r2, [pc, #104]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <HAL_UART_MspInit+0x170>)
 800126e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 8001278:	2210      	movs	r2, #16
 800127a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 800129c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 80012a4:	f001 fcb0 	bl	8002c08 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 80012ae:	f7ff fe9b 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 80012b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <HAL_UART_MspInit+0x16c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012be:	bf00      	nop
 80012c0:	37b0      	adds	r7, #176	@ 0xb0
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40004400 	.word	0x40004400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	200001ac 	.word	0x200001ac
 80012d4:	4002006c 	.word	0x4002006c
 80012d8:	200001f4 	.word	0x200001f4
 80012dc:	40020080 	.word	0x40020080

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f8ef 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA1_Channel1_IRQHandler+0x10>)
 8001346:	f001 fd17 	bl	8002d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000dc 	.word	0x200000dc

08001354 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <DMA1_Channel6_IRQHandler+0x10>)
 800135a:	f001 fd0d 	bl	8002d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001ac 	.word	0x200001ac

08001368 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <DMA1_Channel7_IRQHandler+0x10>)
 800136e:	f001 fd03 	bl	8002d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200001f4 	.word	0x200001f4

0800137c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001380:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001384:	f001 ff82 	bl	800328c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f004 f872 	bl	80054a4 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20018000 	.word	0x20018000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000258 	.word	0x20000258
 80013f4:	200003a8 	.word	0x200003a8

080013f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff ffea 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f004 f831 	bl	80054b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff f91d 	bl	800068c <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001460:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 8001464:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001468:	200003a8 	.word	0x200003a8

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>

0800146e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f001 fb83 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f80e 	bl	80014a0 <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e001      	b.n	8001494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001490:	f7ff fdb0 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001494:	79fb      	ldrb	r3, [r7, #7]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_InitTick+0x6c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d023      	beq.n	80014fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_InitTick+0x70>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_InitTick+0x6c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fb8f 	bl	8002bee <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d809      	bhi.n	80014f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e4:	f001 fb59 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_InitTick+0x74>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e007      	b.n	8001500 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e004      	b.n	8001500 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e001      	b.n	8001500 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000008 	.word	0x20000008
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	2000025c 	.word	0x2000025c

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000025c 	.word	0x2000025c

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	609a      	str	r2, [r3, #8]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3360      	adds	r3, #96	@ 0x60
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <LL_ADC_SetOffset+0x44>)
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	4313      	orrs	r3, r2
 8001638:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	03fff000 	.word	0x03fff000

08001650 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3360      	adds	r3, #96	@ 0x60
 800165e:	461a      	mov	r2, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3360      	adds	r3, #96	@ 0x60
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3330      	adds	r3, #48	@ 0x30
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	211f      	movs	r1, #31
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 011f 	and.w	r1, r3, #31
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3314      	adds	r3, #20
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0e5b      	lsrs	r3, r3, #25
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0d1b      	lsrs	r3, r3, #20
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2107      	movs	r1, #7
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	0d1b      	lsrs	r3, r3, #20
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800177a:	bf00      	nop
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0318 	and.w	r3, r3, #24
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	400b      	ands	r3, r1
 80017b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	0007ffff 	.word	0x0007ffff

080017d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 031f 	and.w	r3, r3, #31
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6093      	str	r3, [r2, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800183c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001868:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001890:	d101      	bne.n	8001896 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <LL_ADC_IsEnabled+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_IsEnabled+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001902:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b04      	cmp	r3, #4
 800192c:	d101      	bne.n	8001932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b08      	cmp	r3, #8
 8001952:	d101      	bne.n	8001958 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e130      	b.n	8001be4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fb53 	bl	800103c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff3f 	bl	800182c <LL_ADC_IsDeepPowerDownEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff25 	bl	8001808 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff5a 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff3e 	bl	8001854 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d8:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <HAL_ADC_Init+0x284>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	4a84      	ldr	r2, [pc, #528]	@ (8001bf0 <HAL_ADC_Init+0x288>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff3c 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0e:	f043 0210 	orr.w	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff75 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001a30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 80c9 	bne.w	8001bd2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 80c5 	bne.w	8001bd2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a50:	f043 0202 	orr.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff35 	bl	80018cc <LL_ADC_IsEnabled>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d115      	bne.n	8001a94 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a68:	4862      	ldr	r0, [pc, #392]	@ (8001bf4 <HAL_ADC_Init+0x28c>)
 8001a6a:	f7ff ff2f 	bl	80018cc <LL_ADC_IsEnabled>
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4861      	ldr	r0, [pc, #388]	@ (8001bf8 <HAL_ADC_Init+0x290>)
 8001a72:	f7ff ff2b 	bl	80018cc <LL_ADC_IsEnabled>
 8001a76:	4603      	mov	r3, r0
 8001a78:	431c      	orrs	r4, r3
 8001a7a:	4860      	ldr	r0, [pc, #384]	@ (8001bfc <HAL_ADC_Init+0x294>)
 8001a7c:	f7ff ff26 	bl	80018cc <LL_ADC_IsEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4323      	orrs	r3, r4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	485c      	ldr	r0, [pc, #368]	@ (8001c00 <HAL_ADC_Init+0x298>)
 8001a90:	f7ff fd86 	bl	80015a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7e5b      	ldrb	r3, [r3, #25]
 8001a98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001aa4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001aaa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	045b      	lsls	r3, r3, #17
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <HAL_ADC_Init+0x29c>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff1b 	bl	8001940 <LL_ADC_INJ_IsConversionOngoing>
 8001b0a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d13d      	bne.n	8001b8e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d13a      	bne.n	8001b8e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b1c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b24:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b34:	f023 0302 	bic.w	r3, r3, #2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	69b9      	ldr	r1, [r7, #24]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d118      	bne.n	8001b7e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	e007      	b.n	8001b8e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10c      	bne.n	8001bb0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	f023 010f 	bic.w	r1, r3, #15
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bae:	e007      	b.n	8001bc0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020f 	bic.w	r2, r2, #15
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3724      	adds	r7, #36	@ 0x24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	053e2d63 	.word	0x053e2d63
 8001bf4:	50040000 	.word	0x50040000
 8001bf8:	50040100 	.word	0x50040100
 8001bfc:	50040200 	.word	0x50040200
 8001c00:	50040300 	.word	0x50040300
 8001c04:	fff0c007 	.word	0xfff0c007

08001c08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c10:	4857      	ldr	r0, [pc, #348]	@ (8001d70 <HAL_ADC_Start+0x168>)
 8001c12:	f7ff fddd 	bl	80017d0 <LL_ADC_GetMultimode>
 8001c16:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fe7c 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 809c 	bne.w	8001d62 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Start+0x30>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e097      	b.n	8001d68 <HAL_ADC_Start+0x160>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fd73 	bl	800272c <ADC_Enable>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 8083 	bne.w	8001d58 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a42      	ldr	r2, [pc, #264]	@ (8001d74 <HAL_ADC_Start+0x16c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d002      	beq.n	8001c76 <HAL_ADC_Start+0x6e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <HAL_ADC_Start+0x70>
 8001c76:	4b40      	ldr	r3, [pc, #256]	@ (8001d78 <HAL_ADC_Start+0x170>)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9e:	d106      	bne.n	8001cae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	f023 0206 	bic.w	r2, r3, #6
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	221c      	movs	r2, #28
 8001cba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <HAL_ADC_Start+0x16c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_Start+0xcc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADC_Start+0xce>
 8001cd4:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_ADC_Start+0x170>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d008      	beq.n	8001cf0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d002      	beq.n	8001cf0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d114      	bne.n	8001d1a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fded 	bl	80018f2 <LL_ADC_REG_StartConversion>
 8001d18:	e025      	b.n	8001d66 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <HAL_ADC_Start+0x16c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d002      	beq.n	8001d36 <HAL_ADC_Start+0x12e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_Start+0x130>
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_ADC_Start+0x170>)
 8001d38:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00f      	beq.n	8001d66 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d56:	e006      	b.n	8001d66 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d60:	e001      	b.n	8001d66 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	50040300 	.word	0x50040300
 8001d74:	50040100 	.word	0x50040100
 8001d78:	50040000 	.word	0x50040000

08001d7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d86:	4866      	ldr	r0, [pc, #408]	@ (8001f20 <HAL_ADC_PollForConversion+0x1a4>)
 8001d88:	f7ff fd22 	bl	80017d0 <LL_ADC_GetMultimode>
 8001d8c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d96:	2308      	movs	r3, #8
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e02a      	b.n	8001df2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d002      	beq.n	8001dae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d111      	bne.n	8001dd2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0a4      	b.n	8001f16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dcc:	2304      	movs	r3, #4
 8001dce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001dd0:	e00f      	b.n	8001df2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dd2:	4853      	ldr	r0, [pc, #332]	@ (8001f20 <HAL_ADC_PollForConversion+0x1a4>)
 8001dd4:	f7ff fd0a 	bl	80017ec <LL_ADC_GetMultiDMATransfer>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e093      	b.n	8001f16 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dee:	2304      	movs	r3, #4
 8001df0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001df2:	f7ff fba5 	bl	8001540 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001df8:	e021      	b.n	8001e3e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e00:	d01d      	beq.n	8001e3e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e02:	f7ff fb9d 	bl	8001540 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <HAL_ADC_PollForConversion+0x9c>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d112      	bne.n	8001e3e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10b      	bne.n	8001e3e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e06b      	b.n	8001f16 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0d6      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fc28 	bl	80016b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01c      	beq.n	8001ea2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e5b      	ldrb	r3, [r3, #25]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d118      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d111      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_ADC_PollForConversion+0x1a8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x136>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_PollForConversion+0x138>
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_ADC_PollForConversion+0x1ac>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d008      	beq.n	8001ece <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b09      	cmp	r3, #9
 8001ecc:	d104      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	e00c      	b.n	8001ef2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_ADC_PollForConversion+0x1a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d002      	beq.n	8001ee8 <HAL_ADC_PollForConversion+0x16c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_PollForConversion+0x16e>
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_ADC_PollForConversion+0x1ac>)
 8001eea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d104      	bne.n	8001f02 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2208      	movs	r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e008      	b.n	8001f14 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	220c      	movs	r2, #12
 8001f12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	50040300 	.word	0x50040300
 8001f24:	50040100 	.word	0x50040100
 8001f28:	50040000 	.word	0x50040000

08001f2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b6      	sub	sp, #216	@ 0xd8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x22>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e3c9      	b.n	80026fe <HAL_ADC_ConfigChannel+0x7b6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fccf 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 83aa 	bne.w	80026d8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	3b02      	subs	r3, #2
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d81b      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x8e>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <HAL_ADC_ConfigChannel+0x5c>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbd 	.word	0x08001fbd
 8001fac:	08001fc5 	.word	0x08001fc5
 8001fb0:	08001fcd 	.word	0x08001fcd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fba:	e010      	b.n	8001fde <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fc2:	e00c      	b.n	8001fde <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fca:	e008      	b.n	8001fde <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fdc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001fec:	f7ff fb74 	bl	80016d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc90 	bl	800191a <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc9c 	bl	8001940 <LL_ADC_INJ_IsConversionOngoing>
 8002008:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800200c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 81a4 	bne.w	800235e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 819f 	bne.w	800235e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	461a      	mov	r2, r3
 800202e:	f7ff fb7f 	bl	8001730 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00a      	beq.n	800206a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002064:	f7ff fad0 	bl	8001608 <LL_ADC_SetOffset>
 8002068:	e179      	b.n	800235e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff faed 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x14e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fae2 	bl	8001650 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	e01e      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x18c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fad7 	bl	8001650 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e004      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80020c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1a4>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	e018      	b.n	800211e <HAL_ADC_ConfigChannel+0x1d6>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002108:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e004      	b.n	800211e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800211e:	429a      	cmp	r2, r3
 8002120:	d106      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff faa6 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fa8a 	bl	8001650 <LL_ADC_GetOffsetChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_ADC_ConfigChannel+0x214>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fa7f 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	e01e      	b.n	800219a <HAL_ADC_ConfigChannel+0x252>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa74 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800217a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e004      	b.n	8002198 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800218e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x26a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	e018      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x29c>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80021c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80021ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e004      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80021da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d106      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fa43 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2102      	movs	r1, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fa27 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x2da>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2102      	movs	r1, #2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fa1c 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	e01e      	b.n	8002260 <HAL_ADC_ConfigChannel+0x318>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2102      	movs	r1, #2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fa11 	bl	8001650 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x330>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	e014      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x35a>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800228c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e004      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d106      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2102      	movs	r1, #2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9e4 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2103      	movs	r1, #3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f9c8 	bl	8001650 <LL_ADC_GetOffsetChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x398>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2103      	movs	r1, #3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f9bd 	bl	8001650 <LL_ADC_GetOffsetChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	e017      	b.n	8002310 <HAL_ADC_ConfigChannel+0x3c8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2103      	movs	r1, #3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f9b2 	bl	8001650 <LL_ADC_GetOffsetChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x3e0>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	e011      	b.n	800234c <HAL_ADC_ConfigChannel+0x404>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002338:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800233a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	2103      	movs	r1, #3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f98f 	bl	800167c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fab2 	bl	80018cc <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8140 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	f7ff fa03 	bl	8001788 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4a8f      	ldr	r2, [pc, #572]	@ (80025c4 <HAL_ADC_ConfigChannel+0x67c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	f040 8131 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x46e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	bf94      	ite	ls
 80023ae:	2301      	movls	r3, #1
 80023b0:	2300      	movhi	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e019      	b.n	80023ea <HAL_ADC_ConfigChannel+0x4a2>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d079      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_ADC_ConfigChannel+0x4c2>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	3301      	adds	r3, #1
 8002402:	069b      	lsls	r3, r3, #26
 8002404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002408:	e015      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4ee>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800241c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	069b      	lsls	r3, r3, #26
 8002432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x50e>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	e017      	b.n	8002486 <HAL_ADC_ConfigChannel+0x53e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002466:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e003      	b.n	800247a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	ea42 0103 	orr.w	r1, r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x564>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0e9b      	lsrs	r3, r3, #26
 800249c:	3301      	adds	r3, #1
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	e018      	b.n	80024de <HAL_ADC_ConfigChannel+0x596>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80024c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024de:	430b      	orrs	r3, r1
 80024e0:	e081      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x5b6>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	3301      	adds	r3, #1
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fc:	e015      	b.n	800252a <HAL_ADC_ConfigChannel+0x5e2>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800251a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	069b      	lsls	r3, r3, #26
 8002526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_ADC_ConfigChannel+0x602>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	e017      	b.n	800257a <HAL_ADC_ConfigChannel+0x632>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	61bb      	str	r3, [r7, #24]
  return result;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	ea42 0103 	orr.w	r1, r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x65e>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	3301      	adds	r3, #1
 8002592:	f003 021f 	and.w	r2, r3, #31
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025a4:	e01e      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x69c>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  return result;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e006      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x688>
 80025c2:	bf00      	nop
 80025c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 021f 	and.w	r2, r3, #31
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	3b1e      	subs	r3, #30
 80025de:	051b      	lsls	r3, r3, #20
 80025e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7ff f8a0 	bl	8001730 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b44      	ldr	r3, [pc, #272]	@ (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d07a      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025fc:	4843      	ldr	r0, [pc, #268]	@ (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 80025fe:	f7fe fff5 	bl	80015ec <LL_ADC_GetCommonPathInternalCh>
 8002602:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a41      	ldr	r2, [pc, #260]	@ (8002710 <HAL_ADC_ConfigChannel+0x7c8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d12c      	bne.n	800266a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d126      	bne.n	800266a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3c      	ldr	r2, [pc, #240]	@ (8002714 <HAL_ADC_ConfigChannel+0x7cc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x6e8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3b      	ldr	r2, [pc, #236]	@ (8002718 <HAL_ADC_ConfigChannel+0x7d0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d15d      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002638:	4619      	mov	r1, r3
 800263a:	4834      	ldr	r0, [pc, #208]	@ (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 800263c:	f7fe ffc3 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_ADC_ConfigChannel+0x7d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	4a36      	ldr	r2, [pc, #216]	@ (8002720 <HAL_ADC_ConfigChannel+0x7d8>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800265a:	e002      	b.n	8002662 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3b01      	subs	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	e040      	b.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <HAL_ADC_ConfigChannel+0x7dc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d118      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d112      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a23      	ldr	r2, [pc, #140]	@ (8002714 <HAL_ADC_ConfigChannel+0x7cc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x74c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_ADC_ConfigChannel+0x7d0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d12d      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269c:	4619      	mov	r1, r3
 800269e:	481b      	ldr	r0, [pc, #108]	@ (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 80026a0:	f7fe ff91 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a4:	e024      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002728 <HAL_ADC_ConfigChannel+0x7e0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d120      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_ADC_ConfigChannel+0x7cc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d115      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ce:	4619      	mov	r1, r3
 80026d0:	480e      	ldr	r0, [pc, #56]	@ (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 80026d2:	f7fe ff78 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
 80026d6:	e00c      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	37d8      	adds	r7, #216	@ 0xd8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	80080000 	.word	0x80080000
 800270c:	50040300 	.word	0x50040300
 8002710:	c7520000 	.word	0xc7520000
 8002714:	50040000 	.word	0x50040000
 8002718:	50040200 	.word	0x50040200
 800271c:	20000000 	.word	0x20000000
 8002720:	053e2d63 	.word	0x053e2d63
 8002724:	cb840000 	.word	0xcb840000
 8002728:	80000001 	.word	0x80000001

0800272c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f8c5 	bl	80018cc <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d169      	bne.n	800281c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <ADC_Enable+0xfc>)
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e055      	b.n	800281e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f894 	bl	80018a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800277c:	482b      	ldr	r0, [pc, #172]	@ (800282c <ADC_Enable+0x100>)
 800277e:	f7fe ff35 	bl	80015ec <LL_ADC_GetCommonPathInternalCh>
 8002782:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278c:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <ADC_Enable+0x104>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	4a28      	ldr	r2, [pc, #160]	@ (8002834 <ADC_Enable+0x108>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027a6:	e002      	b.n	80027ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fec4 	bl	8001540 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ba:	e028      	b.n	800280e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f883 	bl	80018cc <LL_ADC_IsEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f867 	bl	80018a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027d6:	f7fe feb3 	bl	8001540 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d914      	bls.n	800280e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00d      	beq.n	800280e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e007      	b.n	800281e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d1cf      	bne.n	80027bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	8000003f 	.word	0x8000003f
 800282c:	50040300 	.word	0x50040300
 8002830:	20000000 	.word	0x20000000
 8002834:	053e2d63 	.word	0x053e2d63

08002838 <LL_ADC_IsEnabled>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <LL_ADC_IsEnabled+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_ADC_IsEnabled+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_ADC_REG_IsConversionOngoing>:
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d101      	bne.n	8002876 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b09f      	sub	sp, #124	@ 0x7c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800289e:	2302      	movs	r3, #2
 80028a0:	e093      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028aa:	2300      	movs	r3, #0
 80028ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ae:	2300      	movs	r3, #0
 80028b0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a47      	ldr	r2, [pc, #284]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028bc:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e001      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e072      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ffb9 	bl	800285e <LL_ADC_REG_IsConversionOngoing>
 80028ec:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffb3 	bl	800285e <LL_ADC_REG_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d154      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002900:	2b00      	cmp	r3, #0
 8002902:	d151      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002904:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002906:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d02c      	beq.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002922:	035b      	lsls	r3, r3, #13
 8002924:	430b      	orrs	r3, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800292a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292c:	4829      	ldr	r0, [pc, #164]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800292e:	f7ff ff83 	bl	8002838 <LL_ADC_IsEnabled>
 8002932:	4604      	mov	r4, r0
 8002934:	4828      	ldr	r0, [pc, #160]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002936:	f7ff ff7f 	bl	8002838 <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	431c      	orrs	r4, r3
 800293e:	4828      	ldr	r0, [pc, #160]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002940:	f7ff ff7a 	bl	8002838 <LL_ADC_IsEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	4323      	orrs	r3, r4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d137      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800294c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002954:	f023 030f 	bic.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6811      	ldr	r1, [r2, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	430a      	orrs	r2, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002966:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002968:	e028      	b.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800296a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002974:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002976:	4817      	ldr	r0, [pc, #92]	@ (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002978:	f7ff ff5e 	bl	8002838 <LL_ADC_IsEnabled>
 800297c:	4604      	mov	r4, r0
 800297e:	4816      	ldr	r0, [pc, #88]	@ (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002980:	f7ff ff5a 	bl	8002838 <LL_ADC_IsEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	431c      	orrs	r4, r3
 8002988:	4815      	ldr	r0, [pc, #84]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800298a:	f7ff ff55 	bl	8002838 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	4323      	orrs	r3, r4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d112      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800299e:	f023 030f 	bic.w	r3, r3, #15
 80029a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029a6:	e009      	b.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029ba:	e000      	b.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	377c      	adds	r7, #124	@ 0x7c
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	50040000 	.word	0x50040000
 80029d8:	50040100 	.word	0x50040100
 80029dc:	50040300 	.word	0x50040300
 80029e0:	50040200 	.word	0x50040200

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	@ (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff3e 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff31 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffa2 	bl	8002b40 <SysTick_Config>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e098      	b.n	8002d4c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_DMA_Init+0x150>)
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d80f      	bhi.n	8002c46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <HAL_DMA_Init+0x154>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <HAL_DMA_Init+0x158>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	009a      	lsls	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	@ (8002d64 <HAL_DMA_Init+0x15c>)
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c44:	e00e      	b.n	8002c64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b46      	ldr	r3, [pc, #280]	@ (8002d68 <HAL_DMA_Init+0x160>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a43      	ldr	r2, [pc, #268]	@ (8002d60 <HAL_DMA_Init+0x158>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	009a      	lsls	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <HAL_DMA_Init+0x164>)
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cbe:	d039      	beq.n	8002d34 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <HAL_DMA_Init+0x15c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11a      	bne.n	8002d00 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cca:	4b29      	ldr	r3, [pc, #164]	@ (8002d70 <HAL_DMA_Init+0x168>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f003 031c 	and.w	r3, r3, #28
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4924      	ldr	r1, [pc, #144]	@ (8002d70 <HAL_DMA_Init+0x168>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ce4:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_DMA_Init+0x168>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	f003 031c 	and.w	r3, r3, #28
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	491d      	ldr	r1, [pc, #116]	@ (8002d70 <HAL_DMA_Init+0x168>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
 8002cfe:	e019      	b.n	8002d34 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d00:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <HAL_DMA_Init+0x16c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	f003 031c 	and.w	r3, r3, #28
 8002d0c:	210f      	movs	r1, #15
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4917      	ldr	r1, [pc, #92]	@ (8002d74 <HAL_DMA_Init+0x16c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_DMA_Init+0x16c>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f003 031c 	and.w	r3, r3, #28
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	4911      	ldr	r1, [pc, #68]	@ (8002d74 <HAL_DMA_Init+0x16c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40020407 	.word	0x40020407
 8002d5c:	bffdfff8 	.word	0xbffdfff8
 8002d60:	cccccccd 	.word	0xcccccccd
 8002d64:	40020000 	.word	0x40020000
 8002d68:	bffdfbf8 	.word	0xbffdfbf8
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	400200a8 	.word	0x400200a8
 8002d74:	400204a8 	.word	0x400204a8

08002d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	f003 031c 	and.w	r3, r3, #28
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d026      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x7a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0204 	bic.w	r2, r2, #4
 8002dca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd0:	f003 021c 	and.w	r2, r3, #28
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	2104      	movs	r1, #4
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d071      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002df0:	e06c      	b.n	8002ecc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f003 031c 	and.w	r3, r3, #28
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xec>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d029      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 020a 	bic.w	r2, r2, #10
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f003 021c 	and.w	r2, r3, #28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	2102      	movs	r1, #2
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d038      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e62:	e033      	b.n	8002ecc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e68:	f003 031c 	and.w	r3, r3, #28
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02a      	beq.n	8002ece <HAL_DMA_IRQHandler+0x156>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d025      	beq.n	8002ece <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 020e 	bic.w	r2, r2, #14
 8002e90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f003 021c 	and.w	r2, r3, #28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
}
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	e17f      	b.n	80031e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8171 	beq.w	80031e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d005      	beq.n	8002f18 <HAL_GPIO_Init+0x40>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d130      	bne.n	8002f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f4e:	2201      	movs	r2, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 0201 	and.w	r2, r3, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d118      	bne.n	8002fb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80ac 	beq.w	80031e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	4b5f      	ldr	r3, [pc, #380]	@ (8003208 <HAL_GPIO_Init+0x330>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	4a5e      	ldr	r2, [pc, #376]	@ (8003208 <HAL_GPIO_Init+0x330>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6613      	str	r3, [r2, #96]	@ 0x60
 8003096:	4b5c      	ldr	r3, [pc, #368]	@ (8003208 <HAL_GPIO_Init+0x330>)
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030a2:	4a5a      	ldr	r2, [pc, #360]	@ (800320c <HAL_GPIO_Init+0x334>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030cc:	d025      	beq.n	800311a <HAL_GPIO_Init+0x242>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003210 <HAL_GPIO_Init+0x338>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01f      	beq.n	8003116 <HAL_GPIO_Init+0x23e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <HAL_GPIO_Init+0x33c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x23a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003218 <HAL_GPIO_Init+0x340>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x236>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	@ (800321c <HAL_GPIO_Init+0x344>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x232>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003220 <HAL_GPIO_Init+0x348>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x22e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003224 <HAL_GPIO_Init+0x34c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x22a>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00c      	b.n	800311c <HAL_GPIO_Init+0x244>
 8003102:	2307      	movs	r3, #7
 8003104:	e00a      	b.n	800311c <HAL_GPIO_Init+0x244>
 8003106:	2305      	movs	r3, #5
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x244>
 800310a:	2304      	movs	r3, #4
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x244>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x244>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x244>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x244>
 800311a:	2300      	movs	r3, #0
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800312c:	4937      	ldr	r1, [pc, #220]	@ (800320c <HAL_GPIO_Init+0x334>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800313a:	4b3b      	ldr	r3, [pc, #236]	@ (8003228 <HAL_GPIO_Init+0x350>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800315e:	4a32      	ldr	r2, [pc, #200]	@ (8003228 <HAL_GPIO_Init+0x350>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003164:	4b30      	ldr	r3, [pc, #192]	@ (8003228 <HAL_GPIO_Init+0x350>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003188:	4a27      	ldr	r2, [pc, #156]	@ (8003228 <HAL_GPIO_Init+0x350>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800318e:	4b26      	ldr	r3, [pc, #152]	@ (8003228 <HAL_GPIO_Init+0x350>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003228 <HAL_GPIO_Init+0x350>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_GPIO_Init+0x350>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031dc:	4a12      	ldr	r2, [pc, #72]	@ (8003228 <HAL_GPIO_Init+0x350>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f47f ae78 	bne.w	8002ee8 <HAL_GPIO_Init+0x10>
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40010000 	.word	0x40010000
 8003210:	48000400 	.word	0x48000400
 8003214:	48000800 	.word	0x48000800
 8003218:	48000c00 	.word	0x48000c00
 800321c:	48001000 	.word	0x48001000
 8003220:	48001400 	.word	0x48001400
 8003224:	48001800 	.word	0x48001800
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e001      	b.n	800324e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003278:	e002      	b.n	8003280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003296:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fdba 	bl	8000e24 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e6:	d130      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e8:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f4:	d038      	beq.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003306:	4b1d      	ldr	r3, [pc, #116]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2232      	movs	r2, #50	@ 0x32
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331c:	e002      	b.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b01      	subs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003324:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003330:	d102      	bne.n	8003338 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f2      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003338:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003344:	d110      	bne.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003356:	d007      	beq.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003360:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003366:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40007000 	.word	0x40007000
 800337c:	20000000 	.word	0x20000000
 8003380:	431bde83 	.word	0x431bde83

08003384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e3ca      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	4b97      	ldr	r3, [pc, #604]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a0:	4b94      	ldr	r3, [pc, #592]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80e4 	beq.w	8003580 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_RCC_OscConfig+0x4a>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	f040 808b 	bne.w	80034dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 8087 	bne.w	80034dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ce:	4b89      	ldr	r3, [pc, #548]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e3a2      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	4b82      	ldr	r3, [pc, #520]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <HAL_RCC_OscConfig+0x7c>
 80033f6:	4b7f      	ldr	r3, [pc, #508]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033fe:	e005      	b.n	800340c <HAL_RCC_OscConfig+0x88>
 8003400:	4b7c      	ldr	r3, [pc, #496]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800340c:	4293      	cmp	r3, r2
 800340e:	d223      	bcs.n	8003458 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fd55 	bl	8003ec4 <RCC_SetFlashLatencyFromMSIRange>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e383      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003424:	4b73      	ldr	r3, [pc, #460]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a72      	ldr	r2, [pc, #456]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800342a:	f043 0308 	orr.w	r3, r3, #8
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b70      	ldr	r3, [pc, #448]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	496d      	ldr	r1, [pc, #436]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003442:	4b6c      	ldr	r3, [pc, #432]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4968      	ldr	r1, [pc, #416]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
 8003456:	e025      	b.n	80034a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003458:	4b66      	ldr	r3, [pc, #408]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b63      	ldr	r3, [pc, #396]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4960      	ldr	r1, [pc, #384]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003476:	4b5f      	ldr	r3, [pc, #380]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	495b      	ldr	r1, [pc, #364]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fd15 	bl	8003ec4 <RCC_SetFlashLatencyFromMSIRange>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e343      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034a4:	f000 fc4a 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	4950      	ldr	r1, [pc, #320]	@ (80035f8 <HAL_RCC_OscConfig+0x274>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	4a4e      	ldr	r2, [pc, #312]	@ (80035fc <HAL_RCC_OscConfig+0x278>)
 80034c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003600 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd ffe9 	bl	80014a0 <HAL_InitTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d052      	beq.n	800357e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	e327      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e4:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a42      	ldr	r2, [pc, #264]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f0:	f7fe f826 	bl	8001540 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f8:	f7fe f822 	bl	8001540 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e310      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350a:	4b3a      	ldr	r3, [pc, #232]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003516:	4b37      	ldr	r3, [pc, #220]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a36      	ldr	r2, [pc, #216]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4931      	ldr	r1, [pc, #196]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003534:	4b2f      	ldr	r3, [pc, #188]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	492c      	ldr	r1, [pc, #176]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e01a      	b.n	8003580 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800354a:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003556:	f7fd fff3 	bl	8001540 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800355e:	f7fd ffef 	bl	8001540 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e2dd      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003570:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x1da>
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d074      	beq.n	8003676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x21a>
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d10e      	bne.n	80035b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d064      	beq.n	8003674 <HAL_RCC_OscConfig+0x2f0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d160      	bne.n	8003674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e2ba      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x24a>
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0b      	ldr	r2, [pc, #44]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e026      	b.n	800361c <HAL_RCC_OscConfig+0x298>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d6:	d115      	bne.n	8003604 <HAL_RCC_OscConfig+0x280>
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b03      	ldr	r3, [pc, #12]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a02      	ldr	r2, [pc, #8]	@ (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x298>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08005fac 	.word	0x08005fac
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004
 8003604:	4ba0      	ldr	r3, [pc, #640]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a9f      	ldr	r2, [pc, #636]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800360a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b9d      	ldr	r3, [pc, #628]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a9c      	ldr	r2, [pc, #624]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd ff8c 	bl	8001540 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd ff88 	bl	8001540 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e276      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363e:	4b92      	ldr	r3, [pc, #584]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x2a8>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd ff78 	bl	8001540 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7fd ff74 	bl	8001540 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	@ 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e262      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003666:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x2d0>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d060      	beq.n	8003744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x310>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d119      	bne.n	80036c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d116      	bne.n	80036c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003694:	4b7c      	ldr	r3, [pc, #496]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_OscConfig+0x328>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e23f      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b76      	ldr	r3, [pc, #472]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	4973      	ldr	r1, [pc, #460]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c0:	e040      	b.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d023      	beq.n	8003712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd ff33 	bl	8001540 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7fd ff2f 	bl	8001540 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e21d      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f0:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	495f      	ldr	r1, [pc, #380]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e018      	b.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b5d      	ldr	r3, [pc, #372]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5c      	ldr	r2, [pc, #368]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd ff0f 	bl	8001540 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003726:	f7fd ff0b 	bl	8001540 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1f9      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003738:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003758:	4b4b      	ldr	r3, [pc, #300]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800375e:	4a4a      	ldr	r2, [pc, #296]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd feea 	bl	8001540 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fd fee6 	bl	8001540 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1d4      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003782:	4b41      	ldr	r3, [pc, #260]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x3ec>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	4a3b      	ldr	r2, [pc, #236]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fecd 	bl	8001540 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fd fec9 	bl	8001540 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1b7      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037bc:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80a6 	beq.w	8003924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f4:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <HAL_RCC_OscConfig+0x508>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d118      	bne.n	8003842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <HAL_RCC_OscConfig+0x508>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_RCC_OscConfig+0x508>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381c:	f7fd fe90 	bl	8001540 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd fe8c 	bl	8001540 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e17a      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCC_OscConfig+0x508>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <HAL_RCC_OscConfig+0x4d8>
 800384a:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800385a:	e029      	b.n	80038b0 <HAL_RCC_OscConfig+0x52c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d115      	bne.n	8003890 <HAL_RCC_OscConfig+0x50c>
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a03      	ldr	r2, [pc, #12]	@ (8003888 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x52c>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
 8003890:	4b9c      	ldr	r3, [pc, #624]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	4a9b      	ldr	r2, [pc, #620]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a0:	4b98      	ldr	r3, [pc, #608]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	4a97      	ldr	r2, [pc, #604]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fe42 	bl	8001540 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fd fe3e 	bl	8001540 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e12a      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ed      	beq.n	80038c0 <HAL_RCC_OscConfig+0x53c>
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fd fe2b 	bl	8001540 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fd fe27 	bl	8001540 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e113      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003904:	4b7f      	ldr	r3, [pc, #508]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ed      	bne.n	80038ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003912:	7ffb      	ldrb	r3, [r7, #31]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b7a      	ldr	r3, [pc, #488]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391c:	4a79      	ldr	r2, [pc, #484]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003922:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80fe 	beq.w	8003b2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	2b02      	cmp	r3, #2
 8003934:	f040 80d0 	bne.w	8003ad8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003938:	4b72      	ldr	r3, [pc, #456]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d130      	bne.n	80039ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d127      	bne.n	80039ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d11f      	bne.n	80039ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003978:	2a07      	cmp	r2, #7
 800397a:	bf14      	ite	ne
 800397c:	2201      	movne	r2, #1
 800397e:	2200      	moveq	r2, #0
 8003980:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003982:	4293      	cmp	r3, r2
 8003984:	d113      	bne.n	80039ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d109      	bne.n	80039ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d06e      	beq.n	8003a8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d069      	beq.n	8003a88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039c0:	4b50      	ldr	r3, [pc, #320]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0ad      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039dc:	f7fd fdb0 	bl	8001540 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd fdac 	bl	8001540 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e09a      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f6:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a02:	4b40      	ldr	r3, [pc, #256]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4b40      	ldr	r3, [pc, #256]	@ (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a1c:	0212      	lsls	r2, r2, #8
 8003a1e:	4311      	orrs	r1, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	3a01      	subs	r2, #1
 8003a28:	0552      	lsls	r2, r2, #21
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a30:	0852      	lsrs	r2, r2, #1
 8003a32:	3a01      	subs	r2, #1
 8003a34:	0652      	lsls	r2, r2, #25
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a3c:	0912      	lsrs	r2, r2, #4
 8003a3e:	0452      	lsls	r2, r2, #17
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4930      	ldr	r1, [pc, #192]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a48:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a60:	f7fd fd6e 	bl	8001540 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fd6a 	bl	8001540 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e058      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7a:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a86:	e050      	b.n	8003b2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e04f      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d148      	bne.n	8003b2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa4:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ab0:	f7fd fd46 	bl	8001540 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fd42 	bl	8001540 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e030      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	4b0e      	ldr	r3, [pc, #56]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x734>
 8003ad6:	e028      	b.n	8003b2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d023      	beq.n	8003b26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fd29 	bl	8001540 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af0:	e00c      	b.n	8003b0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fd25 	bl	8001540 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d905      	bls.n	8003b0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e013      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_OscConfig+0x7b0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ec      	bne.n	8003af2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_RCC_OscConfig+0x7b0>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	4905      	ldr	r1, [pc, #20]	@ (8003b34 <HAL_RCC_OscConfig+0x7b0>)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_OscConfig+0x7b4>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
 8003b24:	e001      	b.n	8003b2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	feeefffc 	.word	0xfeeefffc

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0e7      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b75      	ldr	r3, [pc, #468]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b72      	ldr	r3, [pc, #456]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	4970      	ldr	r1, [pc, #448]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cf      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d010      	beq.n	8003bae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d908      	bls.n	8003bae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b63      	ldr	r3, [pc, #396]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4960      	ldr	r1, [pc, #384]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04c      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d121      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0a6      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bda:	4b54      	ldr	r3, [pc, #336]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d115      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e09a      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e08e      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c02:	4b4a      	ldr	r3, [pc, #296]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e086      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b46      	ldr	r3, [pc, #280]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4943      	ldr	r1, [pc, #268]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fd fc8c 	bl	8001540 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fd fc88 	bl	8001540 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e06e      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b3a      	ldr	r3, [pc, #232]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d208      	bcs.n	8003c82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b2e      	ldr	r3, [pc, #184]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	492b      	ldr	r1, [pc, #172]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c82:	4b29      	ldr	r3, [pc, #164]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d210      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c90:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 0207 	bic.w	r2, r3, #7
 8003c98:	4923      	ldr	r1, [pc, #140]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e036      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4918      	ldr	r1, [pc, #96]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cdc:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4910      	ldr	r1, [pc, #64]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cf0:	f000 f824 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	490b      	ldr	r1, [pc, #44]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f4>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1f8>)
 8003d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCC_ClockConfig+0x1fc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd fbc3 	bl	80014a0 <HAL_InitTick>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08005fac 	.word	0x08005fac
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004

08003d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	@ 0x24
 8003d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d54:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x34>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d121      	bne.n	8003dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d11e      	bne.n	8003dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d70:	4b34      	ldr	r3, [pc, #208]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d7c:	4b31      	ldr	r3, [pc, #196]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e005      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d98:	4a2b      	ldr	r2, [pc, #172]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d102      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e004      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dc0:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d134      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dca:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d003      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0xac>
 8003de0:	e005      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003de2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003de4:	617b      	str	r3, [r7, #20]
      break;
 8003de6:	e005      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003de8:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dea:	617b      	str	r3, [r7, #20]
      break;
 8003dec:	e002      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	3301      	adds	r3, #1
 8003e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	fb03 f202 	mul.w	r2, r3, r2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	0e5b      	lsrs	r3, r3, #25
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	3301      	adds	r3, #1
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e34:	69bb      	ldr	r3, [r7, #24]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08005fc4 	.word	0x08005fc4
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	007a1200 	.word	0x007a1200

08003e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	@ (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000000 	.word	0x20000000

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4904      	ldr	r1, [pc, #16]	@ (8003e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08005fbc 	.word	0x08005fbc

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e9c:	f7ff ffda 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4904      	ldr	r1, [pc, #16]	@ (8003ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08005fbc 	.word	0x08005fbc

08003ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003edc:	f7ff f9ee 	bl	80032bc <HAL_PWREx_GetVoltageRange>
 8003ee0:	6178      	str	r0, [r7, #20]
 8003ee2:	e014      	b.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee8:	4a24      	ldr	r2, [pc, #144]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef0:	4b22      	ldr	r3, [pc, #136]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003efc:	f7ff f9de 	bl	80032bc <HAL_PWREx_GetVoltageRange>
 8003f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	4a1d      	ldr	r2, [pc, #116]	@ (8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f14:	d10b      	bne.n	8003f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b80      	cmp	r3, #128	@ 0x80
 8003f1a:	d919      	bls.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f20:	d902      	bls.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f22:	2302      	movs	r3, #2
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e013      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	e010      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b80      	cmp	r3, #128	@ 0x80
 8003f32:	d902      	bls.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f34:	2303      	movs	r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	e00a      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	@ 0x80
 8003f3e:	d102      	bne.n	8003f46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f40:	2302      	movs	r3, #2
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e004      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b70      	cmp	r3, #112	@ 0x70
 8003f4a:	d101      	bne.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 0207 	bic.w	r2, r3, #7
 8003f58:	4909      	ldr	r1, [pc, #36]	@ (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40022000 	.word	0x40022000

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f90:	2300      	movs	r3, #0
 8003f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d041      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fa8:	d02a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003faa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fae:	d824      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fba:	d81e      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fc6:	e018      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fc8:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a85      	ldr	r2, [pc, #532]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fabb 	bl	8004558 <RCCEx_PLLSAI1_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe6:	e00c      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3320      	adds	r3, #32
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fba6 	bl	8004740 <RCCEx_PLLSAI2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004008:	4b76      	ldr	r3, [pc, #472]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004016:	4973      	ldr	r1, [pc, #460]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d041      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004038:	d02a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800403a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800403e:	d824      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800404a:	d81e      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004054:	d010      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004056:	e018      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004058:	4b62      	ldr	r3, [pc, #392]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a61      	ldr	r2, [pc, #388]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004062:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004064:	e015      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa73 	bl	8004558 <RCCEx_PLLSAI1_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004076:	e00c      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3320      	adds	r3, #32
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fb5e 	bl	8004740 <RCCEx_PLLSAI2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	74fb      	strb	r3, [r7, #19]
      break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004098:	4b52      	ldr	r3, [pc, #328]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040a6:	494f      	ldr	r1, [pc, #316]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a0 	beq.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	4b41      	ldr	r3, [pc, #260]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	4a40      	ldr	r2, [pc, #256]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e8:	4b3e      	ldr	r3, [pc, #248]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f4:	2301      	movs	r3, #1
 80040f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3a      	ldr	r2, [pc, #232]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004104:	f7fd fa1c 	bl	8001540 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800410a:	e009      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fd fa18 	bl	8001540 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	74fb      	strb	r3, [r7, #19]
        break;
 800411e:	e005      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004120:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d15c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004132:	4b2c      	ldr	r3, [pc, #176]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	d019      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004150:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800415a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800415c:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	4a20      	ldr	r2, [pc, #128]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800416c:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800417c:	4a19      	ldr	r2, [pc, #100]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd f9d7 	bl	8001540 <HAL_GetTick>
 8004192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004194:	e00b      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fd f9d3 	bl	8001540 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d902      	bls.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	74fb      	strb	r3, [r7, #19]
            break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ec      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c2:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d2:	4904      	ldr	r1, [pc, #16]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041da:	e009      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f0:	7c7b      	ldrb	r3, [r7, #17]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	4a9d      	ldr	r2, [pc, #628]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800420e:	4b98      	ldr	r3, [pc, #608]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	f023 0203 	bic.w	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	4994      	ldr	r1, [pc, #592]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004230:	4b8f      	ldr	r3, [pc, #572]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f023 020c 	bic.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	498c      	ldr	r1, [pc, #560]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004252:	4b87      	ldr	r3, [pc, #540]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	4983      	ldr	r1, [pc, #524]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004274:	4b7e      	ldr	r3, [pc, #504]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	497b      	ldr	r1, [pc, #492]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004296:	4b76      	ldr	r3, [pc, #472]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	4972      	ldr	r1, [pc, #456]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	496a      	ldr	r1, [pc, #424]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042da:	4b65      	ldr	r3, [pc, #404]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e8:	4961      	ldr	r1, [pc, #388]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430a:	4959      	ldr	r1, [pc, #356]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800431e:	4b54      	ldr	r3, [pc, #336]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004324:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	4950      	ldr	r1, [pc, #320]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004340:	4b4b      	ldr	r3, [pc, #300]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004346:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	4948      	ldr	r1, [pc, #288]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004362:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	493f      	ldr	r1, [pc, #252]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d028      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004384:	4b3a      	ldr	r3, [pc, #232]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004392:	4937      	ldr	r1, [pc, #220]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a4:	4b32      	ldr	r3, [pc, #200]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a31      	ldr	r2, [pc, #196]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e011      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	2101      	movs	r1, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f8c8 	bl	8004558 <RCCEx_PLLSAI1_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043e2:	4b23      	ldr	r3, [pc, #140]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	491f      	ldr	r1, [pc, #124]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004400:	d106      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004402:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800440c:	60d3      	str	r3, [r2, #12]
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004418:	d10c      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f899 	bl	8004558 <RCCEx_PLLSAI1_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02b      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444e:	4908      	ldr	r1, [pc, #32]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800445e:	d109      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a02      	ldr	r2, [pc, #8]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
 800446c:	e014      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800447c:	d10c      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f867 	bl	8004558 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02f      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044b2:	4928      	ldr	r1, [pc, #160]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f844 	bl	8004558 <RCCEx_PLLSAI1_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d014      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	74bb      	strb	r3, [r7, #18]
 80044de:	e011      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3320      	adds	r3, #32
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f925 	bl	8004740 <RCCEx_PLLSAI2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451e:	490d      	ldr	r1, [pc, #52]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004532:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004542:	4904      	ldr	r1, [pc, #16]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800454a:	7cbb      	ldrb	r3, [r7, #18]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000

08004558 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004566:	4b75      	ldr	r3, [pc, #468]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004572:	4b72      	ldr	r3, [pc, #456]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0203 	and.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d10d      	bne.n	800459e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
       ||
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800458a:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
       ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d047      	beq.n	800462e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	e044      	b.n	800462e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d018      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x86>
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d825      	bhi.n	80045fc <RCCEx_PLLSAI1_Config+0xa4>
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d002      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0x62>
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d009      	beq.n	80045cc <RCCEx_PLLSAI1_Config+0x74>
 80045b8:	e020      	b.n	80045fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045ba:	4b60      	ldr	r3, [pc, #384]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11d      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e01a      	b.n	8004602 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045cc:	4b5b      	ldr	r3, [pc, #364]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d116      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e013      	b.n	8004606 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045de:	4b57      	ldr	r3, [pc, #348]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ea:	4b54      	ldr	r3, [pc, #336]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045fa:	e006      	b.n	800460a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e004      	b.n	800460c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800460a:	bf00      	nop
    }

    if(status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004612:	4b4a      	ldr	r3, [pc, #296]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	430b      	orrs	r3, r1
 8004628:	4944      	ldr	r1, [pc, #272]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d17d      	bne.n	8004730 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004634:	4b41      	ldr	r3, [pc, #260]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a40      	ldr	r2, [pc, #256]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800463e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004640:	f7fc ff7e 	bl	8001540 <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004648:	f7fc ff7a 	bl	8001540 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
        break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800465c:	4b37      	ldr	r3, [pc, #220]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ef      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d160      	bne.n	8004730 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004674:	4b31      	ldr	r3, [pc, #196]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800467c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6892      	ldr	r2, [r2, #8]
 8004684:	0211      	lsls	r1, r2, #8
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	0912      	lsrs	r2, r2, #4
 800468c:	0452      	lsls	r2, r2, #17
 800468e:	430a      	orrs	r2, r1
 8004690:	492a      	ldr	r1, [pc, #168]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	610b      	str	r3, [r1, #16]
 8004696:	e027      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d112      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6912      	ldr	r2, [r2, #16]
 80046b4:	0852      	lsrs	r2, r2, #1
 80046b6:	3a01      	subs	r2, #1
 80046b8:	0552      	lsls	r2, r2, #21
 80046ba:	430a      	orrs	r2, r1
 80046bc:	491f      	ldr	r1, [pc, #124]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	610b      	str	r3, [r1, #16]
 80046c2:	e011      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c4:	4b1d      	ldr	r3, [pc, #116]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	0211      	lsls	r1, r2, #8
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6952      	ldr	r2, [r2, #20]
 80046da:	0852      	lsrs	r2, r2, #1
 80046dc:	3a01      	subs	r2, #1
 80046de:	0652      	lsls	r2, r2, #25
 80046e0:	430a      	orrs	r2, r1
 80046e2:	4916      	ldr	r1, [pc, #88]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046e8:	4b14      	ldr	r3, [pc, #80]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fc ff24 	bl	8001540 <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046fa:	e009      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046fc:	f7fc ff20 	bl	8001540 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d902      	bls.n	8004710 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	73fb      	strb	r3, [r7, #15]
          break;
 800470e:	e005      	b.n	800471c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004710:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	4904      	ldr	r1, [pc, #16]	@ (800473c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000

08004740 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800474e:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800475a:	4b67      	ldr	r3, [pc, #412]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0203 	and.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d10d      	bne.n	8004786 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
       ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004772:	4b61      	ldr	r3, [pc, #388]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
       ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d047      	beq.n	8004816 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	e044      	b.n	8004816 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d018      	beq.n	80047c6 <RCCEx_PLLSAI2_Config+0x86>
 8004794:	2b03      	cmp	r3, #3
 8004796:	d825      	bhi.n	80047e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d002      	beq.n	80047a2 <RCCEx_PLLSAI2_Config+0x62>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d009      	beq.n	80047b4 <RCCEx_PLLSAI2_Config+0x74>
 80047a0:	e020      	b.n	80047e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047a2:	4b55      	ldr	r3, [pc, #340]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11d      	bne.n	80047ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b2:	e01a      	b.n	80047ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b4:	4b50      	ldr	r3, [pc, #320]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c4:	e013      	b.n	80047ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047c6:	4b4c      	ldr	r3, [pc, #304]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047d2:	4b49      	ldr	r3, [pc, #292]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047e2:	e006      	b.n	80047f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e004      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047fa:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6819      	ldr	r1, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	430b      	orrs	r3, r1
 8004810:	4939      	ldr	r1, [pc, #228]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d167      	bne.n	80048ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800481c:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a35      	ldr	r2, [pc, #212]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004828:	f7fc fe8a 	bl	8001540 <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800482e:	e009      	b.n	8004844 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004830:	f7fc fe86 	bl	8001540 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d902      	bls.n	8004844 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	73fb      	strb	r3, [r7, #15]
        break;
 8004842:	e005      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004844:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ef      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d14a      	bne.n	80048ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d111      	bne.n	8004880 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800485c:	4b26      	ldr	r3, [pc, #152]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6892      	ldr	r2, [r2, #8]
 800486c:	0211      	lsls	r1, r2, #8
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	0912      	lsrs	r2, r2, #4
 8004874:	0452      	lsls	r2, r2, #17
 8004876:	430a      	orrs	r2, r1
 8004878:	491f      	ldr	r1, [pc, #124]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	4313      	orrs	r3, r2
 800487c:	614b      	str	r3, [r1, #20]
 800487e:	e011      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004880:	4b1d      	ldr	r3, [pc, #116]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004888:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6892      	ldr	r2, [r2, #8]
 8004890:	0211      	lsls	r1, r2, #8
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6912      	ldr	r2, [r2, #16]
 8004896:	0852      	lsrs	r2, r2, #1
 8004898:	3a01      	subs	r2, #1
 800489a:	0652      	lsls	r2, r2, #25
 800489c:	430a      	orrs	r2, r1
 800489e:	4916      	ldr	r1, [pc, #88]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048a4:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a13      	ldr	r2, [pc, #76]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fc fe46 	bl	8001540 <HAL_GetTick>
 80048b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b6:	e009      	b.n	80048cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b8:	f7fc fe42 	bl	8001540 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	73fb      	strb	r3, [r7, #15]
          break;
 80048ca:	e005      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ef      	beq.n	80048b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	4904      	ldr	r1, [pc, #16]	@ (80048f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e040      	b.n	8004990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fc24 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	@ 0x24
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fb6a 	bl	800501c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8af 	bl	8004aac <UART_SetConfig>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e01b      	b.n	8004990 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fbe9 	bl	8005160 <UART_CheckIdleState>
 800498e:	4603      	mov	r3, r0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	@ 0x28
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d177      	bne.n	8004aa0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_UART_Transmit+0x24>
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e070      	b.n	8004aa2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2221      	movs	r2, #33	@ 0x21
 80049cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ce:	f7fc fdb7 	bl	8001540 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ec:	d108      	bne.n	8004a00 <HAL_UART_Transmit+0x68>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a08:	e02f      	b.n	8004a6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	@ 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fc4b 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e03b      	b.n	8004aa2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	b292      	uxth	r2, r2
 8004a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	3302      	adds	r3, #2
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e007      	b.n	8004a58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1c9      	bne.n	8004a0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2140      	movs	r1, #64	@ 0x40
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fc15 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e005      	b.n	8004aa2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b08a      	sub	sp, #40	@ 0x28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4ba4      	ldr	r3, [pc, #656]	@ (8004d6c <UART_SetConfig+0x2c0>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a99      	ldr	r2, [pc, #612]	@ (8004d70 <UART_SetConfig+0x2c4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	4313      	orrs	r3, r2
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a90      	ldr	r2, [pc, #576]	@ (8004d74 <UART_SetConfig+0x2c8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d126      	bne.n	8004b84 <UART_SetConfig+0xd8>
 8004b36:	4b90      	ldr	r3, [pc, #576]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d81b      	bhi.n	8004b7c <UART_SetConfig+0xd0>
 8004b44:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <UART_SetConfig+0xa0>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b65 	.word	0x08004b65
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b62:	e116      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e112      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e10e      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e10a      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e106      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7c      	ldr	r2, [pc, #496]	@ (8004d7c <UART_SetConfig+0x2d0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d138      	bne.n	8004c00 <UART_SetConfig+0x154>
 8004b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d82d      	bhi.n	8004bf8 <UART_SetConfig+0x14c>
 8004b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba4 <UART_SetConfig+0xf8>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bf9 	.word	0x08004bf9
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e0d8      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004be0:	2302      	movs	r3, #2
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be6:	e0d4      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e0d0      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf6:	e0cc      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfe:	e0c8      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5e      	ldr	r2, [pc, #376]	@ (8004d80 <UART_SetConfig+0x2d4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d125      	bne.n	8004c56 <UART_SetConfig+0x1aa>
 8004c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c14:	2b30      	cmp	r3, #48	@ 0x30
 8004c16:	d016      	beq.n	8004c46 <UART_SetConfig+0x19a>
 8004c18:	2b30      	cmp	r3, #48	@ 0x30
 8004c1a:	d818      	bhi.n	8004c4e <UART_SetConfig+0x1a2>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d00a      	beq.n	8004c36 <UART_SetConfig+0x18a>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d814      	bhi.n	8004c4e <UART_SetConfig+0x1a2>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <UART_SetConfig+0x182>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d008      	beq.n	8004c3e <UART_SetConfig+0x192>
 8004c2c:	e00f      	b.n	8004c4e <UART_SetConfig+0x1a2>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c34:	e0ad      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c36:	2302      	movs	r3, #2
 8004c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3c:	e0a9      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c3e:	2304      	movs	r3, #4
 8004c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c44:	e0a5      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c46:	2308      	movs	r3, #8
 8004c48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4c:	e0a1      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c4e:	2310      	movs	r3, #16
 8004c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c54:	e09d      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d84 <UART_SetConfig+0x2d8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d125      	bne.n	8004cac <UART_SetConfig+0x200>
 8004c60:	4b45      	ldr	r3, [pc, #276]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c6c:	d016      	beq.n	8004c9c <UART_SetConfig+0x1f0>
 8004c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c70:	d818      	bhi.n	8004ca4 <UART_SetConfig+0x1f8>
 8004c72:	2b80      	cmp	r3, #128	@ 0x80
 8004c74:	d00a      	beq.n	8004c8c <UART_SetConfig+0x1e0>
 8004c76:	2b80      	cmp	r3, #128	@ 0x80
 8004c78:	d814      	bhi.n	8004ca4 <UART_SetConfig+0x1f8>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <UART_SetConfig+0x1d8>
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d008      	beq.n	8004c94 <UART_SetConfig+0x1e8>
 8004c82:	e00f      	b.n	8004ca4 <UART_SetConfig+0x1f8>
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e082      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e07e      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e07a      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e076      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e072      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <UART_SetConfig+0x2dc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d12a      	bne.n	8004d0c <UART_SetConfig+0x260>
 8004cb6:	4b30      	ldr	r3, [pc, #192]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cc4:	d01a      	beq.n	8004cfc <UART_SetConfig+0x250>
 8004cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cca:	d81b      	bhi.n	8004d04 <UART_SetConfig+0x258>
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d00c      	beq.n	8004cec <UART_SetConfig+0x240>
 8004cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd6:	d815      	bhi.n	8004d04 <UART_SetConfig+0x258>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <UART_SetConfig+0x238>
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce0:	d008      	beq.n	8004cf4 <UART_SetConfig+0x248>
 8004ce2:	e00f      	b.n	8004d04 <UART_SetConfig+0x258>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cea:	e052      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf2:	e04e      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfa:	e04a      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d02:	e046      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0a:	e042      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a17      	ldr	r2, [pc, #92]	@ (8004d70 <UART_SetConfig+0x2c4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d13a      	bne.n	8004d8c <UART_SetConfig+0x2e0>
 8004d16:	4b18      	ldr	r3, [pc, #96]	@ (8004d78 <UART_SetConfig+0x2cc>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d24:	d01a      	beq.n	8004d5c <UART_SetConfig+0x2b0>
 8004d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d2a:	d81b      	bhi.n	8004d64 <UART_SetConfig+0x2b8>
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d30:	d00c      	beq.n	8004d4c <UART_SetConfig+0x2a0>
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d36:	d815      	bhi.n	8004d64 <UART_SetConfig+0x2b8>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <UART_SetConfig+0x298>
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d40:	d008      	beq.n	8004d54 <UART_SetConfig+0x2a8>
 8004d42:	e00f      	b.n	8004d64 <UART_SetConfig+0x2b8>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e022      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e01e      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d54:	2304      	movs	r3, #4
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e01a      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d62:	e016      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6a:	e012      	b.n	8004d92 <UART_SetConfig+0x2e6>
 8004d6c:	efff69f3 	.word	0xefff69f3
 8004d70:	40008000 	.word	0x40008000
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40004400 	.word	0x40004400
 8004d80:	40004800 	.word	0x40004800
 8004d84:	40004c00 	.word	0x40004c00
 8004d88:	40005000 	.word	0x40005000
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a9f      	ldr	r2, [pc, #636]	@ (8005014 <UART_SetConfig+0x568>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d17a      	bne.n	8004e92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d824      	bhi.n	8004dee <UART_SetConfig+0x342>
 8004da4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <UART_SetConfig+0x300>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004def 	.word	0x08004def
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004def 	.word	0x08004def
 8004dbc:	08004ddf 	.word	0x08004ddf
 8004dc0:	08004def 	.word	0x08004def
 8004dc4:	08004def 	.word	0x08004def
 8004dc8:	08004def 	.word	0x08004def
 8004dcc:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7ff f84c 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004dd4:	61f8      	str	r0, [r7, #28]
        break;
 8004dd6:	e010      	b.n	8004dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8005018 <UART_SetConfig+0x56c>)
 8004dda:	61fb      	str	r3, [r7, #28]
        break;
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe ffad 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004de2:	61f8      	str	r0, [r7, #28]
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61fb      	str	r3, [r7, #28]
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80fb 	beq.w	8004ff8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d305      	bcc.n	8004e1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d903      	bls.n	8004e26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e24:	e0e8      	b.n	8004ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	461c      	mov	r4, r3
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	022b      	lsls	r3, r5, #8
 8004e38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e3c:	0222      	lsls	r2, r4, #8
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	6849      	ldr	r1, [r1, #4]
 8004e42:	0849      	lsrs	r1, r1, #1
 8004e44:	2000      	movs	r0, #0
 8004e46:	4688      	mov	r8, r1
 8004e48:	4681      	mov	r9, r0
 8004e4a:	eb12 0a08 	adds.w	sl, r2, r8
 8004e4e:	eb43 0b09 	adc.w	fp, r3, r9
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e60:	4650      	mov	r0, sl
 8004e62:	4659      	mov	r1, fp
 8004e64:	f7fb fa0c 	bl	8000280 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e76:	d308      	bcc.n	8004e8a <UART_SetConfig+0x3de>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e7e:	d204      	bcs.n	8004e8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e0b6      	b.n	8004ff8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e90:	e0b2      	b.n	8004ff8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9a:	d15e      	bne.n	8004f5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d828      	bhi.n	8004ef6 <UART_SetConfig+0x44a>
 8004ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <UART_SetConfig+0x400>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee7 	.word	0x08004ee7
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ef7 	.word	0x08004ef7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fe ffcc 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004ed4:	61f8      	str	r0, [r7, #28]
        break;
 8004ed6:	e014      	b.n	8004f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fe ffde 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8004edc:	61f8      	str	r0, [r7, #28]
        break;
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <UART_SetConfig+0x56c>)
 8004ee2:	61fb      	str	r3, [r7, #28]
        break;
 8004ee4:	e00d      	b.n	8004f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe ff29 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004eea:	61f8      	str	r0, [r7, #28]
        break;
 8004eec:	e009      	b.n	8004f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef2:	61fb      	str	r3, [r7, #28]
        break;
 8004ef4:	e005      	b.n	8004f02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d077      	beq.n	8004ff8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005a      	lsls	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	441a      	add	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d916      	bls.n	8004f52 <UART_SetConfig+0x4a6>
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2a:	d212      	bcs.n	8004f52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f023 030f 	bic.w	r3, r3, #15
 8004f34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	8afb      	ldrh	r3, [r7, #22]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	8afa      	ldrh	r2, [r7, #22]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e052      	b.n	8004ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f58:	e04e      	b.n	8004ff8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d827      	bhi.n	8004fb2 <UART_SetConfig+0x506>
 8004f62:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <UART_SetConfig+0x4bc>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004fa3 	.word	0x08004fa3
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fb3 	.word	0x08004fb3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fe ff6e 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e014      	b.n	8004fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f94:	f7fe ff80 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8004f98:	61f8      	str	r0, [r7, #28]
        break;
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <UART_SetConfig+0x56c>)
 8004f9e:	61fb      	str	r3, [r7, #28]
        break;
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe fecb 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004fa6:	61f8      	str	r0, [r7, #28]
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	61fb      	str	r3, [r7, #28]
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d019      	beq.n	8004ff8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	085a      	lsrs	r2, r3, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	d909      	bls.n	8004ff2 <UART_SetConfig+0x546>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe4:	d205      	bcs.n	8004ff2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	e002      	b.n	8004ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005004:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005008:	4618      	mov	r0, r3
 800500a:	3728      	adds	r7, #40	@ 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005012:	bf00      	nop
 8005014:	40008000 	.word	0x40008000
 8005018:	00f42400 	.word	0x00f42400

0800501c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01a      	beq.n	8005132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d10a      	bne.n	8005132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b098      	sub	sp, #96	@ 0x60
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005170:	f7fc f9e6 	bl	8001540 <HAL_GetTick>
 8005174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d12e      	bne.n	80051e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88c 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d021      	beq.n	80051e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e062      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d149      	bne.n	8005284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f856 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	623b      	str	r3, [r7, #32]
   return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60fb      	str	r3, [r7, #12]
   return(result);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	617b      	str	r3, [r7, #20]
   return(result);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e011      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3758      	adds	r7, #88	@ 0x58
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	e04f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052c8:	d04b      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fc f939 	bl	8001540 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e04e      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	d034      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d031      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d110      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f838 	bl	800538a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e029      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d111      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f81e 	bl	800538a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d0a0      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538a:	b480      	push	{r7}
 800538c:	b095      	sub	sp, #84	@ 0x54
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e5      	bne.n	80053c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d118      	bne.n	8005432 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	60bb      	str	r3, [r7, #8]
   return(result);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0310 	bic.w	r3, r3, #16
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	613b      	str	r3, [r7, #16]
   return(result);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005446:	bf00      	nop
 8005448:	3754      	adds	r7, #84	@ 0x54
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <siprintf>:
 8005454:	b40e      	push	{r1, r2, r3}
 8005456:	b500      	push	{lr}
 8005458:	b09c      	sub	sp, #112	@ 0x70
 800545a:	ab1d      	add	r3, sp, #116	@ 0x74
 800545c:	9002      	str	r0, [sp, #8]
 800545e:	9006      	str	r0, [sp, #24]
 8005460:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005464:	4809      	ldr	r0, [pc, #36]	@ (800548c <siprintf+0x38>)
 8005466:	9107      	str	r1, [sp, #28]
 8005468:	9104      	str	r1, [sp, #16]
 800546a:	4909      	ldr	r1, [pc, #36]	@ (8005490 <siprintf+0x3c>)
 800546c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005470:	9105      	str	r1, [sp, #20]
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	a902      	add	r1, sp, #8
 8005478:	f000 f89c 	bl	80055b4 <_svfiprintf_r>
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	b01c      	add	sp, #112	@ 0x70
 8005484:	f85d eb04 	ldr.w	lr, [sp], #4
 8005488:	b003      	add	sp, #12
 800548a:	4770      	bx	lr
 800548c:	2000000c 	.word	0x2000000c
 8005490:	ffff0208 	.word	0xffff0208

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <__errno>:
 80054a4:	4b01      	ldr	r3, [pc, #4]	@ (80054ac <__errno+0x8>)
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <__libc_init_array>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4d0d      	ldr	r5, [pc, #52]	@ (80054e8 <__libc_init_array+0x38>)
 80054b4:	4c0d      	ldr	r4, [pc, #52]	@ (80054ec <__libc_init_array+0x3c>)
 80054b6:	1b64      	subs	r4, r4, r5
 80054b8:	10a4      	asrs	r4, r4, #2
 80054ba:	2600      	movs	r6, #0
 80054bc:	42a6      	cmp	r6, r4
 80054be:	d109      	bne.n	80054d4 <__libc_init_array+0x24>
 80054c0:	4d0b      	ldr	r5, [pc, #44]	@ (80054f0 <__libc_init_array+0x40>)
 80054c2:	4c0c      	ldr	r4, [pc, #48]	@ (80054f4 <__libc_init_array+0x44>)
 80054c4:	f000 fc66 	bl	8005d94 <_init>
 80054c8:	1b64      	subs	r4, r4, r5
 80054ca:	10a4      	asrs	r4, r4, #2
 80054cc:	2600      	movs	r6, #0
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	d105      	bne.n	80054de <__libc_init_array+0x2e>
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d8:	4798      	blx	r3
 80054da:	3601      	adds	r6, #1
 80054dc:	e7ee      	b.n	80054bc <__libc_init_array+0xc>
 80054de:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e2:	4798      	blx	r3
 80054e4:	3601      	adds	r6, #1
 80054e6:	e7f2      	b.n	80054ce <__libc_init_array+0x1e>
 80054e8:	08006030 	.word	0x08006030
 80054ec:	08006030 	.word	0x08006030
 80054f0:	08006030 	.word	0x08006030
 80054f4:	08006034 	.word	0x08006034

080054f8 <__retarget_lock_acquire_recursive>:
 80054f8:	4770      	bx	lr

080054fa <__retarget_lock_release_recursive>:
 80054fa:	4770      	bx	lr

080054fc <__ssputs_r>:
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	688e      	ldr	r6, [r1, #8]
 8005502:	461f      	mov	r7, r3
 8005504:	42be      	cmp	r6, r7
 8005506:	680b      	ldr	r3, [r1, #0]
 8005508:	4682      	mov	sl, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4690      	mov	r8, r2
 800550e:	d82d      	bhi.n	800556c <__ssputs_r+0x70>
 8005510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005518:	d026      	beq.n	8005568 <__ssputs_r+0x6c>
 800551a:	6965      	ldr	r5, [r4, #20]
 800551c:	6909      	ldr	r1, [r1, #16]
 800551e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005522:	eba3 0901 	sub.w	r9, r3, r1
 8005526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800552a:	1c7b      	adds	r3, r7, #1
 800552c:	444b      	add	r3, r9
 800552e:	106d      	asrs	r5, r5, #1
 8005530:	429d      	cmp	r5, r3
 8005532:	bf38      	it	cc
 8005534:	461d      	movcc	r5, r3
 8005536:	0553      	lsls	r3, r2, #21
 8005538:	d527      	bpl.n	800558a <__ssputs_r+0x8e>
 800553a:	4629      	mov	r1, r5
 800553c:	f000 f958 	bl	80057f0 <_malloc_r>
 8005540:	4606      	mov	r6, r0
 8005542:	b360      	cbz	r0, 800559e <__ssputs_r+0xa2>
 8005544:	6921      	ldr	r1, [r4, #16]
 8005546:	464a      	mov	r2, r9
 8005548:	f000 fbc4 	bl	8005cd4 <memcpy>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	6126      	str	r6, [r4, #16]
 800555a:	6165      	str	r5, [r4, #20]
 800555c:	444e      	add	r6, r9
 800555e:	eba5 0509 	sub.w	r5, r5, r9
 8005562:	6026      	str	r6, [r4, #0]
 8005564:	60a5      	str	r5, [r4, #8]
 8005566:	463e      	mov	r6, r7
 8005568:	42be      	cmp	r6, r7
 800556a:	d900      	bls.n	800556e <__ssputs_r+0x72>
 800556c:	463e      	mov	r6, r7
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	4632      	mov	r2, r6
 8005572:	4641      	mov	r1, r8
 8005574:	f000 fb84 	bl	8005c80 <memmove>
 8005578:	68a3      	ldr	r3, [r4, #8]
 800557a:	1b9b      	subs	r3, r3, r6
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	4433      	add	r3, r6
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	2000      	movs	r0, #0
 8005586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558a:	462a      	mov	r2, r5
 800558c:	f000 fb4a 	bl	8005c24 <_realloc_r>
 8005590:	4606      	mov	r6, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d1e0      	bne.n	8005558 <__ssputs_r+0x5c>
 8005596:	6921      	ldr	r1, [r4, #16]
 8005598:	4650      	mov	r0, sl
 800559a:	f000 fba9 	bl	8005cf0 <_free_r>
 800559e:	230c      	movs	r3, #12
 80055a0:	f8ca 3000 	str.w	r3, [sl]
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055b0:	e7e9      	b.n	8005586 <__ssputs_r+0x8a>
	...

080055b4 <_svfiprintf_r>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	4698      	mov	r8, r3
 80055ba:	898b      	ldrh	r3, [r1, #12]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	b09d      	sub	sp, #116	@ 0x74
 80055c0:	4607      	mov	r7, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	d510      	bpl.n	80055ea <_svfiprintf_r+0x36>
 80055c8:	690b      	ldr	r3, [r1, #16]
 80055ca:	b973      	cbnz	r3, 80055ea <_svfiprintf_r+0x36>
 80055cc:	2140      	movs	r1, #64	@ 0x40
 80055ce:	f000 f90f 	bl	80057f0 <_malloc_r>
 80055d2:	6028      	str	r0, [r5, #0]
 80055d4:	6128      	str	r0, [r5, #16]
 80055d6:	b930      	cbnz	r0, 80055e6 <_svfiprintf_r+0x32>
 80055d8:	230c      	movs	r3, #12
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055e0:	b01d      	add	sp, #116	@ 0x74
 80055e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e6:	2340      	movs	r3, #64	@ 0x40
 80055e8:	616b      	str	r3, [r5, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ee:	2320      	movs	r3, #32
 80055f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f8:	2330      	movs	r3, #48	@ 0x30
 80055fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005798 <_svfiprintf_r+0x1e4>
 80055fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005602:	f04f 0901 	mov.w	r9, #1
 8005606:	4623      	mov	r3, r4
 8005608:	469a      	mov	sl, r3
 800560a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560e:	b10a      	cbz	r2, 8005614 <_svfiprintf_r+0x60>
 8005610:	2a25      	cmp	r2, #37	@ 0x25
 8005612:	d1f9      	bne.n	8005608 <_svfiprintf_r+0x54>
 8005614:	ebba 0b04 	subs.w	fp, sl, r4
 8005618:	d00b      	beq.n	8005632 <_svfiprintf_r+0x7e>
 800561a:	465b      	mov	r3, fp
 800561c:	4622      	mov	r2, r4
 800561e:	4629      	mov	r1, r5
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff ff6b 	bl	80054fc <__ssputs_r>
 8005626:	3001      	adds	r0, #1
 8005628:	f000 80a7 	beq.w	800577a <_svfiprintf_r+0x1c6>
 800562c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800562e:	445a      	add	r2, fp
 8005630:	9209      	str	r2, [sp, #36]	@ 0x24
 8005632:	f89a 3000 	ldrb.w	r3, [sl]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 809f 	beq.w	800577a <_svfiprintf_r+0x1c6>
 800563c:	2300      	movs	r3, #0
 800563e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005646:	f10a 0a01 	add.w	sl, sl, #1
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	9307      	str	r3, [sp, #28]
 800564e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005652:	931a      	str	r3, [sp, #104]	@ 0x68
 8005654:	4654      	mov	r4, sl
 8005656:	2205      	movs	r2, #5
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	484e      	ldr	r0, [pc, #312]	@ (8005798 <_svfiprintf_r+0x1e4>)
 800565e:	f7fa fdbf 	bl	80001e0 <memchr>
 8005662:	9a04      	ldr	r2, [sp, #16]
 8005664:	b9d8      	cbnz	r0, 800569e <_svfiprintf_r+0xea>
 8005666:	06d0      	lsls	r0, r2, #27
 8005668:	bf44      	itt	mi
 800566a:	2320      	movmi	r3, #32
 800566c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005670:	0711      	lsls	r1, r2, #28
 8005672:	bf44      	itt	mi
 8005674:	232b      	movmi	r3, #43	@ 0x2b
 8005676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005680:	d015      	beq.n	80056ae <_svfiprintf_r+0xfa>
 8005682:	9a07      	ldr	r2, [sp, #28]
 8005684:	4654      	mov	r4, sl
 8005686:	2000      	movs	r0, #0
 8005688:	f04f 0c0a 	mov.w	ip, #10
 800568c:	4621      	mov	r1, r4
 800568e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005692:	3b30      	subs	r3, #48	@ 0x30
 8005694:	2b09      	cmp	r3, #9
 8005696:	d94b      	bls.n	8005730 <_svfiprintf_r+0x17c>
 8005698:	b1b0      	cbz	r0, 80056c8 <_svfiprintf_r+0x114>
 800569a:	9207      	str	r2, [sp, #28]
 800569c:	e014      	b.n	80056c8 <_svfiprintf_r+0x114>
 800569e:	eba0 0308 	sub.w	r3, r0, r8
 80056a2:	fa09 f303 	lsl.w	r3, r9, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	46a2      	mov	sl, r4
 80056ac:	e7d2      	b.n	8005654 <_svfiprintf_r+0xa0>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	1d19      	adds	r1, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9103      	str	r1, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfbb      	ittet	lt
 80056ba:	425b      	neglt	r3, r3
 80056bc:	f042 0202 	orrlt.w	r2, r2, #2
 80056c0:	9307      	strge	r3, [sp, #28]
 80056c2:	9307      	strlt	r3, [sp, #28]
 80056c4:	bfb8      	it	lt
 80056c6:	9204      	strlt	r2, [sp, #16]
 80056c8:	7823      	ldrb	r3, [r4, #0]
 80056ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80056cc:	d10a      	bne.n	80056e4 <_svfiprintf_r+0x130>
 80056ce:	7863      	ldrb	r3, [r4, #1]
 80056d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056d2:	d132      	bne.n	800573a <_svfiprintf_r+0x186>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056e0:	3402      	adds	r4, #2
 80056e2:	9305      	str	r3, [sp, #20]
 80056e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057a8 <_svfiprintf_r+0x1f4>
 80056e8:	7821      	ldrb	r1, [r4, #0]
 80056ea:	2203      	movs	r2, #3
 80056ec:	4650      	mov	r0, sl
 80056ee:	f7fa fd77 	bl	80001e0 <memchr>
 80056f2:	b138      	cbz	r0, 8005704 <_svfiprintf_r+0x150>
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	eba0 000a 	sub.w	r0, r0, sl
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	4082      	lsls	r2, r0
 80056fe:	4313      	orrs	r3, r2
 8005700:	3401      	adds	r4, #1
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005708:	4824      	ldr	r0, [pc, #144]	@ (800579c <_svfiprintf_r+0x1e8>)
 800570a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800570e:	2206      	movs	r2, #6
 8005710:	f7fa fd66 	bl	80001e0 <memchr>
 8005714:	2800      	cmp	r0, #0
 8005716:	d036      	beq.n	8005786 <_svfiprintf_r+0x1d2>
 8005718:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <_svfiprintf_r+0x1ec>)
 800571a:	bb1b      	cbnz	r3, 8005764 <_svfiprintf_r+0x1b0>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	3307      	adds	r3, #7
 8005720:	f023 0307 	bic.w	r3, r3, #7
 8005724:	3308      	adds	r3, #8
 8005726:	9303      	str	r3, [sp, #12]
 8005728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572a:	4433      	add	r3, r6
 800572c:	9309      	str	r3, [sp, #36]	@ 0x24
 800572e:	e76a      	b.n	8005606 <_svfiprintf_r+0x52>
 8005730:	fb0c 3202 	mla	r2, ip, r2, r3
 8005734:	460c      	mov	r4, r1
 8005736:	2001      	movs	r0, #1
 8005738:	e7a8      	b.n	800568c <_svfiprintf_r+0xd8>
 800573a:	2300      	movs	r3, #0
 800573c:	3401      	adds	r4, #1
 800573e:	9305      	str	r3, [sp, #20]
 8005740:	4619      	mov	r1, r3
 8005742:	f04f 0c0a 	mov.w	ip, #10
 8005746:	4620      	mov	r0, r4
 8005748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800574c:	3a30      	subs	r2, #48	@ 0x30
 800574e:	2a09      	cmp	r2, #9
 8005750:	d903      	bls.n	800575a <_svfiprintf_r+0x1a6>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0c6      	beq.n	80056e4 <_svfiprintf_r+0x130>
 8005756:	9105      	str	r1, [sp, #20]
 8005758:	e7c4      	b.n	80056e4 <_svfiprintf_r+0x130>
 800575a:	fb0c 2101 	mla	r1, ip, r1, r2
 800575e:	4604      	mov	r4, r0
 8005760:	2301      	movs	r3, #1
 8005762:	e7f0      	b.n	8005746 <_svfiprintf_r+0x192>
 8005764:	ab03      	add	r3, sp, #12
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	462a      	mov	r2, r5
 800576a:	4b0e      	ldr	r3, [pc, #56]	@ (80057a4 <_svfiprintf_r+0x1f0>)
 800576c:	a904      	add	r1, sp, #16
 800576e:	4638      	mov	r0, r7
 8005770:	f3af 8000 	nop.w
 8005774:	1c42      	adds	r2, r0, #1
 8005776:	4606      	mov	r6, r0
 8005778:	d1d6      	bne.n	8005728 <_svfiprintf_r+0x174>
 800577a:	89ab      	ldrh	r3, [r5, #12]
 800577c:	065b      	lsls	r3, r3, #25
 800577e:	f53f af2d 	bmi.w	80055dc <_svfiprintf_r+0x28>
 8005782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005784:	e72c      	b.n	80055e0 <_svfiprintf_r+0x2c>
 8005786:	ab03      	add	r3, sp, #12
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	462a      	mov	r2, r5
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <_svfiprintf_r+0x1f0>)
 800578e:	a904      	add	r1, sp, #16
 8005790:	4638      	mov	r0, r7
 8005792:	f000 f91b 	bl	80059cc <_printf_i>
 8005796:	e7ed      	b.n	8005774 <_svfiprintf_r+0x1c0>
 8005798:	08005ff4 	.word	0x08005ff4
 800579c:	08005ffe 	.word	0x08005ffe
 80057a0:	00000000 	.word	0x00000000
 80057a4:	080054fd 	.word	0x080054fd
 80057a8:	08005ffa 	.word	0x08005ffa

080057ac <sbrk_aligned>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0f      	ldr	r6, [pc, #60]	@ (80057ec <sbrk_aligned+0x40>)
 80057b0:	460c      	mov	r4, r1
 80057b2:	6831      	ldr	r1, [r6, #0]
 80057b4:	4605      	mov	r5, r0
 80057b6:	b911      	cbnz	r1, 80057be <sbrk_aligned+0x12>
 80057b8:	f000 fa7c 	bl	8005cb4 <_sbrk_r>
 80057bc:	6030      	str	r0, [r6, #0]
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fa77 	bl	8005cb4 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d103      	bne.n	80057d2 <sbrk_aligned+0x26>
 80057ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80057ce:	4620      	mov	r0, r4
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	1cc4      	adds	r4, r0, #3
 80057d4:	f024 0403 	bic.w	r4, r4, #3
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d0f8      	beq.n	80057ce <sbrk_aligned+0x22>
 80057dc:	1a21      	subs	r1, r4, r0
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fa68 	bl	8005cb4 <_sbrk_r>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d1f2      	bne.n	80057ce <sbrk_aligned+0x22>
 80057e8:	e7ef      	b.n	80057ca <sbrk_aligned+0x1e>
 80057ea:	bf00      	nop
 80057ec:	2000039c 	.word	0x2000039c

080057f0 <_malloc_r>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	1ccd      	adds	r5, r1, #3
 80057f6:	f025 0503 	bic.w	r5, r5, #3
 80057fa:	3508      	adds	r5, #8
 80057fc:	2d0c      	cmp	r5, #12
 80057fe:	bf38      	it	cc
 8005800:	250c      	movcc	r5, #12
 8005802:	2d00      	cmp	r5, #0
 8005804:	4606      	mov	r6, r0
 8005806:	db01      	blt.n	800580c <_malloc_r+0x1c>
 8005808:	42a9      	cmp	r1, r5
 800580a:	d904      	bls.n	8005816 <_malloc_r+0x26>
 800580c:	230c      	movs	r3, #12
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	2000      	movs	r0, #0
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058ec <_malloc_r+0xfc>
 800581a:	f000 f9f7 	bl	8005c0c <__malloc_lock>
 800581e:	f8d8 3000 	ldr.w	r3, [r8]
 8005822:	461c      	mov	r4, r3
 8005824:	bb44      	cbnz	r4, 8005878 <_malloc_r+0x88>
 8005826:	4629      	mov	r1, r5
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbf 	bl	80057ac <sbrk_aligned>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	4604      	mov	r4, r0
 8005832:	d158      	bne.n	80058e6 <_malloc_r+0xf6>
 8005834:	f8d8 4000 	ldr.w	r4, [r8]
 8005838:	4627      	mov	r7, r4
 800583a:	2f00      	cmp	r7, #0
 800583c:	d143      	bne.n	80058c6 <_malloc_r+0xd6>
 800583e:	2c00      	cmp	r4, #0
 8005840:	d04b      	beq.n	80058da <_malloc_r+0xea>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	4639      	mov	r1, r7
 8005846:	4630      	mov	r0, r6
 8005848:	eb04 0903 	add.w	r9, r4, r3
 800584c:	f000 fa32 	bl	8005cb4 <_sbrk_r>
 8005850:	4581      	cmp	r9, r0
 8005852:	d142      	bne.n	80058da <_malloc_r+0xea>
 8005854:	6821      	ldr	r1, [r4, #0]
 8005856:	1a6d      	subs	r5, r5, r1
 8005858:	4629      	mov	r1, r5
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff ffa6 	bl	80057ac <sbrk_aligned>
 8005860:	3001      	adds	r0, #1
 8005862:	d03a      	beq.n	80058da <_malloc_r+0xea>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	442b      	add	r3, r5
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	f8d8 3000 	ldr.w	r3, [r8]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	bb62      	cbnz	r2, 80058cc <_malloc_r+0xdc>
 8005872:	f8c8 7000 	str.w	r7, [r8]
 8005876:	e00f      	b.n	8005898 <_malloc_r+0xa8>
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	1b52      	subs	r2, r2, r5
 800587c:	d420      	bmi.n	80058c0 <_malloc_r+0xd0>
 800587e:	2a0b      	cmp	r2, #11
 8005880:	d917      	bls.n	80058b2 <_malloc_r+0xc2>
 8005882:	1961      	adds	r1, r4, r5
 8005884:	42a3      	cmp	r3, r4
 8005886:	6025      	str	r5, [r4, #0]
 8005888:	bf18      	it	ne
 800588a:	6059      	strne	r1, [r3, #4]
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	bf08      	it	eq
 8005890:	f8c8 1000 	streq.w	r1, [r8]
 8005894:	5162      	str	r2, [r4, r5]
 8005896:	604b      	str	r3, [r1, #4]
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f9bd 	bl	8005c18 <__malloc_unlock>
 800589e:	f104 000b 	add.w	r0, r4, #11
 80058a2:	1d23      	adds	r3, r4, #4
 80058a4:	f020 0007 	bic.w	r0, r0, #7
 80058a8:	1ac2      	subs	r2, r0, r3
 80058aa:	bf1c      	itt	ne
 80058ac:	1a1b      	subne	r3, r3, r0
 80058ae:	50a3      	strne	r3, [r4, r2]
 80058b0:	e7af      	b.n	8005812 <_malloc_r+0x22>
 80058b2:	6862      	ldr	r2, [r4, #4]
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	bf0c      	ite	eq
 80058b8:	f8c8 2000 	streq.w	r2, [r8]
 80058bc:	605a      	strne	r2, [r3, #4]
 80058be:	e7eb      	b.n	8005898 <_malloc_r+0xa8>
 80058c0:	4623      	mov	r3, r4
 80058c2:	6864      	ldr	r4, [r4, #4]
 80058c4:	e7ae      	b.n	8005824 <_malloc_r+0x34>
 80058c6:	463c      	mov	r4, r7
 80058c8:	687f      	ldr	r7, [r7, #4]
 80058ca:	e7b6      	b.n	800583a <_malloc_r+0x4a>
 80058cc:	461a      	mov	r2, r3
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d1fb      	bne.n	80058cc <_malloc_r+0xdc>
 80058d4:	2300      	movs	r3, #0
 80058d6:	6053      	str	r3, [r2, #4]
 80058d8:	e7de      	b.n	8005898 <_malloc_r+0xa8>
 80058da:	230c      	movs	r3, #12
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	4630      	mov	r0, r6
 80058e0:	f000 f99a 	bl	8005c18 <__malloc_unlock>
 80058e4:	e794      	b.n	8005810 <_malloc_r+0x20>
 80058e6:	6005      	str	r5, [r0, #0]
 80058e8:	e7d6      	b.n	8005898 <_malloc_r+0xa8>
 80058ea:	bf00      	nop
 80058ec:	200003a0 	.word	0x200003a0

080058f0 <_printf_common>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	4616      	mov	r6, r2
 80058f6:	4698      	mov	r8, r3
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005900:	4293      	cmp	r3, r2
 8005902:	bfb8      	it	lt
 8005904:	4613      	movlt	r3, r2
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800590c:	4607      	mov	r7, r0
 800590e:	460c      	mov	r4, r1
 8005910:	b10a      	cbz	r2, 8005916 <_printf_common+0x26>
 8005912:	3301      	adds	r3, #1
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0699      	lsls	r1, r3, #26
 800591a:	bf42      	ittt	mi
 800591c:	6833      	ldrmi	r3, [r6, #0]
 800591e:	3302      	addmi	r3, #2
 8005920:	6033      	strmi	r3, [r6, #0]
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	f015 0506 	ands.w	r5, r5, #6
 8005928:	d106      	bne.n	8005938 <_printf_common+0x48>
 800592a:	f104 0a19 	add.w	sl, r4, #25
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	6832      	ldr	r2, [r6, #0]
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	42ab      	cmp	r3, r5
 8005936:	dc26      	bgt.n	8005986 <_printf_common+0x96>
 8005938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	3b00      	subs	r3, #0
 8005940:	bf18      	it	ne
 8005942:	2301      	movne	r3, #1
 8005944:	0692      	lsls	r2, r2, #26
 8005946:	d42b      	bmi.n	80059a0 <_printf_common+0xb0>
 8005948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800594c:	4641      	mov	r1, r8
 800594e:	4638      	mov	r0, r7
 8005950:	47c8      	blx	r9
 8005952:	3001      	adds	r0, #1
 8005954:	d01e      	beq.n	8005994 <_printf_common+0xa4>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	f003 0306 	and.w	r3, r3, #6
 800595e:	2b04      	cmp	r3, #4
 8005960:	bf02      	ittt	eq
 8005962:	68e5      	ldreq	r5, [r4, #12]
 8005964:	6833      	ldreq	r3, [r6, #0]
 8005966:	1aed      	subeq	r5, r5, r3
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	bf0c      	ite	eq
 800596c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005970:	2500      	movne	r5, #0
 8005972:	4293      	cmp	r3, r2
 8005974:	bfc4      	itt	gt
 8005976:	1a9b      	subgt	r3, r3, r2
 8005978:	18ed      	addgt	r5, r5, r3
 800597a:	2600      	movs	r6, #0
 800597c:	341a      	adds	r4, #26
 800597e:	42b5      	cmp	r5, r6
 8005980:	d11a      	bne.n	80059b8 <_printf_common+0xc8>
 8005982:	2000      	movs	r0, #0
 8005984:	e008      	b.n	8005998 <_printf_common+0xa8>
 8005986:	2301      	movs	r3, #1
 8005988:	4652      	mov	r2, sl
 800598a:	4641      	mov	r1, r8
 800598c:	4638      	mov	r0, r7
 800598e:	47c8      	blx	r9
 8005990:	3001      	adds	r0, #1
 8005992:	d103      	bne.n	800599c <_printf_common+0xac>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	3501      	adds	r5, #1
 800599e:	e7c6      	b.n	800592e <_printf_common+0x3e>
 80059a0:	18e1      	adds	r1, r4, r3
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	2030      	movs	r0, #48	@ 0x30
 80059a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059aa:	4422      	add	r2, r4
 80059ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059b4:	3302      	adds	r3, #2
 80059b6:	e7c7      	b.n	8005948 <_printf_common+0x58>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4622      	mov	r2, r4
 80059bc:	4641      	mov	r1, r8
 80059be:	4638      	mov	r0, r7
 80059c0:	47c8      	blx	r9
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0e6      	beq.n	8005994 <_printf_common+0xa4>
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7d9      	b.n	800597e <_printf_common+0x8e>
	...

080059cc <_printf_i>:
 80059cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	7e0f      	ldrb	r7, [r1, #24]
 80059d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059d4:	2f78      	cmp	r7, #120	@ 0x78
 80059d6:	4691      	mov	r9, r2
 80059d8:	4680      	mov	r8, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	469a      	mov	sl, r3
 80059de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059e2:	d807      	bhi.n	80059f4 <_printf_i+0x28>
 80059e4:	2f62      	cmp	r7, #98	@ 0x62
 80059e6:	d80a      	bhi.n	80059fe <_printf_i+0x32>
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	f000 80d2 	beq.w	8005b92 <_printf_i+0x1c6>
 80059ee:	2f58      	cmp	r7, #88	@ 0x58
 80059f0:	f000 80b9 	beq.w	8005b66 <_printf_i+0x19a>
 80059f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059fc:	e03a      	b.n	8005a74 <_printf_i+0xa8>
 80059fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a02:	2b15      	cmp	r3, #21
 8005a04:	d8f6      	bhi.n	80059f4 <_printf_i+0x28>
 8005a06:	a101      	add	r1, pc, #4	@ (adr r1, 8005a0c <_printf_i+0x40>)
 8005a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	080059f5 	.word	0x080059f5
 8005a18:	080059f5 	.word	0x080059f5
 8005a1c:	080059f5 	.word	0x080059f5
 8005a20:	080059f5 	.word	0x080059f5
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	080059f5 	.word	0x080059f5
 8005a2c:	080059f5 	.word	0x080059f5
 8005a30:	080059f5 	.word	0x080059f5
 8005a34:	080059f5 	.word	0x080059f5
 8005a38:	08005b79 	.word	0x08005b79
 8005a3c:	08005aa3 	.word	0x08005aa3
 8005a40:	08005b33 	.word	0x08005b33
 8005a44:	080059f5 	.word	0x080059f5
 8005a48:	080059f5 	.word	0x080059f5
 8005a4c:	08005b9b 	.word	0x08005b9b
 8005a50:	080059f5 	.word	0x080059f5
 8005a54:	08005aa3 	.word	0x08005aa3
 8005a58:	080059f5 	.word	0x080059f5
 8005a5c:	080059f5 	.word	0x080059f5
 8005a60:	08005b3b 	.word	0x08005b3b
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	1d1a      	adds	r2, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6032      	str	r2, [r6, #0]
 8005a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a74:	2301      	movs	r3, #1
 8005a76:	e09d      	b.n	8005bb4 <_printf_i+0x1e8>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	1d19      	adds	r1, r3, #4
 8005a7e:	6031      	str	r1, [r6, #0]
 8005a80:	0606      	lsls	r6, r0, #24
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0xbc>
 8005a84:	681d      	ldr	r5, [r3, #0]
 8005a86:	e003      	b.n	8005a90 <_printf_i+0xc4>
 8005a88:	0645      	lsls	r5, r0, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0xb8>
 8005a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	da03      	bge.n	8005a9c <_printf_i+0xd0>
 8005a94:	232d      	movs	r3, #45	@ 0x2d
 8005a96:	426d      	negs	r5, r5
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a9c:	4859      	ldr	r0, [pc, #356]	@ (8005c04 <_printf_i+0x238>)
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	e011      	b.n	8005ac6 <_printf_i+0xfa>
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	0608      	lsls	r0, r1, #24
 8005aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005aac:	d402      	bmi.n	8005ab4 <_printf_i+0xe8>
 8005aae:	0649      	lsls	r1, r1, #25
 8005ab0:	bf48      	it	mi
 8005ab2:	b2ad      	uxthmi	r5, r5
 8005ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ab6:	4853      	ldr	r0, [pc, #332]	@ (8005c04 <_printf_i+0x238>)
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	bf14      	ite	ne
 8005abc:	230a      	movne	r3, #10
 8005abe:	2308      	moveq	r3, #8
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ac6:	6866      	ldr	r6, [r4, #4]
 8005ac8:	60a6      	str	r6, [r4, #8]
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	bfa2      	ittt	ge
 8005ace:	6821      	ldrge	r1, [r4, #0]
 8005ad0:	f021 0104 	bicge.w	r1, r1, #4
 8005ad4:	6021      	strge	r1, [r4, #0]
 8005ad6:	b90d      	cbnz	r5, 8005adc <_printf_i+0x110>
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d04b      	beq.n	8005b74 <_printf_i+0x1a8>
 8005adc:	4616      	mov	r6, r2
 8005ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ae6:	5dc7      	ldrb	r7, [r0, r7]
 8005ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aec:	462f      	mov	r7, r5
 8005aee:	42bb      	cmp	r3, r7
 8005af0:	460d      	mov	r5, r1
 8005af2:	d9f4      	bls.n	8005ade <_printf_i+0x112>
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d10b      	bne.n	8005b10 <_printf_i+0x144>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07df      	lsls	r7, r3, #31
 8005afc:	d508      	bpl.n	8005b10 <_printf_i+0x144>
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	4299      	cmp	r1, r3
 8005b04:	bfde      	ittt	le
 8005b06:	2330      	movle	r3, #48	@ 0x30
 8005b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b0c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b10:	1b92      	subs	r2, r2, r6
 8005b12:	6122      	str	r2, [r4, #16]
 8005b14:	f8cd a000 	str.w	sl, [sp]
 8005b18:	464b      	mov	r3, r9
 8005b1a:	aa03      	add	r2, sp, #12
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7ff fee6 	bl	80058f0 <_printf_common>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d14a      	bne.n	8005bbe <_printf_i+0x1f2>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b2c:	b004      	add	sp, #16
 8005b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f043 0320 	orr.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	4833      	ldr	r0, [pc, #204]	@ (8005c08 <_printf_i+0x23c>)
 8005b3c:	2778      	movs	r7, #120	@ 0x78
 8005b3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6831      	ldr	r1, [r6, #0]
 8005b46:	061f      	lsls	r7, r3, #24
 8005b48:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b4c:	d402      	bmi.n	8005b54 <_printf_i+0x188>
 8005b4e:	065f      	lsls	r7, r3, #25
 8005b50:	bf48      	it	mi
 8005b52:	b2ad      	uxthmi	r5, r5
 8005b54:	6031      	str	r1, [r6, #0]
 8005b56:	07d9      	lsls	r1, r3, #31
 8005b58:	bf44      	itt	mi
 8005b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5e:	6023      	strmi	r3, [r4, #0]
 8005b60:	b11d      	cbz	r5, 8005b6a <_printf_i+0x19e>
 8005b62:	2310      	movs	r3, #16
 8005b64:	e7ac      	b.n	8005ac0 <_printf_i+0xf4>
 8005b66:	4827      	ldr	r0, [pc, #156]	@ (8005c04 <_printf_i+0x238>)
 8005b68:	e7e9      	b.n	8005b3e <_printf_i+0x172>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	f023 0320 	bic.w	r3, r3, #32
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	e7f6      	b.n	8005b62 <_printf_i+0x196>
 8005b74:	4616      	mov	r6, r2
 8005b76:	e7bd      	b.n	8005af4 <_printf_i+0x128>
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	6961      	ldr	r1, [r4, #20]
 8005b7e:	1d18      	adds	r0, r3, #4
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	062e      	lsls	r6, r5, #24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0x1c0>
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0x1c6>
 8005b8c:	0668      	lsls	r0, r5, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0x1bc>
 8005b90:	8019      	strh	r1, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	6123      	str	r3, [r4, #16]
 8005b96:	4616      	mov	r6, r2
 8005b98:	e7bc      	b.n	8005b14 <_printf_i+0x148>
 8005b9a:	6833      	ldr	r3, [r6, #0]
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	681e      	ldr	r6, [r3, #0]
 8005ba2:	6862      	ldr	r2, [r4, #4]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7fa fb1a 	bl	80001e0 <memchr>
 8005bac:	b108      	cbz	r0, 8005bb2 <_printf_i+0x1e6>
 8005bae:	1b80      	subs	r0, r0, r6
 8005bb0:	6060      	str	r0, [r4, #4]
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bbc:	e7aa      	b.n	8005b14 <_printf_i+0x148>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	47d0      	blx	sl
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0ad      	beq.n	8005b28 <_printf_i+0x15c>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	079b      	lsls	r3, r3, #30
 8005bd0:	d413      	bmi.n	8005bfa <_printf_i+0x22e>
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	bfb8      	it	lt
 8005bda:	4618      	movlt	r0, r3
 8005bdc:	e7a6      	b.n	8005b2c <_printf_i+0x160>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4632      	mov	r2, r6
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	47d0      	blx	sl
 8005be8:	3001      	adds	r0, #1
 8005bea:	d09d      	beq.n	8005b28 <_printf_i+0x15c>
 8005bec:	3501      	adds	r5, #1
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	1a5b      	subs	r3, r3, r1
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dcf2      	bgt.n	8005bde <_printf_i+0x212>
 8005bf8:	e7eb      	b.n	8005bd2 <_printf_i+0x206>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	f104 0619 	add.w	r6, r4, #25
 8005c00:	e7f5      	b.n	8005bee <_printf_i+0x222>
 8005c02:	bf00      	nop
 8005c04:	08006005 	.word	0x08006005
 8005c08:	08006016 	.word	0x08006016

08005c0c <__malloc_lock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	@ (8005c14 <__malloc_lock+0x8>)
 8005c0e:	f7ff bc73 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000398 	.word	0x20000398

08005c18 <__malloc_unlock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	@ (8005c20 <__malloc_unlock+0x8>)
 8005c1a:	f7ff bc6e 	b.w	80054fa <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20000398 	.word	0x20000398

08005c24 <_realloc_r>:
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4615      	mov	r5, r2
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	b921      	cbnz	r1, 8005c3a <_realloc_r+0x16>
 8005c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c34:	4611      	mov	r1, r2
 8005c36:	f7ff bddb 	b.w	80057f0 <_malloc_r>
 8005c3a:	b92a      	cbnz	r2, 8005c48 <_realloc_r+0x24>
 8005c3c:	f000 f858 	bl	8005cf0 <_free_r>
 8005c40:	2400      	movs	r4, #0
 8005c42:	4620      	mov	r0, r4
 8005c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c48:	f000 f89c 	bl	8005d84 <_malloc_usable_size_r>
 8005c4c:	4285      	cmp	r5, r0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	d802      	bhi.n	8005c58 <_realloc_r+0x34>
 8005c52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c56:	d8f4      	bhi.n	8005c42 <_realloc_r+0x1e>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f7ff fdc8 	bl	80057f0 <_malloc_r>
 8005c60:	4607      	mov	r7, r0
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d0ec      	beq.n	8005c40 <_realloc_r+0x1c>
 8005c66:	42b5      	cmp	r5, r6
 8005c68:	462a      	mov	r2, r5
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	bf28      	it	cs
 8005c6e:	4632      	movcs	r2, r6
 8005c70:	f000 f830 	bl	8005cd4 <memcpy>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4640      	mov	r0, r8
 8005c78:	f000 f83a 	bl	8005cf0 <_free_r>
 8005c7c:	463c      	mov	r4, r7
 8005c7e:	e7e0      	b.n	8005c42 <_realloc_r+0x1e>

08005c80 <memmove>:
 8005c80:	4288      	cmp	r0, r1
 8005c82:	b510      	push	{r4, lr}
 8005c84:	eb01 0402 	add.w	r4, r1, r2
 8005c88:	d902      	bls.n	8005c90 <memmove+0x10>
 8005c8a:	4284      	cmp	r4, r0
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	d807      	bhi.n	8005ca0 <memmove+0x20>
 8005c90:	1e43      	subs	r3, r0, #1
 8005c92:	42a1      	cmp	r1, r4
 8005c94:	d008      	beq.n	8005ca8 <memmove+0x28>
 8005c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9e:	e7f8      	b.n	8005c92 <memmove+0x12>
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	428a      	cmp	r2, r1
 8005ca6:	d100      	bne.n	8005caa <memmove+0x2a>
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cb2:	e7f7      	b.n	8005ca4 <memmove+0x24>

08005cb4 <_sbrk_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	@ (8005cd0 <_sbrk_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb fb64 	bl	800138c <_sbrk>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_sbrk_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_sbrk_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200003a4 	.word	0x200003a4

08005cd4 <memcpy>:
 8005cd4:	440a      	add	r2, r1
 8005cd6:	4291      	cmp	r1, r2
 8005cd8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005cdc:	d100      	bne.n	8005ce0 <memcpy+0xc>
 8005cde:	4770      	bx	lr
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cea:	4291      	cmp	r1, r2
 8005cec:	d1f9      	bne.n	8005ce2 <memcpy+0xe>
 8005cee:	bd10      	pop	{r4, pc}

08005cf0 <_free_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d041      	beq.n	8005d7c <_free_r+0x8c>
 8005cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfc:	1f0c      	subs	r4, r1, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bfb8      	it	lt
 8005d02:	18e4      	addlt	r4, r4, r3
 8005d04:	f7ff ff82 	bl	8005c0c <__malloc_lock>
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <_free_r+0x90>)
 8005d0a:	6813      	ldr	r3, [r2, #0]
 8005d0c:	b933      	cbnz	r3, 8005d1c <_free_r+0x2c>
 8005d0e:	6063      	str	r3, [r4, #4]
 8005d10:	6014      	str	r4, [r2, #0]
 8005d12:	4628      	mov	r0, r5
 8005d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d18:	f7ff bf7e 	b.w	8005c18 <__malloc_unlock>
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d908      	bls.n	8005d32 <_free_r+0x42>
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	1821      	adds	r1, r4, r0
 8005d24:	428b      	cmp	r3, r1
 8005d26:	bf01      	itttt	eq
 8005d28:	6819      	ldreq	r1, [r3, #0]
 8005d2a:	685b      	ldreq	r3, [r3, #4]
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	e7ed      	b.n	8005d0e <_free_r+0x1e>
 8005d32:	461a      	mov	r2, r3
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b10b      	cbz	r3, 8005d3c <_free_r+0x4c>
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	d9fa      	bls.n	8005d32 <_free_r+0x42>
 8005d3c:	6811      	ldr	r1, [r2, #0]
 8005d3e:	1850      	adds	r0, r2, r1
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d10b      	bne.n	8005d5c <_free_r+0x6c>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	4401      	add	r1, r0
 8005d48:	1850      	adds	r0, r2, r1
 8005d4a:	4283      	cmp	r3, r0
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	d1e0      	bne.n	8005d12 <_free_r+0x22>
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	6053      	str	r3, [r2, #4]
 8005d56:	4408      	add	r0, r1
 8005d58:	6010      	str	r0, [r2, #0]
 8005d5a:	e7da      	b.n	8005d12 <_free_r+0x22>
 8005d5c:	d902      	bls.n	8005d64 <_free_r+0x74>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	e7d6      	b.n	8005d12 <_free_r+0x22>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	1821      	adds	r1, r4, r0
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf04      	itt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	6063      	str	r3, [r4, #4]
 8005d72:	bf04      	itt	eq
 8005d74:	1809      	addeq	r1, r1, r0
 8005d76:	6021      	streq	r1, [r4, #0]
 8005d78:	6054      	str	r4, [r2, #4]
 8005d7a:	e7ca      	b.n	8005d12 <_free_r+0x22>
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	200003a0 	.word	0x200003a0

08005d84 <_malloc_usable_size_r>:
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f18      	subs	r0, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfbc      	itt	lt
 8005d8e:	580b      	ldrlt	r3, [r1, r0]
 8005d90:	18c0      	addlt	r0, r0, r3
 8005d92:	4770      	bx	lr

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
