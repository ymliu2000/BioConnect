/* Includes */
#include "main.h"
#include <string.h>
#include <stdio.h>

/* Private variables */
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
char rxBuffer1[64];  // USART1 接收缓冲区（采集板发送的数据）
char rxBuffer3[64];  // USART3 接收缓冲区（采集板状态命令）
volatile uint8_t notifyStart = 0; // 通知采集板开始工作
volatile uint8_t notifyStop = 0;  // 通知采集板停止工作

/* Function Prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
void SendStartCommand(void);
void SendStopCommand(void);

int main(void) {
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();

  // 初始化 USART1 和 USART3 的中断接收
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer1, sizeof(rxBuffer1) - 1);
  HAL_UART_Receive_IT(&huart3, (uint8_t*)rxBuffer3, sizeof(rxBuffer3) - 1);

  uint32_t startTick = HAL_GetTick();

  while (1) {
    // 处理状态切换逻辑
    if (HAL_GetTick() - startTick >= 5000) { // 每隔 5 秒切换状态
      if (notifyStart) {
        SendStopCommand();
        notifyStart = 0;
        notifyStop = 1;
      } else if (notifyStop) {
        SendStartCommand();
        notifyStop = 0;
        notifyStart = 1;
      }
      startTick = HAL_GetTick();
    }

    HAL_Delay(50);
  }
}

/* USART1 接收回调函数（采集板数据） */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  if (huart->Instance == USART1) {
    rxBuffer1[63] = '\0'; // 确保字符串结束
    char debugBuffer[128];
    sprintf(debugBuffer, "[PB] Received: %s\r\n", rxBuffer1);
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
    memset(rxBuffer1, 0, sizeof(rxBuffer1));
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer1, sizeof(rxBuffer1) - 1);
  } else if (huart->Instance == USART3) { // USART3 接收回调（采集板状态命令）
    rxBuffer3[63] = '\0'; // 确保字符串结束
    char debugBuffer[128];
    sprintf(debugBuffer, "[PB] CMD Received: %s\r\n", rxBuffer3);
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
    memset(rxBuffer3, 0, sizeof(rxBuffer3));
    HAL_UART_Receive_IT(&huart3, (uint8_t*)rxBuffer3, sizeof(rxBuffer3) - 1);
  }
}

/* 发送开始命令 */
void SendStartCommand(void) {
  char startCmd[] = "START\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)startCmd, strlen(startCmd), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)"Sent START Command to Collector Board\r\n", 41, HAL_MAX_DELAY);
}

/* 发送停止命令 */
void SendStopCommand(void) {
  char stopCmd[] = "STOP\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)stopCmd, strlen(stopCmd), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)"Sent STOP Command to Collector Board\r\n", 40, HAL_MAX_DELAY);
}

/* System Clock Configuration */
void SystemClock_Config(void) {
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
    Error_Handler();
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
    Error_Handler();
  }
}

/* USART1 Initialization */
static void MX_USART1_UART_Init(void) {
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK) {
    Error_Handler();
  }
}

/* USART2 Initialization */
static void MX_USART2_UART_Init(void) {
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK) {
    Error_Handler();
  }
}

/* USART3 Initialization */
static void MX_USART3_UART_Init(void) {
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK) {
    Error_Handler();
  }
}

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED OFF
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}





