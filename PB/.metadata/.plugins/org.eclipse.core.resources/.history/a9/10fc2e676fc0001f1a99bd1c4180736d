#include "main.h"
#include <string.h>
#include <stdio.h>

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1; // USART1: 接收采集板发送的ADC数据
UART_HandleTypeDef huart2; // USART2: 调试输出
UART_HandleTypeDef huart3; // USART3: 向采集板发送命令

/* USER CODE BEGIN PV */
#define CMD_STOP "CMD:STOP\r\n"
uint8_t rx1_data; // USART1接收的单字节数据
uint8_t rx1_buffer[128];
uint16_t rx1_index = 0;

char debugBuffer[128];

uint32_t lastSendTick = 0;
uint32_t sendInterval = 5000; // 每5000ms发送一次CMD:STOP
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
static void ProcessReceivedData(const char *data);
static void BlinkLED(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  主程序入口
  * @retval int
  */
int main(void)
{
  /* MCU Configuration */

  /* 初始化HAL库，配置Flash接口和SysTick */
  HAL_Init();

  /* 配置系统时钟 */
  SystemClock_Config();

  /* 初始化所有配置的外设 */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
  snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: Ready. Receiving ADC data from Collector Board.\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

  snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: Will send CMD:STOP every 5 seconds via USART3.\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

  // 启动USART1的中断接收，用于接收ADC数据
  HAL_UART_Receive_IT(&huart1, &rx1_data, 1);

  /* USER CODE END 2 */

  /* 无限循环 */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t now = HAL_GetTick();
    if (now - lastSendTick >= sendInterval)
    {
      lastSendTick = now;

      // 发送CMD:STOP via USART3
      HAL_UART_Transmit(&huart3, (uint8_t*)CMD_STOP, strlen(CMD_STOP), HAL_MAX_DELAY);
      snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: Sent CMD:STOP to Collector Board.\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

      // 闪烁LED (PA5) 作为发送命令的指示
      BlinkLED();
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 可选：加入小延时以避免忙循环
    HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
  * @brief  UART接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART1)
  {
    // 打印接收到的单个字节及其十六进制值
    snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: Received byte: '%c' (0x%02X)\r\n", rx1_data, rx1_data);
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

    // 将接收到的字节存入缓冲区
    if (rx1_index < sizeof(rx1_buffer) - 1)
    {
      rx1_buffer[rx1_index++] = rx1_data;
    }
    else
    {
      // 缓冲区溢出
      snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: USART1 RX buffer overflow.\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
      rx1_index = 0; // 重置缓冲区索引
    }

    // 检查是否接收到换行符，认为数据结束
    if (rx1_data == '\n')
    {
      rx1_buffer[rx1_index] = '\0'; // 末尾添加空字符
      snprintf(debugBuffer, sizeof(debugBuffer), "Processing Board: Received ADC data: '%.120s'\r\n", rx1_buffer);
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

      // 处理接收到的数据
      ProcessReceivedData((const char*)rx1_buffer);

      // 重置缓冲区索引和内容
      rx1_index = 0;
      memset(rx1_buffer, 0, sizeof(rx1_buffer));
    }

    // 重新启用USART1的接收中断
    HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
  }
}

/**
  * @brief  处理接收到的ADC数据
  * @param  data: 空字符结尾的字符串
  * @retval None
  */
static void ProcessReceivedData(const char *data)
{
  // 目前仅打印接收到的数据，未来可扩展其他处理逻辑
}

/**
  * @brief  闪烁LED（PA5）用于指示
  * @retval None
  */
static void BlinkLED(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  HAL_Delay(200); // 点亮200ms
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  HAL_Delay(200); // 熄灭200ms
}

/**
  * @brief  系统时钟配置
  * @retval None
  */
void SystemClock_Config(void)
{
  // CubeMX生成的代码
}

/**
  * @brief  USART1初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与采集板一致（如115200）
}

/**
  * @brief  USART2初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与采集板一致（如115200）
}

/**
  * @brief  USART3初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与采集板一致（如115200）
}

/**
  * @brief  GPIO初始化函数
  * @param  None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /* Configure PA5 as output (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* Initialize LED (PA5) to OFF */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

/* 错误处理函数 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
    // 可选：闪烁LED或其他错误指示
    HAL_Delay(1000);
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  报告断言失败的文件名和行号
  * @param  file: 源文件名
  * @param  line: 发生断言的行号
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  // 可选：实现断言失败处理
}
#endif /* USE_FULL_ASSERT */




