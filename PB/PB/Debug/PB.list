
PB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00005d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00005d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000005c  08004dd4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08004dd4  00006420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c179  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db9  00000000  00000000  00012205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00013fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  000149b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d05  00000000  00000000  00015147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c282  00000000  00000000  0003ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7b87  00000000  00000000  000470ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ec55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca4  00000000  00000000  0012ec98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0013193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c48 	.word	0x08004c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004c48 	.word	0x08004c48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

/* Main Program --------------------------------------------------------------*/
int main(void) {
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b092      	sub	sp, #72	@ 0x48
 8000574:	af00      	add	r7, sp, #0
    HAL_Init();
 8000576:	f000 fbb8 	bl	8000cea <HAL_Init>
    SystemClock_Config();
 800057a:	f000 f8c9 	bl	8000710 <SystemClock_Config>
    MX_GPIO_Init();
 800057e:	f000 f997 	bl	80008b0 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000582:	f000 f917 	bl	80007b4 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8000586:	f000 f93f 	bl	8000808 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 800058a:	f000 f967 	bl	800085c <MX_USART3_UART_Init>

    // 初始化完成，打印信息
    char initMsg[] = "Processing Board Initialized. Ready to Work.\r\n";
 800058e:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <main+0x10c>)
 8000590:	f107 0418 	add.w	r4, r7, #24
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005a2:	c407      	stmia	r4!, {r0, r1, r2}
 80005a4:	8023      	strh	r3, [r4, #0]
 80005a6:	3402      	adds	r4, #2
 80005a8:	0c1b      	lsrs	r3, r3, #16
 80005aa:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)initMsg, strlen(initMsg), HAL_MAX_DELAY);
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe0d 	bl	80001d0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0118 	add.w	r1, r7, #24
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c2:	482f      	ldr	r0, [pc, #188]	@ (8000680 <main+0x110>)
 80005c4:	f002 fb04 	bl	8002bd0 <HAL_UART_Transmit>

    // 启动接收中断
    HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer) - 1);
 80005c8:	223f      	movs	r2, #63	@ 0x3f
 80005ca:	492e      	ldr	r1, [pc, #184]	@ (8000684 <main+0x114>)
 80005cc:	482e      	ldr	r0, [pc, #184]	@ (8000688 <main+0x118>)
 80005ce:	f002 fb89 	bl	8002ce4 <HAL_UART_Receive_IT>

    while (1) {
        // 发送 START 命令
        char startCmd[] = "CMD:START\r\n";
 80005d2:	4a2e      	ldr	r2, [pc, #184]	@ (800068c <main+0x11c>)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart3, (uint8_t *)startCmd, strlen(startCmd), HAL_MAX_DELAY);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f4:	4826      	ldr	r0, [pc, #152]	@ (8000690 <main+0x120>)
 80005f6:	f002 faeb 	bl	8002bd0 <HAL_UART_Transmit>
        sprintf(dbg, "Sent Command to Collector: %s\r\n", startCmd);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	461a      	mov	r2, r3
 8000600:	4924      	ldr	r1, [pc, #144]	@ (8000694 <main+0x124>)
 8000602:	4825      	ldr	r0, [pc, #148]	@ (8000698 <main+0x128>)
 8000604:	f003 fe80 	bl	8004308 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000608:	4823      	ldr	r0, [pc, #140]	@ (8000698 <main+0x128>)
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000616:	4920      	ldr	r1, [pc, #128]	@ (8000698 <main+0x128>)
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <main+0x110>)
 800061a:	f002 fad9 	bl	8002bd0 <HAL_UART_Transmit>

        HAL_Delay(5000); // 模拟采集时间
 800061e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000622:	f000 fbd7 	bl	8000dd4 <HAL_Delay>

        // 发送 STOP 命令
        char stopCmd[] = "CMD:STOP\r\n";
 8000626:	4a1d      	ldr	r2, [pc, #116]	@ (800069c <main+0x12c>)
 8000628:	463b      	mov	r3, r7
 800062a:	ca07      	ldmia	r2, {r0, r1, r2}
 800062c:	c303      	stmia	r3!, {r0, r1}
 800062e:	801a      	strh	r2, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c12      	lsrs	r2, r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t *)stopCmd, strlen(stopCmd), HAL_MAX_DELAY);
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fdc9 	bl	80001d0 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	4639      	mov	r1, r7
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000648:	4811      	ldr	r0, [pc, #68]	@ (8000690 <main+0x120>)
 800064a:	f002 fac1 	bl	8002bd0 <HAL_UART_Transmit>
        sprintf(dbg, "Sent Command to Collector: %s\r\n", stopCmd);
 800064e:	463b      	mov	r3, r7
 8000650:	461a      	mov	r2, r3
 8000652:	4910      	ldr	r1, [pc, #64]	@ (8000694 <main+0x124>)
 8000654:	4810      	ldr	r0, [pc, #64]	@ (8000698 <main+0x128>)
 8000656:	f003 fe57 	bl	8004308 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)dbg, strlen(dbg), HAL_MAX_DELAY);
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0x128>)
 800065c:	f7ff fdb8 	bl	80001d0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000668:	490b      	ldr	r1, [pc, #44]	@ (8000698 <main+0x128>)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <main+0x110>)
 800066c:	f002 fab0 	bl	8002bd0 <HAL_UART_Transmit>

        HAL_Delay(5000); // 模拟停止时间
 8000670:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000674:	f000 fbae 	bl	8000dd4 <HAL_Delay>
    while (1) {
 8000678:	bf00      	nop
 800067a:	e7aa      	b.n	80005d2 <main+0x62>
 800067c:	08004c80 	.word	0x08004c80
 8000680:	20000100 	.word	0x20000100
 8000684:	20000210 	.word	0x20000210
 8000688:	20000078 	.word	0x20000078
 800068c:	08004cb0 	.word	0x08004cb0
 8000690:	20000188 	.word	0x20000188
 8000694:	08004c60 	.word	0x08004c60
 8000698:	20000250 	.word	0x20000250
 800069c:	08004cbc 	.word	0x08004cbc

080006a0 <HAL_UART_RxCpltCallback>:
    }
}

/* USART1 中断回调：接收采集板数据 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <HAL_UART_RxCpltCallback+0x58>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d11d      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x4e>
        rxBuffer[63] = '\0';
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_UART_RxCpltCallback+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        sprintf(dbg, "Received Data from Collector: %s\r\n", rxBuffer);
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <HAL_UART_RxCpltCallback+0x5c>)
 80006bc:	4910      	ldr	r1, [pc, #64]	@ (8000700 <HAL_UART_RxCpltCallback+0x60>)
 80006be:	4811      	ldr	r0, [pc, #68]	@ (8000704 <HAL_UART_RxCpltCallback+0x64>)
 80006c0:	f003 fe22 	bl	8004308 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)dbg, strlen(dbg), HAL_MAX_DELAY);
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <HAL_UART_RxCpltCallback+0x64>)
 80006c6:	f7ff fd83 	bl	80001d0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	490c      	ldr	r1, [pc, #48]	@ (8000704 <HAL_UART_RxCpltCallback+0x64>)
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <HAL_UART_RxCpltCallback+0x68>)
 80006d6:	f002 fa7b 	bl	8002bd0 <HAL_UART_Transmit>
        memset(rxBuffer, 0, sizeof(rxBuffer));
 80006da:	2240      	movs	r2, #64	@ 0x40
 80006dc:	2100      	movs	r1, #0
 80006de:	4807      	ldr	r0, [pc, #28]	@ (80006fc <HAL_UART_RxCpltCallback+0x5c>)
 80006e0:	f003 fe32 	bl	8004348 <memset>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer) - 1);
 80006e4:	223f      	movs	r2, #63	@ 0x3f
 80006e6:	4905      	ldr	r1, [pc, #20]	@ (80006fc <HAL_UART_RxCpltCallback+0x5c>)
 80006e8:	4808      	ldr	r0, [pc, #32]	@ (800070c <HAL_UART_RxCpltCallback+0x6c>)
 80006ea:	f002 fafb 	bl	8002ce4 <HAL_UART_Receive_IT>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40013800 	.word	0x40013800
 80006fc:	20000210 	.word	0x20000210
 8000700:	08004cc8 	.word	0x08004cc8
 8000704:	20000250 	.word	0x20000250
 8000708:	20000100 	.word	0x20000100
 800070c:	20000078 	.word	0x20000078

08000710 <SystemClock_Config>:


/* System Clock Configuration */
void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fe12 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f000 feeb 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
    Error_Handler();
 8000740:	f000 f8f4 	bl	800092c <Error_Handler>
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000744:	2310      	movs	r3, #16
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	@ 0x60
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000760:	2328      	movs	r3, #40	@ 0x28
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f000 ff21 	bl	80015bc <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x74>
    Error_Handler();
 8000780:	f000 f8d4 	bl	800092c <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000798:	463b      	mov	r3, r7
 800079a:	2104      	movs	r1, #4
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fae9 	bl	8001d74 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x9c>
    Error_Handler();
 80007a8:	f000 f8c0 	bl	800092c <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	@ 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MX_USART1_UART_Init>:

/* USART1 Initialization */
static void MX_USART1_UART_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_USART1_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ec:	f002 f9a2 	bl	8002b34 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART1_UART_Init+0x46>
    Error_Handler();
 80007f6:	f000 f899 	bl	800092c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000078 	.word	0x20000078
 8000804:	40013800 	.word	0x40013800

08000808 <MX_USART2_UART_Init>:

/* USART2 Initialization */
static void MX_USART2_UART_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f002 f978 	bl	8002b34 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800084a:	f000 f86f 	bl	800092c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000100 	.word	0x20000100
 8000858:	40004400 	.word	0x40004400

0800085c <MX_USART3_UART_Init>:

/* USART3 Initialization */
static void MX_USART3_UART_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART3_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000894:	f002 f94e 	bl	8002b34 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 800089e:	f000 f845 	bl	800092c <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000188 	.word	0x20000188
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a17      	ldr	r2, [pc, #92]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a11      	ldr	r2, [pc, #68]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_GPIO_Init+0x78>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED OFF
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 fdc7 	bl	8001490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000902:	2320      	movs	r3, #32
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fc0e 	bl	800113c <HAL_GPIO_Init>
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000

0800092c <Error_Handler>:

void Error_Handler(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq(); // 禁用中断，防止错误扩散
  while (1) {
    // 错误指示：闪烁板载 LED (PA5)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000934:	2120      	movs	r1, #32
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fdc1 	bl	80014c0 <HAL_GPIO_TogglePin>
    HAL_Delay(500); // 500 毫秒闪烁
 800093e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000942:	f000 fa47 	bl	8000dd4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000946:	bf00      	nop
 8000948:	e7f4      	b.n	8000934 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	@ 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b0      	sub	sp, #192	@ 0xc0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b0:	2288      	movs	r2, #136	@ 0x88
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fcc7 	bl	8004348 <memset>
  if(huart->Instance==USART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6b      	ldr	r2, [pc, #428]	@ (8000b6c <HAL_UART_MspInit+0x1d8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d145      	bne.n	8000a50 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fbf3 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ffa6 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e0:	4b63      	ldr	r3, [pc, #396]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 80009e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e4:	4a62      	ldr	r2, [pc, #392]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ec:	4b60      	ldr	r3, [pc, #384]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f4:	623b      	str	r3, [r7, #32]
 80009f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a5c      	ldr	r2, [pc, #368]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3a:	f000 fb7f 	bl	800113c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0); // Adjusted priority
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	2025      	movs	r0, #37	@ 0x25
 8000a44:	f000 fac5 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a48:	2025      	movs	r0, #37	@ 0x25
 8000a4a:	f000 fade 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a4e:	e089      	b.n	8000b64 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a47      	ldr	r2, [pc, #284]	@ (8000b74 <HAL_UART_MspInit+0x1e0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d13c      	bne.n	8000ad4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fba8 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000a72:	f7ff ff5b 	bl	800092c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a37      	ldr	r2, [pc, #220]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f000 fb35 	bl	800113c <HAL_GPIO_Init>
}
 8000ad2:	e047      	b.n	8000b64 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a27      	ldr	r2, [pc, #156]	@ (8000b78 <HAL_UART_MspInit+0x1e4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d142      	bne.n	8000b64 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fb66 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_UART_MspInit+0x166>
      Error_Handler();
 8000af6:	f7ff ff19 	bl	800092c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a16      	ldr	r2, [pc, #88]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_UART_MspInit+0x1dc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b2a:	2330      	movs	r3, #48	@ 0x30
 8000b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b42:	2307      	movs	r3, #7
 8000b44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <HAL_UART_MspInit+0x1e8>)
 8000b50:	f000 faf4 	bl	800113c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0); // Highest priority
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2027      	movs	r0, #39	@ 0x27
 8000b5a:	f000 fa3a 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b5e:	2027      	movs	r0, #39	@ 0x27
 8000b60:	f000 fa53 	bl	800100a <HAL_NVIC_EnableIRQ>
}
 8000b64:	bf00      	nop
 8000b66:	37c0      	adds	r7, #192	@ 0xc0
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40004800 	.word	0x40004800
 8000b7c:	48000800 	.word	0x48000800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 f8dd 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <USART1_IRQHandler+0x10>)
 8000be6:	f002 f8c9 	bl	8002d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000078 	.word	0x20000078

08000bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <USART3_IRQHandler+0x10>)
 8000bfa:	f002 f8bf 	bl	8002d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000188 	.word	0x20000188

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f003 fb8e 	bl	8004358 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20018000 	.word	0x20018000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200002d0 	.word	0x200002d0
 8000c70:	20000420 	.word	0x20000420

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fb4d 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fc51 	bl	8000570 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cdc:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 8000ce0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ce4:	20000420 	.word	0x20000420

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f961 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff fe1e 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_InitTick+0x6c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d023      	beq.n	8000d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_InitTick+0x70>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_InitTick+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f96d 	bl	8001026 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10f      	bne.n	8000d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d809      	bhi.n	8000d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d60:	f000 f937 	bl	8000fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_InitTick+0x74>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e004      	b.n	8000d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e001      	b.n	8000d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200002d4 	.word	0x200002d4

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200002d4 	.word	0x200002d4

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	@ (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	@ (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	@ 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d008      	beq.n	8001068 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2204      	movs	r2, #4
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e022      	b.n	80010ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 020e 	bic.w	r2, r2, #14
 8001076:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	f003 021c 	and.w	r2, r3, #28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d005      	beq.n	80010de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e029      	b.n	8001132 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 020e 	bic.w	r2, r2, #14
 80010ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f003 021c 	and.w	r2, r3, #28
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    }
  }
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e17f      	b.n	800144c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8171 	beq.w	8001446 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 0201 	and.w	r2, r3, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d118      	bne.n	800121c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	6939      	ldr	r1, [r7, #16]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80ac 	beq.w	8001446 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b5f      	ldr	r3, [pc, #380]	@ (800146c <HAL_GPIO_Init+0x330>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	4a5e      	ldr	r2, [pc, #376]	@ (800146c <HAL_GPIO_Init+0x330>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fa:	4b5c      	ldr	r3, [pc, #368]	@ (800146c <HAL_GPIO_Init+0x330>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001306:	4a5a      	ldr	r2, [pc, #360]	@ (8001470 <HAL_GPIO_Init+0x334>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x242>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	@ (8001474 <HAL_GPIO_Init+0x338>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x23e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_GPIO_Init+0x33c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x23a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	@ (800147c <HAL_GPIO_Init+0x340>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x236>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	@ (8001480 <HAL_GPIO_Init+0x344>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x232>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	@ (8001484 <HAL_GPIO_Init+0x348>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	@ (8001488 <HAL_GPIO_Init+0x34c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x22a>
 8001362:	2306      	movs	r3, #6
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x244>
 8001366:	2307      	movs	r3, #7
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x244>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x244>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x244>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x244>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x244>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x244>
 800137e:	2300      	movs	r3, #0
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001390:	4937      	ldr	r1, [pc, #220]	@ (8001470 <HAL_GPIO_Init+0x334>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_GPIO_Init+0x350>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	@ (800148c <HAL_GPIO_Init+0x350>)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <HAL_GPIO_Init+0x350>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <HAL_GPIO_Init+0x350>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x350>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_GPIO_Init+0x350>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_GPIO_Init+0x350>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <HAL_GPIO_Init+0x350>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa22 f303 	lsr.w	r3, r2, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	f47f ae78 	bne.w	800114c <HAL_GPIO_Init+0x10>
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48001000 	.word	0x48001000
 8001484:	48001400 	.word	0x48001400
 8001488:	48001800 	.word	0x48001800
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43d9      	mvns	r1, r3
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	400b      	ands	r3, r1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	@ 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3ca      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4b97      	ldr	r3, [pc, #604]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4b94      	ldr	r3, [pc, #592]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80e4 	beq.w	80017b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_RCC_OscConfig+0x4a>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	f040 808b 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 8087 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001606:	4b89      	ldr	r3, [pc, #548]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e3a2      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b82      	ldr	r3, [pc, #520]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_RCC_OscConfig+0x7c>
 800162e:	4b7f      	ldr	r3, [pc, #508]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001636:	e005      	b.n	8001644 <HAL_RCC_OscConfig+0x88>
 8001638:	4b7c      	ldr	r3, [pc, #496]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001644:	4293      	cmp	r3, r2
 8001646:	d223      	bcs.n	8001690 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd55 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e383      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165c:	4b73      	ldr	r3, [pc, #460]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a72      	ldr	r2, [pc, #456]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	496d      	ldr	r1, [pc, #436]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b6c      	ldr	r3, [pc, #432]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4968      	ldr	r1, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e025      	b.n	80016dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b63      	ldr	r3, [pc, #396]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4960      	ldr	r1, [pc, #384]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	4b5f      	ldr	r3, [pc, #380]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	495b      	ldr	r1, [pc, #364]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fd15 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e343      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016dc:	f000 fc4a 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b52      	ldr	r3, [pc, #328]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4950      	ldr	r1, [pc, #320]	@ (8001830 <HAL_RCC_OscConfig+0x274>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001834 <HAL_RCC_OscConfig+0x278>)
 80016fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001838 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb0b 	bl	8000d1c <HAL_InitTick>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d052      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	e327      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171c:	4b43      	ldr	r3, [pc, #268]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a42      	ldr	r2, [pc, #264]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb48 	bl	8000dbc <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001730:	f7ff fb44 	bl	8000dbc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e310      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174e:	4b37      	ldr	r3, [pc, #220]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a36      	ldr	r2, [pc, #216]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b34      	ldr	r3, [pc, #208]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4931      	ldr	r1, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176c:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	492c      	ldr	r1, [pc, #176]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e01a      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a29      	ldr	r2, [pc, #164]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb15 	bl	8000dbc <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001796:	f7ff fb11 	bl	8000dbc <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e2dd      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x1da>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d074      	beq.n	80018ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x21a>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d064      	beq.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d160      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e2ba      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x24a>
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e026      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x280>
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a05      	ldr	r2, [pc, #20]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001816:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a02      	ldr	r2, [pc, #8]	@ (800182c <HAL_RCC_OscConfig+0x270>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	08004cec 	.word	0x08004cec
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004
 800183c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9f      	ldr	r2, [pc, #636]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b9d      	ldr	r3, [pc, #628]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff faae 	bl	8000dbc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff faaa 	bl	8000dbc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	@ 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e276      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fa9a 	bl	8000dbc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa96 	bl	8000dbc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e262      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4b88      	ldr	r3, [pc, #544]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x2d0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x310>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x328>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e23f      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b76      	ldr	r3, [pc, #472]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	4973      	ldr	r1, [pc, #460]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e040      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001902:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa55 	bl	8000dbc <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa51 	bl	8000dbc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e21d      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b65      	ldr	r3, [pc, #404]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b62      	ldr	r3, [pc, #392]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	495f      	ldr	r1, [pc, #380]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fa31 	bl	8000dbc <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fa2d 	bl	8000dbc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1f9      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001996:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa0c 	bl	8000dbc <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa08 	bl	8000dbc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1d4      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff f9ef 	bl	8000dbc <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff f9eb 	bl	8000dbc <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1b7      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9b2 	bl	8000dbc <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff f9ae 	bl	8000dbc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e17a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d8>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a92:	e029      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d115      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x50c>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa2:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab2:	4a03      	ldr	r2, [pc, #12]	@ (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ace:	4a9b      	ldr	r2, [pc, #620]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ad8:	4b98      	ldr	r3, [pc, #608]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ade:	4a97      	ldr	r2, [pc, #604]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f964 	bl	8000dbc <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f960 	bl	8000dbc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e12a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ed      	beq.n	8001af8 <HAL_RCC_OscConfig+0x53c>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f94d 	bl	8000dbc <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f949 	bl	8000dbc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e113      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ed      	bne.n	8001b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b7a      	ldr	r3, [pc, #488]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	4a79      	ldr	r2, [pc, #484]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80fe 	beq.w	8001d62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80d0 	bne.w	8001d10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b70:	4b72      	ldr	r3, [pc, #456]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d130      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d127      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bb0:	2a07      	cmp	r2, #7
 8001bb2:	bf14      	ite	ne
 8001bb4:	2201      	movne	r2, #1
 8001bb6:	2200      	moveq	r2, #0
 8001bb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d113      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d06e      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d069      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf8:	4b50      	ldr	r3, [pc, #320]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0ad      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c08:	4b4c      	ldr	r3, [pc, #304]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f8d2 	bl	8000dbc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8ce 	bl	8000dbc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e09a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3a:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x784>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c54:	0212      	lsls	r2, r2, #8
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0552      	lsls	r2, r2, #21
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	0652      	lsls	r2, r2, #25
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c74:	0912      	lsrs	r2, r2, #4
 8001c76:	0452      	lsls	r2, r2, #17
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4930      	ldr	r1, [pc, #192]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c80:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2d      	ldr	r2, [pc, #180]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a2a      	ldr	r2, [pc, #168]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7ff f890 	bl	8000dbc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f88c 	bl	8000dbc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e058      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	e050      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04f      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d148      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a16      	ldr	r2, [pc, #88]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce8:	f7ff f868 	bl	8000dbc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f864 	bl	8000dbc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e030      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x734>
 8001d0e:	e028      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d023      	beq.n	8001d5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f84b 	bl	8000dbc <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e00c      	b.n	8001d44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f847 	bl	8000dbc <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d905      	bls.n	8001d44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e013      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ec      	bne.n	8001d2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4905      	ldr	r1, [pc, #20]	@ (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_OscConfig+0x7b4>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e001      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	feeefffc 	.word	0xfeeefffc

08001d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0e7      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b75      	ldr	r3, [pc, #468]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b72      	ldr	r3, [pc, #456]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4970      	ldr	r1, [pc, #448]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cf      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b66      	ldr	r3, [pc, #408]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d908      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4960      	ldr	r1, [pc, #384]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d04c      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0a6      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e12:	4b54      	ldr	r3, [pc, #336]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e09a      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e08e      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e086      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b46      	ldr	r3, [pc, #280]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4943      	ldr	r1, [pc, #268]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5c:	f7fe ffae 	bl	8000dbc <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe ffaa 	bl	8000dbc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e06e      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d208      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	492b      	ldr	r1, [pc, #172]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d210      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec8:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 0207 	bic.w	r2, r3, #7
 8001ed0:	4923      	ldr	r1, [pc, #140]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e036      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4918      	ldr	r1, [pc, #96]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4910      	ldr	r1, [pc, #64]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f28:	f000 f824 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	490b      	ldr	r1, [pc, #44]	@ (8001f68 <HAL_RCC_ClockConfig+0x1f4>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <HAL_RCC_ClockConfig+0x1f8>)
 8001f46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_RCC_ClockConfig+0x1fc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fee5 	bl	8000d1c <HAL_InitTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f56:	7afb      	ldrb	r3, [r7, #11]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08004cec 	.word	0x08004cec
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d11e      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa8:	4b34      	ldr	r3, [pc, #208]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	e004      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d134      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002002:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0xa6>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d003      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
 8002018:	e005      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 800201c:	617b      	str	r3, [r7, #20]
      break;
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x114>)
 8002022:	617b      	str	r3, [r7, #20]
      break;
 8002024:	e002      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	0e5b      	lsrs	r3, r3, #25
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	3301      	adds	r3, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800206c:	69bb      	ldr	r3, [r7, #24]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	08004d04 	.word	0x08004d04
 8002084:	00f42400 	.word	0x00f42400
 8002088:	007a1200 	.word	0x007a1200

0800208c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a8:	f7ff fff0 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	@ (80020cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004cfc 	.word	0x08004cfc

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d4:	f7ff ffda 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0adb      	lsrs	r3, r3, #11
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4904      	ldr	r1, [pc, #16]	@ (80020f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08004cfc 	.word	0x08004cfc

080020fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002108:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002114:	f7ff f9ee 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002118:	6178      	str	r0, [r7, #20]
 800211a:	e014      	b.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	@ 0x58
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f9de 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214c:	d10b      	bne.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	@ 0x80
 8002152:	d919      	bls.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2ba0      	cmp	r3, #160	@ 0xa0
 8002158:	d902      	bls.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215a:	2302      	movs	r3, #2
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e013      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e010      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b80      	cmp	r3, #128	@ 0x80
 800216a:	d902      	bls.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800216c:	2303      	movs	r3, #3
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e00a      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b80      	cmp	r3, #128	@ 0x80
 8002176:	d102      	bne.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002178:	2302      	movs	r3, #2
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e004      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b70      	cmp	r3, #112	@ 0x70
 8002182:	d101      	bne.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	4909      	ldr	r1, [pc, #36]	@ (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c8:	2300      	movs	r3, #0
 80021ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d041      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021e0:	d02a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021e6:	d824      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021f2:	d81e      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021fc:	d010      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fe:	e018      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002200:	4b86      	ldr	r3, [pc, #536]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a85      	ldr	r2, [pc, #532]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220c:	e015      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fabb 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3320      	adds	r3, #32
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fba6 	bl	8002978 <RCCEx_PLLSAI2_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002240:	4b76      	ldr	r3, [pc, #472]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800224e:	4973      	ldr	r1, [pc, #460]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002256:	e001      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d041      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800226c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002270:	d02a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002272:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002276:	d824      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002282:	d81e      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228c:	d010      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800228e:	e018      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b62      	ldr	r3, [pc, #392]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a61      	ldr	r2, [pc, #388]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229c:	e015      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fa73 	bl	8002790 <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3320      	adds	r3, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fb5e 	bl	8002978 <RCCEx_PLLSAI2_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022de:	494f      	ldr	r1, [pc, #316]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a0 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fe:	4b47      	ldr	r3, [pc, #284]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b41      	ldr	r3, [pc, #260]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	4a40      	ldr	r2, [pc, #256]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002320:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002330:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3a      	ldr	r2, [pc, #232]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800233c:	f7fe fd3e 	bl	8000dbc <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002344:	f7fe fd3a 	bl	8000dbc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	74fb      	strb	r3, [r7, #19]
        break;
 8002356:	e005      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002358:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ef      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d15c      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800236a:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	d019      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002388:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239a:	4a20      	ldr	r2, [pc, #128]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023aa:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b4:	4a19      	ldr	r2, [pc, #100]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fcf9 	bl	8000dbc <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023cc:	e00b      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe fcf5 	bl	8000dbc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d902      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	74fb      	strb	r3, [r7, #19]
            break;
 80023e4:	e006      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ec      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800240a:	4904      	ldr	r1, [pc, #16]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002412:	e009      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
 8002418:	e006      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b9e      	ldr	r3, [pc, #632]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	4a9d      	ldr	r2, [pc, #628]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002446:	4b98      	ldr	r3, [pc, #608]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	4994      	ldr	r1, [pc, #592]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002468:	4b8f      	ldr	r3, [pc, #572]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 020c 	bic.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002476:	498c      	ldr	r1, [pc, #560]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800248a:	4b87      	ldr	r3, [pc, #540]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	4983      	ldr	r1, [pc, #524]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ac:	4b7e      	ldr	r3, [pc, #504]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	497b      	ldr	r1, [pc, #492]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ce:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024dc:	4972      	ldr	r1, [pc, #456]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f0:	4b6d      	ldr	r3, [pc, #436]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	496a      	ldr	r1, [pc, #424]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	4961      	ldr	r1, [pc, #388]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002534:	4b5c      	ldr	r3, [pc, #368]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	4959      	ldr	r1, [pc, #356]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002556:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002564:	4950      	ldr	r1, [pc, #320]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002578:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	4948      	ldr	r1, [pc, #288]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259a:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	493f      	ldr	r1, [pc, #252]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d028      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025bc:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ca:	4937      	ldr	r1, [pc, #220]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025da:	d106      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a31      	ldr	r2, [pc, #196]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	e011      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025f2:	d10c      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f8c8 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d028      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002628:	491f      	ldr	r1, [pc, #124]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002638:	d106      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a1a      	ldr	r2, [pc, #104]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002644:	60d3      	str	r3, [r2, #12]
 8002646:	e011      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f899 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02b      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002686:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002696:	d109      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a02      	ldr	r2, [pc, #8]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026a2:	60d3      	str	r3, [r2, #12]
 80026a4:	e014      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f867 	bl	8002790 <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02f      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ea:	4928      	ldr	r1, [pc, #160]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026fa:	d10d      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f844 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
 8002716:	e011      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800271c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3320      	adds	r3, #32
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f925 	bl	8002978 <RCCEx_PLLSAI2_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002756:	490d      	ldr	r1, [pc, #52]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800277a:	4904      	ldr	r1, [pc, #16]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002782:	7cbb      	ldrb	r3, [r7, #18]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000

08002790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279e:	4b75      	ldr	r3, [pc, #468]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d018      	beq.n	80027dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027aa:	4b72      	ldr	r3, [pc, #456]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
       ||
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
       ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d047      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e044      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d018      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x86>
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d825      	bhi.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d002      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x62>
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d009      	beq.n	8002804 <RCCEx_PLLSAI1_Config+0x74>
 80027f0:	e020      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027f2:	4b60      	ldr	r3, [pc, #384]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e01a      	b.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002804:	4b5b      	ldr	r3, [pc, #364]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d116      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e013      	b.n	800283e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002816:	4b57      	ldr	r3, [pc, #348]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002822:	4b54      	ldr	r3, [pc, #336]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002832:	e006      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e004      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e002      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002842:	bf00      	nop
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800284a:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	430b      	orrs	r3, r1
 8002860:	4944      	ldr	r1, [pc, #272]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d17d      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800286c:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a40      	ldr	r2, [pc, #256]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe faa0 	bl	8000dbc <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287e:	e009      	b.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002880:	f7fe fa9c 	bl	8000dbc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
        break;
 8002892:	e005      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002894:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ef      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d160      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6892      	ldr	r2, [r2, #8]
 80028bc:	0211      	lsls	r1, r2, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	0912      	lsrs	r2, r2, #4
 80028c4:	0452      	lsls	r2, r2, #17
 80028c6:	430a      	orrs	r2, r1
 80028c8:	492a      	ldr	r1, [pc, #168]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
 80028ce:	e027      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d112      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d6:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0211      	lsls	r1, r2, #8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6912      	ldr	r2, [r2, #16]
 80028ec:	0852      	lsrs	r2, r2, #1
 80028ee:	3a01      	subs	r2, #1
 80028f0:	0552      	lsls	r2, r2, #21
 80028f2:	430a      	orrs	r2, r1
 80028f4:	491f      	ldr	r1, [pc, #124]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	610b      	str	r3, [r1, #16]
 80028fa:	e011      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002904:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	0211      	lsls	r1, r2, #8
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6952      	ldr	r2, [r2, #20]
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	430a      	orrs	r2, r1
 800291a:	4916      	ldr	r1, [pc, #88]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002920:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800292a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fa46 	bl	8000dbc <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002932:	e009      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002934:	f7fe fa42 	bl	8000dbc <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	73fb      	strb	r3, [r7, #15]
          break;
 8002946:	e005      	b.n	8002954 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4904      	ldr	r1, [pc, #16]	@ (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002986:	4b6a      	ldr	r3, [pc, #424]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002992:	4b67      	ldr	r3, [pc, #412]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0203 	and.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d10d      	bne.n	80029be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
       ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029aa:	4b61      	ldr	r3, [pc, #388]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
       ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d047      	beq.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e044      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d018      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x86>
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d825      	bhi.n	8002a1c <RCCEx_PLLSAI2_Config+0xa4>
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d002      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x62>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d009      	beq.n	80029ec <RCCEx_PLLSAI2_Config+0x74>
 80029d8:	e020      	b.n	8002a1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029da:	4b55      	ldr	r3, [pc, #340]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ea:	e01a      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e013      	b.n	8002a26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a0a:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a1a:	e006      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e004      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	430b      	orrs	r3, r1
 8002a48:	4939      	ldr	r1, [pc, #228]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d167      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe f9ac 	bl	8000dbc <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a66:	e009      	b.n	8002a7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a68:	f7fe f9a8 	bl	8000dbc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7a:	e005      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ef      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d14a      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	0912      	lsrs	r2, r2, #4
 8002aac:	0452      	lsls	r2, r2, #17
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	491f      	ldr	r1, [pc, #124]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	614b      	str	r3, [r1, #20]
 8002ab6:	e011      	b.n	8002adc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6912      	ldr	r2, [r2, #16]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0652      	lsls	r2, r2, #25
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe f968 	bl	8000dbc <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af0:	f7fe f964 	bl	8000dbc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
          break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4904      	ldr	r1, [pc, #16]	@ (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e040      	b.n	8002bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd ff1c 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	@ 0x24
 8002b60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fedc 	bl	8003938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fc21 	bl	80033c8 <UART_SetConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e01b      	b.n	8002bc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 ff5b 	bl	8003a7c <UART_CheckIdleState>
 8002bc6:	4603      	mov	r3, r0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d177      	bne.n	8002cd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Transmit+0x24>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e070      	b.n	8002cda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2221      	movs	r2, #33	@ 0x21
 8002c04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c06:	f7fe f8d9 	bl	8000dbc <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c24:	d108      	bne.n	8002c38 <HAL_UART_Transmit+0x68>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e003      	b.n	8002c40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c40:	e02f      	b.n	8002ca2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 ffbd 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e03b      	b.n	8002cda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c74:	b292      	uxth	r2, r2
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e007      	b.n	8002c90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1c9      	bne.n	8002c42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	@ 0x40
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 ff87 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e005      	b.n	8002cda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d137      	bne.n	8002d6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Receive_IT+0x24>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e030      	b.n	8002d6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <HAL_UART_Receive_IT+0x94>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01f      	beq.n	8002d5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	613b      	str	r3, [r7, #16]
   return(result);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	69f9      	ldr	r1, [r7, #28]
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e6      	bne.n	8002d2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 ffa0 	bl	8003ca8 <UART_Start_Receive_IT>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	@ 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40008000 	.word	0x40008000

08002d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002da2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002da6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002daa:	4013      	ands	r3, r2
 8002dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00f      	beq.n	8002de4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d009      	beq.n	8002de4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 82ca 	beq.w	800336e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
      }
      return;
 8002de2:	e2c4      	b.n	800336e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8117 	beq.w	800301c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002dfe:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_UART_IRQHandler+0x298>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 810a 	beq.w	800301c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_UART_IRQHandler+0xbc>
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_UART_IRQHandler+0xec>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2202      	movs	r2, #2
 8002e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d011      	beq.n	8002e98 <HAL_UART_IRQHandler+0x11c>
 8002e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2204      	movs	r2, #4
 8002e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eca:	f043 0208 	orr.w	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d012      	beq.n	8002f06 <HAL_UART_IRQHandler+0x18a>
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8230 	beq.w	8003372 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4e:	2b40      	cmp	r3, #64	@ 0x40
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04f      	beq.n	8002ffe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 ff68 	bl	8003e34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b40      	cmp	r3, #64	@ 0x40
 8002f70:	d141      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1d9      	bne.n	8002f72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fca:	4a13      	ldr	r2, [pc, #76]	@ (8003018 <HAL_UART_IRQHandler+0x29c>)
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f871 	bl	80010ba <HAL_DMA_Abort_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d017      	beq.n	800300e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e00f      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9d4 	bl	800339c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e00b      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9d0 	bl	800339c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e007      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9cc 	bl	800339c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800300c:	e1b1      	b.n	8003372 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300e:	bf00      	nop
    return;
 8003010:	e1af      	b.n	8003372 <HAL_UART_IRQHandler+0x5f6>
 8003012:	bf00      	nop
 8003014:	04000120 	.word	0x04000120
 8003018:	08003efd 	.word	0x08003efd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003020:	2b01      	cmp	r3, #1
 8003022:	f040 816a 	bne.w	80032fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8163 	beq.w	80032fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 815c 	beq.w	80032fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2210      	movs	r2, #16
 8003048:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	f040 80d4 	bne.w	8003202 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003066:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80ad 	beq.w	80031ca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800307a:	429a      	cmp	r2, r3
 800307c:	f080 80a5 	bcs.w	80031ca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003086:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8086 	bne.w	80031a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1da      	bne.n	800309c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3308      	adds	r3, #8
 8003106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800310a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800310e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800311c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e1      	bne.n	80030e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3308      	adds	r3, #8
 8003128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3308      	adds	r3, #8
 8003142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800314c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e3      	bne.n	8003122 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003178:	f023 0310 	bic.w	r3, r3, #16
 800317c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800318a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800318c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e4      	bne.n	8003168 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd ff4b 	bl	800103e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8f4 	bl	80033b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031c8:	e0d5      	b.n	8003376 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 80ce 	bne.w	8003376 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	f040 80c5 	bne.w	8003376 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8d8 	bl	80033b0 <HAL_UARTEx_RxEventCallback>
      return;
 8003200:	e0b9      	b.n	8003376 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800320e:	b29b      	uxth	r3, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80ab 	beq.w	800337a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800323c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003250:	647b      	str	r3, [r7, #68]	@ 0x44
 8003252:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800325e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e4      	bne.n	800322e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	623b      	str	r3, [r7, #32]
   return(result);
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3308      	adds	r3, #8
 8003284:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003288:	633a      	str	r2, [r7, #48]	@ 0x30
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800328e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e3      	bne.n	8003264 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f023 0310 	bic.w	r3, r3, #16
 80032c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	617b      	str	r3, [r7, #20]
   return(result);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e4      	bne.n	80032b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f85c 	bl	80033b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032f8:	e03f      	b.n	800337a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <HAL_UART_IRQHandler+0x5a8>
 8003306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800331a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 ffe9 	bl	80042f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003322:	e02d      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01c      	beq.n	800337e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
    }
    return;
 800334c:	e017      	b.n	800337e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_UART_IRQHandler+0x604>
 800335a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fdde 	bl	8003f28 <UART_EndTransmit_IT>
    return;
 800336c:	e008      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
      return;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
    return;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
      return;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
      return;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_UART_IRQHandler+0x604>
    return;
 800337e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003380:	37e8      	adds	r7, #232	@ 0xe8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop

08003388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b08a      	sub	sp, #40	@ 0x28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003688 <UART_SetConfig+0x2c0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003400:	430b      	orrs	r3, r1
 8003402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a99      	ldr	r2, [pc, #612]	@ (800368c <UART_SetConfig+0x2c4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	4313      	orrs	r3, r2
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a90      	ldr	r2, [pc, #576]	@ (8003690 <UART_SetConfig+0x2c8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d126      	bne.n	80034a0 <UART_SetConfig+0xd8>
 8003452:	4b90      	ldr	r3, [pc, #576]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b03      	cmp	r3, #3
 800345e:	d81b      	bhi.n	8003498 <UART_SetConfig+0xd0>
 8003460:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <UART_SetConfig+0xa0>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	08003479 	.word	0x08003479
 800346c:	08003489 	.word	0x08003489
 8003470:	08003481 	.word	0x08003481
 8003474:	08003491 	.word	0x08003491
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347e:	e116      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003480:	2302      	movs	r3, #2
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003486:	e112      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003488:	2304      	movs	r3, #4
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348e:	e10e      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003490:	2308      	movs	r3, #8
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003496:	e10a      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e106      	b.n	80036ae <UART_SetConfig+0x2e6>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003698 <UART_SetConfig+0x2d0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d138      	bne.n	800351c <UART_SetConfig+0x154>
 80034aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003694 <UART_SetConfig+0x2cc>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d82d      	bhi.n	8003514 <UART_SetConfig+0x14c>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <UART_SetConfig+0xf8>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	08003515 	.word	0x08003515
 80034c8:	08003515 	.word	0x08003515
 80034cc:	08003515 	.word	0x08003515
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003515 	.word	0x08003515
 80034d8:	08003515 	.word	0x08003515
 80034dc:	08003515 	.word	0x08003515
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	08003515 	.word	0x08003515
 80034e8:	08003515 	.word	0x08003515
 80034ec:	08003515 	.word	0x08003515
 80034f0:	0800350d 	.word	0x0800350d
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fa:	e0d8      	b.n	80036ae <UART_SetConfig+0x2e6>
 80034fc:	2302      	movs	r3, #2
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003502:	e0d4      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003504:	2304      	movs	r3, #4
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e0d0      	b.n	80036ae <UART_SetConfig+0x2e6>
 800350c:	2308      	movs	r3, #8
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e0cc      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003514:	2310      	movs	r3, #16
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e0c8      	b.n	80036ae <UART_SetConfig+0x2e6>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5e      	ldr	r2, [pc, #376]	@ (800369c <UART_SetConfig+0x2d4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d125      	bne.n	8003572 <UART_SetConfig+0x1aa>
 8003526:	4b5b      	ldr	r3, [pc, #364]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d016      	beq.n	8003562 <UART_SetConfig+0x19a>
 8003534:	2b30      	cmp	r3, #48	@ 0x30
 8003536:	d818      	bhi.n	800356a <UART_SetConfig+0x1a2>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d00a      	beq.n	8003552 <UART_SetConfig+0x18a>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d814      	bhi.n	800356a <UART_SetConfig+0x1a2>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <UART_SetConfig+0x182>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d008      	beq.n	800355a <UART_SetConfig+0x192>
 8003548:	e00f      	b.n	800356a <UART_SetConfig+0x1a2>
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003550:	e0ad      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003552:	2302      	movs	r3, #2
 8003554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003558:	e0a9      	b.n	80036ae <UART_SetConfig+0x2e6>
 800355a:	2304      	movs	r3, #4
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003560:	e0a5      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003562:	2308      	movs	r3, #8
 8003564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003568:	e0a1      	b.n	80036ae <UART_SetConfig+0x2e6>
 800356a:	2310      	movs	r3, #16
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003570:	e09d      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <UART_SetConfig+0x2d8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d125      	bne.n	80035c8 <UART_SetConfig+0x200>
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <UART_SetConfig+0x2cc>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003586:	2bc0      	cmp	r3, #192	@ 0xc0
 8003588:	d016      	beq.n	80035b8 <UART_SetConfig+0x1f0>
 800358a:	2bc0      	cmp	r3, #192	@ 0xc0
 800358c:	d818      	bhi.n	80035c0 <UART_SetConfig+0x1f8>
 800358e:	2b80      	cmp	r3, #128	@ 0x80
 8003590:	d00a      	beq.n	80035a8 <UART_SetConfig+0x1e0>
 8003592:	2b80      	cmp	r3, #128	@ 0x80
 8003594:	d814      	bhi.n	80035c0 <UART_SetConfig+0x1f8>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <UART_SetConfig+0x1d8>
 800359a:	2b40      	cmp	r3, #64	@ 0x40
 800359c:	d008      	beq.n	80035b0 <UART_SetConfig+0x1e8>
 800359e:	e00f      	b.n	80035c0 <UART_SetConfig+0x1f8>
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e082      	b.n	80036ae <UART_SetConfig+0x2e6>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e07e      	b.n	80036ae <UART_SetConfig+0x2e6>
 80035b0:	2304      	movs	r3, #4
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e07a      	b.n	80036ae <UART_SetConfig+0x2e6>
 80035b8:	2308      	movs	r3, #8
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035be:	e076      	b.n	80036ae <UART_SetConfig+0x2e6>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c6:	e072      	b.n	80036ae <UART_SetConfig+0x2e6>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a35      	ldr	r2, [pc, #212]	@ (80036a4 <UART_SetConfig+0x2dc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d12a      	bne.n	8003628 <UART_SetConfig+0x260>
 80035d2:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <UART_SetConfig+0x2cc>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035e0:	d01a      	beq.n	8003618 <UART_SetConfig+0x250>
 80035e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035e6:	d81b      	bhi.n	8003620 <UART_SetConfig+0x258>
 80035e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ec:	d00c      	beq.n	8003608 <UART_SetConfig+0x240>
 80035ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f2:	d815      	bhi.n	8003620 <UART_SetConfig+0x258>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <UART_SetConfig+0x238>
 80035f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fc:	d008      	beq.n	8003610 <UART_SetConfig+0x248>
 80035fe:	e00f      	b.n	8003620 <UART_SetConfig+0x258>
 8003600:	2300      	movs	r3, #0
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e052      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003608:	2302      	movs	r3, #2
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e04e      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003610:	2304      	movs	r3, #4
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e04a      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003618:	2308      	movs	r3, #8
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361e:	e046      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003620:	2310      	movs	r3, #16
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e042      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	@ (800368c <UART_SetConfig+0x2c4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d13a      	bne.n	80036a8 <UART_SetConfig+0x2e0>
 8003632:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800363c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003640:	d01a      	beq.n	8003678 <UART_SetConfig+0x2b0>
 8003642:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003646:	d81b      	bhi.n	8003680 <UART_SetConfig+0x2b8>
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800364c:	d00c      	beq.n	8003668 <UART_SetConfig+0x2a0>
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003652:	d815      	bhi.n	8003680 <UART_SetConfig+0x2b8>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <UART_SetConfig+0x298>
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365c:	d008      	beq.n	8003670 <UART_SetConfig+0x2a8>
 800365e:	e00f      	b.n	8003680 <UART_SetConfig+0x2b8>
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e022      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003668:	2302      	movs	r3, #2
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e01e      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003670:	2304      	movs	r3, #4
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e01a      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003678:	2308      	movs	r3, #8
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367e:	e016      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003680:	2310      	movs	r3, #16
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e012      	b.n	80036ae <UART_SetConfig+0x2e6>
 8003688:	efff69f3 	.word	0xefff69f3
 800368c:	40008000 	.word	0x40008000
 8003690:	40013800 	.word	0x40013800
 8003694:	40021000 	.word	0x40021000
 8003698:	40004400 	.word	0x40004400
 800369c:	40004800 	.word	0x40004800
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40005000 	.word	0x40005000
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003930 <UART_SetConfig+0x568>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d17a      	bne.n	80037ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d824      	bhi.n	800370a <UART_SetConfig+0x342>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0x300>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	080036fb 	.word	0x080036fb
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800370b 	.word	0x0800370b
 80036e8:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fcda 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e010      	b.n	8003716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003934 <UART_SetConfig+0x56c>)
 80036f6:	61fb      	str	r3, [r7, #28]
        break;
 80036f8:	e00d      	b.n	8003716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fc3b 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80036fe:	61f8      	str	r0, [r7, #28]
        break;
 8003700:	e009      	b.n	8003716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
        break;
 8003708:	e005      	b.n	8003716 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80fb 	beq.w	8003914 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	429a      	cmp	r2, r3
 800372c:	d305      	bcc.n	800373a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	429a      	cmp	r2, r3
 8003738:	d903      	bls.n	8003742 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003740:	e0e8      	b.n	8003914 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2200      	movs	r2, #0
 8003746:	461c      	mov	r4, r3
 8003748:	4615      	mov	r5, r2
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	022b      	lsls	r3, r5, #8
 8003754:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003758:	0222      	lsls	r2, r4, #8
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	6849      	ldr	r1, [r1, #4]
 800375e:	0849      	lsrs	r1, r1, #1
 8003760:	2000      	movs	r0, #0
 8003762:	4688      	mov	r8, r1
 8003764:	4681      	mov	r9, r0
 8003766:	eb12 0a08 	adds.w	sl, r2, r8
 800376a:	eb43 0b09 	adc.w	fp, r3, r9
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800377c:	4650      	mov	r0, sl
 800377e:	4659      	mov	r1, fp
 8003780:	f7fc fd7e 	bl	8000280 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003792:	d308      	bcc.n	80037a6 <UART_SetConfig+0x3de>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379a:	d204      	bcs.n	80037a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e0b6      	b.n	8003914 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037ac:	e0b2      	b.n	8003914 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d15e      	bne.n	8003876 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d828      	bhi.n	8003812 <UART_SetConfig+0x44a>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0x400>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	08003813 	.word	0x08003813
 80037d8:	08003803 	.word	0x08003803
 80037dc:	08003813 	.word	0x08003813
 80037e0:	08003813 	.word	0x08003813
 80037e4:	08003813 	.word	0x08003813
 80037e8:	0800380b 	.word	0x0800380b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fc5a 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80037f0:	61f8      	str	r0, [r7, #28]
        break;
 80037f2:	e014      	b.n	800381e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fe fc6c 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 80037f8:	61f8      	str	r0, [r7, #28]
        break;
 80037fa:	e010      	b.n	800381e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003934 <UART_SetConfig+0x56c>)
 80037fe:	61fb      	str	r3, [r7, #28]
        break;
 8003800:	e00d      	b.n	800381e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003802:	f7fe fbb7 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003806:	61f8      	str	r0, [r7, #28]
        break;
 8003808:	e009      	b.n	800381e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800380e:	61fb      	str	r3, [r7, #28]
        break;
 8003810:	e005      	b.n	800381e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800381c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d077      	beq.n	8003914 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005a      	lsls	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d916      	bls.n	800386e <UART_SetConfig+0x4a6>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003846:	d212      	bcs.n	800386e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	b29a      	uxth	r2, r3
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	4313      	orrs	r3, r2
 8003862:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	8afa      	ldrh	r2, [r7, #22]
 800386a:	60da      	str	r2, [r3, #12]
 800386c:	e052      	b.n	8003914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003874:	e04e      	b.n	8003914 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003876:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800387a:	2b08      	cmp	r3, #8
 800387c:	d827      	bhi.n	80038ce <UART_SetConfig+0x506>
 800387e:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <UART_SetConfig+0x4bc>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038cf 	.word	0x080038cf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038cf 	.word	0x080038cf
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
 80038a4:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7fe fbfc 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80038ac:	61f8      	str	r0, [r7, #28]
        break;
 80038ae:	e014      	b.n	80038da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7fe fc0e 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 80038b4:	61f8      	str	r0, [r7, #28]
        break;
 80038b6:	e010      	b.n	80038da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <UART_SetConfig+0x56c>)
 80038ba:	61fb      	str	r3, [r7, #28]
        break;
 80038bc:	e00d      	b.n	80038da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe fb59 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80038c2:	61f8      	str	r0, [r7, #28]
        break;
 80038c4:	e009      	b.n	80038da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ca:	61fb      	str	r3, [r7, #28]
        break;
 80038cc:	e005      	b.n	80038da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038d8:	bf00      	nop
    }

    if (pclk != 0U)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d019      	beq.n	8003914 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	085a      	lsrs	r2, r3, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	441a      	add	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	d909      	bls.n	800390e <UART_SetConfig+0x546>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d205      	bcs.n	800390e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e002      	b.n	8003914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003920:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	@ 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392e:	bf00      	nop
 8003930:	40008000 	.word	0x40008000
 8003934:	00f42400 	.word	0x00f42400

08003938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a36:	d10a      	bne.n	8003a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b098      	sub	sp, #96	@ 0x60
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a8c:	f7fd f996 	bl	8000dbc <HAL_GetTick>
 8003a90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d12e      	bne.n	8003afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f88c 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d021      	beq.n	8003afe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ada:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e6      	bne.n	8003aba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e062      	b.n	8003bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d149      	bne.n	8003ba0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f856 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d03c      	beq.n	8003ba0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	623b      	str	r3, [r7, #32]
   return(result);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	617b      	str	r3, [r7, #20]
   return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e011      	b.n	8003bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3758      	adds	r7, #88	@ 0x58
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bdc:	e04f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be4:	d04b      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fd f8e9 	bl	8000dbc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e04e      	b.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d037      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b80      	cmp	r3, #128	@ 0x80
 8003c12:	d034      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d031      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d110      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f8ff 	bl	8003e34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e029      	b.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c58:	d111      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f8e5 	bl	8003e34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e00f      	b.n	8003c9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d0a0      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b097      	sub	sp, #92	@ 0x5c
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	d10e      	bne.n	8003cfa <UART_Start_Receive_IT+0x52>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <UART_Start_Receive_IT+0x48>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003cea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003cee:	e02d      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003cf8:	e028      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <UART_Start_Receive_IT+0x76>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <UART_Start_Receive_IT+0x6c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d12:	e01b      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	227f      	movs	r2, #127	@ 0x7f
 8003d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d1c:	e016      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d26:	d10d      	bne.n	8003d44 <UART_Start_Receive_IT+0x9c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <UART_Start_Receive_IT+0x92>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	227f      	movs	r2, #127	@ 0x7f
 8003d34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d38:	e008      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	223f      	movs	r2, #63	@ 0x3f
 8003d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d42:	e003      	b.n	8003d4c <UART_Start_Receive_IT+0xa4>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	@ 0x22
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003d7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d107      	bne.n	8003daa <UART_Start_Receive_IT+0x102>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <UART_Start_Receive_IT+0x184>)
 8003da6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003da8:	e002      	b.n	8003db0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a20      	ldr	r2, [pc, #128]	@ (8003e30 <UART_Start_Receive_IT+0x188>)
 8003dae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <UART_Start_Receive_IT+0x110>
 8003dea:	e018      	b.n	8003e1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f043 0320 	orr.w	r3, r3, #32
 8003e00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	69f9      	ldr	r1, [r7, #28]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e6      	bne.n	8003dec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	375c      	adds	r7, #92	@ 0x5c
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	08004139 	.word	0x08004139
 8003e30:	08003f7d 	.word	0x08003f7d

08003e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b095      	sub	sp, #84	@ 0x54
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e6      	bne.n	8003e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d118      	bne.n	8003edc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ef0:	bf00      	nop
 8003ef2:	3754      	adds	r7, #84	@ 0x54
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fa3e 	bl	800339c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fa0a 	bl	8003388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b09c      	sub	sp, #112	@ 0x70
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f94:	2b22      	cmp	r3, #34	@ 0x22
 8003f96:	f040 80be 	bne.w	8004116 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003fa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 80a3 	bne.w	800412a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004004:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	667b      	str	r3, [r7, #100]	@ 0x64
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004036:	647a      	str	r2, [r7, #68]	@ 0x44
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800403c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <UART_RxISR_8BIT+0x1b8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01f      	beq.n	80040a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	623b      	str	r3, [r7, #32]
   return(result);
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800408a:	663b      	str	r3, [r7, #96]	@ 0x60
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004094:	633b      	str	r3, [r7, #48]	@ 0x30
 8004096:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d12e      	bne.n	800410e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0310 	bic.w	r3, r3, #16
 80040ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	617b      	str	r3, [r7, #20]
   return(result);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d103      	bne.n	80040fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff f952 	bl	80033b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800410c:	e00d      	b.n	800412a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fac6 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 8004114:	e009      	b.n	800412a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	8b1b      	ldrh	r3, [r3, #24]
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0208 	orr.w	r2, r2, #8
 8004126:	b292      	uxth	r2, r2
 8004128:	831a      	strh	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	3770      	adds	r7, #112	@ 0x70
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40008000 	.word	0x40008000

08004138 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b09c      	sub	sp, #112	@ 0x70
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004146:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004150:	2b22      	cmp	r3, #34	@ 0x22
 8004152:	f040 80be 	bne.w	80042d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800415c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004166:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800416a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800416e:	4013      	ands	r3, r2
 8004170:	b29a      	uxth	r2, r3
 8004172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004174:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 80a3 	bne.w	80042e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80041ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041be:	657b      	str	r3, [r7, #84]	@ 0x54
 80041c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80041cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3308      	adds	r3, #8
 80041f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80041f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e5      	bne.n	80041d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a34      	ldr	r2, [pc, #208]	@ (80042f0 <UART_RxISR_16BIT+0x1b8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01f      	beq.n	8004264 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004246:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004252:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	2b01      	cmp	r3, #1
 800426a:	d12e      	bne.n	80042ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d103      	bne.n	80042ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2210      	movs	r2, #16
 80042b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff f874 	bl	80033b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042c8:	e00d      	b.n	80042e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc f9e8 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 80042d0:	e009      	b.n	80042e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	8b1b      	ldrh	r3, [r3, #24]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	b292      	uxth	r2, r2
 80042e4:	831a      	strh	r2, [r3, #24]
}
 80042e6:	bf00      	nop
 80042e8:	3770      	adds	r7, #112	@ 0x70
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40008000 	.word	0x40008000

080042f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	b09c      	sub	sp, #112	@ 0x70
 800430e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004310:	9002      	str	r0, [sp, #8]
 8004312:	9006      	str	r0, [sp, #24]
 8004314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004318:	4809      	ldr	r0, [pc, #36]	@ (8004340 <siprintf+0x38>)
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	4909      	ldr	r1, [pc, #36]	@ (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	a902      	add	r1, sp, #8
 800432c:	f000 f89c 	bl	8004468 <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	@ 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	2000000c 	.word	0x2000000c
 8004344:	ffff0208 	.word	0xffff0208

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	@ (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	@ (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	@ (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	@ (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	@ (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 fc66 	bl	8004c48 <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08004d70 	.word	0x08004d70
 80043a0:	08004d70 	.word	0x08004d70
 80043a4:	08004d70 	.word	0x08004d70
 80043a8:	08004d74 	.word	0x08004d74

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <__ssputs_r>:
 80043b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	688e      	ldr	r6, [r1, #8]
 80043b6:	461f      	mov	r7, r3
 80043b8:	42be      	cmp	r6, r7
 80043ba:	680b      	ldr	r3, [r1, #0]
 80043bc:	4682      	mov	sl, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	4690      	mov	r8, r2
 80043c2:	d82d      	bhi.n	8004420 <__ssputs_r+0x70>
 80043c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043cc:	d026      	beq.n	800441c <__ssputs_r+0x6c>
 80043ce:	6965      	ldr	r5, [r4, #20]
 80043d0:	6909      	ldr	r1, [r1, #16]
 80043d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043d6:	eba3 0901 	sub.w	r9, r3, r1
 80043da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043de:	1c7b      	adds	r3, r7, #1
 80043e0:	444b      	add	r3, r9
 80043e2:	106d      	asrs	r5, r5, #1
 80043e4:	429d      	cmp	r5, r3
 80043e6:	bf38      	it	cc
 80043e8:	461d      	movcc	r5, r3
 80043ea:	0553      	lsls	r3, r2, #21
 80043ec:	d527      	bpl.n	800443e <__ssputs_r+0x8e>
 80043ee:	4629      	mov	r1, r5
 80043f0:	f000 f958 	bl	80046a4 <_malloc_r>
 80043f4:	4606      	mov	r6, r0
 80043f6:	b360      	cbz	r0, 8004452 <__ssputs_r+0xa2>
 80043f8:	6921      	ldr	r1, [r4, #16]
 80043fa:	464a      	mov	r2, r9
 80043fc:	f000 fbc4 	bl	8004b88 <memcpy>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	6126      	str	r6, [r4, #16]
 800440e:	6165      	str	r5, [r4, #20]
 8004410:	444e      	add	r6, r9
 8004412:	eba5 0509 	sub.w	r5, r5, r9
 8004416:	6026      	str	r6, [r4, #0]
 8004418:	60a5      	str	r5, [r4, #8]
 800441a:	463e      	mov	r6, r7
 800441c:	42be      	cmp	r6, r7
 800441e:	d900      	bls.n	8004422 <__ssputs_r+0x72>
 8004420:	463e      	mov	r6, r7
 8004422:	6820      	ldr	r0, [r4, #0]
 8004424:	4632      	mov	r2, r6
 8004426:	4641      	mov	r1, r8
 8004428:	f000 fb84 	bl	8004b34 <memmove>
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	1b9b      	subs	r3, r3, r6
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	4433      	add	r3, r6
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	2000      	movs	r0, #0
 800443a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443e:	462a      	mov	r2, r5
 8004440:	f000 fb4a 	bl	8004ad8 <_realloc_r>
 8004444:	4606      	mov	r6, r0
 8004446:	2800      	cmp	r0, #0
 8004448:	d1e0      	bne.n	800440c <__ssputs_r+0x5c>
 800444a:	6921      	ldr	r1, [r4, #16]
 800444c:	4650      	mov	r0, sl
 800444e:	f000 fba9 	bl	8004ba4 <_free_r>
 8004452:	230c      	movs	r3, #12
 8004454:	f8ca 3000 	str.w	r3, [sl]
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004464:	e7e9      	b.n	800443a <__ssputs_r+0x8a>
	...

08004468 <_svfiprintf_r>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	4698      	mov	r8, r3
 800446e:	898b      	ldrh	r3, [r1, #12]
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	b09d      	sub	sp, #116	@ 0x74
 8004474:	4607      	mov	r7, r0
 8004476:	460d      	mov	r5, r1
 8004478:	4614      	mov	r4, r2
 800447a:	d510      	bpl.n	800449e <_svfiprintf_r+0x36>
 800447c:	690b      	ldr	r3, [r1, #16]
 800447e:	b973      	cbnz	r3, 800449e <_svfiprintf_r+0x36>
 8004480:	2140      	movs	r1, #64	@ 0x40
 8004482:	f000 f90f 	bl	80046a4 <_malloc_r>
 8004486:	6028      	str	r0, [r5, #0]
 8004488:	6128      	str	r0, [r5, #16]
 800448a:	b930      	cbnz	r0, 800449a <_svfiprintf_r+0x32>
 800448c:	230c      	movs	r3, #12
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004494:	b01d      	add	sp, #116	@ 0x74
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	2340      	movs	r3, #64	@ 0x40
 800449c:	616b      	str	r3, [r5, #20]
 800449e:	2300      	movs	r3, #0
 80044a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044a2:	2320      	movs	r3, #32
 80044a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ac:	2330      	movs	r3, #48	@ 0x30
 80044ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800464c <_svfiprintf_r+0x1e4>
 80044b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044b6:	f04f 0901 	mov.w	r9, #1
 80044ba:	4623      	mov	r3, r4
 80044bc:	469a      	mov	sl, r3
 80044be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c2:	b10a      	cbz	r2, 80044c8 <_svfiprintf_r+0x60>
 80044c4:	2a25      	cmp	r2, #37	@ 0x25
 80044c6:	d1f9      	bne.n	80044bc <_svfiprintf_r+0x54>
 80044c8:	ebba 0b04 	subs.w	fp, sl, r4
 80044cc:	d00b      	beq.n	80044e6 <_svfiprintf_r+0x7e>
 80044ce:	465b      	mov	r3, fp
 80044d0:	4622      	mov	r2, r4
 80044d2:	4629      	mov	r1, r5
 80044d4:	4638      	mov	r0, r7
 80044d6:	f7ff ff6b 	bl	80043b0 <__ssputs_r>
 80044da:	3001      	adds	r0, #1
 80044dc:	f000 80a7 	beq.w	800462e <_svfiprintf_r+0x1c6>
 80044e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044e2:	445a      	add	r2, fp
 80044e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80044e6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 809f 	beq.w	800462e <_svfiprintf_r+0x1c6>
 80044f0:	2300      	movs	r3, #0
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044fa:	f10a 0a01 	add.w	sl, sl, #1
 80044fe:	9304      	str	r3, [sp, #16]
 8004500:	9307      	str	r3, [sp, #28]
 8004502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004506:	931a      	str	r3, [sp, #104]	@ 0x68
 8004508:	4654      	mov	r4, sl
 800450a:	2205      	movs	r2, #5
 800450c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004510:	484e      	ldr	r0, [pc, #312]	@ (800464c <_svfiprintf_r+0x1e4>)
 8004512:	f7fb fe65 	bl	80001e0 <memchr>
 8004516:	9a04      	ldr	r2, [sp, #16]
 8004518:	b9d8      	cbnz	r0, 8004552 <_svfiprintf_r+0xea>
 800451a:	06d0      	lsls	r0, r2, #27
 800451c:	bf44      	itt	mi
 800451e:	2320      	movmi	r3, #32
 8004520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004524:	0711      	lsls	r1, r2, #28
 8004526:	bf44      	itt	mi
 8004528:	232b      	movmi	r3, #43	@ 0x2b
 800452a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800452e:	f89a 3000 	ldrb.w	r3, [sl]
 8004532:	2b2a      	cmp	r3, #42	@ 0x2a
 8004534:	d015      	beq.n	8004562 <_svfiprintf_r+0xfa>
 8004536:	9a07      	ldr	r2, [sp, #28]
 8004538:	4654      	mov	r4, sl
 800453a:	2000      	movs	r0, #0
 800453c:	f04f 0c0a 	mov.w	ip, #10
 8004540:	4621      	mov	r1, r4
 8004542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004546:	3b30      	subs	r3, #48	@ 0x30
 8004548:	2b09      	cmp	r3, #9
 800454a:	d94b      	bls.n	80045e4 <_svfiprintf_r+0x17c>
 800454c:	b1b0      	cbz	r0, 800457c <_svfiprintf_r+0x114>
 800454e:	9207      	str	r2, [sp, #28]
 8004550:	e014      	b.n	800457c <_svfiprintf_r+0x114>
 8004552:	eba0 0308 	sub.w	r3, r0, r8
 8004556:	fa09 f303 	lsl.w	r3, r9, r3
 800455a:	4313      	orrs	r3, r2
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	46a2      	mov	sl, r4
 8004560:	e7d2      	b.n	8004508 <_svfiprintf_r+0xa0>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	1d19      	adds	r1, r3, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	9103      	str	r1, [sp, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfbb      	ittet	lt
 800456e:	425b      	neglt	r3, r3
 8004570:	f042 0202 	orrlt.w	r2, r2, #2
 8004574:	9307      	strge	r3, [sp, #28]
 8004576:	9307      	strlt	r3, [sp, #28]
 8004578:	bfb8      	it	lt
 800457a:	9204      	strlt	r2, [sp, #16]
 800457c:	7823      	ldrb	r3, [r4, #0]
 800457e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004580:	d10a      	bne.n	8004598 <_svfiprintf_r+0x130>
 8004582:	7863      	ldrb	r3, [r4, #1]
 8004584:	2b2a      	cmp	r3, #42	@ 0x2a
 8004586:	d132      	bne.n	80045ee <_svfiprintf_r+0x186>
 8004588:	9b03      	ldr	r3, [sp, #12]
 800458a:	1d1a      	adds	r2, r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	9203      	str	r2, [sp, #12]
 8004590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004594:	3402      	adds	r4, #2
 8004596:	9305      	str	r3, [sp, #20]
 8004598:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800465c <_svfiprintf_r+0x1f4>
 800459c:	7821      	ldrb	r1, [r4, #0]
 800459e:	2203      	movs	r2, #3
 80045a0:	4650      	mov	r0, sl
 80045a2:	f7fb fe1d 	bl	80001e0 <memchr>
 80045a6:	b138      	cbz	r0, 80045b8 <_svfiprintf_r+0x150>
 80045a8:	9b04      	ldr	r3, [sp, #16]
 80045aa:	eba0 000a 	sub.w	r0, r0, sl
 80045ae:	2240      	movs	r2, #64	@ 0x40
 80045b0:	4082      	lsls	r2, r0
 80045b2:	4313      	orrs	r3, r2
 80045b4:	3401      	adds	r4, #1
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045bc:	4824      	ldr	r0, [pc, #144]	@ (8004650 <_svfiprintf_r+0x1e8>)
 80045be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045c2:	2206      	movs	r2, #6
 80045c4:	f7fb fe0c 	bl	80001e0 <memchr>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d036      	beq.n	800463a <_svfiprintf_r+0x1d2>
 80045cc:	4b21      	ldr	r3, [pc, #132]	@ (8004654 <_svfiprintf_r+0x1ec>)
 80045ce:	bb1b      	cbnz	r3, 8004618 <_svfiprintf_r+0x1b0>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	3307      	adds	r3, #7
 80045d4:	f023 0307 	bic.w	r3, r3, #7
 80045d8:	3308      	adds	r3, #8
 80045da:	9303      	str	r3, [sp, #12]
 80045dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045de:	4433      	add	r3, r6
 80045e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e2:	e76a      	b.n	80044ba <_svfiprintf_r+0x52>
 80045e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045e8:	460c      	mov	r4, r1
 80045ea:	2001      	movs	r0, #1
 80045ec:	e7a8      	b.n	8004540 <_svfiprintf_r+0xd8>
 80045ee:	2300      	movs	r3, #0
 80045f0:	3401      	adds	r4, #1
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 0c0a 	mov.w	ip, #10
 80045fa:	4620      	mov	r0, r4
 80045fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004600:	3a30      	subs	r2, #48	@ 0x30
 8004602:	2a09      	cmp	r2, #9
 8004604:	d903      	bls.n	800460e <_svfiprintf_r+0x1a6>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0c6      	beq.n	8004598 <_svfiprintf_r+0x130>
 800460a:	9105      	str	r1, [sp, #20]
 800460c:	e7c4      	b.n	8004598 <_svfiprintf_r+0x130>
 800460e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004612:	4604      	mov	r4, r0
 8004614:	2301      	movs	r3, #1
 8004616:	e7f0      	b.n	80045fa <_svfiprintf_r+0x192>
 8004618:	ab03      	add	r3, sp, #12
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	462a      	mov	r2, r5
 800461e:	4b0e      	ldr	r3, [pc, #56]	@ (8004658 <_svfiprintf_r+0x1f0>)
 8004620:	a904      	add	r1, sp, #16
 8004622:	4638      	mov	r0, r7
 8004624:	f3af 8000 	nop.w
 8004628:	1c42      	adds	r2, r0, #1
 800462a:	4606      	mov	r6, r0
 800462c:	d1d6      	bne.n	80045dc <_svfiprintf_r+0x174>
 800462e:	89ab      	ldrh	r3, [r5, #12]
 8004630:	065b      	lsls	r3, r3, #25
 8004632:	f53f af2d 	bmi.w	8004490 <_svfiprintf_r+0x28>
 8004636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004638:	e72c      	b.n	8004494 <_svfiprintf_r+0x2c>
 800463a:	ab03      	add	r3, sp, #12
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	462a      	mov	r2, r5
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <_svfiprintf_r+0x1f0>)
 8004642:	a904      	add	r1, sp, #16
 8004644:	4638      	mov	r0, r7
 8004646:	f000 f91b 	bl	8004880 <_printf_i>
 800464a:	e7ed      	b.n	8004628 <_svfiprintf_r+0x1c0>
 800464c:	08004d34 	.word	0x08004d34
 8004650:	08004d3e 	.word	0x08004d3e
 8004654:	00000000 	.word	0x00000000
 8004658:	080043b1 	.word	0x080043b1
 800465c:	08004d3a 	.word	0x08004d3a

08004660 <sbrk_aligned>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0f      	ldr	r6, [pc, #60]	@ (80046a0 <sbrk_aligned+0x40>)
 8004664:	460c      	mov	r4, r1
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	4605      	mov	r5, r0
 800466a:	b911      	cbnz	r1, 8004672 <sbrk_aligned+0x12>
 800466c:	f000 fa7c 	bl	8004b68 <_sbrk_r>
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fa77 	bl	8004b68 <_sbrk_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d103      	bne.n	8004686 <sbrk_aligned+0x26>
 800467e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004682:	4620      	mov	r0, r4
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	1cc4      	adds	r4, r0, #3
 8004688:	f024 0403 	bic.w	r4, r4, #3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d0f8      	beq.n	8004682 <sbrk_aligned+0x22>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	4628      	mov	r0, r5
 8004694:	f000 fa68 	bl	8004b68 <_sbrk_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d1f2      	bne.n	8004682 <sbrk_aligned+0x22>
 800469c:	e7ef      	b.n	800467e <sbrk_aligned+0x1e>
 800469e:	bf00      	nop
 80046a0:	20000414 	.word	0x20000414

080046a4 <_malloc_r>:
 80046a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a8:	1ccd      	adds	r5, r1, #3
 80046aa:	f025 0503 	bic.w	r5, r5, #3
 80046ae:	3508      	adds	r5, #8
 80046b0:	2d0c      	cmp	r5, #12
 80046b2:	bf38      	it	cc
 80046b4:	250c      	movcc	r5, #12
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	4606      	mov	r6, r0
 80046ba:	db01      	blt.n	80046c0 <_malloc_r+0x1c>
 80046bc:	42a9      	cmp	r1, r5
 80046be:	d904      	bls.n	80046ca <_malloc_r+0x26>
 80046c0:	230c      	movs	r3, #12
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	2000      	movs	r0, #0
 80046c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047a0 <_malloc_r+0xfc>
 80046ce:	f000 f9f7 	bl	8004ac0 <__malloc_lock>
 80046d2:	f8d8 3000 	ldr.w	r3, [r8]
 80046d6:	461c      	mov	r4, r3
 80046d8:	bb44      	cbnz	r4, 800472c <_malloc_r+0x88>
 80046da:	4629      	mov	r1, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ffbf 	bl	8004660 <sbrk_aligned>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	4604      	mov	r4, r0
 80046e6:	d158      	bne.n	800479a <_malloc_r+0xf6>
 80046e8:	f8d8 4000 	ldr.w	r4, [r8]
 80046ec:	4627      	mov	r7, r4
 80046ee:	2f00      	cmp	r7, #0
 80046f0:	d143      	bne.n	800477a <_malloc_r+0xd6>
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d04b      	beq.n	800478e <_malloc_r+0xea>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	4639      	mov	r1, r7
 80046fa:	4630      	mov	r0, r6
 80046fc:	eb04 0903 	add.w	r9, r4, r3
 8004700:	f000 fa32 	bl	8004b68 <_sbrk_r>
 8004704:	4581      	cmp	r9, r0
 8004706:	d142      	bne.n	800478e <_malloc_r+0xea>
 8004708:	6821      	ldr	r1, [r4, #0]
 800470a:	1a6d      	subs	r5, r5, r1
 800470c:	4629      	mov	r1, r5
 800470e:	4630      	mov	r0, r6
 8004710:	f7ff ffa6 	bl	8004660 <sbrk_aligned>
 8004714:	3001      	adds	r0, #1
 8004716:	d03a      	beq.n	800478e <_malloc_r+0xea>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	442b      	add	r3, r5
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	f8d8 3000 	ldr.w	r3, [r8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	bb62      	cbnz	r2, 8004780 <_malloc_r+0xdc>
 8004726:	f8c8 7000 	str.w	r7, [r8]
 800472a:	e00f      	b.n	800474c <_malloc_r+0xa8>
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	1b52      	subs	r2, r2, r5
 8004730:	d420      	bmi.n	8004774 <_malloc_r+0xd0>
 8004732:	2a0b      	cmp	r2, #11
 8004734:	d917      	bls.n	8004766 <_malloc_r+0xc2>
 8004736:	1961      	adds	r1, r4, r5
 8004738:	42a3      	cmp	r3, r4
 800473a:	6025      	str	r5, [r4, #0]
 800473c:	bf18      	it	ne
 800473e:	6059      	strne	r1, [r3, #4]
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	bf08      	it	eq
 8004744:	f8c8 1000 	streq.w	r1, [r8]
 8004748:	5162      	str	r2, [r4, r5]
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	4630      	mov	r0, r6
 800474e:	f000 f9bd 	bl	8004acc <__malloc_unlock>
 8004752:	f104 000b 	add.w	r0, r4, #11
 8004756:	1d23      	adds	r3, r4, #4
 8004758:	f020 0007 	bic.w	r0, r0, #7
 800475c:	1ac2      	subs	r2, r0, r3
 800475e:	bf1c      	itt	ne
 8004760:	1a1b      	subne	r3, r3, r0
 8004762:	50a3      	strne	r3, [r4, r2]
 8004764:	e7af      	b.n	80046c6 <_malloc_r+0x22>
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	42a3      	cmp	r3, r4
 800476a:	bf0c      	ite	eq
 800476c:	f8c8 2000 	streq.w	r2, [r8]
 8004770:	605a      	strne	r2, [r3, #4]
 8004772:	e7eb      	b.n	800474c <_malloc_r+0xa8>
 8004774:	4623      	mov	r3, r4
 8004776:	6864      	ldr	r4, [r4, #4]
 8004778:	e7ae      	b.n	80046d8 <_malloc_r+0x34>
 800477a:	463c      	mov	r4, r7
 800477c:	687f      	ldr	r7, [r7, #4]
 800477e:	e7b6      	b.n	80046ee <_malloc_r+0x4a>
 8004780:	461a      	mov	r2, r3
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	d1fb      	bne.n	8004780 <_malloc_r+0xdc>
 8004788:	2300      	movs	r3, #0
 800478a:	6053      	str	r3, [r2, #4]
 800478c:	e7de      	b.n	800474c <_malloc_r+0xa8>
 800478e:	230c      	movs	r3, #12
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	4630      	mov	r0, r6
 8004794:	f000 f99a 	bl	8004acc <__malloc_unlock>
 8004798:	e794      	b.n	80046c4 <_malloc_r+0x20>
 800479a:	6005      	str	r5, [r0, #0]
 800479c:	e7d6      	b.n	800474c <_malloc_r+0xa8>
 800479e:	bf00      	nop
 80047a0:	20000418 	.word	0x20000418

080047a4 <_printf_common>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	4616      	mov	r6, r2
 80047aa:	4698      	mov	r8, r3
 80047ac:	688a      	ldr	r2, [r1, #8]
 80047ae:	690b      	ldr	r3, [r1, #16]
 80047b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bfb8      	it	lt
 80047b8:	4613      	movlt	r3, r2
 80047ba:	6033      	str	r3, [r6, #0]
 80047bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047c0:	4607      	mov	r7, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	b10a      	cbz	r2, 80047ca <_printf_common+0x26>
 80047c6:	3301      	adds	r3, #1
 80047c8:	6033      	str	r3, [r6, #0]
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	0699      	lsls	r1, r3, #26
 80047ce:	bf42      	ittt	mi
 80047d0:	6833      	ldrmi	r3, [r6, #0]
 80047d2:	3302      	addmi	r3, #2
 80047d4:	6033      	strmi	r3, [r6, #0]
 80047d6:	6825      	ldr	r5, [r4, #0]
 80047d8:	f015 0506 	ands.w	r5, r5, #6
 80047dc:	d106      	bne.n	80047ec <_printf_common+0x48>
 80047de:	f104 0a19 	add.w	sl, r4, #25
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	6832      	ldr	r2, [r6, #0]
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	42ab      	cmp	r3, r5
 80047ea:	dc26      	bgt.n	800483a <_printf_common+0x96>
 80047ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	3b00      	subs	r3, #0
 80047f4:	bf18      	it	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	0692      	lsls	r2, r2, #26
 80047fa:	d42b      	bmi.n	8004854 <_printf_common+0xb0>
 80047fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004800:	4641      	mov	r1, r8
 8004802:	4638      	mov	r0, r7
 8004804:	47c8      	blx	r9
 8004806:	3001      	adds	r0, #1
 8004808:	d01e      	beq.n	8004848 <_printf_common+0xa4>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	6922      	ldr	r2, [r4, #16]
 800480e:	f003 0306 	and.w	r3, r3, #6
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf02      	ittt	eq
 8004816:	68e5      	ldreq	r5, [r4, #12]
 8004818:	6833      	ldreq	r3, [r6, #0]
 800481a:	1aed      	subeq	r5, r5, r3
 800481c:	68a3      	ldr	r3, [r4, #8]
 800481e:	bf0c      	ite	eq
 8004820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004824:	2500      	movne	r5, #0
 8004826:	4293      	cmp	r3, r2
 8004828:	bfc4      	itt	gt
 800482a:	1a9b      	subgt	r3, r3, r2
 800482c:	18ed      	addgt	r5, r5, r3
 800482e:	2600      	movs	r6, #0
 8004830:	341a      	adds	r4, #26
 8004832:	42b5      	cmp	r5, r6
 8004834:	d11a      	bne.n	800486c <_printf_common+0xc8>
 8004836:	2000      	movs	r0, #0
 8004838:	e008      	b.n	800484c <_printf_common+0xa8>
 800483a:	2301      	movs	r3, #1
 800483c:	4652      	mov	r2, sl
 800483e:	4641      	mov	r1, r8
 8004840:	4638      	mov	r0, r7
 8004842:	47c8      	blx	r9
 8004844:	3001      	adds	r0, #1
 8004846:	d103      	bne.n	8004850 <_printf_common+0xac>
 8004848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004850:	3501      	adds	r5, #1
 8004852:	e7c6      	b.n	80047e2 <_printf_common+0x3e>
 8004854:	18e1      	adds	r1, r4, r3
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	2030      	movs	r0, #48	@ 0x30
 800485a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800485e:	4422      	add	r2, r4
 8004860:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004864:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004868:	3302      	adds	r3, #2
 800486a:	e7c7      	b.n	80047fc <_printf_common+0x58>
 800486c:	2301      	movs	r3, #1
 800486e:	4622      	mov	r2, r4
 8004870:	4641      	mov	r1, r8
 8004872:	4638      	mov	r0, r7
 8004874:	47c8      	blx	r9
 8004876:	3001      	adds	r0, #1
 8004878:	d0e6      	beq.n	8004848 <_printf_common+0xa4>
 800487a:	3601      	adds	r6, #1
 800487c:	e7d9      	b.n	8004832 <_printf_common+0x8e>
	...

08004880 <_printf_i>:
 8004880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	7e0f      	ldrb	r7, [r1, #24]
 8004886:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004888:	2f78      	cmp	r7, #120	@ 0x78
 800488a:	4691      	mov	r9, r2
 800488c:	4680      	mov	r8, r0
 800488e:	460c      	mov	r4, r1
 8004890:	469a      	mov	sl, r3
 8004892:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004896:	d807      	bhi.n	80048a8 <_printf_i+0x28>
 8004898:	2f62      	cmp	r7, #98	@ 0x62
 800489a:	d80a      	bhi.n	80048b2 <_printf_i+0x32>
 800489c:	2f00      	cmp	r7, #0
 800489e:	f000 80d2 	beq.w	8004a46 <_printf_i+0x1c6>
 80048a2:	2f58      	cmp	r7, #88	@ 0x58
 80048a4:	f000 80b9 	beq.w	8004a1a <_printf_i+0x19a>
 80048a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048b0:	e03a      	b.n	8004928 <_printf_i+0xa8>
 80048b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048b6:	2b15      	cmp	r3, #21
 80048b8:	d8f6      	bhi.n	80048a8 <_printf_i+0x28>
 80048ba:	a101      	add	r1, pc, #4	@ (adr r1, 80048c0 <_printf_i+0x40>)
 80048bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c0:	08004919 	.word	0x08004919
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080048a9 	.word	0x080048a9
 80048cc:	080048a9 	.word	0x080048a9
 80048d0:	080048a9 	.word	0x080048a9
 80048d4:	080048a9 	.word	0x080048a9
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	080048a9 	.word	0x080048a9
 80048e0:	080048a9 	.word	0x080048a9
 80048e4:	080048a9 	.word	0x080048a9
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	08004a2d 	.word	0x08004a2d
 80048f0:	08004957 	.word	0x08004957
 80048f4:	080049e7 	.word	0x080049e7
 80048f8:	080048a9 	.word	0x080048a9
 80048fc:	080048a9 	.word	0x080048a9
 8004900:	08004a4f 	.word	0x08004a4f
 8004904:	080048a9 	.word	0x080048a9
 8004908:	08004957 	.word	0x08004957
 800490c:	080048a9 	.word	0x080048a9
 8004910:	080048a9 	.word	0x080048a9
 8004914:	080049ef 	.word	0x080049ef
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6032      	str	r2, [r6, #0]
 8004920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004924:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004928:	2301      	movs	r3, #1
 800492a:	e09d      	b.n	8004a68 <_printf_i+0x1e8>
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1d19      	adds	r1, r3, #4
 8004932:	6031      	str	r1, [r6, #0]
 8004934:	0606      	lsls	r6, r0, #24
 8004936:	d501      	bpl.n	800493c <_printf_i+0xbc>
 8004938:	681d      	ldr	r5, [r3, #0]
 800493a:	e003      	b.n	8004944 <_printf_i+0xc4>
 800493c:	0645      	lsls	r5, r0, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0xb8>
 8004940:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004944:	2d00      	cmp	r5, #0
 8004946:	da03      	bge.n	8004950 <_printf_i+0xd0>
 8004948:	232d      	movs	r3, #45	@ 0x2d
 800494a:	426d      	negs	r5, r5
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004950:	4859      	ldr	r0, [pc, #356]	@ (8004ab8 <_printf_i+0x238>)
 8004952:	230a      	movs	r3, #10
 8004954:	e011      	b.n	800497a <_printf_i+0xfa>
 8004956:	6821      	ldr	r1, [r4, #0]
 8004958:	6833      	ldr	r3, [r6, #0]
 800495a:	0608      	lsls	r0, r1, #24
 800495c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004960:	d402      	bmi.n	8004968 <_printf_i+0xe8>
 8004962:	0649      	lsls	r1, r1, #25
 8004964:	bf48      	it	mi
 8004966:	b2ad      	uxthmi	r5, r5
 8004968:	2f6f      	cmp	r7, #111	@ 0x6f
 800496a:	4853      	ldr	r0, [pc, #332]	@ (8004ab8 <_printf_i+0x238>)
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	bf14      	ite	ne
 8004970:	230a      	movne	r3, #10
 8004972:	2308      	moveq	r3, #8
 8004974:	2100      	movs	r1, #0
 8004976:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800497a:	6866      	ldr	r6, [r4, #4]
 800497c:	60a6      	str	r6, [r4, #8]
 800497e:	2e00      	cmp	r6, #0
 8004980:	bfa2      	ittt	ge
 8004982:	6821      	ldrge	r1, [r4, #0]
 8004984:	f021 0104 	bicge.w	r1, r1, #4
 8004988:	6021      	strge	r1, [r4, #0]
 800498a:	b90d      	cbnz	r5, 8004990 <_printf_i+0x110>
 800498c:	2e00      	cmp	r6, #0
 800498e:	d04b      	beq.n	8004a28 <_printf_i+0x1a8>
 8004990:	4616      	mov	r6, r2
 8004992:	fbb5 f1f3 	udiv	r1, r5, r3
 8004996:	fb03 5711 	mls	r7, r3, r1, r5
 800499a:	5dc7      	ldrb	r7, [r0, r7]
 800499c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049a0:	462f      	mov	r7, r5
 80049a2:	42bb      	cmp	r3, r7
 80049a4:	460d      	mov	r5, r1
 80049a6:	d9f4      	bls.n	8004992 <_printf_i+0x112>
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d10b      	bne.n	80049c4 <_printf_i+0x144>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07df      	lsls	r7, r3, #31
 80049b0:	d508      	bpl.n	80049c4 <_printf_i+0x144>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	4299      	cmp	r1, r3
 80049b8:	bfde      	ittt	le
 80049ba:	2330      	movle	r3, #48	@ 0x30
 80049bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80049c4:	1b92      	subs	r2, r2, r6
 80049c6:	6122      	str	r2, [r4, #16]
 80049c8:	f8cd a000 	str.w	sl, [sp]
 80049cc:	464b      	mov	r3, r9
 80049ce:	aa03      	add	r2, sp, #12
 80049d0:	4621      	mov	r1, r4
 80049d2:	4640      	mov	r0, r8
 80049d4:	f7ff fee6 	bl	80047a4 <_printf_common>
 80049d8:	3001      	adds	r0, #1
 80049da:	d14a      	bne.n	8004a72 <_printf_i+0x1f2>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049e0:	b004      	add	sp, #16
 80049e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	f043 0320 	orr.w	r3, r3, #32
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	4833      	ldr	r0, [pc, #204]	@ (8004abc <_printf_i+0x23c>)
 80049f0:	2778      	movs	r7, #120	@ 0x78
 80049f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	6831      	ldr	r1, [r6, #0]
 80049fa:	061f      	lsls	r7, r3, #24
 80049fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a00:	d402      	bmi.n	8004a08 <_printf_i+0x188>
 8004a02:	065f      	lsls	r7, r3, #25
 8004a04:	bf48      	it	mi
 8004a06:	b2ad      	uxthmi	r5, r5
 8004a08:	6031      	str	r1, [r6, #0]
 8004a0a:	07d9      	lsls	r1, r3, #31
 8004a0c:	bf44      	itt	mi
 8004a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a12:	6023      	strmi	r3, [r4, #0]
 8004a14:	b11d      	cbz	r5, 8004a1e <_printf_i+0x19e>
 8004a16:	2310      	movs	r3, #16
 8004a18:	e7ac      	b.n	8004974 <_printf_i+0xf4>
 8004a1a:	4827      	ldr	r0, [pc, #156]	@ (8004ab8 <_printf_i+0x238>)
 8004a1c:	e7e9      	b.n	80049f2 <_printf_i+0x172>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f023 0320 	bic.w	r3, r3, #32
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	e7f6      	b.n	8004a16 <_printf_i+0x196>
 8004a28:	4616      	mov	r6, r2
 8004a2a:	e7bd      	b.n	80049a8 <_printf_i+0x128>
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	6825      	ldr	r5, [r4, #0]
 8004a30:	6961      	ldr	r1, [r4, #20]
 8004a32:	1d18      	adds	r0, r3, #4
 8004a34:	6030      	str	r0, [r6, #0]
 8004a36:	062e      	lsls	r6, r5, #24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	d501      	bpl.n	8004a40 <_printf_i+0x1c0>
 8004a3c:	6019      	str	r1, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <_printf_i+0x1c6>
 8004a40:	0668      	lsls	r0, r5, #25
 8004a42:	d5fb      	bpl.n	8004a3c <_printf_i+0x1bc>
 8004a44:	8019      	strh	r1, [r3, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	4616      	mov	r6, r2
 8004a4c:	e7bc      	b.n	80049c8 <_printf_i+0x148>
 8004a4e:	6833      	ldr	r3, [r6, #0]
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	6032      	str	r2, [r6, #0]
 8004a54:	681e      	ldr	r6, [r3, #0]
 8004a56:	6862      	ldr	r2, [r4, #4]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7fb fbc0 	bl	80001e0 <memchr>
 8004a60:	b108      	cbz	r0, 8004a66 <_printf_i+0x1e6>
 8004a62:	1b80      	subs	r0, r0, r6
 8004a64:	6060      	str	r0, [r4, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a70:	e7aa      	b.n	80049c8 <_printf_i+0x148>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	4632      	mov	r2, r6
 8004a76:	4649      	mov	r1, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	47d0      	blx	sl
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d0ad      	beq.n	80049dc <_printf_i+0x15c>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	079b      	lsls	r3, r3, #30
 8004a84:	d413      	bmi.n	8004aae <_printf_i+0x22e>
 8004a86:	68e0      	ldr	r0, [r4, #12]
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	bfb8      	it	lt
 8004a8e:	4618      	movlt	r0, r3
 8004a90:	e7a6      	b.n	80049e0 <_printf_i+0x160>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	4640      	mov	r0, r8
 8004a9a:	47d0      	blx	sl
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d09d      	beq.n	80049dc <_printf_i+0x15c>
 8004aa0:	3501      	adds	r5, #1
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	9903      	ldr	r1, [sp, #12]
 8004aa6:	1a5b      	subs	r3, r3, r1
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dcf2      	bgt.n	8004a92 <_printf_i+0x212>
 8004aac:	e7eb      	b.n	8004a86 <_printf_i+0x206>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	f104 0619 	add.w	r6, r4, #25
 8004ab4:	e7f5      	b.n	8004aa2 <_printf_i+0x222>
 8004ab6:	bf00      	nop
 8004ab8:	08004d45 	.word	0x08004d45
 8004abc:	08004d56 	.word	0x08004d56

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	@ (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f7ff bc73 	b.w	80043ac <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000410 	.word	0x20000410

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	@ (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f7ff bc6e 	b.w	80043ae <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000410 	.word	0x20000410

08004ad8 <_realloc_r>:
 8004ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004adc:	4680      	mov	r8, r0
 8004ade:	4615      	mov	r5, r2
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	b921      	cbnz	r1, 8004aee <_realloc_r+0x16>
 8004ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae8:	4611      	mov	r1, r2
 8004aea:	f7ff bddb 	b.w	80046a4 <_malloc_r>
 8004aee:	b92a      	cbnz	r2, 8004afc <_realloc_r+0x24>
 8004af0:	f000 f858 	bl	8004ba4 <_free_r>
 8004af4:	2400      	movs	r4, #0
 8004af6:	4620      	mov	r0, r4
 8004af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004afc:	f000 f89c 	bl	8004c38 <_malloc_usable_size_r>
 8004b00:	4285      	cmp	r5, r0
 8004b02:	4606      	mov	r6, r0
 8004b04:	d802      	bhi.n	8004b0c <_realloc_r+0x34>
 8004b06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b0a:	d8f4      	bhi.n	8004af6 <_realloc_r+0x1e>
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f7ff fdc8 	bl	80046a4 <_malloc_r>
 8004b14:	4607      	mov	r7, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0ec      	beq.n	8004af4 <_realloc_r+0x1c>
 8004b1a:	42b5      	cmp	r5, r6
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4621      	mov	r1, r4
 8004b20:	bf28      	it	cs
 8004b22:	4632      	movcs	r2, r6
 8004b24:	f000 f830 	bl	8004b88 <memcpy>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f000 f83a 	bl	8004ba4 <_free_r>
 8004b30:	463c      	mov	r4, r7
 8004b32:	e7e0      	b.n	8004af6 <_realloc_r+0x1e>

08004b34 <memmove>:
 8004b34:	4288      	cmp	r0, r1
 8004b36:	b510      	push	{r4, lr}
 8004b38:	eb01 0402 	add.w	r4, r1, r2
 8004b3c:	d902      	bls.n	8004b44 <memmove+0x10>
 8004b3e:	4284      	cmp	r4, r0
 8004b40:	4623      	mov	r3, r4
 8004b42:	d807      	bhi.n	8004b54 <memmove+0x20>
 8004b44:	1e43      	subs	r3, r0, #1
 8004b46:	42a1      	cmp	r1, r4
 8004b48:	d008      	beq.n	8004b5c <memmove+0x28>
 8004b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b52:	e7f8      	b.n	8004b46 <memmove+0x12>
 8004b54:	4402      	add	r2, r0
 8004b56:	4601      	mov	r1, r0
 8004b58:	428a      	cmp	r2, r1
 8004b5a:	d100      	bne.n	8004b5e <memmove+0x2a>
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b66:	e7f7      	b.n	8004b58 <memmove+0x24>

08004b68 <_sbrk_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	@ (8004b84 <_sbrk_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc f848 	bl	8000c08 <_sbrk>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_sbrk_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_sbrk_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	2000041c 	.word	0x2000041c

08004b88 <memcpy>:
 8004b88:	440a      	add	r2, r1
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b90:	d100      	bne.n	8004b94 <memcpy+0xc>
 8004b92:	4770      	bx	lr
 8004b94:	b510      	push	{r4, lr}
 8004b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	d1f9      	bne.n	8004b96 <memcpy+0xe>
 8004ba2:	bd10      	pop	{r4, pc}

08004ba4 <_free_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d041      	beq.n	8004c30 <_free_r+0x8c>
 8004bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb0:	1f0c      	subs	r4, r1, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfb8      	it	lt
 8004bb6:	18e4      	addlt	r4, r4, r3
 8004bb8:	f7ff ff82 	bl	8004ac0 <__malloc_lock>
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <_free_r+0x90>)
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	b933      	cbnz	r3, 8004bd0 <_free_r+0x2c>
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	6014      	str	r4, [r2, #0]
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bcc:	f7ff bf7e 	b.w	8004acc <__malloc_unlock>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d908      	bls.n	8004be6 <_free_r+0x42>
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	1821      	adds	r1, r4, r0
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	bf01      	itttt	eq
 8004bdc:	6819      	ldreq	r1, [r3, #0]
 8004bde:	685b      	ldreq	r3, [r3, #4]
 8004be0:	1809      	addeq	r1, r1, r0
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	e7ed      	b.n	8004bc2 <_free_r+0x1e>
 8004be6:	461a      	mov	r2, r3
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b10b      	cbz	r3, 8004bf0 <_free_r+0x4c>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d9fa      	bls.n	8004be6 <_free_r+0x42>
 8004bf0:	6811      	ldr	r1, [r2, #0]
 8004bf2:	1850      	adds	r0, r2, r1
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d10b      	bne.n	8004c10 <_free_r+0x6c>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	1850      	adds	r0, r2, r1
 8004bfe:	4283      	cmp	r3, r0
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	d1e0      	bne.n	8004bc6 <_free_r+0x22>
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	6053      	str	r3, [r2, #4]
 8004c0a:	4408      	add	r0, r1
 8004c0c:	6010      	str	r0, [r2, #0]
 8004c0e:	e7da      	b.n	8004bc6 <_free_r+0x22>
 8004c10:	d902      	bls.n	8004c18 <_free_r+0x74>
 8004c12:	230c      	movs	r3, #12
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	e7d6      	b.n	8004bc6 <_free_r+0x22>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	1821      	adds	r1, r4, r0
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	bf04      	itt	eq
 8004c20:	6819      	ldreq	r1, [r3, #0]
 8004c22:	685b      	ldreq	r3, [r3, #4]
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	bf04      	itt	eq
 8004c28:	1809      	addeq	r1, r1, r0
 8004c2a:	6021      	streq	r1, [r4, #0]
 8004c2c:	6054      	str	r4, [r2, #4]
 8004c2e:	e7ca      	b.n	8004bc6 <_free_r+0x22>
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	bf00      	nop
 8004c34:	20000418 	.word	0x20000418

08004c38 <_malloc_usable_size_r>:
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f18      	subs	r0, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfbc      	itt	lt
 8004c42:	580b      	ldrlt	r3, [r1, r0]
 8004c44:	18c0      	addlt	r0, r0, r3
 8004c46:	4770      	bx	lr

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr
