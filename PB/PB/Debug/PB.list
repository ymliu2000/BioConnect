
PB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f34  08004f34  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f3c  08004f3c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f40  08004f40  00005f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000005c  08004fa0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08004fa0  000063e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c28f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df9  00000000  00000000  0001231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00014118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b1  00000000  00000000  00014b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d11  00000000  00000000  000152d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2f0  00000000  00000000  0003afea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7c22  00000000  00000000  000472da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012eefc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d64  00000000  00000000  0012ef40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00131ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004de0 	.word	0x08004de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004de0 	.word	0x08004de0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // 接收采集板数据
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a17      	ldr	r2, [pc, #92]	@ (80005dc <HAL_UART_RxCpltCallback+0x6c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d111      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0x36>
    {
        rxBuffer1[63] = '\0';
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <HAL_UART_RxCpltCallback+0x70>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        ProcessCollectorData(rxBuffer1);
 800058a:	4815      	ldr	r0, [pc, #84]	@ (80005e0 <HAL_UART_RxCpltCallback+0x70>)
 800058c:	f000 f832 	bl	80005f4 <ProcessCollectorData>

        memset(rxBuffer1, 0, sizeof(rxBuffer1));
 8000590:	2240      	movs	r2, #64	@ 0x40
 8000592:	2100      	movs	r1, #0
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <HAL_UART_RxCpltCallback+0x70>)
 8000596:	f003 ffa3 	bl	80044e0 <memset>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer1, sizeof(rxBuffer1) - 1);
 800059a:	223f      	movs	r2, #63	@ 0x3f
 800059c:	4910      	ldr	r1, [pc, #64]	@ (80005e0 <HAL_UART_RxCpltCallback+0x70>)
 800059e:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <HAL_UART_RxCpltCallback+0x74>)
 80005a0:	f002 fc5a 	bl	8002e58 <HAL_UART_Receive_IT>
        ProcessReceivedCommand(rxBuffer3);

        memset(rxBuffer3, 0, sizeof(rxBuffer3));
        HAL_UART_Receive_IT(&huart3, (uint8_t *)rxBuffer3, sizeof(rxBuffer3) - 1);
    }
}
 80005a4:	e015      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x62>
    else if (huart->Instance == USART3) // 接收采集板命令反馈
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <HAL_UART_RxCpltCallback+0x78>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d110      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x62>
        rxBuffer3[63] = '\0';
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        ProcessReceivedCommand(rxBuffer3);
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 80005ba:	f000 f83d 	bl	8000638 <ProcessReceivedCommand>
        memset(rxBuffer3, 0, sizeof(rxBuffer3));
 80005be:	2240      	movs	r2, #64	@ 0x40
 80005c0:	2100      	movs	r1, #0
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 80005c4:	f003 ff8c 	bl	80044e0 <memset>
        HAL_UART_Receive_IT(&huart3, (uint8_t *)rxBuffer3, sizeof(rxBuffer3) - 1);
 80005c8:	223f      	movs	r2, #63	@ 0x3f
 80005ca:	4908      	ldr	r1, [pc, #32]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <HAL_UART_RxCpltCallback+0x80>)
 80005ce:	f002 fc43 	bl	8002e58 <HAL_UART_Receive_IT>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40013800 	.word	0x40013800
 80005e0:	20000210 	.word	0x20000210
 80005e4:	20000078 	.word	0x20000078
 80005e8:	40004800 	.word	0x40004800
 80005ec:	20000250 	.word	0x20000250
 80005f0:	20000188 	.word	0x20000188

080005f4 <ProcessCollectorData>:

void ProcessCollectorData(char* line)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b092      	sub	sp, #72	@ 0x48
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    char dbg[64];
    sprintf(dbg, "Recv DATA: %s\r\n", line);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	490b      	ldr	r1, [pc, #44]	@ (8000630 <ProcessCollectorData+0x3c>)
 8000604:	4618      	mov	r0, r3
 8000606:	f003 ff39 	bl	800447c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f107 0108 	add.w	r1, r7, #8
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <ProcessCollectorData+0x40>)
 8000622:	f002 fb8f 	bl	8002d44 <HAL_UART_Transmit>
}
 8000626:	bf00      	nop
 8000628:	3748      	adds	r7, #72	@ 0x48
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08004df8 	.word	0x08004df8
 8000634:	20000100 	.word	0x20000100

08000638 <ProcessReceivedCommand>:

void ProcessReceivedCommand(char* cmd)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	@ 0x48
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    char dbg[64];
    if (strncmp(cmd, CMD_START, strlen(CMD_START)) == 0)
 8000640:	2209      	movs	r2, #9
 8000642:	491b      	ldr	r1, [pc, #108]	@ (80006b0 <ProcessReceivedCommand+0x78>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f003 ff39 	bl	80044bc <strncmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d106      	bne.n	800065e <ProcessReceivedCommand+0x26>
    {
        sprintf(dbg, "Recv ACK: START\r\n");
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4917      	ldr	r1, [pc, #92]	@ (80006b4 <ProcessReceivedCommand+0x7c>)
 8000656:	4618      	mov	r0, r3
 8000658:	f003 ff10 	bl	800447c <siprintf>
 800065c:	e015      	b.n	800068a <ProcessReceivedCommand+0x52>
    }
    else if (strncmp(cmd, CMD_STOP, strlen(CMD_STOP)) == 0)
 800065e:	2208      	movs	r2, #8
 8000660:	4915      	ldr	r1, [pc, #84]	@ (80006b8 <ProcessReceivedCommand+0x80>)
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f003 ff2a 	bl	80044bc <strncmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <ProcessReceivedCommand+0x44>
    {
        sprintf(dbg, "Recv ACK: STOP\r\n");
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4912      	ldr	r1, [pc, #72]	@ (80006bc <ProcessReceivedCommand+0x84>)
 8000674:	4618      	mov	r0, r3
 8000676:	f003 ff01 	bl	800447c <siprintf>
 800067a:	e006      	b.n	800068a <ProcessReceivedCommand+0x52>
    }
    else
    {
        sprintf(dbg, "Unknown CMD: %s\r\n", cmd);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	490f      	ldr	r1, [pc, #60]	@ (80006c0 <ProcessReceivedCommand+0x88>)
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fef9 	bl	800447c <siprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 0108 	add.w	r1, r7, #8
 800069c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <ProcessReceivedCommand+0x8c>)
 80006a2:	f002 fb4f 	bl	8002d44 <HAL_UART_Transmit>
}
 80006a6:	bf00      	nop
 80006a8:	3748      	adds	r7, #72	@ 0x48
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08004e08 	.word	0x08004e08
 80006b4:	08004e14 	.word	0x08004e14
 80006b8:	08004e28 	.word	0x08004e28
 80006bc:	08004e34 	.word	0x08004e34
 80006c0:	08004e48 	.word	0x08004e48
 80006c4:	20000100 	.word	0x20000100

080006c8 <SendStartCmd>:

void SendStartCmd(void)
{
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
    char cmd[] = "CMD:START\r\n";
 80006ce:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SendStartCmd+0x5c>)
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fd76 	bl	80001d0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	f107 0114 	add.w	r1, r7, #20
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <SendStartCmd+0x60>)
 80006f2:	f002 fb27 	bl	8002d44 <HAL_UART_Transmit>

    char dbg[] = "Send CMD: START\r\n";
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <SendStartCmd+0x64>)
 80006f8:	463c      	mov	r4, r7
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000704:	463b      	mov	r3, r7
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fd62 	bl	80001d0 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	4639      	mov	r1, r7
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <SendStartCmd+0x68>)
 8000718:	f002 fb14 	bl	8002d44 <HAL_UART_Transmit>
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bdb0      	pop	{r4, r5, r7, pc}
 8000724:	08004e5c 	.word	0x08004e5c
 8000728:	20000078 	.word	0x20000078
 800072c:	08004e68 	.word	0x08004e68
 8000730:	20000100 	.word	0x20000100

08000734 <SendStopCmd>:

void SendStopCmd(void)
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
    char cmd[] = "CMD:STOP\r\n";
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <SendStopCmd+0x64>)
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	ca07      	ldmia	r2, {r0, r1, r2}
 8000742:	c303      	stmia	r3!, {r0, r1}
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	3302      	adds	r3, #2
 8000748:	0c12      	lsrs	r2, r2, #16
 800074a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd3d 	bl	80001d0 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	f107 0114 	add.w	r1, r7, #20
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000762:	480e      	ldr	r0, [pc, #56]	@ (800079c <SendStopCmd+0x68>)
 8000764:	f002 faee 	bl	8002d44 <HAL_UART_Transmit>

    char dbg[] = "Send CMD: STOP\r\n";
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <SendStopCmd+0x6c>)
 800076a:	463c      	mov	r4, r7
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	682b      	ldr	r3, [r5, #0]
 8000774:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd29 	bl	80001d0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	4639      	mov	r1, r7
 8000784:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000788:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <SendStopCmd+0x70>)
 800078a:	f002 fadb 	bl	8002d44 <HAL_UART_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bdb0      	pop	{r4, r5, r7, pc}
 8000796:	bf00      	nop
 8000798:	08004e7c 	.word	0x08004e7c
 800079c:	20000078 	.word	0x20000078
 80007a0:	08004e88 	.word	0x08004e88
 80007a4:	20000100 	.word	0x20000100

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
    HAL_Init();
 80007ae:	f000 fb56 	bl	8000e5e <HAL_Init>
    SystemClock_Config();
 80007b2:	f000 f867 	bl	8000884 <SystemClock_Config>

    MX_GPIO_Init();
 80007b6:	f000 f935 	bl	8000a24 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80007ba:	f000 f8b5 	bl	8000928 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 80007be:	f000 f8dd 	bl	800097c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 80007c2:	f000 f905 	bl	80009d0 <MX_USART3_UART_Init>

    memset(rxBuffer1, 0, sizeof(rxBuffer1));
 80007c6:	2240      	movs	r2, #64	@ 0x40
 80007c8:	2100      	movs	r1, #0
 80007ca:	4826      	ldr	r0, [pc, #152]	@ (8000864 <main+0xbc>)
 80007cc:	f003 fe88 	bl	80044e0 <memset>
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer1, sizeof(rxBuffer1) - 1);
 80007d0:	223f      	movs	r2, #63	@ 0x3f
 80007d2:	4924      	ldr	r1, [pc, #144]	@ (8000864 <main+0xbc>)
 80007d4:	4824      	ldr	r0, [pc, #144]	@ (8000868 <main+0xc0>)
 80007d6:	f002 fb3f 	bl	8002e58 <HAL_UART_Receive_IT>

    memset(rxBuffer3, 0, sizeof(rxBuffer3));
 80007da:	2240      	movs	r2, #64	@ 0x40
 80007dc:	2100      	movs	r1, #0
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <main+0xc4>)
 80007e0:	f003 fe7e 	bl	80044e0 <memset>
    HAL_UART_Receive_IT(&huart3, (uint8_t*)rxBuffer3, sizeof(rxBuffer3) - 1);
 80007e4:	223f      	movs	r2, #63	@ 0x3f
 80007e6:	4921      	ldr	r1, [pc, #132]	@ (800086c <main+0xc4>)
 80007e8:	4821      	ldr	r0, [pc, #132]	@ (8000870 <main+0xc8>)
 80007ea:	f002 fb35 	bl	8002e58 <HAL_UART_Receive_IT>

    char initMsg[] = "Processing Board Ready.\r\n";
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <main+0xcc>)
 80007f0:	463c      	mov	r4, r7
 80007f2:	461d      	mov	r5, r3
 80007f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fc:	c403      	stmia	r4!, {r0, r1}
 80007fe:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)initMsg, strlen(initMsg), HAL_MAX_DELAY);
 8000800:	463b      	mov	r3, r7
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	4639      	mov	r1, r7
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000812:	4819      	ldr	r0, [pc, #100]	@ (8000878 <main+0xd0>)
 8000814:	f002 fa96 	bl	8002d44 <HAL_UART_Transmit>

    while (1)
    {
        uint32_t current_time = HAL_GetTick();
 8000818:	f000 fb8a 	bl	8000f30 <HAL_GetTick>
 800081c:	61f8      	str	r0, [r7, #28]
        if (current_time - last_command_time >= 5000)
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <main+0xd4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	f241 3287 	movw	r2, #4999	@ 0x1387
 800082a:	4293      	cmp	r3, r2
 800082c:	d915      	bls.n	800085a <main+0xb2>
        {
            if (is_working)
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <main+0xd8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <main+0x94>
            {
                SendStopCmd();
 8000836:	f7ff ff7d 	bl	8000734 <SendStopCmd>
 800083a:	e001      	b.n	8000840 <main+0x98>
            }
            else
            {
                SendStartCmd();
 800083c:	f7ff ff44 	bl	80006c8 <SendStartCmd>
            }
            is_working = !is_working;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <main+0xd8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <main+0xd8>)
 8000852:	701a      	strb	r2, [r3, #0]
            last_command_time = current_time;
 8000854:	4a09      	ldr	r2, [pc, #36]	@ (800087c <main+0xd4>)
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	6013      	str	r3, [r2, #0]
        }
        HAL_Delay(100);
 800085a:	2064      	movs	r0, #100	@ 0x64
 800085c:	f000 fb74 	bl	8000f48 <HAL_Delay>
    {
 8000860:	e7da      	b.n	8000818 <main+0x70>
 8000862:	bf00      	nop
 8000864:	20000210 	.word	0x20000210
 8000868:	20000078 	.word	0x20000078
 800086c:	20000250 	.word	0x20000250
 8000870:	20000188 	.word	0x20000188
 8000874:	08004e9c 	.word	0x08004e9c
 8000878:	20000100 	.word	0x20000100
 800087c:	20000294 	.word	0x20000294
 8000880:	20000290 	.word	0x20000290

08000884 <SystemClock_Config>:
/* USER CODE END 4 */



/* System Clock Configuration */
void SystemClock_Config(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	@ 0x58
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2244      	movs	r2, #68	@ 0x44
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fe24 	bl	80044e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80008a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008aa:	f000 feeb 	bl	8001684 <HAL_PWREx_ControlVoltageScaling>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x34>
    Error_Handler();
 80008b4:	f000 f8f4 	bl	8000aa0 <Error_Handler>
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008b8:	2310      	movs	r3, #16
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008c4:	2360      	movs	r3, #96	@ 0x60
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008cc:	2301      	movs	r3, #1
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008d4:	2328      	movs	r3, #40	@ 0x28
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d8:	2307      	movs	r3, #7
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 ff21 	bl	8001730 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x74>
    Error_Handler();
 80008f4:	f000 f8d4 	bl	8000aa0 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800090c:	463b      	mov	r3, r7
 800090e:	2104      	movs	r1, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fae9 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x9c>
    Error_Handler();
 800091c:	f000 f8c0 	bl	8000aa0 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3758      	adds	r7, #88	@ 0x58
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <MX_USART1_UART_Init>:

/* USART1 Initialization */
static void MX_USART1_UART_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f002 f9a2 	bl	8002ca8 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
    Error_Handler();
 800096a:	f000 f899 	bl	8000aa0 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000078 	.word	0x20000078
 8000978:	40013800 	.word	0x40013800

0800097c <MX_USART2_UART_Init>:

/* USART2 Initialization */
static void MX_USART2_UART_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f002 f978 	bl	8002ca8 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80009be:	f000 f86f 	bl	8000aa0 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000100 	.word	0x20000100
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_USART3_UART_Init>:

/* USART3 Initialization */
static void MX_USART3_UART_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <MX_USART3_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART3_UART_Init+0x4c>)
 8000a08:	f002 f94e 	bl	8002ca8 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8000a12:	f000 f845 	bl	8000aa0 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000188 	.word	0x20000188
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_GPIO_Init+0x78>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED OFF
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f000 fdc7 	bl	8001604 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a76:	2320      	movs	r3, #32
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f000 fc0e 	bl	80012b0 <HAL_GPIO_Init>
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <Error_Handler>:

void Error_Handler(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq(); // 禁用中断，防止错误扩散
  while (1) {
    // 错误指示：闪烁板载 LED (PA5)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aae:	f000 fdc1 	bl	8001634 <HAL_GPIO_TogglePin>
    HAL_Delay(500); // 500 毫秒闪烁
 8000ab2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab6:	f000 fa47 	bl	8000f48 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000aba:	bf00      	nop
 8000abc:	e7f4      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0b0      	sub	sp, #192	@ 0xc0
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	2288      	movs	r2, #136	@ 0x88
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fcd9 	bl	80044e0 <memset>
  if(huart->Instance==USART1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a6b      	ldr	r2, [pc, #428]	@ (8000ce0 <HAL_UART_MspInit+0x1d8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d145      	bne.n	8000bc4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fbf3 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ffa6 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b54:	4b63      	ldr	r3, [pc, #396]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b58:	4a62      	ldr	r2, [pc, #392]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b60:	4b60      	ldr	r3, [pc, #384]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a5c      	ldr	r2, [pc, #368]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b78:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f000 fb7f 	bl	80012b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0); // Adjusted priority
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2025      	movs	r0, #37	@ 0x25
 8000bb8:	f000 fac5 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bbc:	2025      	movs	r0, #37	@ 0x25
 8000bbe:	f000 fade 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc2:	e089      	b.n	8000cd8 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a47      	ldr	r2, [pc, #284]	@ (8000ce8 <HAL_UART_MspInit+0x1e0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d13c      	bne.n	8000c48 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fba8 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000be6:	f7ff ff5b 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a3d      	ldr	r2, [pc, #244]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a37      	ldr	r2, [pc, #220]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c32:	2307      	movs	r3, #7
 8000c34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c42:	f000 fb35 	bl	80012b0 <HAL_GPIO_Init>
}
 8000c46:	e047      	b.n	8000cd8 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <HAL_UART_MspInit+0x1e4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d142      	bne.n	8000cd8 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c52:	2304      	movs	r3, #4
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fb66 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0x166>
      Error_Handler();
 8000c6a:	f7ff ff19 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <HAL_UART_MspInit+0x1dc>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c9e:	2330      	movs	r3, #48	@ 0x30
 8000ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <HAL_UART_MspInit+0x1e8>)
 8000cc4:	f000 faf4 	bl	80012b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0); // Highest priority
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2027      	movs	r0, #39	@ 0x27
 8000cce:	f000 fa3a 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd2:	2027      	movs	r0, #39	@ 0x27
 8000cd4:	f000 fa53 	bl	800117e <HAL_NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	37c0      	adds	r7, #192	@ 0xc0
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	40004800 	.word	0x40004800
 8000cf0:	48000800 	.word	0x48000800

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f8dd 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <USART1_IRQHandler+0x10>)
 8000d5a:	f002 f8c9 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000078 	.word	0x20000078

08000d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <USART3_IRQHandler+0x10>)
 8000d6e:	f002 f8bf 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000188 	.word	0x20000188

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f003 fba0 	bl	80044f0 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20018000 	.word	0x20018000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000298 	.word	0x20000298
 8000de4:	200003e8 	.word	0x200003e8

08000de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	@ (8000e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e58 <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f003 fb5f 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3e:	f7ff fcb3 	bl	80007a8 <main>

08000e42 <LoopForever>:

LoopForever:
    b LoopForever
 8000e42:	e7fe      	b.n	8000e42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	08004f44 	.word	0x08004f44
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	200003e8 	.word	0x200003e8

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>

08000e5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f961 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f80e 	bl	8000e90 <HAL_InitTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e001      	b.n	8000e84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e80:	f7ff fe1e 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_InitTick+0x70>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f96d 	bl	800119a <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d809      	bhi.n	8000ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed4:	f000 f937 	bl	8001146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_InitTick+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e001      	b.n	8000ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	2000029c 	.word	0x2000029c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000029c 	.word	0x2000029c

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d008      	beq.n	80011dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2204      	movs	r2, #4
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e022      	b.n	8001222 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 020e 	bic.w	r2, r2, #14
 80011ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001200:	f003 021c 	and.w	r2, r3, #28
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d005      	beq.n	8001252 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2204      	movs	r2, #4
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e029      	b.n	80012a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020e 	bic.w	r2, r2, #14
 8001260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f003 021c 	and.w	r2, r3, #28
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4798      	blx	r3
    }
  }
  return status;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	e17f      	b.n	80015c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8171 	beq.w	80015ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d005      	beq.n	80012f0 <HAL_GPIO_Init+0x40>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d130      	bne.n	8001352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001326:	2201      	movs	r2, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 0201 	and.w	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b03      	cmp	r3, #3
 800135c:	d118      	bne.n	8001390 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	6939      	ldr	r1, [r7, #16]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80ac 	beq.w	80015ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_GPIO_Init+0x330>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	4a5e      	ldr	r2, [pc, #376]	@ (80015e0 <HAL_GPIO_Init+0x330>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	@ 0x60
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_GPIO_Init+0x330>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800147a:	4a5a      	ldr	r2, [pc, #360]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x242>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	@ (80015e8 <HAL_GPIO_Init+0x338>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x23e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	@ (80015ec <HAL_GPIO_Init+0x33c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x23a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	@ (80015f0 <HAL_GPIO_Init+0x340>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x236>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	@ (80015f4 <HAL_GPIO_Init+0x344>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x232>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	@ (80015f8 <HAL_GPIO_Init+0x348>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4a      	ldr	r2, [pc, #296]	@ (80015fc <HAL_GPIO_Init+0x34c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x22a>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x244>
 80014f2:	2300      	movs	r3, #0
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001504:	4937      	ldr	r1, [pc, #220]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_GPIO_Init+0x350>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <HAL_GPIO_Init+0x350>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <HAL_GPIO_Init+0x350>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <HAL_GPIO_Init+0x350>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <HAL_GPIO_Init+0x350>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_GPIO_Init+0x350>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_GPIO_Init+0x350>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <HAL_GPIO_Init+0x350>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f47f ae78 	bne.w	80012c0 <HAL_GPIO_Init+0x10>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000c00 	.word	0x48000c00
 80015f4:	48001000 	.word	0x48001000
 80015f8:	48001400 	.word	0x48001400
 80015fc:	48001800 	.word	0x48001800
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001620:	e002      	b.n	8001628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43d9      	mvns	r1, r3
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	400b      	ands	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <HAL_PWREx_GetVoltageRange+0x18>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001692:	d130      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800169c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016a0:	d038      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2232      	movs	r2, #50	@ 0x32
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	e002      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016dc:	d102      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f2      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f0:	d110      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e00f      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001702:	d007      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800170c:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e3ca      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001742:	4b97      	ldr	r3, [pc, #604]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174c:	4b94      	ldr	r3, [pc, #592]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80e4 	beq.w	800192c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_RCC_OscConfig+0x4a>
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	f040 808b 	bne.w	8001888 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 8087 	bne.w	8001888 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x62>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e3a2      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	4b82      	ldr	r3, [pc, #520]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x7c>
 80017a2:	4b7f      	ldr	r3, [pc, #508]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017aa:	e005      	b.n	80017b8 <HAL_RCC_OscConfig+0x88>
 80017ac:	4b7c      	ldr	r3, [pc, #496]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d223      	bcs.n	8001804 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fd55 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e383      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d0:	4b73      	ldr	r3, [pc, #460]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a72      	ldr	r2, [pc, #456]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b70      	ldr	r3, [pc, #448]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	496d      	ldr	r1, [pc, #436]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ee:	4b6c      	ldr	r3, [pc, #432]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4968      	ldr	r1, [pc, #416]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
 8001802:	e025      	b.n	8001850 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a65      	ldr	r2, [pc, #404]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4960      	ldr	r1, [pc, #384]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b5f      	ldr	r3, [pc, #380]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	495b      	ldr	r1, [pc, #364]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd15 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e343      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001850:	f000 fc4a 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b52      	ldr	r3, [pc, #328]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	4950      	ldr	r1, [pc, #320]	@ (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <HAL_RCC_OscConfig+0x278>)
 800186e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001870:	4b4e      	ldr	r3, [pc, #312]	@ (80019ac <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb0b 	bl	8000e90 <HAL_InitTick>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d052      	beq.n	800192a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	e327      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d032      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001890:	4b43      	ldr	r3, [pc, #268]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a42      	ldr	r2, [pc, #264]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb48 	bl	8000f30 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb44 	bl	8000f30 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e310      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	4b3a      	ldr	r3, [pc, #232]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c2:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a36      	ldr	r2, [pc, #216]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4931      	ldr	r1, [pc, #196]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e0:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	492c      	ldr	r1, [pc, #176]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e01a      	b.n	800192c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f6:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a29      	ldr	r2, [pc, #164]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001902:	f7ff fb15 	bl	8000f30 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190a:	f7ff fb11 	bl	8000f30 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e2dd      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x1da>
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d074      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x21a>
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d064      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d160      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e2ba      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x24a>
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e026      	b.n	80019c8 <HAL_RCC_OscConfig+0x298>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001982:	d115      	bne.n	80019b0 <HAL_RCC_OscConfig+0x280>
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 800198a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a02      	ldr	r2, [pc, #8]	@ (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x298>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08004eb8 	.word	0x08004eb8
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff faae 	bl	8000f30 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff faaa 	bl	8000f30 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	@ 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e276      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b92      	ldr	r3, [pc, #584]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2a8>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa9a 	bl	8000f30 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa96 	bl	8000f30 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	@ 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e262      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	4b88      	ldr	r3, [pc, #544]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d0>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d060      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x310>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d116      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x328>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e23f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4973      	ldr	r1, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	e040      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d023      	beq.n	8001abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a76:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff fa55 	bl	8000f30 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa51 	bl	8000f30 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e21d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	4b65      	ldr	r3, [pc, #404]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b62      	ldr	r3, [pc, #392]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	495f      	ldr	r1, [pc, #380]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa31 	bl	8000f30 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa2d 	bl	8000f30 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1f9      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	4b53      	ldr	r3, [pc, #332]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b04:	4b4b      	ldr	r3, [pc, #300]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa0c 	bl	8000f30 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa08 	bl	8000f30 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1d4      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3ec>
 8001b3c:	e01b      	b.n	8001b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b44:	4a3b      	ldr	r2, [pc, #236]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f9ef 	bl	8000f30 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7ff f9eb 	bl	8000f30 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1b7      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80a6 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b88:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	4a26      	ldr	r2, [pc, #152]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d118      	bne.n	8001bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff f9b2 	bl	8000f30 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7ff f9ae 	bl	8000f30 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e17a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4d8>
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c06:	e029      	b.n	8001c5c <HAL_RCC_OscConfig+0x52c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d115      	bne.n	8001c3c <HAL_RCC_OscConfig+0x50c>
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c26:	4a03      	ldr	r2, [pc, #12]	@ (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x52c>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	4a9b      	ldr	r2, [pc, #620]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4c:	4b98      	ldr	r3, [pc, #608]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	4a97      	ldr	r2, [pc, #604]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d016      	beq.n	8001c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff f964 	bl	8000f30 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f960 	bl	8000f30 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e12a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ed      	beq.n	8001c6c <HAL_RCC_OscConfig+0x53c>
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff f94d 	bl	8000f30 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7ff f949 	bl	8000f30 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e113      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ed      	bne.n	8001c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	4a79      	ldr	r2, [pc, #484]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80fe 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	f040 80d0 	bne.w	8001e84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ce4:	4b72      	ldr	r3, [pc, #456]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d130      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	3b01      	subs	r3, #1
 8001d04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d127      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d24:	2a07      	cmp	r2, #7
 8001d26:	bf14      	ite	ne
 8001d28:	2201      	movne	r2, #1
 8001d2a:	2200      	moveq	r2, #0
 8001d2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d113      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d06e      	beq.n	8001e38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d069      	beq.n	8001e34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d6c:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ad      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d88:	f7ff f8d2 	bl	8000f30 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f8ce 	bl	8000f30 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e09a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	4b43      	ldr	r3, [pc, #268]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dae:	4b40      	ldr	r3, [pc, #256]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <HAL_RCC_OscConfig+0x784>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dc8:	0212      	lsls	r2, r2, #8
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dd0:	0852      	lsrs	r2, r2, #1
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	0552      	lsls	r2, r2, #21
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ddc:	0852      	lsrs	r2, r2, #1
 8001dde:	3a01      	subs	r2, #1
 8001de0:	0652      	lsls	r2, r2, #25
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001de8:	0912      	lsrs	r2, r2, #4
 8001dea:	0452      	lsls	r2, r2, #17
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4930      	ldr	r1, [pc, #192]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001df4:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e0c:	f7ff f890 	bl	8000f30 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f88c 	bl	8000f30 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e058      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e32:	e050      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e04f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d148      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e5c:	f7ff f868 	bl	8000f30 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f864 	bl	8000f30 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e030      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x734>
 8001e82:	e028      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d023      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f84b 	bl	8000f30 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	e00c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff f847 	bl	8000f30 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d905      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ec      	bne.n	8001e9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4905      	ldr	r1, [pc, #20]	@ (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x7b4>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
 8001ed0:	e001      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	feeefffc 	.word	0xfeeefffc

08001ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0e7      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b75      	ldr	r3, [pc, #468]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b72      	ldr	r3, [pc, #456]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4970      	ldr	r1, [pc, #448]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0cf      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4960      	ldr	r1, [pc, #384]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d04c      	beq.n	8002000 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0a6      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e09a      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e08e      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e086      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b46      	ldr	r3, [pc, #280]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4943      	ldr	r1, [pc, #268]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7fe ffae 	bl	8000f30 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7fe ffaa 	bl	8000f30 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e06e      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002018:	429a      	cmp	r2, r3
 800201a:	d208      	bcs.n	800202e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	492b      	ldr	r1, [pc, #172]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202e:	4b29      	ldr	r3, [pc, #164]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d210      	bcs.n	800205e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203c:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0207 	bic.w	r2, r3, #7
 8002044:	4923      	ldr	r1, [pc, #140]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204c:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e036      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4918      	ldr	r1, [pc, #96]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4910      	ldr	r1, [pc, #64]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209c:	f000 f824 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	490b      	ldr	r1, [pc, #44]	@ (80020dc <HAL_RCC_ClockConfig+0x1f4>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_RCC_ClockConfig+0x1fc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fee5 	bl	8000e90 <HAL_InitTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08004eb8 	.word	0x08004eb8
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	4b3e      	ldr	r3, [pc, #248]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x34>
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d121      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11e      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800211c:	4b34      	ldr	r3, [pc, #208]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002128:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e005      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002144:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d102      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002160:	4b25      	ldr	r3, [pc, #148]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e004      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800216c:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 800216e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d134      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0xa6>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xac>
 800218c:	e005      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002190:	617b      	str	r3, [r7, #20]
      break;
 8002192:	e005      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002196:	617b      	str	r3, [r7, #20]
      break;
 8002198:	e002      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0e5b      	lsrs	r3, r3, #25
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	3301      	adds	r3, #1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e0:	69bb      	ldr	r3, [r7, #24]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08004ed0 	.word	0x08004ed0
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	007a1200 	.word	0x007a1200

08002200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <HAL_RCC_GetHCLKFreq+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800221c:	f7ff fff0 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08004ec8 	.word	0x08004ec8

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002248:	f7ff ffda 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4904      	ldr	r1, [pc, #16]	@ (800226c <HAL_RCC_GetPCLK2Freq+0x28>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08004ec8 	.word	0x08004ec8

08002270 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800227c:	4b2a      	ldr	r3, [pc, #168]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002288:	f7ff f9ee 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 800228c:	6178      	str	r0, [r7, #20]
 800228e:	e014      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	@ 0x58
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f9de 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c0:	d10b      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b80      	cmp	r3, #128	@ 0x80
 80022c6:	d919      	bls.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80022cc:	d902      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ce:	2302      	movs	r3, #2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e013      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e010      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	@ 0x80
 80022de:	d902      	bls.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022e0:	2303      	movs	r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e00a      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	@ 0x80
 80022ea:	d102      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ec:	2302      	movs	r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e004      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b70      	cmp	r3, #112	@ 0x70
 80022f6:	d101      	bne.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	4909      	ldr	r1, [pc, #36]	@ (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002338:	2300      	movs	r3, #0
 800233a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800233c:	2300      	movs	r3, #0
 800233e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002348:	2b00      	cmp	r3, #0
 800234a:	d041      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002350:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002354:	d02a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800235a:	d824      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002366:	d81e      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002370:	d010      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002372:	e018      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002374:	4b86      	ldr	r3, [pc, #536]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a85      	ldr	r2, [pc, #532]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002380:	e015      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fabb 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002392:	e00c      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3320      	adds	r3, #32
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fba6 	bl	8002aec <RCCEx_PLLSAI2_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a4:	e003      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	74fb      	strb	r3, [r7, #19]
      break;
 80023aa:	e000      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b4:	4b76      	ldr	r3, [pc, #472]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c2:	4973      	ldr	r1, [pc, #460]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023ca:	e001      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d041      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023e4:	d02a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023ea:	d824      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f6:	d81e      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002400:	d010      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002402:	e018      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002404:	4b62      	ldr	r3, [pc, #392]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a61      	ldr	r2, [pc, #388]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002410:	e015      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa73 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002422:	e00c      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3320      	adds	r3, #32
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb5e 	bl	8002aec <RCCEx_PLLSAI2_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002434:	e003      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	74fb      	strb	r3, [r7, #19]
      break;
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002444:	4b52      	ldr	r3, [pc, #328]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002452:	494f      	ldr	r1, [pc, #316]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800245a:	e001      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a0 	beq.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	4a40      	ldr	r2, [pc, #256]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	@ 0x58
 8002494:	4b3e      	ldr	r3, [pc, #248]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fd3e 	bl	8000f30 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b6:	e009      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b8:	f7fe fd3a 	bl	8000f30 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d902      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	74fb      	strb	r3, [r7, #19]
        break;
 80024ca:	e005      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024cc:	4b31      	ldr	r3, [pc, #196]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d15c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024de:	4b2c      	ldr	r3, [pc, #176]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d019      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a20      	ldr	r2, [pc, #128]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fcf9 	bl	8000f30 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	e00b      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fcf5 	bl	8000f30 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d902      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	74fb      	strb	r3, [r7, #19]
            break;
 8002558:	e006      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255a:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ec      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257e:	4904      	ldr	r1, [pc, #16]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002586:	e009      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
 800258c:	e006      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b9e      	ldr	r3, [pc, #632]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	4a9d      	ldr	r2, [pc, #628]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ba:	4b98      	ldr	r3, [pc, #608]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	4994      	ldr	r1, [pc, #592]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025dc:	4b8f      	ldr	r3, [pc, #572]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 020c 	bic.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	498c      	ldr	r1, [pc, #560]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fe:	4b87      	ldr	r3, [pc, #540]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	4983      	ldr	r1, [pc, #524]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	497b      	ldr	r1, [pc, #492]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002642:	4b76      	ldr	r3, [pc, #472]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002650:	4972      	ldr	r1, [pc, #456]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002664:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	496a      	ldr	r1, [pc, #424]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002686:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	4961      	ldr	r1, [pc, #388]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026a8:	4b5c      	ldr	r3, [pc, #368]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b6:	4959      	ldr	r1, [pc, #356]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ca:	4b54      	ldr	r3, [pc, #336]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	4950      	ldr	r1, [pc, #320]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	4948      	ldr	r1, [pc, #288]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800270e:	4b43      	ldr	r3, [pc, #268]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	493f      	ldr	r1, [pc, #252]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d028      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002730:	4b3a      	ldr	r3, [pc, #232]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273e:	4937      	ldr	r1, [pc, #220]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800274e:	d106      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a31      	ldr	r2, [pc, #196]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	60d3      	str	r3, [r2, #12]
 800275c:	e011      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002766:	d10c      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f8c8 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d028      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800278e:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	491f      	ldr	r1, [pc, #124]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ac:	d106      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ae:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b8:	60d3      	str	r3, [r2, #12]
 80027ba:	e011      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f899 	bl	8002904 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02b      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a02      	ldr	r2, [pc, #8]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	e014      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002828:	d10c      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f867 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02f      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800285e:	4928      	ldr	r1, [pc, #160]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800286a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800286e:	d10d      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f844 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d014      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	74bb      	strb	r3, [r7, #18]
 800288a:	e011      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3320      	adds	r3, #32
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f925 	bl	8002aec <RCCEx_PLLSAI2_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028bc:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ca:	490d      	ldr	r1, [pc, #52]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ee:	4904      	ldr	r1, [pc, #16]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b75      	ldr	r3, [pc, #468]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800291e:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002936:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
       ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d047      	beq.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d018      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x86>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d825      	bhi.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x62>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d009      	beq.n	8002978 <RCCEx_PLLSAI1_Config+0x74>
 8002964:	e020      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002966:	4b60      	ldr	r3, [pc, #384]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e01a      	b.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e013      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298a:	4b57      	ldr	r3, [pc, #348]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002996:	4b54      	ldr	r3, [pc, #336]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a6:	e006      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4944      	ldr	r1, [pc, #272]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d17d      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029e0:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a40      	ldr	r2, [pc, #256]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe faa0 	bl	8000f30 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f4:	f7fe fa9c 	bl	8000f30 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a08:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d160      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a20:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0912      	lsrs	r2, r2, #4
 8002a38:	0452      	lsls	r2, r2, #17
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	492a      	ldr	r1, [pc, #168]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	610b      	str	r3, [r1, #16]
 8002a42:	e027      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d112      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	0211      	lsls	r1, r2, #8
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6912      	ldr	r2, [r2, #16]
 8002a60:	0852      	lsrs	r2, r2, #1
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0552      	lsls	r2, r2, #21
 8002a66:	430a      	orrs	r2, r1
 8002a68:	491f      	ldr	r1, [pc, #124]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
 8002a6e:	e011      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	0211      	lsls	r1, r2, #8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6952      	ldr	r2, [r2, #20]
 8002a86:	0852      	lsrs	r2, r2, #1
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	0652      	lsls	r2, r2, #25
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fa46 	bl	8000f30 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa8:	f7fe fa42 	bl	8000f30 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4904      	ldr	r1, [pc, #16]	@ (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b06:	4b67      	ldr	r3, [pc, #412]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0203 	and.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10d      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d047      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e044      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d018      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x86>
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d825      	bhi.n	8002b90 <RCCEx_PLLSAI2_Config+0xa4>
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <RCCEx_PLLSAI2_Config+0x62>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d009      	beq.n	8002b60 <RCCEx_PLLSAI2_Config+0x74>
 8002b4c:	e020      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4e:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11d      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e01a      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e013      	b.n	8002b9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8e:	e006      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e004      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	4939      	ldr	r1, [pc, #228]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d167      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a35      	ldr	r2, [pc, #212]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fe f9ac 	bl	8000f30 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bdc:	f7fe f9a8 	bl	8000f30 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
        break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ef      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d14a      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d111      	bne.n	8002c2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6892      	ldr	r2, [r2, #8]
 8002c18:	0211      	lsls	r1, r2, #8
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	0912      	lsrs	r2, r2, #4
 8002c20:	0452      	lsls	r2, r2, #17
 8002c22:	430a      	orrs	r2, r1
 8002c24:	491f      	ldr	r1, [pc, #124]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	614b      	str	r3, [r1, #20]
 8002c2a:	e011      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6912      	ldr	r2, [r2, #16]
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe f968 	bl	8000f30 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c64:	f7fe f964 	bl	8000f30 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
          break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4904      	ldr	r1, [pc, #16]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e040      	b.n	8002d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd ff1c 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	@ 0x24
 8002cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fedc 	bl	8003aac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fc21 	bl	800353c <UART_SetConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e01b      	b.n	8002d3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ff5b 	bl	8003bf0 <UART_CheckIdleState>
 8002d3a:	4603      	mov	r3, r0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	@ 0x28
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d177      	bne.n	8002e4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Transmit+0x24>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e070      	b.n	8002e4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2221      	movs	r2, #33	@ 0x21
 8002d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe f8d9 	bl	8000f30 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d98:	d108      	bne.n	8002dac <HAL_UART_Transmit+0x68>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e003      	b.n	8002db4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db4:	e02f      	b.n	8002e16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 ffbd 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e03b      	b.n	8002e4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	881a      	ldrh	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	b292      	uxth	r2, r2
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	3302      	adds	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e007      	b.n	8002e04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1c9      	bne.n	8002db6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	@ 0x40
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 ff87 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e005      	b.n	8002e4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d137      	bne.n	8002ee0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Receive_IT+0x24>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e030      	b.n	8002ee2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_UART_Receive_IT+0x94>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01f      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69f9      	ldr	r1, [r7, #28]
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e6      	bne.n	8002e9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 ffa0 	bl	8003e1c <UART_Start_Receive_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3728      	adds	r7, #40	@ 0x28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40008000 	.word	0x40008000

08002ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f1e:	4013      	ands	r3, r2
 8002f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 82ca 	beq.w	80034e2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
      }
      return;
 8002f56:	e2c4      	b.n	80034e2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8117 	beq.w	8003190 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f72:	4b85      	ldr	r3, [pc, #532]	@ (8003188 <HAL_UART_IRQHandler+0x298>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 810a 	beq.w	8003190 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_UART_IRQHandler+0xbc>
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d011      	beq.n	8002fdc <HAL_UART_IRQHandler+0xec>
 8002fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d011      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
 8002fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003028:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2208      	movs	r2, #8
 8003036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303e:	f043 0208 	orr.w	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <HAL_UART_IRQHandler+0x18a>
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8230 	beq.w	80034e6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c2:	2b40      	cmp	r3, #64	@ 0x40
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04f      	beq.n	8003172 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 ff68 	bl	8003fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d141      	bne.n	800316a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80030fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800311e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800312a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1d9      	bne.n	80030e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003136:	2b00      	cmp	r3, #0
 8003138:	d013      	beq.n	8003162 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313e:	4a13      	ldr	r2, [pc, #76]	@ (800318c <HAL_UART_IRQHandler+0x29c>)
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f871 	bl	800122e <HAL_DMA_Abort_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00f      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9d4 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00b      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9d0 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e007      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9cc 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003180:	e1b1      	b.n	80034e6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003182:	bf00      	nop
    return;
 8003184:	e1af      	b.n	80034e6 <HAL_UART_IRQHandler+0x5f6>
 8003186:	bf00      	nop
 8003188:	04000120 	.word	0x04000120
 800318c:	08004071 	.word	0x08004071

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 816a 	bne.w	800346e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8163 	beq.w	800346e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 815c 	beq.w	800346e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	f040 80d4 	bne.w	8003376 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80ad 	beq.w	800333e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f080 80a5 	bcs.w	800333e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 8086 	bne.w	800331c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800322c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800323a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800323e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003246:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1da      	bne.n	8003210 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3308      	adds	r3, #8
 8003260:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800326a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800327e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003282:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003286:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e1      	bne.n	800325a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3308      	adds	r3, #8
 800329c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e3      	bne.n	8003296 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ec:	f023 0310 	bic.w	r3, r3, #16
 80032f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003300:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003304:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800330c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e4      	bne.n	80032dc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd ff4b 	bl	80011b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800332e:	b29b      	uxth	r3, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	b29b      	uxth	r3, r3
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8f4 	bl	8003524 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800333c:	e0d5      	b.n	80034ea <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003344:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 80ce 	bne.w	80034ea <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	f040 80c5 	bne.w	80034ea <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8d8 	bl	8003524 <HAL_UARTEx_RxEventCallback>
      return;
 8003374:	e0b9      	b.n	80034ea <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003382:	b29b      	uxth	r3, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80ab 	beq.w	80034ee <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e4      	bne.n	80033a2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	623b      	str	r3, [r7, #32]
   return(result);
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3308      	adds	r3, #8
 80033f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e3      	bne.n	80033d8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	60fb      	str	r3, [r7, #12]
   return(result);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	617b      	str	r3, [r7, #20]
   return(result);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e4      	bne.n	8003424 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f85c 	bl	8003524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800346c:	e03f      	b.n	80034ee <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <HAL_UART_IRQHandler+0x5a8>
 800347a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800348e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 ffe9 	bl	8004468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003496:	e02d      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01c      	beq.n	80034f2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
    }
    return;
 80034c0:	e017      	b.n	80034f2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <HAL_UART_IRQHandler+0x604>
 80034ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fdde 	bl	800409c <UART_EndTransmit_IT>
    return;
 80034e0:	e008      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
      return;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
    return;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
      return;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
      return;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_UART_IRQHandler+0x604>
    return;
 80034f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034f4:	37e8      	adds	r7, #232	@ 0xe8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b08a      	sub	sp, #40	@ 0x28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4313      	orrs	r3, r2
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4ba4      	ldr	r3, [pc, #656]	@ (80037fc <UART_SetConfig+0x2c0>)
 800356c:	4013      	ands	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003574:	430b      	orrs	r3, r1
 8003576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a99      	ldr	r2, [pc, #612]	@ (8003800 <UART_SetConfig+0x2c4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	4313      	orrs	r3, r2
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a90      	ldr	r2, [pc, #576]	@ (8003804 <UART_SetConfig+0x2c8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d126      	bne.n	8003614 <UART_SetConfig+0xd8>
 80035c6:	4b90      	ldr	r3, [pc, #576]	@ (8003808 <UART_SetConfig+0x2cc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d81b      	bhi.n	800360c <UART_SetConfig+0xd0>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <UART_SetConfig+0xa0>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035fd 	.word	0x080035fd
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003605 	.word	0x08003605
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f2:	e116      	b.n	8003822 <UART_SetConfig+0x2e6>
 80035f4:	2302      	movs	r3, #2
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e112      	b.n	8003822 <UART_SetConfig+0x2e6>
 80035fc:	2304      	movs	r3, #4
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e10e      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003604:	2308      	movs	r3, #8
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e10a      	b.n	8003822 <UART_SetConfig+0x2e6>
 800360c:	2310      	movs	r3, #16
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e106      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7c      	ldr	r2, [pc, #496]	@ (800380c <UART_SetConfig+0x2d0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d138      	bne.n	8003690 <UART_SetConfig+0x154>
 800361e:	4b7a      	ldr	r3, [pc, #488]	@ (8003808 <UART_SetConfig+0x2cc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d82d      	bhi.n	8003688 <UART_SetConfig+0x14c>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <UART_SetConfig+0xf8>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003669 	.word	0x08003669
 8003638:	08003689 	.word	0x08003689
 800363c:	08003689 	.word	0x08003689
 8003640:	08003689 	.word	0x08003689
 8003644:	08003679 	.word	0x08003679
 8003648:	08003689 	.word	0x08003689
 800364c:	08003689 	.word	0x08003689
 8003650:	08003689 	.word	0x08003689
 8003654:	08003671 	.word	0x08003671
 8003658:	08003689 	.word	0x08003689
 800365c:	08003689 	.word	0x08003689
 8003660:	08003689 	.word	0x08003689
 8003664:	08003681 	.word	0x08003681
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e0d8      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003670:	2302      	movs	r3, #2
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e0d4      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003678:	2304      	movs	r3, #4
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367e:	e0d0      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003680:	2308      	movs	r3, #8
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e0cc      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003688:	2310      	movs	r3, #16
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e0c8      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a5e      	ldr	r2, [pc, #376]	@ (8003810 <UART_SetConfig+0x2d4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d125      	bne.n	80036e6 <UART_SetConfig+0x1aa>
 800369a:	4b5b      	ldr	r3, [pc, #364]	@ (8003808 <UART_SetConfig+0x2cc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036a4:	2b30      	cmp	r3, #48	@ 0x30
 80036a6:	d016      	beq.n	80036d6 <UART_SetConfig+0x19a>
 80036a8:	2b30      	cmp	r3, #48	@ 0x30
 80036aa:	d818      	bhi.n	80036de <UART_SetConfig+0x1a2>
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d00a      	beq.n	80036c6 <UART_SetConfig+0x18a>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d814      	bhi.n	80036de <UART_SetConfig+0x1a2>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <UART_SetConfig+0x182>
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d008      	beq.n	80036ce <UART_SetConfig+0x192>
 80036bc:	e00f      	b.n	80036de <UART_SetConfig+0x1a2>
 80036be:	2300      	movs	r3, #0
 80036c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c4:	e0ad      	b.n	8003822 <UART_SetConfig+0x2e6>
 80036c6:	2302      	movs	r3, #2
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036cc:	e0a9      	b.n	8003822 <UART_SetConfig+0x2e6>
 80036ce:	2304      	movs	r3, #4
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d4:	e0a5      	b.n	8003822 <UART_SetConfig+0x2e6>
 80036d6:	2308      	movs	r3, #8
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036dc:	e0a1      	b.n	8003822 <UART_SetConfig+0x2e6>
 80036de:	2310      	movs	r3, #16
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e4:	e09d      	b.n	8003822 <UART_SetConfig+0x2e6>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003814 <UART_SetConfig+0x2d8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d125      	bne.n	800373c <UART_SetConfig+0x200>
 80036f0:	4b45      	ldr	r3, [pc, #276]	@ (8003808 <UART_SetConfig+0x2cc>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80036fc:	d016      	beq.n	800372c <UART_SetConfig+0x1f0>
 80036fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003700:	d818      	bhi.n	8003734 <UART_SetConfig+0x1f8>
 8003702:	2b80      	cmp	r3, #128	@ 0x80
 8003704:	d00a      	beq.n	800371c <UART_SetConfig+0x1e0>
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d814      	bhi.n	8003734 <UART_SetConfig+0x1f8>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <UART_SetConfig+0x1d8>
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	d008      	beq.n	8003724 <UART_SetConfig+0x1e8>
 8003712:	e00f      	b.n	8003734 <UART_SetConfig+0x1f8>
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371a:	e082      	b.n	8003822 <UART_SetConfig+0x2e6>
 800371c:	2302      	movs	r3, #2
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003722:	e07e      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003724:	2304      	movs	r3, #4
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372a:	e07a      	b.n	8003822 <UART_SetConfig+0x2e6>
 800372c:	2308      	movs	r3, #8
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e076      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003734:	2310      	movs	r3, #16
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e072      	b.n	8003822 <UART_SetConfig+0x2e6>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a35      	ldr	r2, [pc, #212]	@ (8003818 <UART_SetConfig+0x2dc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d12a      	bne.n	800379c <UART_SetConfig+0x260>
 8003746:	4b30      	ldr	r3, [pc, #192]	@ (8003808 <UART_SetConfig+0x2cc>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003750:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003754:	d01a      	beq.n	800378c <UART_SetConfig+0x250>
 8003756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375a:	d81b      	bhi.n	8003794 <UART_SetConfig+0x258>
 800375c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003760:	d00c      	beq.n	800377c <UART_SetConfig+0x240>
 8003762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003766:	d815      	bhi.n	8003794 <UART_SetConfig+0x258>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <UART_SetConfig+0x238>
 800376c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003770:	d008      	beq.n	8003784 <UART_SetConfig+0x248>
 8003772:	e00f      	b.n	8003794 <UART_SetConfig+0x258>
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377a:	e052      	b.n	8003822 <UART_SetConfig+0x2e6>
 800377c:	2302      	movs	r3, #2
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003782:	e04e      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003784:	2304      	movs	r3, #4
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378a:	e04a      	b.n	8003822 <UART_SetConfig+0x2e6>
 800378c:	2308      	movs	r3, #8
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003792:	e046      	b.n	8003822 <UART_SetConfig+0x2e6>
 8003794:	2310      	movs	r3, #16
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379a:	e042      	b.n	8003822 <UART_SetConfig+0x2e6>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a17      	ldr	r2, [pc, #92]	@ (8003800 <UART_SetConfig+0x2c4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d13a      	bne.n	800381c <UART_SetConfig+0x2e0>
 80037a6:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <UART_SetConfig+0x2cc>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037b4:	d01a      	beq.n	80037ec <UART_SetConfig+0x2b0>
 80037b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037ba:	d81b      	bhi.n	80037f4 <UART_SetConfig+0x2b8>
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c0:	d00c      	beq.n	80037dc <UART_SetConfig+0x2a0>
 80037c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c6:	d815      	bhi.n	80037f4 <UART_SetConfig+0x2b8>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <UART_SetConfig+0x298>
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d0:	d008      	beq.n	80037e4 <UART_SetConfig+0x2a8>
 80037d2:	e00f      	b.n	80037f4 <UART_SetConfig+0x2b8>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e022      	b.n	8003822 <UART_SetConfig+0x2e6>
 80037dc:	2302      	movs	r3, #2
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e01e      	b.n	8003822 <UART_SetConfig+0x2e6>
 80037e4:	2304      	movs	r3, #4
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e01a      	b.n	8003822 <UART_SetConfig+0x2e6>
 80037ec:	2308      	movs	r3, #8
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e016      	b.n	8003822 <UART_SetConfig+0x2e6>
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e012      	b.n	8003822 <UART_SetConfig+0x2e6>
 80037fc:	efff69f3 	.word	0xefff69f3
 8003800:	40008000 	.word	0x40008000
 8003804:	40013800 	.word	0x40013800
 8003808:	40021000 	.word	0x40021000
 800380c:	40004400 	.word	0x40004400
 8003810:	40004800 	.word	0x40004800
 8003814:	40004c00 	.word	0x40004c00
 8003818:	40005000 	.word	0x40005000
 800381c:	2310      	movs	r3, #16
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a9f      	ldr	r2, [pc, #636]	@ (8003aa4 <UART_SetConfig+0x568>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d17a      	bne.n	8003922 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800382c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003830:	2b08      	cmp	r3, #8
 8003832:	d824      	bhi.n	800387e <UART_SetConfig+0x342>
 8003834:	a201      	add	r2, pc, #4	@ (adr r2, 800383c <UART_SetConfig+0x300>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003861 	.word	0x08003861
 8003840:	0800387f 	.word	0x0800387f
 8003844:	08003869 	.word	0x08003869
 8003848:	0800387f 	.word	0x0800387f
 800384c:	0800386f 	.word	0x0800386f
 8003850:	0800387f 	.word	0x0800387f
 8003854:	0800387f 	.word	0x0800387f
 8003858:	0800387f 	.word	0x0800387f
 800385c:	08003877 	.word	0x08003877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fcda 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003864:	61f8      	str	r0, [r7, #28]
        break;
 8003866:	e010      	b.n	800388a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003868:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa8 <UART_SetConfig+0x56c>)
 800386a:	61fb      	str	r3, [r7, #28]
        break;
 800386c:	e00d      	b.n	800388a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386e:	f7fe fc3b 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003872:	61f8      	str	r0, [r7, #28]
        break;
 8003874:	e009      	b.n	800388a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387a:	61fb      	str	r3, [r7, #28]
        break;
 800387c:	e005      	b.n	800388a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003888:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80fb 	beq.w	8003a88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d305      	bcc.n	80038ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d903      	bls.n	80038b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038b4:	e0e8      	b.n	8003a88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2200      	movs	r2, #0
 80038ba:	461c      	mov	r4, r3
 80038bc:	4615      	mov	r5, r2
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	022b      	lsls	r3, r5, #8
 80038c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038cc:	0222      	lsls	r2, r4, #8
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	6849      	ldr	r1, [r1, #4]
 80038d2:	0849      	lsrs	r1, r1, #1
 80038d4:	2000      	movs	r0, #0
 80038d6:	4688      	mov	r8, r1
 80038d8:	4681      	mov	r9, r0
 80038da:	eb12 0a08 	adds.w	sl, r2, r8
 80038de:	eb43 0b09 	adc.w	fp, r3, r9
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f0:	4650      	mov	r0, sl
 80038f2:	4659      	mov	r1, fp
 80038f4:	f7fc fcc4 	bl	8000280 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003906:	d308      	bcc.n	800391a <UART_SetConfig+0x3de>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390e:	d204      	bcs.n	800391a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e0b6      	b.n	8003a88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003920:	e0b2      	b.n	8003a88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392a:	d15e      	bne.n	80039ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003930:	2b08      	cmp	r3, #8
 8003932:	d828      	bhi.n	8003986 <UART_SetConfig+0x44a>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x400>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	08003969 	.word	0x08003969
 8003944:	08003971 	.word	0x08003971
 8003948:	08003987 	.word	0x08003987
 800394c:	08003977 	.word	0x08003977
 8003950:	08003987 	.word	0x08003987
 8003954:	08003987 	.word	0x08003987
 8003958:	08003987 	.word	0x08003987
 800395c:	0800397f 	.word	0x0800397f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7fe fc5a 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003964:	61f8      	str	r0, [r7, #28]
        break;
 8003966:	e014      	b.n	8003992 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7fe fc6c 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 800396c:	61f8      	str	r0, [r7, #28]
        break;
 800396e:	e010      	b.n	8003992 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa8 <UART_SetConfig+0x56c>)
 8003972:	61fb      	str	r3, [r7, #28]
        break;
 8003974:	e00d      	b.n	8003992 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7fe fbb7 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800397a:	61f8      	str	r0, [r7, #28]
        break;
 800397c:	e009      	b.n	8003992 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003982:	61fb      	str	r3, [r7, #28]
        break;
 8003984:	e005      	b.n	8003992 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d077      	beq.n	8003a88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005a      	lsls	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d916      	bls.n	80039e2 <UART_SetConfig+0x4a6>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ba:	d212      	bcs.n	80039e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f023 030f 	bic.w	r3, r3, #15
 80039c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	8afb      	ldrh	r3, [r7, #22]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	8afa      	ldrh	r2, [r7, #22]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e052      	b.n	8003a88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039e8:	e04e      	b.n	8003a88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d827      	bhi.n	8003a42 <UART_SetConfig+0x506>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <UART_SetConfig+0x4bc>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fbfc 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61f8      	str	r0, [r7, #28]
        break;
 8003a22:	e014      	b.n	8003a4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fc0e 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e010      	b.n	8003a4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <UART_SetConfig+0x56c>)
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e00d      	b.n	8003a4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7fe fb59 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003a36:	61f8      	str	r0, [r7, #28]
        break;
 8003a38:	e009      	b.n	8003a4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3e:	61fb      	str	r3, [r7, #28]
        break;
 8003a40:	e005      	b.n	8003a4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a4c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d019      	beq.n	8003a88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	085a      	lsrs	r2, r3, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d909      	bls.n	8003a82 <UART_SetConfig+0x546>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	d205      	bcs.n	8003a82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	e002      	b.n	8003a88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3728      	adds	r7, #40	@ 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40008000 	.word	0x40008000
 8003aa8:	00f42400 	.word	0x00f42400

08003aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003baa:	d10a      	bne.n	8003bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b098      	sub	sp, #96	@ 0x60
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c00:	f7fd f996 	bl	8000f30 <HAL_GetTick>
 8003c04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d12e      	bne.n	8003c72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f88c 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d021      	beq.n	8003c72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e6      	bne.n	8003c2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e062      	b.n	8003d38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d149      	bne.n	8003d14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f856 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03c      	beq.n	8003d14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e6      	bne.n	8003c9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e011      	b.n	8003d38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3758      	adds	r7, #88	@ 0x58
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	e04f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d58:	d04b      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fd f8e9 	bl	8000f30 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e04e      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d037      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d034      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d031      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d110      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f8ff 	bl	8003fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2208      	movs	r2, #8
 8003dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e029      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dcc:	d111      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f8e5 	bl	8003fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d0a0      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b097      	sub	sp, #92	@ 0x5c
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4e:	d10e      	bne.n	8003e6e <UART_Start_Receive_IT+0x52>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <UART_Start_Receive_IT+0x48>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e62:	e02d      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e6c:	e028      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <UART_Start_Receive_IT+0x76>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <UART_Start_Receive_IT+0x6c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	22ff      	movs	r2, #255	@ 0xff
 8003e82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e86:	e01b      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	227f      	movs	r2, #127	@ 0x7f
 8003e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e90:	e016      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e9a:	d10d      	bne.n	8003eb8 <UART_Start_Receive_IT+0x9c>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <UART_Start_Receive_IT+0x92>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	227f      	movs	r2, #127	@ 0x7f
 8003ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eac:	e008      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	223f      	movs	r2, #63	@ 0x3f
 8003eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eb6:	e003      	b.n	8003ec0 <UART_Start_Receive_IT+0xa4>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2222      	movs	r2, #34	@ 0x22
 8003ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ef0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003ef2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0c:	d107      	bne.n	8003f1e <UART_Start_Receive_IT+0x102>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a21      	ldr	r2, [pc, #132]	@ (8003fa0 <UART_Start_Receive_IT+0x184>)
 8003f1a:	669a      	str	r2, [r3, #104]	@ 0x68
 8003f1c:	e002      	b.n	8003f24 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a20      	ldr	r2, [pc, #128]	@ (8003fa4 <UART_Start_Receive_IT+0x188>)
 8003f22:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d019      	beq.n	8003f60 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_Start_Receive_IT+0x110>
 8003f5e:	e018      	b.n	8003f92 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	69f9      	ldr	r1, [r7, #28]
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	375c      	adds	r7, #92	@ 0x5c
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	080042ad 	.word	0x080042ad
 8003fa4:	080040f1 	.word	0x080040f1

08003fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b095      	sub	sp, #84	@ 0x54
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e6      	bne.n	8003fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401a:	2b01      	cmp	r3, #1
 800401c:	d118      	bne.n	8004050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	60bb      	str	r3, [r7, #8]
   return(result);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	647b      	str	r3, [r7, #68]	@ 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	613b      	str	r3, [r7, #16]
   return(result);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004064:	bf00      	nop
 8004066:	3754      	adds	r7, #84	@ 0x54
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fa3e 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6979      	ldr	r1, [r7, #20]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	613b      	str	r3, [r7, #16]
   return(result);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fa0a 	bl	80034fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b09c      	sub	sp, #112	@ 0x70
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004108:	2b22      	cmp	r3, #34	@ 0x22
 800410a:	f040 80be 	bne.w	800428a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004114:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004122:	b2da      	uxtb	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004128:	400a      	ands	r2, r1
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80a3 	bne.w	800429e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800416c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004178:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800417c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e6      	bne.n	8004158 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800419a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a34      	ldr	r2, [pc, #208]	@ (80042a8 <UART_RxISR_8BIT+0x1b8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01f      	beq.n	800421c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d018      	beq.n	800421c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	623b      	str	r3, [r7, #32]
   return(result);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004208:	633b      	str	r3, [r7, #48]	@ 0x30
 800420a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800420e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	2b01      	cmp	r3, #1
 8004222:	d12e      	bne.n	8004282 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60fb      	str	r3, [r7, #12]
   return(result);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0310 	bic.w	r3, r3, #16
 800423e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	617b      	str	r3, [r7, #20]
   return(result);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b10      	cmp	r3, #16
 8004268:	d103      	bne.n	8004272 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2210      	movs	r2, #16
 8004270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f952 	bl	8003524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004280:	e00d      	b.n	800429e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc f974 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8004288:	e009      	b.n	800429e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	8b1b      	ldrh	r3, [r3, #24]
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	b292      	uxth	r2, r2
 800429c:	831a      	strh	r2, [r3, #24]
}
 800429e:	bf00      	nop
 80042a0:	3770      	adds	r7, #112	@ 0x70
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40008000 	.word	0x40008000

080042ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b09c      	sub	sp, #112	@ 0x70
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c4:	2b22      	cmp	r3, #34	@ 0x22
 80042c6:	f040 80be 	bne.w	8004446 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80042de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	1c9a      	adds	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 80a3 	bne.w	800445a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004328:	667b      	str	r3, [r7, #100]	@ 0x64
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004332:	657b      	str	r3, [r7, #84]	@ 0x54
 8004334:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e6      	bne.n	8004314 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	663b      	str	r3, [r7, #96]	@ 0x60
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004366:	643a      	str	r2, [r7, #64]	@ 0x40
 8004368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800436c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <UART_RxISR_16BIT+0x1b8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01f      	beq.n	80043d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e6      	bne.n	80043a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d12e      	bne.n	800443e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 0310 	bic.w	r3, r3, #16
 80043fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6979      	ldr	r1, [r7, #20]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	613b      	str	r3, [r7, #16]
   return(result);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e6      	bne.n	80043e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d103      	bne.n	800442e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff f874 	bl	8003524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800443c:	e00d      	b.n	800445a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc f896 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8004444:	e009      	b.n	800445a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	8b1b      	ldrh	r3, [r3, #24]
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	b292      	uxth	r2, r2
 8004458:	831a      	strh	r2, [r3, #24]
}
 800445a:	bf00      	nop
 800445c:	3770      	adds	r7, #112	@ 0x70
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40008000 	.word	0x40008000

08004468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	b500      	push	{lr}
 8004480:	b09c      	sub	sp, #112	@ 0x70
 8004482:	ab1d      	add	r3, sp, #116	@ 0x74
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	9006      	str	r0, [sp, #24]
 8004488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800448c:	4809      	ldr	r0, [pc, #36]	@ (80044b4 <siprintf+0x38>)
 800448e:	9107      	str	r1, [sp, #28]
 8004490:	9104      	str	r1, [sp, #16]
 8004492:	4909      	ldr	r1, [pc, #36]	@ (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	a902      	add	r1, sp, #8
 80044a0:	f000 f8ae 	bl	8004600 <_svfiprintf_r>
 80044a4:	9b02      	ldr	r3, [sp, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	@ 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	2000000c 	.word	0x2000000c
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <strncmp>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	b16a      	cbz	r2, 80044dc <strncmp+0x20>
 80044c0:	3901      	subs	r1, #1
 80044c2:	1884      	adds	r4, r0, r2
 80044c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d103      	bne.n	80044d8 <strncmp+0x1c>
 80044d0:	42a0      	cmp	r0, r4
 80044d2:	d001      	beq.n	80044d8 <strncmp+0x1c>
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	d1f5      	bne.n	80044c4 <strncmp+0x8>
 80044d8:	1ad0      	subs	r0, r2, r3
 80044da:	bd10      	pop	{r4, pc}
 80044dc:	4610      	mov	r0, r2
 80044de:	e7fc      	b.n	80044da <strncmp+0x1e>

080044e0 <memset>:
 80044e0:	4402      	add	r2, r0
 80044e2:	4603      	mov	r3, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d100      	bne.n	80044ea <memset+0xa>
 80044e8:	4770      	bx	lr
 80044ea:	f803 1b01 	strb.w	r1, [r3], #1
 80044ee:	e7f9      	b.n	80044e4 <memset+0x4>

080044f0 <__errno>:
 80044f0:	4b01      	ldr	r3, [pc, #4]	@ (80044f8 <__errno+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004534 <__libc_init_array+0x38>)
 8004500:	4c0d      	ldr	r4, [pc, #52]	@ (8004538 <__libc_init_array+0x3c>)
 8004502:	1b64      	subs	r4, r4, r5
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	2600      	movs	r6, #0
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	4d0b      	ldr	r5, [pc, #44]	@ (800453c <__libc_init_array+0x40>)
 800450e:	4c0c      	ldr	r4, [pc, #48]	@ (8004540 <__libc_init_array+0x44>)
 8004510:	f000 fc66 	bl	8004de0 <_init>
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	2600      	movs	r6, #0
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004f3c 	.word	0x08004f3c
 8004538:	08004f3c 	.word	0x08004f3c
 800453c:	08004f3c 	.word	0x08004f3c
 8004540:	08004f40 	.word	0x08004f40

08004544 <__retarget_lock_acquire_recursive>:
 8004544:	4770      	bx	lr

08004546 <__retarget_lock_release_recursive>:
 8004546:	4770      	bx	lr

08004548 <__ssputs_r>:
 8004548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	688e      	ldr	r6, [r1, #8]
 800454e:	461f      	mov	r7, r3
 8004550:	42be      	cmp	r6, r7
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	4682      	mov	sl, r0
 8004556:	460c      	mov	r4, r1
 8004558:	4690      	mov	r8, r2
 800455a:	d82d      	bhi.n	80045b8 <__ssputs_r+0x70>
 800455c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004560:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004564:	d026      	beq.n	80045b4 <__ssputs_r+0x6c>
 8004566:	6965      	ldr	r5, [r4, #20]
 8004568:	6909      	ldr	r1, [r1, #16]
 800456a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800456e:	eba3 0901 	sub.w	r9, r3, r1
 8004572:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004576:	1c7b      	adds	r3, r7, #1
 8004578:	444b      	add	r3, r9
 800457a:	106d      	asrs	r5, r5, #1
 800457c:	429d      	cmp	r5, r3
 800457e:	bf38      	it	cc
 8004580:	461d      	movcc	r5, r3
 8004582:	0553      	lsls	r3, r2, #21
 8004584:	d527      	bpl.n	80045d6 <__ssputs_r+0x8e>
 8004586:	4629      	mov	r1, r5
 8004588:	f000 f958 	bl	800483c <_malloc_r>
 800458c:	4606      	mov	r6, r0
 800458e:	b360      	cbz	r0, 80045ea <__ssputs_r+0xa2>
 8004590:	6921      	ldr	r1, [r4, #16]
 8004592:	464a      	mov	r2, r9
 8004594:	f000 fbc4 	bl	8004d20 <memcpy>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800459e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	6126      	str	r6, [r4, #16]
 80045a6:	6165      	str	r5, [r4, #20]
 80045a8:	444e      	add	r6, r9
 80045aa:	eba5 0509 	sub.w	r5, r5, r9
 80045ae:	6026      	str	r6, [r4, #0]
 80045b0:	60a5      	str	r5, [r4, #8]
 80045b2:	463e      	mov	r6, r7
 80045b4:	42be      	cmp	r6, r7
 80045b6:	d900      	bls.n	80045ba <__ssputs_r+0x72>
 80045b8:	463e      	mov	r6, r7
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	4632      	mov	r2, r6
 80045be:	4641      	mov	r1, r8
 80045c0:	f000 fb84 	bl	8004ccc <memmove>
 80045c4:	68a3      	ldr	r3, [r4, #8]
 80045c6:	1b9b      	subs	r3, r3, r6
 80045c8:	60a3      	str	r3, [r4, #8]
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	4433      	add	r3, r6
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	2000      	movs	r0, #0
 80045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d6:	462a      	mov	r2, r5
 80045d8:	f000 fb4a 	bl	8004c70 <_realloc_r>
 80045dc:	4606      	mov	r6, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1e0      	bne.n	80045a4 <__ssputs_r+0x5c>
 80045e2:	6921      	ldr	r1, [r4, #16]
 80045e4:	4650      	mov	r0, sl
 80045e6:	f000 fba9 	bl	8004d3c <_free_r>
 80045ea:	230c      	movs	r3, #12
 80045ec:	f8ca 3000 	str.w	r3, [sl]
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045fc:	e7e9      	b.n	80045d2 <__ssputs_r+0x8a>
	...

08004600 <_svfiprintf_r>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	4698      	mov	r8, r3
 8004606:	898b      	ldrh	r3, [r1, #12]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	b09d      	sub	sp, #116	@ 0x74
 800460c:	4607      	mov	r7, r0
 800460e:	460d      	mov	r5, r1
 8004610:	4614      	mov	r4, r2
 8004612:	d510      	bpl.n	8004636 <_svfiprintf_r+0x36>
 8004614:	690b      	ldr	r3, [r1, #16]
 8004616:	b973      	cbnz	r3, 8004636 <_svfiprintf_r+0x36>
 8004618:	2140      	movs	r1, #64	@ 0x40
 800461a:	f000 f90f 	bl	800483c <_malloc_r>
 800461e:	6028      	str	r0, [r5, #0]
 8004620:	6128      	str	r0, [r5, #16]
 8004622:	b930      	cbnz	r0, 8004632 <_svfiprintf_r+0x32>
 8004624:	230c      	movs	r3, #12
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800462c:	b01d      	add	sp, #116	@ 0x74
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004632:	2340      	movs	r3, #64	@ 0x40
 8004634:	616b      	str	r3, [r5, #20]
 8004636:	2300      	movs	r3, #0
 8004638:	9309      	str	r3, [sp, #36]	@ 0x24
 800463a:	2320      	movs	r3, #32
 800463c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004640:	f8cd 800c 	str.w	r8, [sp, #12]
 8004644:	2330      	movs	r3, #48	@ 0x30
 8004646:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047e4 <_svfiprintf_r+0x1e4>
 800464a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800464e:	f04f 0901 	mov.w	r9, #1
 8004652:	4623      	mov	r3, r4
 8004654:	469a      	mov	sl, r3
 8004656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465a:	b10a      	cbz	r2, 8004660 <_svfiprintf_r+0x60>
 800465c:	2a25      	cmp	r2, #37	@ 0x25
 800465e:	d1f9      	bne.n	8004654 <_svfiprintf_r+0x54>
 8004660:	ebba 0b04 	subs.w	fp, sl, r4
 8004664:	d00b      	beq.n	800467e <_svfiprintf_r+0x7e>
 8004666:	465b      	mov	r3, fp
 8004668:	4622      	mov	r2, r4
 800466a:	4629      	mov	r1, r5
 800466c:	4638      	mov	r0, r7
 800466e:	f7ff ff6b 	bl	8004548 <__ssputs_r>
 8004672:	3001      	adds	r0, #1
 8004674:	f000 80a7 	beq.w	80047c6 <_svfiprintf_r+0x1c6>
 8004678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800467a:	445a      	add	r2, fp
 800467c:	9209      	str	r2, [sp, #36]	@ 0x24
 800467e:	f89a 3000 	ldrb.w	r3, [sl]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 809f 	beq.w	80047c6 <_svfiprintf_r+0x1c6>
 8004688:	2300      	movs	r3, #0
 800468a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800468e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004692:	f10a 0a01 	add.w	sl, sl, #1
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	9307      	str	r3, [sp, #28]
 800469a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800469e:	931a      	str	r3, [sp, #104]	@ 0x68
 80046a0:	4654      	mov	r4, sl
 80046a2:	2205      	movs	r2, #5
 80046a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a8:	484e      	ldr	r0, [pc, #312]	@ (80047e4 <_svfiprintf_r+0x1e4>)
 80046aa:	f7fb fd99 	bl	80001e0 <memchr>
 80046ae:	9a04      	ldr	r2, [sp, #16]
 80046b0:	b9d8      	cbnz	r0, 80046ea <_svfiprintf_r+0xea>
 80046b2:	06d0      	lsls	r0, r2, #27
 80046b4:	bf44      	itt	mi
 80046b6:	2320      	movmi	r3, #32
 80046b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046bc:	0711      	lsls	r1, r2, #28
 80046be:	bf44      	itt	mi
 80046c0:	232b      	movmi	r3, #43	@ 0x2b
 80046c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80046cc:	d015      	beq.n	80046fa <_svfiprintf_r+0xfa>
 80046ce:	9a07      	ldr	r2, [sp, #28]
 80046d0:	4654      	mov	r4, sl
 80046d2:	2000      	movs	r0, #0
 80046d4:	f04f 0c0a 	mov.w	ip, #10
 80046d8:	4621      	mov	r1, r4
 80046da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046de:	3b30      	subs	r3, #48	@ 0x30
 80046e0:	2b09      	cmp	r3, #9
 80046e2:	d94b      	bls.n	800477c <_svfiprintf_r+0x17c>
 80046e4:	b1b0      	cbz	r0, 8004714 <_svfiprintf_r+0x114>
 80046e6:	9207      	str	r2, [sp, #28]
 80046e8:	e014      	b.n	8004714 <_svfiprintf_r+0x114>
 80046ea:	eba0 0308 	sub.w	r3, r0, r8
 80046ee:	fa09 f303 	lsl.w	r3, r9, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	46a2      	mov	sl, r4
 80046f8:	e7d2      	b.n	80046a0 <_svfiprintf_r+0xa0>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	9103      	str	r1, [sp, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfbb      	ittet	lt
 8004706:	425b      	neglt	r3, r3
 8004708:	f042 0202 	orrlt.w	r2, r2, #2
 800470c:	9307      	strge	r3, [sp, #28]
 800470e:	9307      	strlt	r3, [sp, #28]
 8004710:	bfb8      	it	lt
 8004712:	9204      	strlt	r2, [sp, #16]
 8004714:	7823      	ldrb	r3, [r4, #0]
 8004716:	2b2e      	cmp	r3, #46	@ 0x2e
 8004718:	d10a      	bne.n	8004730 <_svfiprintf_r+0x130>
 800471a:	7863      	ldrb	r3, [r4, #1]
 800471c:	2b2a      	cmp	r3, #42	@ 0x2a
 800471e:	d132      	bne.n	8004786 <_svfiprintf_r+0x186>
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800472c:	3402      	adds	r4, #2
 800472e:	9305      	str	r3, [sp, #20]
 8004730:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047f4 <_svfiprintf_r+0x1f4>
 8004734:	7821      	ldrb	r1, [r4, #0]
 8004736:	2203      	movs	r2, #3
 8004738:	4650      	mov	r0, sl
 800473a:	f7fb fd51 	bl	80001e0 <memchr>
 800473e:	b138      	cbz	r0, 8004750 <_svfiprintf_r+0x150>
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	eba0 000a 	sub.w	r0, r0, sl
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	4082      	lsls	r2, r0
 800474a:	4313      	orrs	r3, r2
 800474c:	3401      	adds	r4, #1
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004754:	4824      	ldr	r0, [pc, #144]	@ (80047e8 <_svfiprintf_r+0x1e8>)
 8004756:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800475a:	2206      	movs	r2, #6
 800475c:	f7fb fd40 	bl	80001e0 <memchr>
 8004760:	2800      	cmp	r0, #0
 8004762:	d036      	beq.n	80047d2 <_svfiprintf_r+0x1d2>
 8004764:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <_svfiprintf_r+0x1ec>)
 8004766:	bb1b      	cbnz	r3, 80047b0 <_svfiprintf_r+0x1b0>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	3307      	adds	r3, #7
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	3308      	adds	r3, #8
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004776:	4433      	add	r3, r6
 8004778:	9309      	str	r3, [sp, #36]	@ 0x24
 800477a:	e76a      	b.n	8004652 <_svfiprintf_r+0x52>
 800477c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004780:	460c      	mov	r4, r1
 8004782:	2001      	movs	r0, #1
 8004784:	e7a8      	b.n	80046d8 <_svfiprintf_r+0xd8>
 8004786:	2300      	movs	r3, #0
 8004788:	3401      	adds	r4, #1
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	4619      	mov	r1, r3
 800478e:	f04f 0c0a 	mov.w	ip, #10
 8004792:	4620      	mov	r0, r4
 8004794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004798:	3a30      	subs	r2, #48	@ 0x30
 800479a:	2a09      	cmp	r2, #9
 800479c:	d903      	bls.n	80047a6 <_svfiprintf_r+0x1a6>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0c6      	beq.n	8004730 <_svfiprintf_r+0x130>
 80047a2:	9105      	str	r1, [sp, #20]
 80047a4:	e7c4      	b.n	8004730 <_svfiprintf_r+0x130>
 80047a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047aa:	4604      	mov	r4, r0
 80047ac:	2301      	movs	r3, #1
 80047ae:	e7f0      	b.n	8004792 <_svfiprintf_r+0x192>
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <_svfiprintf_r+0x1f0>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4638      	mov	r0, r7
 80047bc:	f3af 8000 	nop.w
 80047c0:	1c42      	adds	r2, r0, #1
 80047c2:	4606      	mov	r6, r0
 80047c4:	d1d6      	bne.n	8004774 <_svfiprintf_r+0x174>
 80047c6:	89ab      	ldrh	r3, [r5, #12]
 80047c8:	065b      	lsls	r3, r3, #25
 80047ca:	f53f af2d 	bmi.w	8004628 <_svfiprintf_r+0x28>
 80047ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047d0:	e72c      	b.n	800462c <_svfiprintf_r+0x2c>
 80047d2:	ab03      	add	r3, sp, #12
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	462a      	mov	r2, r5
 80047d8:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <_svfiprintf_r+0x1f0>)
 80047da:	a904      	add	r1, sp, #16
 80047dc:	4638      	mov	r0, r7
 80047de:	f000 f91b 	bl	8004a18 <_printf_i>
 80047e2:	e7ed      	b.n	80047c0 <_svfiprintf_r+0x1c0>
 80047e4:	08004f00 	.word	0x08004f00
 80047e8:	08004f0a 	.word	0x08004f0a
 80047ec:	00000000 	.word	0x00000000
 80047f0:	08004549 	.word	0x08004549
 80047f4:	08004f06 	.word	0x08004f06

080047f8 <sbrk_aligned>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004838 <sbrk_aligned+0x40>)
 80047fc:	460c      	mov	r4, r1
 80047fe:	6831      	ldr	r1, [r6, #0]
 8004800:	4605      	mov	r5, r0
 8004802:	b911      	cbnz	r1, 800480a <sbrk_aligned+0x12>
 8004804:	f000 fa7c 	bl	8004d00 <_sbrk_r>
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 fa77 	bl	8004d00 <_sbrk_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d103      	bne.n	800481e <sbrk_aligned+0x26>
 8004816:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800481a:	4620      	mov	r0, r4
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d0f8      	beq.n	800481a <sbrk_aligned+0x22>
 8004828:	1a21      	subs	r1, r4, r0
 800482a:	4628      	mov	r0, r5
 800482c:	f000 fa68 	bl	8004d00 <_sbrk_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d1f2      	bne.n	800481a <sbrk_aligned+0x22>
 8004834:	e7ef      	b.n	8004816 <sbrk_aligned+0x1e>
 8004836:	bf00      	nop
 8004838:	200003dc 	.word	0x200003dc

0800483c <_malloc_r>:
 800483c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004840:	1ccd      	adds	r5, r1, #3
 8004842:	f025 0503 	bic.w	r5, r5, #3
 8004846:	3508      	adds	r5, #8
 8004848:	2d0c      	cmp	r5, #12
 800484a:	bf38      	it	cc
 800484c:	250c      	movcc	r5, #12
 800484e:	2d00      	cmp	r5, #0
 8004850:	4606      	mov	r6, r0
 8004852:	db01      	blt.n	8004858 <_malloc_r+0x1c>
 8004854:	42a9      	cmp	r1, r5
 8004856:	d904      	bls.n	8004862 <_malloc_r+0x26>
 8004858:	230c      	movs	r3, #12
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	2000      	movs	r0, #0
 800485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004938 <_malloc_r+0xfc>
 8004866:	f000 f9f7 	bl	8004c58 <__malloc_lock>
 800486a:	f8d8 3000 	ldr.w	r3, [r8]
 800486e:	461c      	mov	r4, r3
 8004870:	bb44      	cbnz	r4, 80048c4 <_malloc_r+0x88>
 8004872:	4629      	mov	r1, r5
 8004874:	4630      	mov	r0, r6
 8004876:	f7ff ffbf 	bl	80047f8 <sbrk_aligned>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	4604      	mov	r4, r0
 800487e:	d158      	bne.n	8004932 <_malloc_r+0xf6>
 8004880:	f8d8 4000 	ldr.w	r4, [r8]
 8004884:	4627      	mov	r7, r4
 8004886:	2f00      	cmp	r7, #0
 8004888:	d143      	bne.n	8004912 <_malloc_r+0xd6>
 800488a:	2c00      	cmp	r4, #0
 800488c:	d04b      	beq.n	8004926 <_malloc_r+0xea>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	4639      	mov	r1, r7
 8004892:	4630      	mov	r0, r6
 8004894:	eb04 0903 	add.w	r9, r4, r3
 8004898:	f000 fa32 	bl	8004d00 <_sbrk_r>
 800489c:	4581      	cmp	r9, r0
 800489e:	d142      	bne.n	8004926 <_malloc_r+0xea>
 80048a0:	6821      	ldr	r1, [r4, #0]
 80048a2:	1a6d      	subs	r5, r5, r1
 80048a4:	4629      	mov	r1, r5
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ffa6 	bl	80047f8 <sbrk_aligned>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d03a      	beq.n	8004926 <_malloc_r+0xea>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	442b      	add	r3, r5
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	f8d8 3000 	ldr.w	r3, [r8]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	bb62      	cbnz	r2, 8004918 <_malloc_r+0xdc>
 80048be:	f8c8 7000 	str.w	r7, [r8]
 80048c2:	e00f      	b.n	80048e4 <_malloc_r+0xa8>
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	1b52      	subs	r2, r2, r5
 80048c8:	d420      	bmi.n	800490c <_malloc_r+0xd0>
 80048ca:	2a0b      	cmp	r2, #11
 80048cc:	d917      	bls.n	80048fe <_malloc_r+0xc2>
 80048ce:	1961      	adds	r1, r4, r5
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	6025      	str	r5, [r4, #0]
 80048d4:	bf18      	it	ne
 80048d6:	6059      	strne	r1, [r3, #4]
 80048d8:	6863      	ldr	r3, [r4, #4]
 80048da:	bf08      	it	eq
 80048dc:	f8c8 1000 	streq.w	r1, [r8]
 80048e0:	5162      	str	r2, [r4, r5]
 80048e2:	604b      	str	r3, [r1, #4]
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 f9bd 	bl	8004c64 <__malloc_unlock>
 80048ea:	f104 000b 	add.w	r0, r4, #11
 80048ee:	1d23      	adds	r3, r4, #4
 80048f0:	f020 0007 	bic.w	r0, r0, #7
 80048f4:	1ac2      	subs	r2, r0, r3
 80048f6:	bf1c      	itt	ne
 80048f8:	1a1b      	subne	r3, r3, r0
 80048fa:	50a3      	strne	r3, [r4, r2]
 80048fc:	e7af      	b.n	800485e <_malloc_r+0x22>
 80048fe:	6862      	ldr	r2, [r4, #4]
 8004900:	42a3      	cmp	r3, r4
 8004902:	bf0c      	ite	eq
 8004904:	f8c8 2000 	streq.w	r2, [r8]
 8004908:	605a      	strne	r2, [r3, #4]
 800490a:	e7eb      	b.n	80048e4 <_malloc_r+0xa8>
 800490c:	4623      	mov	r3, r4
 800490e:	6864      	ldr	r4, [r4, #4]
 8004910:	e7ae      	b.n	8004870 <_malloc_r+0x34>
 8004912:	463c      	mov	r4, r7
 8004914:	687f      	ldr	r7, [r7, #4]
 8004916:	e7b6      	b.n	8004886 <_malloc_r+0x4a>
 8004918:	461a      	mov	r2, r3
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	d1fb      	bne.n	8004918 <_malloc_r+0xdc>
 8004920:	2300      	movs	r3, #0
 8004922:	6053      	str	r3, [r2, #4]
 8004924:	e7de      	b.n	80048e4 <_malloc_r+0xa8>
 8004926:	230c      	movs	r3, #12
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	4630      	mov	r0, r6
 800492c:	f000 f99a 	bl	8004c64 <__malloc_unlock>
 8004930:	e794      	b.n	800485c <_malloc_r+0x20>
 8004932:	6005      	str	r5, [r0, #0]
 8004934:	e7d6      	b.n	80048e4 <_malloc_r+0xa8>
 8004936:	bf00      	nop
 8004938:	200003e0 	.word	0x200003e0

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4698      	mov	r8, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800494c:	4293      	cmp	r3, r2
 800494e:	bfb8      	it	lt
 8004950:	4613      	movlt	r3, r2
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004958:	4607      	mov	r7, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc26      	bgt.n	80049d2 <_printf_common+0x96>
 8004984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004988:	6822      	ldr	r2, [r4, #0]
 800498a:	3b00      	subs	r3, #0
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42b      	bmi.n	80049ec <_printf_common+0xb0>
 8004994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	47c8      	blx	r9
 800499e:	3001      	adds	r0, #1
 80049a0:	d01e      	beq.n	80049e0 <_printf_common+0xa4>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	f003 0306 	and.w	r3, r3, #6
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf02      	ittt	eq
 80049ae:	68e5      	ldreq	r5, [r4, #12]
 80049b0:	6833      	ldreq	r3, [r6, #0]
 80049b2:	1aed      	subeq	r5, r5, r3
 80049b4:	68a3      	ldr	r3, [r4, #8]
 80049b6:	bf0c      	ite	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	2500      	movne	r5, #0
 80049be:	4293      	cmp	r3, r2
 80049c0:	bfc4      	itt	gt
 80049c2:	1a9b      	subgt	r3, r3, r2
 80049c4:	18ed      	addgt	r5, r5, r3
 80049c6:	2600      	movs	r6, #0
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xc8>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xa8>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4641      	mov	r1, r8
 80049d8:	4638      	mov	r0, r7
 80049da:	47c8      	blx	r9
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xac>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c6      	b.n	800497a <_printf_common+0x3e>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	@ 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c7      	b.n	8004994 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c8      	blx	r9
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa4>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x8e>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a20:	2f78      	cmp	r7, #120	@ 0x78
 8004a22:	4691      	mov	r9, r2
 8004a24:	4680      	mov	r8, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	@ 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d2 	beq.w	8004bde <_printf_i+0x1c6>
 8004a3a:	2f58      	cmp	r7, #88	@ 0x58
 8004a3c:	f000 80b9 	beq.w	8004bb2 <_printf_i+0x19a>
 8004a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	@ (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bc5 	.word	0x08004bc5
 8004a88:	08004aef 	.word	0x08004aef
 8004a8c:	08004b7f 	.word	0x08004b7f
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004be7 	.word	0x08004be7
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004aef 	.word	0x08004aef
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004b87 	.word	0x08004b87
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6032      	str	r2, [r6, #0]
 8004ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e09d      	b.n	8004c00 <_printf_i+0x1e8>
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6031      	str	r1, [r6, #0]
 8004acc:	0606      	lsls	r6, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xbc>
 8004ad0:	681d      	ldr	r5, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <_printf_i+0xc4>
 8004ad4:	0645      	lsls	r5, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xb8>
 8004ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	da03      	bge.n	8004ae8 <_printf_i+0xd0>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	426d      	negs	r5, r5
 8004ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae8:	4859      	ldr	r0, [pc, #356]	@ (8004c50 <_printf_i+0x238>)
 8004aea:	230a      	movs	r3, #10
 8004aec:	e011      	b.n	8004b12 <_printf_i+0xfa>
 8004aee:	6821      	ldr	r1, [r4, #0]
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	0608      	lsls	r0, r1, #24
 8004af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004af8:	d402      	bmi.n	8004b00 <_printf_i+0xe8>
 8004afa:	0649      	lsls	r1, r1, #25
 8004afc:	bf48      	it	mi
 8004afe:	b2ad      	uxthmi	r5, r5
 8004b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b02:	4853      	ldr	r0, [pc, #332]	@ (8004c50 <_printf_i+0x238>)
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	bf14      	ite	ne
 8004b08:	230a      	movne	r3, #10
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b12:	6866      	ldr	r6, [r4, #4]
 8004b14:	60a6      	str	r6, [r4, #8]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	bfa2      	ittt	ge
 8004b1a:	6821      	ldrge	r1, [r4, #0]
 8004b1c:	f021 0104 	bicge.w	r1, r1, #4
 8004b20:	6021      	strge	r1, [r4, #0]
 8004b22:	b90d      	cbnz	r5, 8004b28 <_printf_i+0x110>
 8004b24:	2e00      	cmp	r6, #0
 8004b26:	d04b      	beq.n	8004bc0 <_printf_i+0x1a8>
 8004b28:	4616      	mov	r6, r2
 8004b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b32:	5dc7      	ldrb	r7, [r0, r7]
 8004b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b38:	462f      	mov	r7, r5
 8004b3a:	42bb      	cmp	r3, r7
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	d9f4      	bls.n	8004b2a <_printf_i+0x112>
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10b      	bne.n	8004b5c <_printf_i+0x144>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	07df      	lsls	r7, r3, #31
 8004b48:	d508      	bpl.n	8004b5c <_printf_i+0x144>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	6861      	ldr	r1, [r4, #4]
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	bfde      	ittt	le
 8004b52:	2330      	movle	r3, #48	@ 0x30
 8004b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b5c:	1b92      	subs	r2, r2, r6
 8004b5e:	6122      	str	r2, [r4, #16]
 8004b60:	f8cd a000 	str.w	sl, [sp]
 8004b64:	464b      	mov	r3, r9
 8004b66:	aa03      	add	r2, sp, #12
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f7ff fee6 	bl	800493c <_printf_common>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d14a      	bne.n	8004c0a <_printf_i+0x1f2>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b78:	b004      	add	sp, #16
 8004b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	4833      	ldr	r0, [pc, #204]	@ (8004c54 <_printf_i+0x23c>)
 8004b88:	2778      	movs	r7, #120	@ 0x78
 8004b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	6831      	ldr	r1, [r6, #0]
 8004b92:	061f      	lsls	r7, r3, #24
 8004b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b98:	d402      	bmi.n	8004ba0 <_printf_i+0x188>
 8004b9a:	065f      	lsls	r7, r3, #25
 8004b9c:	bf48      	it	mi
 8004b9e:	b2ad      	uxthmi	r5, r5
 8004ba0:	6031      	str	r1, [r6, #0]
 8004ba2:	07d9      	lsls	r1, r3, #31
 8004ba4:	bf44      	itt	mi
 8004ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8004baa:	6023      	strmi	r3, [r4, #0]
 8004bac:	b11d      	cbz	r5, 8004bb6 <_printf_i+0x19e>
 8004bae:	2310      	movs	r3, #16
 8004bb0:	e7ac      	b.n	8004b0c <_printf_i+0xf4>
 8004bb2:	4827      	ldr	r0, [pc, #156]	@ (8004c50 <_printf_i+0x238>)
 8004bb4:	e7e9      	b.n	8004b8a <_printf_i+0x172>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f023 0320 	bic.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	e7f6      	b.n	8004bae <_printf_i+0x196>
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	e7bd      	b.n	8004b40 <_printf_i+0x128>
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	6825      	ldr	r5, [r4, #0]
 8004bc8:	6961      	ldr	r1, [r4, #20]
 8004bca:	1d18      	adds	r0, r3, #4
 8004bcc:	6030      	str	r0, [r6, #0]
 8004bce:	062e      	lsls	r6, r5, #24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	d501      	bpl.n	8004bd8 <_printf_i+0x1c0>
 8004bd4:	6019      	str	r1, [r3, #0]
 8004bd6:	e002      	b.n	8004bde <_printf_i+0x1c6>
 8004bd8:	0668      	lsls	r0, r5, #25
 8004bda:	d5fb      	bpl.n	8004bd4 <_printf_i+0x1bc>
 8004bdc:	8019      	strh	r1, [r3, #0]
 8004bde:	2300      	movs	r3, #0
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	4616      	mov	r6, r2
 8004be4:	e7bc      	b.n	8004b60 <_printf_i+0x148>
 8004be6:	6833      	ldr	r3, [r6, #0]
 8004be8:	1d1a      	adds	r2, r3, #4
 8004bea:	6032      	str	r2, [r6, #0]
 8004bec:	681e      	ldr	r6, [r3, #0]
 8004bee:	6862      	ldr	r2, [r4, #4]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7fb faf4 	bl	80001e0 <memchr>
 8004bf8:	b108      	cbz	r0, 8004bfe <_printf_i+0x1e6>
 8004bfa:	1b80      	subs	r0, r0, r6
 8004bfc:	6060      	str	r0, [r4, #4]
 8004bfe:	6863      	ldr	r3, [r4, #4]
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	2300      	movs	r3, #0
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c08:	e7aa      	b.n	8004b60 <_printf_i+0x148>
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4640      	mov	r0, r8
 8004c12:	47d0      	blx	sl
 8004c14:	3001      	adds	r0, #1
 8004c16:	d0ad      	beq.n	8004b74 <_printf_i+0x15c>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	079b      	lsls	r3, r3, #30
 8004c1c:	d413      	bmi.n	8004c46 <_printf_i+0x22e>
 8004c1e:	68e0      	ldr	r0, [r4, #12]
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	4298      	cmp	r0, r3
 8004c24:	bfb8      	it	lt
 8004c26:	4618      	movlt	r0, r3
 8004c28:	e7a6      	b.n	8004b78 <_printf_i+0x160>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4640      	mov	r0, r8
 8004c32:	47d0      	blx	sl
 8004c34:	3001      	adds	r0, #1
 8004c36:	d09d      	beq.n	8004b74 <_printf_i+0x15c>
 8004c38:	3501      	adds	r5, #1
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	9903      	ldr	r1, [sp, #12]
 8004c3e:	1a5b      	subs	r3, r3, r1
 8004c40:	42ab      	cmp	r3, r5
 8004c42:	dcf2      	bgt.n	8004c2a <_printf_i+0x212>
 8004c44:	e7eb      	b.n	8004c1e <_printf_i+0x206>
 8004c46:	2500      	movs	r5, #0
 8004c48:	f104 0619 	add.w	r6, r4, #25
 8004c4c:	e7f5      	b.n	8004c3a <_printf_i+0x222>
 8004c4e:	bf00      	nop
 8004c50:	08004f11 	.word	0x08004f11
 8004c54:	08004f22 	.word	0x08004f22

08004c58 <__malloc_lock>:
 8004c58:	4801      	ldr	r0, [pc, #4]	@ (8004c60 <__malloc_lock+0x8>)
 8004c5a:	f7ff bc73 	b.w	8004544 <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	200003d8 	.word	0x200003d8

08004c64 <__malloc_unlock>:
 8004c64:	4801      	ldr	r0, [pc, #4]	@ (8004c6c <__malloc_unlock+0x8>)
 8004c66:	f7ff bc6e 	b.w	8004546 <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	200003d8 	.word	0x200003d8

08004c70 <_realloc_r>:
 8004c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c74:	4680      	mov	r8, r0
 8004c76:	4615      	mov	r5, r2
 8004c78:	460c      	mov	r4, r1
 8004c7a:	b921      	cbnz	r1, 8004c86 <_realloc_r+0x16>
 8004c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c80:	4611      	mov	r1, r2
 8004c82:	f7ff bddb 	b.w	800483c <_malloc_r>
 8004c86:	b92a      	cbnz	r2, 8004c94 <_realloc_r+0x24>
 8004c88:	f000 f858 	bl	8004d3c <_free_r>
 8004c8c:	2400      	movs	r4, #0
 8004c8e:	4620      	mov	r0, r4
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c94:	f000 f89c 	bl	8004dd0 <_malloc_usable_size_r>
 8004c98:	4285      	cmp	r5, r0
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	d802      	bhi.n	8004ca4 <_realloc_r+0x34>
 8004c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ca2:	d8f4      	bhi.n	8004c8e <_realloc_r+0x1e>
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f7ff fdc8 	bl	800483c <_malloc_r>
 8004cac:	4607      	mov	r7, r0
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d0ec      	beq.n	8004c8c <_realloc_r+0x1c>
 8004cb2:	42b5      	cmp	r5, r6
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	bf28      	it	cs
 8004cba:	4632      	movcs	r2, r6
 8004cbc:	f000 f830 	bl	8004d20 <memcpy>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f000 f83a 	bl	8004d3c <_free_r>
 8004cc8:	463c      	mov	r4, r7
 8004cca:	e7e0      	b.n	8004c8e <_realloc_r+0x1e>

08004ccc <memmove>:
 8004ccc:	4288      	cmp	r0, r1
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	eb01 0402 	add.w	r4, r1, r2
 8004cd4:	d902      	bls.n	8004cdc <memmove+0x10>
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	d807      	bhi.n	8004cec <memmove+0x20>
 8004cdc:	1e43      	subs	r3, r0, #1
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d008      	beq.n	8004cf4 <memmove+0x28>
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cea:	e7f8      	b.n	8004cde <memmove+0x12>
 8004cec:	4402      	add	r2, r0
 8004cee:	4601      	mov	r1, r0
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d100      	bne.n	8004cf6 <memmove+0x2a>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfe:	e7f7      	b.n	8004cf0 <memmove+0x24>

08004d00 <_sbrk_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d06      	ldr	r5, [pc, #24]	@ (8004d1c <_sbrk_r+0x1c>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fc f836 	bl	8000d7c <_sbrk>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_sbrk_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_sbrk_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200003e4 	.word	0x200003e4

08004d20 <memcpy>:
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d28:	d100      	bne.n	8004d2c <memcpy+0xc>
 8004d2a:	4770      	bx	lr
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d1f9      	bne.n	8004d2e <memcpy+0xe>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <_free_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4605      	mov	r5, r0
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d041      	beq.n	8004dc8 <_free_r+0x8c>
 8004d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d48:	1f0c      	subs	r4, r1, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bfb8      	it	lt
 8004d4e:	18e4      	addlt	r4, r4, r3
 8004d50:	f7ff ff82 	bl	8004c58 <__malloc_lock>
 8004d54:	4a1d      	ldr	r2, [pc, #116]	@ (8004dcc <_free_r+0x90>)
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	b933      	cbnz	r3, 8004d68 <_free_r+0x2c>
 8004d5a:	6063      	str	r3, [r4, #4]
 8004d5c:	6014      	str	r4, [r2, #0]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d64:	f7ff bf7e 	b.w	8004c64 <__malloc_unlock>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d908      	bls.n	8004d7e <_free_r+0x42>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	1821      	adds	r1, r4, r0
 8004d70:	428b      	cmp	r3, r1
 8004d72:	bf01      	itttt	eq
 8004d74:	6819      	ldreq	r1, [r3, #0]
 8004d76:	685b      	ldreq	r3, [r3, #4]
 8004d78:	1809      	addeq	r1, r1, r0
 8004d7a:	6021      	streq	r1, [r4, #0]
 8004d7c:	e7ed      	b.n	8004d5a <_free_r+0x1e>
 8004d7e:	461a      	mov	r2, r3
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b10b      	cbz	r3, 8004d88 <_free_r+0x4c>
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d9fa      	bls.n	8004d7e <_free_r+0x42>
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	1850      	adds	r0, r2, r1
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d10b      	bne.n	8004da8 <_free_r+0x6c>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	4401      	add	r1, r0
 8004d94:	1850      	adds	r0, r2, r1
 8004d96:	4283      	cmp	r3, r0
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	d1e0      	bne.n	8004d5e <_free_r+0x22>
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6053      	str	r3, [r2, #4]
 8004da2:	4408      	add	r0, r1
 8004da4:	6010      	str	r0, [r2, #0]
 8004da6:	e7da      	b.n	8004d5e <_free_r+0x22>
 8004da8:	d902      	bls.n	8004db0 <_free_r+0x74>
 8004daa:	230c      	movs	r3, #12
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	e7d6      	b.n	8004d5e <_free_r+0x22>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	1821      	adds	r1, r4, r0
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf04      	itt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	bf04      	itt	eq
 8004dc0:	1809      	addeq	r1, r1, r0
 8004dc2:	6021      	streq	r1, [r4, #0]
 8004dc4:	6054      	str	r4, [r2, #4]
 8004dc6:	e7ca      	b.n	8004d5e <_free_r+0x22>
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop
 8004dcc:	200003e0 	.word	0x200003e0

08004dd0 <_malloc_usable_size_r>:
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f18      	subs	r0, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfbc      	itt	lt
 8004dda:	580b      	ldrlt	r3, [r1, r0]
 8004ddc:	18c0      	addlt	r0, r0, r3
 8004dde:	4770      	bx	lr

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
