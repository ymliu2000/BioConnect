
PB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000603c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006654  08006654  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800665c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000060  080066bc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080066bc  000083f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ba  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e49  00000000  00000000  0001484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00016698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c7  00000000  00000000  000170c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d11  00000000  00000000  00017887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c593  00000000  00000000  0003d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d99  00000000  00000000  00049b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001318c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  00131908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00134b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061b4 	.word	0x080061b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080061b4 	.word	0x080061b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000608:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800060c:	f000 b96a 	b.w	80008e4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	460c      	mov	r4, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d14e      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000634:	4694      	mov	ip, r2
 8000636:	458c      	cmp	ip, r1
 8000638:	4686      	mov	lr, r0
 800063a:	fab2 f282 	clz	r2, r2
 800063e:	d962      	bls.n	8000706 <__udivmoddi4+0xde>
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	4091      	lsls	r1, r2
 8000648:	fa20 f303 	lsr.w	r3, r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	4319      	orrs	r1, r3
 8000652:	fa00 fe02 	lsl.w	lr, r0, r2
 8000656:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065a:	fa1f f68c 	uxth.w	r6, ip
 800065e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000662:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000666:	fb07 1114 	mls	r1, r7, r4, r1
 800066a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066e:	fb04 f106 	mul.w	r1, r4, r6
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800067e:	f080 8112 	bcs.w	80008a6 <__udivmoddi4+0x27e>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 810f 	bls.w	80008a6 <__udivmoddi4+0x27e>
 8000688:	3c02      	subs	r4, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a59      	subs	r1, r3, r1
 800068e:	fa1f f38e 	uxth.w	r3, lr
 8000692:	fbb1 f0f7 	udiv	r0, r1, r7
 8000696:	fb07 1110 	mls	r1, r7, r0, r1
 800069a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069e:	fb00 f606 	mul.w	r6, r0, r6
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x94>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006ae:	f080 80fc 	bcs.w	80008aa <__udivmoddi4+0x282>
 80006b2:	429e      	cmp	r6, r3
 80006b4:	f240 80f9 	bls.w	80008aa <__udivmoddi4+0x282>
 80006b8:	4463      	add	r3, ip
 80006ba:	3802      	subs	r0, #2
 80006bc:	1b9b      	subs	r3, r3, r6
 80006be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006c2:	2100      	movs	r1, #0
 80006c4:	b11d      	cbz	r5, 80006ce <__udivmoddi4+0xa6>
 80006c6:	40d3      	lsrs	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	e9c5 3200 	strd	r3, r2, [r5]
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d905      	bls.n	80006e2 <__udivmoddi4+0xba>
 80006d6:	b10d      	cbz	r5, 80006dc <__udivmoddi4+0xb4>
 80006d8:	e9c5 0100 	strd	r0, r1, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	4608      	mov	r0, r1
 80006e0:	e7f5      	b.n	80006ce <__udivmoddi4+0xa6>
 80006e2:	fab3 f183 	clz	r1, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d146      	bne.n	8000778 <__udivmoddi4+0x150>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xcc>
 80006ee:	4290      	cmp	r0, r2
 80006f0:	f0c0 80f0 	bcc.w	80008d4 <__udivmoddi4+0x2ac>
 80006f4:	1a86      	subs	r6, r0, r2
 80006f6:	eb64 0303 	sbc.w	r3, r4, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0e6      	beq.n	80006ce <__udivmoddi4+0xa6>
 8000700:	e9c5 6300 	strd	r6, r3, [r5]
 8000704:	e7e3      	b.n	80006ce <__udivmoddi4+0xa6>
 8000706:	2a00      	cmp	r2, #0
 8000708:	f040 8090 	bne.w	800082c <__udivmoddi4+0x204>
 800070c:	eba1 040c 	sub.w	r4, r1, ip
 8000710:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000714:	fa1f f78c 	uxth.w	r7, ip
 8000718:	2101      	movs	r1, #1
 800071a:	fbb4 f6f8 	udiv	r6, r4, r8
 800071e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000722:	fb08 4416 	mls	r4, r8, r6, r4
 8000726:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800072a:	fb07 f006 	mul.w	r0, r7, r6
 800072e:	4298      	cmp	r0, r3
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x11c>
 8000732:	eb1c 0303 	adds.w	r3, ip, r3
 8000736:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x11a>
 800073c:	4298      	cmp	r0, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 8000742:	4626      	mov	r6, r4
 8000744:	1a1c      	subs	r4, r3, r0
 8000746:	fa1f f38e 	uxth.w	r3, lr
 800074a:	fbb4 f0f8 	udiv	r0, r4, r8
 800074e:	fb08 4410 	mls	r4, r8, r0, r4
 8000752:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000756:	fb00 f707 	mul.w	r7, r0, r7
 800075a:	429f      	cmp	r7, r3
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x148>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x146>
 8000768:	429f      	cmp	r7, r3
 800076a:	f200 80b0 	bhi.w	80008ce <__udivmoddi4+0x2a6>
 800076e:	4620      	mov	r0, r4
 8000770:	1bdb      	subs	r3, r3, r7
 8000772:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000776:	e7a5      	b.n	80006c4 <__udivmoddi4+0x9c>
 8000778:	f1c1 0620 	rsb	r6, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 f706 	lsr.w	r7, r2, r6
 8000782:	431f      	orrs	r7, r3
 8000784:	fa20 fc06 	lsr.w	ip, r0, r6
 8000788:	fa04 f301 	lsl.w	r3, r4, r1
 800078c:	ea43 030c 	orr.w	r3, r3, ip
 8000790:	40f4      	lsrs	r4, r6
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	0c38      	lsrs	r0, r7, #16
 8000798:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800079c:	fbb4 fef0 	udiv	lr, r4, r0
 80007a0:	fa1f fc87 	uxth.w	ip, r7
 80007a4:	fb00 441e 	mls	r4, r0, lr, r4
 80007a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ac:	fb0e f90c 	mul.w	r9, lr, ip
 80007b0:	45a1      	cmp	r9, r4
 80007b2:	fa02 f201 	lsl.w	r2, r2, r1
 80007b6:	d90a      	bls.n	80007ce <__udivmoddi4+0x1a6>
 80007b8:	193c      	adds	r4, r7, r4
 80007ba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80007be:	f080 8084 	bcs.w	80008ca <__udivmoddi4+0x2a2>
 80007c2:	45a1      	cmp	r9, r4
 80007c4:	f240 8081 	bls.w	80008ca <__udivmoddi4+0x2a2>
 80007c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007cc:	443c      	add	r4, r7
 80007ce:	eba4 0409 	sub.w	r4, r4, r9
 80007d2:	fa1f f983 	uxth.w	r9, r3
 80007d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007da:	fb00 4413 	mls	r4, r0, r3, r4
 80007de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e6:	45a4      	cmp	ip, r4
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x1d2>
 80007ea:	193c      	adds	r4, r7, r4
 80007ec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80007f0:	d267      	bcs.n	80008c2 <__udivmoddi4+0x29a>
 80007f2:	45a4      	cmp	ip, r4
 80007f4:	d965      	bls.n	80008c2 <__udivmoddi4+0x29a>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	443c      	add	r4, r7
 80007fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000802:	eba4 040c 	sub.w	r4, r4, ip
 8000806:	429c      	cmp	r4, r3
 8000808:	46ce      	mov	lr, r9
 800080a:	469c      	mov	ip, r3
 800080c:	d351      	bcc.n	80008b2 <__udivmoddi4+0x28a>
 800080e:	d04e      	beq.n	80008ae <__udivmoddi4+0x286>
 8000810:	b155      	cbz	r5, 8000828 <__udivmoddi4+0x200>
 8000812:	ebb8 030e 	subs.w	r3, r8, lr
 8000816:	eb64 040c 	sbc.w	r4, r4, ip
 800081a:	fa04 f606 	lsl.w	r6, r4, r6
 800081e:	40cb      	lsrs	r3, r1
 8000820:	431e      	orrs	r6, r3
 8000822:	40cc      	lsrs	r4, r1
 8000824:	e9c5 6400 	strd	r6, r4, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	e750      	b.n	80006ce <__udivmoddi4+0xa6>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f103 	lsr.w	r1, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	fa24 f303 	lsr.w	r3, r4, r3
 800083c:	4094      	lsls	r4, r2
 800083e:	430c      	orrs	r4, r1
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa00 fe02 	lsl.w	lr, r0, r2
 8000848:	fa1f f78c 	uxth.w	r7, ip
 800084c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000850:	fb08 3110 	mls	r1, r8, r0, r3
 8000854:	0c23      	lsrs	r3, r4, #16
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb00 f107 	mul.w	r1, r0, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x24c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800086a:	d22c      	bcs.n	80008c6 <__udivmoddi4+0x29e>
 800086c:	4299      	cmp	r1, r3
 800086e:	d92a      	bls.n	80008c6 <__udivmoddi4+0x29e>
 8000870:	3802      	subs	r0, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f1f8 	udiv	r1, r3, r8
 800087c:	fb08 3311 	mls	r3, r8, r1, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb01 f307 	mul.w	r3, r1, r7
 8000888:	42a3      	cmp	r3, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x276>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000894:	d213      	bcs.n	80008be <__udivmoddi4+0x296>
 8000896:	42a3      	cmp	r3, r4
 8000898:	d911      	bls.n	80008be <__udivmoddi4+0x296>
 800089a:	3902      	subs	r1, #2
 800089c:	4464      	add	r4, ip
 800089e:	1ae4      	subs	r4, r4, r3
 80008a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008a4:	e739      	b.n	800071a <__udivmoddi4+0xf2>
 80008a6:	4604      	mov	r4, r0
 80008a8:	e6f0      	b.n	800068c <__udivmoddi4+0x64>
 80008aa:	4608      	mov	r0, r1
 80008ac:	e706      	b.n	80006bc <__udivmoddi4+0x94>
 80008ae:	45c8      	cmp	r8, r9
 80008b0:	d2ae      	bcs.n	8000810 <__udivmoddi4+0x1e8>
 80008b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ba:	3801      	subs	r0, #1
 80008bc:	e7a8      	b.n	8000810 <__udivmoddi4+0x1e8>
 80008be:	4631      	mov	r1, r6
 80008c0:	e7ed      	b.n	800089e <__udivmoddi4+0x276>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e799      	b.n	80007fa <__udivmoddi4+0x1d2>
 80008c6:	4630      	mov	r0, r6
 80008c8:	e7d4      	b.n	8000874 <__udivmoddi4+0x24c>
 80008ca:	46d6      	mov	lr, sl
 80008cc:	e77f      	b.n	80007ce <__udivmoddi4+0x1a6>
 80008ce:	4463      	add	r3, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	e74d      	b.n	8000770 <__udivmoddi4+0x148>
 80008d4:	4606      	mov	r6, r0
 80008d6:	4623      	mov	r3, r4
 80008d8:	4608      	mov	r0, r1
 80008da:	e70f      	b.n	80006fc <__udivmoddi4+0xd4>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	e730      	b.n	8000744 <__udivmoddi4+0x11c>
 80008e2:	bf00      	nop

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <HAL_UART_RxCpltCallback>:
 * @brief  UART receive complete callback for USART1
 *         We assume that we receive a full line at once (since original code used HAL_UART_Receive_IT with a block size).
 *         To make it more robust, consider using single-byte interrupt or IDLE line detection.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a09      	ldr	r2, [pc, #36]	@ (800091c <HAL_UART_RxCpltCallback+0x34>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_UART_RxCpltCallback+0x2a>
    // Ensure termination
    rxBuffer[RX_BUFFER_SIZE - 1] = '\0';
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_UART_RxCpltCallback+0x38>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

    // Find newline or treat the whole buffer as one message
    // If your protocol ends with '\r\n', you should find it.
    // For simplicity, assume the entire buffer is one line:
    rxReady = 1;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_UART_RxCpltCallback+0x3c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]

    // Re-arm the receive
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer, RX_BUFFER_SIZE-1);
 8000908:	227f      	movs	r2, #127	@ 0x7f
 800090a:	4905      	ldr	r1, [pc, #20]	@ (8000920 <HAL_UART_RxCpltCallback+0x38>)
 800090c:	4806      	ldr	r0, [pc, #24]	@ (8000928 <HAL_UART_RxCpltCallback+0x40>)
 800090e:	f002 ff05 	bl	800371c <HAL_UART_Receive_IT>
  }
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40013800 	.word	0x40013800
 8000920:	2000018c 	.word	0x2000018c
 8000924:	2000020c 	.word	0x2000020c
 8000928:	2000007c 	.word	0x2000007c

0800092c <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_UART_TxCpltCallback+0x38>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d103      	bne.n	8000946 <HAL_UART_TxCpltCallback+0x1a>
    uart1TxBusy = 0; // UART1 transmission finished
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_UART_TxCpltCallback+0x3c>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
  }
  else if(huart->Instance == USART2) {
    uart2TxBusy = 0; // UART2 transmission finished
  }
}
 8000944:	e007      	b.n	8000956 <HAL_UART_TxCpltCallback+0x2a>
  else if(huart->Instance == USART2) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_UART_TxCpltCallback+0x40>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d102      	bne.n	8000956 <HAL_UART_TxCpltCallback+0x2a>
    uart2TxBusy = 0; // UART2 transmission finished
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <HAL_UART_TxCpltCallback+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40013800 	.word	0x40013800
 8000968:	20000290 	.word	0x20000290
 800096c:	40004400 	.word	0x40004400
 8000970:	20000291 	.word	0x20000291

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0c0      	sub	sp, #256	@ 0x100
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fee6 	bl	800174a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 fc35 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fce5 	bl	8001350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000986:	f000 fcb3 	bl	80012f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800098a:	f000 fc81 	bl	8001290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Adjust interrupt priorities if necessary:
     * Ensure USART1 interrupts have a priority that ensures timely processing.
     * For example:
     */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	2025      	movs	r0, #37	@ 0x25
 8000994:	f001 f84d 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	2026      	movs	r0, #38	@ 0x26
 800099e:	f001 f848 	bl	8001a32 <HAL_NVIC_SetPriority>
    // Lower number = higher priority. Adjust as needed.

    /* Start UART receive interrupt for board-to-board communication */
    memset(rxBuffer,0,sizeof(rxBuffer));
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	2100      	movs	r1, #0
 80009a6:	4839      	ldr	r0, [pc, #228]	@ (8000a8c <main+0x118>)
 80009a8:	f004 fb01 	bl	8004fae <memset>
    HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,RX_BUFFER_SIZE-1);
 80009ac:	227f      	movs	r2, #127	@ 0x7f
 80009ae:	4937      	ldr	r1, [pc, #220]	@ (8000a8c <main+0x118>)
 80009b0:	4837      	ldr	r0, [pc, #220]	@ (8000a90 <main+0x11c>)
 80009b2:	f002 feb3 	bl	800371c <HAL_UART_Receive_IT>

    UART_Send_IT(&huart2,"Processing Board (3-level SM). Start in IDLE.\r\n");
 80009b6:	4937      	ldr	r1, [pc, #220]	@ (8000a94 <main+0x120>)
 80009b8:	4837      	ldr	r0, [pc, #220]	@ (8000a98 <main+0x124>)
 80009ba:	f000 fbd1 	bl	8001160 <UART_Send_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    CheckButton();
 80009be:	f000 f981 	bl	8000cc4 <CheckButton>
	    RunStateMachine();
 80009c2:	f000 f87f 	bl	8000ac4 <RunStateMachine>
	    UpdateLedBlink();
 80009c6:	f000 f9f3 	bl	8000db0 <UpdateLedBlink>

	    // If rxReady is set, process the received line
	    if(rxReady){
 80009ca:	4b34      	ldr	r3, [pc, #208]	@ (8000a9c <main+0x128>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d056      	beq.n	8000a82 <main+0x10e>
	      rxReady = 0;
 80009d4:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <main+0x128>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	      // Make a copy to avoid issues if we re-arm reception
	      char lineCopy[RX_BUFFER_SIZE];
	      strncpy(lineCopy, rxBuffer, RX_BUFFER_SIZE-1);
 80009da:	463b      	mov	r3, r7
 80009dc:	227f      	movs	r2, #127	@ 0x7f
 80009de:	492b      	ldr	r1, [pc, #172]	@ (8000a8c <main+0x118>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 fad1 	bl	8004f88 <strncpy>
	      lineCopy[RX_BUFFER_SIZE-1] = '\0';
 80009e6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	      // Debug print
	      char debugLine[128];
	      snprintf(debugLine, sizeof(debugLine), "[PB] RxCplt: %s\n", lineCopy);
 80009f4:	463b      	mov	r3, r7
 80009f6:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80009fa:	4a29      	ldr	r2, [pc, #164]	@ (8000aa0 <main+0x12c>)
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	f004 fa51 	bl	8004ea4 <sniprintf>
	      UART_Send_IT(&huart2, debugLine);
 8000a02:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a06:	4619      	mov	r1, r3
 8000a08:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <main+0x124>)
 8000a0a:	f000 fba9 	bl	8001160 <UART_Send_IT>

	      // Parse the line
	      if(strncmp(lineCopy, "DATA,",5)==0) {
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2205      	movs	r2, #5
 8000a12:	4924      	ldr	r1, [pc, #144]	@ (8000aa4 <main+0x130>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 faa5 	bl	8004f64 <strncmp>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <main+0xb6>
	        ProcessCollectorData(lineCopy);
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fb0a 	bl	800103c <ProcessCollectorData>
 8000a28:	e02b      	b.n	8000a82 <main+0x10e>
	      } else if(strncmp(lineCopy,"ACK:START",9)==0) {
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	491e      	ldr	r1, [pc, #120]	@ (8000aa8 <main+0x134>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fa97 	bl	8004f64 <strncmp>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <main+0xd2>
	        UART_Send_IT(&huart2,"Collector ACK:START\r\n");
 8000a3c:	491b      	ldr	r1, [pc, #108]	@ (8000aac <main+0x138>)
 8000a3e:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <main+0x124>)
 8000a40:	f000 fb8e 	bl	8001160 <UART_Send_IT>
 8000a44:	e01d      	b.n	8000a82 <main+0x10e>
	      } else if(strncmp(lineCopy,"ACK:STOP",8)==0) {
 8000a46:	463b      	mov	r3, r7
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4919      	ldr	r1, [pc, #100]	@ (8000ab0 <main+0x13c>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 fa89 	bl	8004f64 <strncmp>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <main+0xee>
	        UART_Send_IT(&huart2,"Collector ACK:STOP\r\n");
 8000a58:	4916      	ldr	r1, [pc, #88]	@ (8000ab4 <main+0x140>)
 8000a5a:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <main+0x124>)
 8000a5c:	f000 fb80 	bl	8001160 <UART_Send_IT>
 8000a60:	e00f      	b.n	8000a82 <main+0x10e>
	      } else if(strncmp(lineCopy,"ERROR:",6)==0) {
 8000a62:	463b      	mov	r3, r7
 8000a64:	2206      	movs	r2, #6
 8000a66:	4914      	ldr	r1, [pc, #80]	@ (8000ab8 <main+0x144>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fa7b 	bl	8004f64 <strncmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d106      	bne.n	8000a82 <main+0x10e>
	        UART_Send_IT(&huart2,"Collector ERROR\r\n");
 8000a74:	4911      	ldr	r1, [pc, #68]	@ (8000abc <main+0x148>)
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <main+0x124>)
 8000a78:	f000 fb72 	bl	8001160 <UART_Send_IT>
	        level1State = STATE_ERROR;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <main+0x14c>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	701a      	strb	r2, [r3, #0]
	      }
	    }

	    HAL_Delay(20);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f000 fed6 	bl	8001834 <HAL_Delay>
	    CheckButton();
 8000a88:	e799      	b.n	80009be <main+0x4a>
 8000a8a:	bf00      	nop
 8000a8c:	2000018c 	.word	0x2000018c
 8000a90:	2000007c 	.word	0x2000007c
 8000a94:	080061cc 	.word	0x080061cc
 8000a98:	20000104 	.word	0x20000104
 8000a9c:	2000020c 	.word	0x2000020c
 8000aa0:	080061fc 	.word	0x080061fc
 8000aa4:	08006210 	.word	0x08006210
 8000aa8:	08006218 	.word	0x08006218
 8000aac:	08006224 	.word	0x08006224
 8000ab0:	0800623c 	.word	0x0800623c
 8000ab4:	08006248 	.word	0x08006248
 8000ab8:	08006260 	.word	0x08006260
 8000abc:	08006268 	.word	0x08006268
 8000ac0:	20000292 	.word	0x20000292

08000ac4 <RunStateMachine>:
  }
  /* USER CODE END 3 */
}

void RunStateMachine(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	@ 0x40
 8000ac8:	af00      	add	r7, sp, #0
  switch(level1State)
 8000aca:	4b6c      	ldr	r3, [pc, #432]	@ (8000c7c <RunStateMachine+0x1b8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	f200 80cf 	bhi.w	8000c72 <RunStateMachine+0x1ae>
 8000ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <RunStateMachine+0x18>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000aed 	.word	0x08000aed
 8000ae0:	08000b2d 	.word	0x08000b2d
 8000ae4:	08000c1f 	.word	0x08000c1f
 8000ae8:	08000c47 	.word	0x08000c47
  {
    case STATE_IDLE:
      if(btnShortPress)
 8000aec:	4b64      	ldr	r3, [pc, #400]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 80b7 	beq.w	8000c64 <RunStateMachine+0x1a0>
      {
        level1State = STATE_SELECT;
 8000af6:	4b61      	ldr	r3, [pc, #388]	@ (8000c7c <RunStateMachine+0x1b8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
        selectSubState = SUB_WORKMODE_SELECT;
 8000afc:	4b61      	ldr	r3, [pc, #388]	@ (8000c84 <RunStateMachine+0x1c0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

        char dbg[64];
        snprintf(dbg, sizeof(dbg), "Enter STATE_SELECT, Sub=WORKMODE_SELECT (workMode=%s)\r\n", (workMode==0?"IR":"RED"));
 8000b02:	4b61      	ldr	r3, [pc, #388]	@ (8000c88 <RunStateMachine+0x1c4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <RunStateMachine+0x4a>
 8000b0a:	4b60      	ldr	r3, [pc, #384]	@ (8000c8c <RunStateMachine+0x1c8>)
 8000b0c:	e000      	b.n	8000b10 <RunStateMachine+0x4c>
 8000b0e:	4b60      	ldr	r3, [pc, #384]	@ (8000c90 <RunStateMachine+0x1cc>)
 8000b10:	4638      	mov	r0, r7
 8000b12:	4a60      	ldr	r2, [pc, #384]	@ (8000c94 <RunStateMachine+0x1d0>)
 8000b14:	2140      	movs	r1, #64	@ 0x40
 8000b16:	f004 f9c5 	bl	8004ea4 <sniprintf>
        UART_Send_IT(&huart2, dbg);
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	485e      	ldr	r0, [pc, #376]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000b20:	f000 fb1e 	bl	8001160 <UART_Send_IT>

        btnShortPress=0;
 8000b24:	4b56      	ldr	r3, [pc, #344]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000b2a:	e09b      	b.n	8000c64 <RunStateMachine+0x1a0>

    case STATE_SELECT:
      switch(selectSubState)
 8000b2c:	4b55      	ldr	r3, [pc, #340]	@ (8000c84 <RunStateMachine+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d04b      	beq.n	8000bcc <RunStateMachine+0x108>
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	f300 8097 	bgt.w	8000c68 <RunStateMachine+0x1a4>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <RunStateMachine+0x80>
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d023      	beq.n	8000b8a <RunStateMachine+0xc6>
            snprintf(dbg,sizeof(dbg),"Now AdvMode=%s\r\n",(advMode==0?"HR/Arrhythmia":"SpO2"));
            UART_Send_IT(&huart2, dbg);
          }
          break;
      }
      break;
 8000b42:	e091      	b.n	8000c68 <RunStateMachine+0x1a4>
          if(btnShortPress)
 8000b44:	4b4e      	ldr	r3, [pc, #312]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d062      	beq.n	8000c12 <RunStateMachine+0x14e>
            workMode = !workMode;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c88 <RunStateMachine+0x1c4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c88 <RunStateMachine+0x1c4>)
 8000b5e:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 8000b60:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
            snprintf(dbg,sizeof(dbg),"Now WorkMode=%s\r\n",(workMode==0?"IR":"RED"));
 8000b66:	4b48      	ldr	r3, [pc, #288]	@ (8000c88 <RunStateMachine+0x1c4>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <RunStateMachine+0xae>
 8000b6e:	4b47      	ldr	r3, [pc, #284]	@ (8000c8c <RunStateMachine+0x1c8>)
 8000b70:	e000      	b.n	8000b74 <RunStateMachine+0xb0>
 8000b72:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <RunStateMachine+0x1cc>)
 8000b74:	4638      	mov	r0, r7
 8000b76:	4a49      	ldr	r2, [pc, #292]	@ (8000c9c <RunStateMachine+0x1d8>)
 8000b78:	2140      	movs	r1, #64	@ 0x40
 8000b7a:	f004 f993 	bl	8004ea4 <sniprintf>
            UART_Send_IT(&huart2, dbg);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4845      	ldr	r0, [pc, #276]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000b84:	f000 faec 	bl	8001160 <UART_Send_IT>
          break;
 8000b88:	e043      	b.n	8000c12 <RunStateMachine+0x14e>
          if(btnShortPress)
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d041      	beq.n	8000c16 <RunStateMachine+0x152>
            preprocMode++;
 8000b92:	4b43      	ldr	r3, [pc, #268]	@ (8000ca0 <RunStateMachine+0x1dc>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <RunStateMachine+0x1dc>)
 8000b9c:	701a      	strb	r2, [r3, #0]
            if(preprocMode>3) preprocMode=1;
 8000b9e:	4b40      	ldr	r3, [pc, #256]	@ (8000ca0 <RunStateMachine+0x1dc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d902      	bls.n	8000bac <RunStateMachine+0xe8>
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca0 <RunStateMachine+0x1dc>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 8000bac:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
            snprintf(dbg,sizeof(dbg),"Now PreprocMode=%d\r\n", preprocMode);
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <RunStateMachine+0x1dc>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4638      	mov	r0, r7
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ca4 <RunStateMachine+0x1e0>)
 8000bba:	2140      	movs	r1, #64	@ 0x40
 8000bbc:	f004 f972 	bl	8004ea4 <sniprintf>
            UART_Send_IT(&huart2, dbg);
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4834      	ldr	r0, [pc, #208]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000bc6:	f000 facb 	bl	8001160 <UART_Send_IT>
          break;
 8000bca:	e024      	b.n	8000c16 <RunStateMachine+0x152>
          if(btnShortPress)
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d022      	beq.n	8000c1a <RunStateMachine+0x156>
            advMode = !advMode;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <RunStateMachine+0x1e4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bf0c      	ite	eq
 8000bdc:	2301      	moveq	r3, #1
 8000bde:	2300      	movne	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <RunStateMachine+0x1e4>)
 8000be6:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 8000be8:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
            snprintf(dbg,sizeof(dbg),"Now AdvMode=%s\r\n",(advMode==0?"HR/Arrhythmia":"SpO2"));
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <RunStateMachine+0x1e4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <RunStateMachine+0x136>
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <RunStateMachine+0x1e8>)
 8000bf8:	e000      	b.n	8000bfc <RunStateMachine+0x138>
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <RunStateMachine+0x1ec>)
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb4 <RunStateMachine+0x1f0>)
 8000c00:	2140      	movs	r1, #64	@ 0x40
 8000c02:	f004 f94f 	bl	8004ea4 <sniprintf>
            UART_Send_IT(&huart2, dbg);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4823      	ldr	r0, [pc, #140]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000c0c:	f000 faa8 	bl	8001160 <UART_Send_IT>
          break;
 8000c10:	e003      	b.n	8000c1a <RunStateMachine+0x156>
          break;
 8000c12:	bf00      	nop
 8000c14:	e028      	b.n	8000c68 <RunStateMachine+0x1a4>
          break;
 8000c16:	bf00      	nop
 8000c18:	e026      	b.n	8000c68 <RunStateMachine+0x1a4>
          break;
 8000c1a:	bf00      	nop
      break;
 8000c1c:	e024      	b.n	8000c68 <RunStateMachine+0x1a4>

    case STATE_RUNNING:
      if(btnShortPress)
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d022      	beq.n	8000c6c <RunStateMachine+0x1a8>
      {
        SendStopCmd();
 8000c26:	f000 f9ed 	bl	8001004 <SendStopCmd>
        isRunning=0;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <RunStateMachine+0x1f4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
        level1State=STATE_IDLE;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <RunStateMachine+0x1b8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]

        UART_Send_IT(&huart2,"Now STOP => Go back to IDLE\r\n");
 8000c36:	4921      	ldr	r1, [pc, #132]	@ (8000cbc <RunStateMachine+0x1f8>)
 8000c38:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000c3a:	f000 fa91 	bl	8001160 <UART_Send_IT>
        btnShortPress=0;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000c44:	e012      	b.n	8000c6c <RunStateMachine+0x1a8>

    case STATE_ERROR:
      if(btnShortPress)
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d010      	beq.n	8000c70 <RunStateMachine+0x1ac>
      {
        level1State=STATE_IDLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <RunStateMachine+0x1b8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
        UART_Send_IT(&huart2,"Error cleared, back to IDLE\r\n");
 8000c54:	491a      	ldr	r1, [pc, #104]	@ (8000cc0 <RunStateMachine+0x1fc>)
 8000c56:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <RunStateMachine+0x1d4>)
 8000c58:	f000 fa82 	bl	8001160 <UART_Send_IT>
        btnShortPress=0;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <RunStateMachine+0x1bc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000c62:	e005      	b.n	8000c70 <RunStateMachine+0x1ac>
      break;
 8000c64:	bf00      	nop
 8000c66:	e004      	b.n	8000c72 <RunStateMachine+0x1ae>
      break;
 8000c68:	bf00      	nop
 8000c6a:	e002      	b.n	8000c72 <RunStateMachine+0x1ae>
      break;
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <RunStateMachine+0x1ae>
      break;
 8000c70:	bf00      	nop
  }
}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	@ 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000292 	.word	0x20000292
 8000c80:	200002a4 	.word	0x200002a4
 8000c84:	20000293 	.word	0x20000293
 8000c88:	20000294 	.word	0x20000294
 8000c8c:	0800627c 	.word	0x0800627c
 8000c90:	08006280 	.word	0x08006280
 8000c94:	08006284 	.word	0x08006284
 8000c98:	20000104 	.word	0x20000104
 8000c9c:	080062bc 	.word	0x080062bc
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	080062d0 	.word	0x080062d0
 8000ca8:	20000295 	.word	0x20000295
 8000cac:	080062e8 	.word	0x080062e8
 8000cb0:	080062f8 	.word	0x080062f8
 8000cb4:	08006300 	.word	0x08006300
 8000cb8:	20000296 	.word	0x20000296
 8000cbc:	08006314 	.word	0x08006314
 8000cc0:	08006334 	.word	0x08006334

08000cc4 <CheckButton>:

void CheckButton(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  static uint8_t prevPin=1;
  uint8_t pinVal = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <CheckButton+0xc0>)
 8000cd0:	f001 f90e 	bl	8001ef0 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]

  if(pinVal!=prevPin)
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <CheckButton+0xc4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d04c      	beq.n	8000d7c <CheckButton+0xb8>
  {
    if(pinVal==0)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d108      	bne.n	8000cfa <CheckButton+0x36>
    {
      btnPressed=1;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <CheckButton+0xc8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
      btnPressTick=HAL_GetTick();
 8000cee:	f000 fd95 	bl	800181c <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a26      	ldr	r2, [pc, #152]	@ (8000d90 <CheckButton+0xcc>)
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e03d      	b.n	8000d76 <CheckButton+0xb2>
    }
    else
    {
      if(btnPressed)
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <CheckButton+0xc8>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d039      	beq.n	8000d76 <CheckButton+0xb2>
      {
        uint32_t pressDuration=HAL_GetTick()-btnPressTick;
 8000d02:	f000 fd8b 	bl	800181c <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <CheckButton+0xcc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	603b      	str	r3, [r7, #0]
        if(pressDuration<800) // short press
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000d16:	d203      	bcs.n	8000d20 <CheckButton+0x5c>
        {
          btnShortPress=1;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <CheckButton+0xd0>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e027      	b.n	8000d70 <CheckButton+0xac>
        }
        else
        {
          // long press => switch sub-state or enter RUNNING
          if(level1State==STATE_SELECT)
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <CheckButton+0xd4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d123      	bne.n	8000d70 <CheckButton+0xac>
          {
            switch(selectSubState)
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <CheckButton+0xd8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d016      	beq.n	8000d5e <CheckButton+0x9a>
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	dc1d      	bgt.n	8000d70 <CheckButton+0xac>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <CheckButton+0x7a>
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d008      	beq.n	8000d4e <CheckButton+0x8a>
 8000d3c:	e018      	b.n	8000d70 <CheckButton+0xac>
            {
              case SUB_WORKMODE_SELECT:
                selectSubState=SUB_PREPROC_SELECT;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <CheckButton+0xd8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
                UART_Send_IT(&huart2,"Enter STATE_SELECT, Sub=PREPROC_SELECT\r\n");
 8000d44:	4916      	ldr	r1, [pc, #88]	@ (8000da0 <CheckButton+0xdc>)
 8000d46:	4817      	ldr	r0, [pc, #92]	@ (8000da4 <CheckButton+0xe0>)
 8000d48:	f000 fa0a 	bl	8001160 <UART_Send_IT>
                break;
 8000d4c:	e010      	b.n	8000d70 <CheckButton+0xac>
              case SUB_PREPROC_SELECT:
                selectSubState=SUB_ADVPROC_SELECT;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <CheckButton+0xd8>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	701a      	strb	r2, [r3, #0]
                UART_Send_IT(&huart2,"Enter STATE_SELECT, Sub=ADVPROC_SELECT\r\n");
 8000d54:	4914      	ldr	r1, [pc, #80]	@ (8000da8 <CheckButton+0xe4>)
 8000d56:	4813      	ldr	r0, [pc, #76]	@ (8000da4 <CheckButton+0xe0>)
 8000d58:	f000 fa02 	bl	8001160 <UART_Send_IT>
                break;
 8000d5c:	e008      	b.n	8000d70 <CheckButton+0xac>
              case SUB_ADVPROC_SELECT:
                SendStartCmd();
 8000d5e:	f000 f90b 	bl	8000f78 <SendStartCmd>
                isRunning=1;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <CheckButton+0xe8>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
                level1State=STATE_RUNNING;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <CheckButton+0xd4>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]
                break;
 8000d6e:	bf00      	nop
            }
          }
        }
        btnPressed=0;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <CheckButton+0xc8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
      }
    }
    prevPin=pinVal;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <CheckButton+0xc4>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	7013      	strb	r3, [r2, #0]
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	48000800 	.word	0x48000800
 8000d88:	20000001 	.word	0x20000001
 8000d8c:	2000029d 	.word	0x2000029d
 8000d90:	200002a0 	.word	0x200002a0
 8000d94:	200002a4 	.word	0x200002a4
 8000d98:	20000292 	.word	0x20000292
 8000d9c:	20000293 	.word	0x20000293
 8000da0:	08006354 	.word	0x08006354
 8000da4:	20000104 	.word	0x20000104
 8000da8:	08006380 	.word	0x08006380
 8000dac:	20000296 	.word	0x20000296

08000db0 <UpdateLedBlink>:

void UpdateLedBlink(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  static uint8_t ledOn=0;
  uint32_t now=HAL_GetTick();
 8000db6:	f000 fd31 	bl	800181c <HAL_GetTick>
 8000dba:	6078      	str	r0, [r7, #4]

  switch(level1State) {
 8000dbc:	4b69      	ldr	r3, [pc, #420]	@ (8000f64 <UpdateLedBlink+0x1b4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	f200 80cb 	bhi.w	8000f5c <UpdateLedBlink+0x1ac>
 8000dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dcc <UpdateLedBlink+0x1c>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000ddd 	.word	0x08000ddd
 8000dd0:	08000deb 	.word	0x08000deb
 8000dd4:	08000f05 	.word	0x08000f05
 8000dd8:	08000f13 	.word	0x08000f13
    case STATE_IDLE:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2120      	movs	r1, #32
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f001 f89c 	bl	8001f20 <HAL_GPIO_WritePin>
      break;
 8000de8:	e0b8      	b.n	8000f5c <UpdateLedBlink+0x1ac>
    case STATE_SELECT:
      if(selectSubState==SUB_WORKMODE_SELECT) {
 8000dea:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <UpdateLedBlink+0x1b8>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d122      	bne.n	8000e38 <UpdateLedBlink+0x88>
        if(now-lastBlinkTick>1000) {
 8000df2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dfe:	f240 80aa 	bls.w	8000f56 <UpdateLedBlink+0x1a6>
          lastBlinkTick=now;
 8000e02:	4a5a      	ldr	r2, [pc, #360]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6013      	str	r3, [r2, #0]
          ledOn=!ledOn;
 8000e08:	4b59      	ldr	r3, [pc, #356]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b55      	ldr	r3, [pc, #340]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000e1a:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000e1c:	4b54      	ldr	r3, [pc, #336]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f001 f875 	bl	8001f20 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
          else
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        }
      }
      break;
 8000e36:	e08e      	b.n	8000f56 <UpdateLedBlink+0x1a6>
      } else if(selectSubState==SUB_PREPROC_SELECT) {
 8000e38:	4b4b      	ldr	r3, [pc, #300]	@ (8000f68 <UpdateLedBlink+0x1b8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d12c      	bne.n	8000e9a <UpdateLedBlink+0xea>
        if(now-lastBlinkTick>200) {
 8000e40:	4b4a      	ldr	r3, [pc, #296]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e4a:	f240 8084 	bls.w	8000f56 <UpdateLedBlink+0x1a6>
          lastBlinkTick=now;
 8000e4e:	4a47      	ldr	r2, [pc, #284]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
          blinkPhase++;
 8000e54:	4b47      	ldr	r3, [pc, #284]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b45      	ldr	r3, [pc, #276]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e5e:	701a      	strb	r2, [r3, #0]
          if(blinkPhase>=5) blinkPhase=0;
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d902      	bls.n	8000e6e <UpdateLedBlink+0xbe>
 8000e68:	4b42      	ldr	r3, [pc, #264]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
          if(blinkPhase==0||blinkPhase==2)
 8000e6e:	4b41      	ldr	r3, [pc, #260]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <UpdateLedBlink+0xce>
 8000e76:	4b3f      	ldr	r3, [pc, #252]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d106      	bne.n	8000e8c <UpdateLedBlink+0xdc>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 f84b 	bl	8001f20 <HAL_GPIO_WritePin>
 8000e8a:	e03a      	b.n	8000f02 <UpdateLedBlink+0x152>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e94:	f001 f844 	bl	8001f20 <HAL_GPIO_WritePin>
      break;
 8000e98:	e05d      	b.n	8000f56 <UpdateLedBlink+0x1a6>
      } else if(selectSubState==SUB_ADVPROC_SELECT) {
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <UpdateLedBlink+0x1b8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d159      	bne.n	8000f56 <UpdateLedBlink+0x1a6>
        if(now-lastBlinkTick>150) {
 8000ea2:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b96      	cmp	r3, #150	@ 0x96
 8000eac:	d953      	bls.n	8000f56 <UpdateLedBlink+0x1a6>
          lastBlinkTick=now;
 8000eae:	4a2f      	ldr	r2, [pc, #188]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
          blinkPhase++;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000ebe:	701a      	strb	r2, [r3, #0]
          if(blinkPhase>=6) blinkPhase=0;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d902      	bls.n	8000ece <UpdateLedBlink+0x11e>
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
          if(blinkPhase==0||blinkPhase==2||blinkPhase==4)
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <UpdateLedBlink+0x136>
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d003      	beq.n	8000ee6 <UpdateLedBlink+0x136>
 8000ede:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <UpdateLedBlink+0x1c4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d106      	bne.n	8000ef4 <UpdateLedBlink+0x144>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2120      	movs	r1, #32
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f001 f817 	bl	8001f20 <HAL_GPIO_WritePin>
 8000ef2:	e006      	b.n	8000f02 <UpdateLedBlink+0x152>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 f810 	bl	8001f20 <HAL_GPIO_WritePin>
      break;
 8000f00:	e029      	b.n	8000f56 <UpdateLedBlink+0x1a6>
 8000f02:	e028      	b.n	8000f56 <UpdateLedBlink+0x1a6>
    case STATE_RUNNING:
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f001 f808 	bl	8001f20 <HAL_GPIO_WritePin>
      break;
 8000f10:	e024      	b.n	8000f5c <UpdateLedBlink+0x1ac>
    case STATE_ERROR:
      if(now-lastBlinkTick>300) {
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f1e:	d91c      	bls.n	8000f5a <UpdateLedBlink+0x1aa>
        lastBlinkTick=now;
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <UpdateLedBlink+0x1bc>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
        ledOn=!ledOn;
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2301      	moveq	r3, #1
 8000f30:	2300      	movne	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000f38:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <UpdateLedBlink+0x1c0>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f000 ffe6 	bl	8001f20 <HAL_GPIO_WritePin>
      }
      break;
 8000f54:	e001      	b.n	8000f5a <UpdateLedBlink+0x1aa>
      break;
 8000f56:	bf00      	nop
 8000f58:	e000      	b.n	8000f5c <UpdateLedBlink+0x1ac>
      break;
 8000f5a:	bf00      	nop
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000292 	.word	0x20000292
 8000f68:	20000293 	.word	0x20000293
 8000f6c:	20000298 	.word	0x20000298
 8000f70:	200002a5 	.word	0x200002a5
 8000f74:	2000029c 	.word	0x2000029c

08000f78 <SendStartCmd>:

/* Send START command (ASCII) using non-blocking transmit */
void SendStartCmd(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b098      	sub	sp, #96	@ 0x60
 8000f7c:	af02      	add	r7, sp, #8
  char wStr[8];
  strcpy(wStr,(workMode==0)?"IR":"RED");
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <SendStartCmd+0x64>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <SendStartCmd+0x12>
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <SendStartCmd+0x68>)
 8000f88:	e000      	b.n	8000f8c <SendStartCmd+0x14>
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <SendStartCmd+0x6c>)
 8000f8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f840 	bl	8005018 <strcpy>

  snprintf(txBufferUart1, TX_BUFFER_SIZE, "CMD:START,%s,%d,%d\r\n", wStr, preprocMode, advMode);
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <SendStartCmd+0x70>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <SendStartCmd+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fa8:	9101      	str	r1, [sp, #4]
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <SendStartCmd+0x78>)
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <SendStartCmd+0x7c>)
 8000fb2:	f003 ff77 	bl	8004ea4 <sniprintf>
  UART_Send_IT(&huart1, txBufferUart1);
 8000fb6:	490f      	ldr	r1, [pc, #60]	@ (8000ff4 <SendStartCmd+0x7c>)
 8000fb8:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <SendStartCmd+0x80>)
 8000fba:	f000 f8d1 	bl	8001160 <UART_Send_IT>

  char dbg[80];
  snprintf(dbg,sizeof(dbg),"Send START: %s", txBufferUart1);
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <SendStartCmd+0x7c>)
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <SendStartCmd+0x84>)
 8000fc4:	2150      	movs	r1, #80	@ 0x50
 8000fc6:	f003 ff6d 	bl	8004ea4 <sniprintf>
  UART_Send_IT(&huart2, dbg);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480c      	ldr	r0, [pc, #48]	@ (8001000 <SendStartCmd+0x88>)
 8000fd0:	f000 f8c6 	bl	8001160 <UART_Send_IT>
}
 8000fd4:	bf00      	nop
 8000fd6:	3758      	adds	r7, #88	@ 0x58
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000294 	.word	0x20000294
 8000fe0:	0800627c 	.word	0x0800627c
 8000fe4:	08006280 	.word	0x08006280
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000295 	.word	0x20000295
 8000ff0:	080063ac 	.word	0x080063ac
 8000ff4:	20000210 	.word	0x20000210
 8000ff8:	2000007c 	.word	0x2000007c
 8000ffc:	080063c4 	.word	0x080063c4
 8001000:	20000104 	.word	0x20000104

08001004 <SendStopCmd>:

/* Send STOP command (ASCII) using non-blocking transmit */
void SendStopCmd(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  snprintf(txBufferUart1, TX_BUFFER_SIZE, "CMD:STOP\r\n");
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <SendStopCmd+0x24>)
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <SendStopCmd+0x28>)
 800100e:	f003 ff49 	bl	8004ea4 <sniprintf>
  UART_Send_IT(&huart1, txBufferUart1);
 8001012:	4906      	ldr	r1, [pc, #24]	@ (800102c <SendStopCmd+0x28>)
 8001014:	4806      	ldr	r0, [pc, #24]	@ (8001030 <SendStopCmd+0x2c>)
 8001016:	f000 f8a3 	bl	8001160 <UART_Send_IT>

  UART_Send_IT(&huart2,"Send CMD:STOP\r\n");
 800101a:	4906      	ldr	r1, [pc, #24]	@ (8001034 <SendStopCmd+0x30>)
 800101c:	4806      	ldr	r0, [pc, #24]	@ (8001038 <SendStopCmd+0x34>)
 800101e:	f000 f89f 	bl	8001160 <UART_Send_IT>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	080063d4 	.word	0x080063d4
 800102c:	20000210 	.word	0x20000210
 8001030:	2000007c 	.word	0x2000007c
 8001034:	080063e0 	.word	0x080063e0
 8001038:	20000104 	.word	0x20000104

0800103c <ProcessCollectorData>:
 * If preprocMode=1 (no process), treat rawVal, preVal as float.
 * Although in reality pre-processing is on the collector board side,
 * we show float handling here as requested.
 */
void ProcessCollectorData(const char* line)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b0aa      	sub	sp, #168	@ 0xa8
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]
  uint16_t rawVal, preVal;
  sscanf(line,"DATA,%hu,%hu",&rawVal,&preVal);
 8001044:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001048:	f107 028e 	add.w	r2, r7, #142	@ 0x8e
 800104c:	493c      	ldr	r1, [pc, #240]	@ (8001140 <ProcessCollectorData+0x104>)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f003 ff5c 	bl	8004f0c <siscanf>

  // If no processing: treat them as float
  if(preprocMode == 1) {
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <ProcessCollectorData+0x108>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d147      	bne.n	80010ec <ProcessCollectorData+0xb0>
    float rawF = (float)rawVal;
 800105c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001068:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    float preF = (float)preVal;
 800106c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001078:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    char dbg[128];
    if(advMode==0)
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <ProcessCollectorData+0x10c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d116      	bne.n	80010b2 <ProcessCollectorData+0x76>
      snprintf(dbg,sizeof(dbg),"Recv DATA: raw=%.2f, pre=%.2f, [Adv=HR]\r\n", rawF, preF);
 8001084:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001088:	f7ff fa5e 	bl	8000548 <__aeabi_f2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	f107 000c 	add.w	r0, r7, #12
 80010a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010a4:	e9cd 4500 	strd	r4, r5, [sp]
 80010a8:	4a28      	ldr	r2, [pc, #160]	@ (800114c <ProcessCollectorData+0x110>)
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	f003 fefa 	bl	8004ea4 <sniprintf>
 80010b0:	e015      	b.n	80010de <ProcessCollectorData+0xa2>
    else
      snprintf(dbg,sizeof(dbg),"Recv DATA: raw=%.2f, pre=%.2f, [Adv=SpO2]\r\n", rawF, preF);
 80010b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4604      	mov	r4, r0
 80010bc:	460d      	mov	r5, r1
 80010be:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80010c2:	f7ff fa41 	bl	8000548 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	f107 000c 	add.w	r0, r7, #12
 80010ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010d2:	e9cd 4500 	strd	r4, r5, [sp]
 80010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <ProcessCollectorData+0x114>)
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	f003 fee3 	bl	8004ea4 <sniprintf>

    UART_Send_IT(&huart2, dbg);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	481b      	ldr	r0, [pc, #108]	@ (8001154 <ProcessCollectorData+0x118>)
 80010e6:	f000 f83b 	bl	8001160 <UART_Send_IT>
    else
      snprintf(dbg,sizeof(dbg),"Recv DATA: raw=%u, pre=%u, [Adv=SpO2]\r\n", rawVal, preVal);

    UART_Send_IT(&huart2, dbg);
  }
}
 80010ea:	e024      	b.n	8001136 <ProcessCollectorData+0xfa>
    if(advMode==0)
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <ProcessCollectorData+0x10c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <ProcessCollectorData+0xd4>
      snprintf(dbg,sizeof(dbg),"Recv DATA: raw=%u, pre=%u, [Adv=HR]\r\n", rawVal, preVal);
 80010f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80010f8:	461a      	mov	r2, r3
 80010fa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80010fe:	f107 000c 	add.w	r0, r7, #12
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <ProcessCollectorData+0x11c>)
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	f003 fecb 	bl	8004ea4 <sniprintf>
 800110e:	e00c      	b.n	800112a <ProcessCollectorData+0xee>
      snprintf(dbg,sizeof(dbg),"Recv DATA: raw=%u, pre=%u, [Adv=SpO2]\r\n", rawVal, preVal);
 8001110:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001114:	461a      	mov	r2, r3
 8001116:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800111a:	f107 000c 	add.w	r0, r7, #12
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <ProcessCollectorData+0x120>)
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	f003 febd 	bl	8004ea4 <sniprintf>
    UART_Send_IT(&huart2, dbg);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4619      	mov	r1, r3
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <ProcessCollectorData+0x118>)
 8001132:	f000 f815 	bl	8001160 <UART_Send_IT>
}
 8001136:	bf00      	nop
 8001138:	3798      	adds	r7, #152	@ 0x98
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	080063f0 	.word	0x080063f0
 8001144:	20000000 	.word	0x20000000
 8001148:	20000295 	.word	0x20000295
 800114c:	08006400 	.word	0x08006400
 8001150:	0800642c 	.word	0x0800642c
 8001154:	20000104 	.word	0x20000104
 8001158:	08006458 	.word	0x08006458
 800115c:	08006480 	.word	0x08006480

08001160 <UART_Send_IT>:
/**
 * @brief Non-blocking send function using HAL_UART_Transmit_IT()
 *        Store the string in a buffer and start transmission if not busy.
 */
static void UART_Send_IT(UART_HandleTypeDef *huart, const char *str)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  // For simplicity, we assume str is stored in a static or global buffer
  // already done above. If we need a dynamic approach, consider double-buffering.

  if (huart->Instance == USART1) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <UART_Send_IT+0x74>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d113      	bne.n	800119c <UART_Send_IT+0x3c>
    // Wait if UART1 is busy (or handle in a queue)
    while(uart1TxBusy) { /* You could use a queue or semaphore here */ }
 8001174:	bf00      	nop
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <UART_Send_IT+0x78>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1fa      	bne.n	8001176 <UART_Send_IT+0x16>
    uart1TxBusy = 1;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <UART_Send_IT+0x78>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, strlen(str));
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff f822 	bl	80001d0 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	4811      	ldr	r0, [pc, #68]	@ (80011dc <UART_Send_IT+0x7c>)
 8001196:	f002 fa63 	bl	8003660 <HAL_UART_Transmit_IT>
  else if(huart->Instance == USART2) {
    while(uart2TxBusy) { /* Wait or queue */ }
    uart2TxBusy = 1;
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)str, strlen(str));
  }
}
 800119a:	e017      	b.n	80011cc <UART_Send_IT+0x6c>
  else if(huart->Instance == USART2) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <UART_Send_IT+0x80>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d112      	bne.n	80011cc <UART_Send_IT+0x6c>
    while(uart2TxBusy) { /* Wait or queue */ }
 80011a6:	bf00      	nop
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <UART_Send_IT+0x84>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1fa      	bne.n	80011a8 <UART_Send_IT+0x48>
    uart2TxBusy = 1;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <UART_Send_IT+0x84>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)str, strlen(str));
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff f809 	bl	80001d0 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <UART_Send_IT+0x88>)
 80011c8:	f002 fa4a 	bl	8003660 <HAL_UART_Transmit_IT>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40013800 	.word	0x40013800
 80011d8:	20000290 	.word	0x20000290
 80011dc:	2000007c 	.word	0x2000007c
 80011e0:	40004400 	.word	0x40004400
 80011e4:	20000291 	.word	0x20000291
 80011e8:	20000104 	.word	0x20000104

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	@ 0x58
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2244      	movs	r2, #68	@ 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fed7 	bl	8004fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001212:	f000 fec5 	bl	8001fa0 <HAL_PWREx_ControlVoltageScaling>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800121c:	f000 f8fa 	bl	8001414 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001220:	2310      	movs	r3, #16
 8001222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800122c:	2360      	movs	r3, #96	@ 0x60
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001234:	2301      	movs	r3, #1
 8001236:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800123c:	2318      	movs	r3, #24
 800123e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001240:	2307      	movs	r3, #7
 8001242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fefb 	bl	800204c <HAL_RCC_OscConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800125c:	f000 f8da 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2303      	movs	r3, #3
 8001266:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2102      	movs	r1, #2
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fac3 	bl	8002804 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001284:	f000 f8c6 	bl	8001414 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3758      	adds	r7, #88	@ 0x58
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <MX_USART1_UART_Init+0x5c>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012d4:	f002 f976 	bl	80035c4 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012de:	f000 f899 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000007c 	.word	0x2000007c
 80012ec:	40013800 	.word	0x40013800

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <MX_USART2_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001334:	f002 f946 	bl	80035c4 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f869 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000104 	.word	0x20000104
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <MX_GPIO_Init+0xbc>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a28      	ldr	r2, [pc, #160]	@ (800140c <MX_GPIO_Init+0xbc>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <MX_GPIO_Init+0xbc>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_GPIO_Init+0xbc>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a22      	ldr	r2, [pc, #136]	@ (800140c <MX_GPIO_Init+0xbc>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_GPIO_Init+0xbc>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2120      	movs	r1, #32
 800139a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139e:	f000 fdbf 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	@ (8001410 <MX_GPIO_Init+0xc0>)
 80013b8:	f000 fbf0 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013bc:	2320      	movs	r3, #32
 80013be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f000 fbe1 	bl	8001b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e2:	f000 fd9d 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e6:	2320      	movs	r3, #32
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f000 fbcc 	bl	8001b9c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	48000800 	.word	0x48000800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800141c:	2120      	movs	r1, #32
 800141e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001422:	f000 fd95 	bl	8001f50 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 8001426:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800142a:	f000 fa03 	bl	8001834 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800142e:	bf00      	nop
 8001430:	e7f4      	b.n	800141c <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	@ 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ae      	sub	sp, #184	@ 0xb8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2288      	movs	r2, #136	@ 0x88
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fd86 	bl	8004fae <memset>
  if(huart->Instance==USART1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <HAL_UART_MspInit+0x158>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d145      	bne.n	8001538 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b0:	2300      	movs	r3, #0
 80014b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fbc7 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c4:	f7ff ffa6 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c8:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014cc:	4a42      	ldr	r2, [pc, #264]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d4:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ec:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001512:	2307      	movs	r3, #7
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 fb3b 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2025      	movs	r0, #37	@ 0x25
 800152c:	f000 fa81 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001530:	2025      	movs	r0, #37	@ 0x25
 8001532:	f000 fa9a 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001536:	e048      	b.n	80015ca <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <HAL_UART_MspInit+0x160>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d143      	bne.n	80015ca <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fb7c 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800155a:	f7ff ff5b 	bl	8001414 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0x15c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158e:	230c      	movs	r3, #12
 8001590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f000 faf1 	bl	8001b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2026      	movs	r0, #38	@ 0x26
 80015c0:	f000 fa37 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c4:	2026      	movs	r0, #38	@ 0x26
 80015c6:	f000 fa50 	bl	8001a6a <HAL_NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	@ 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40004400 	.word	0x40004400

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 f8dd 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <USART1_IRQHandler+0x10>)
 8001646:	f002 f8b5 	bl	80037b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000007c 	.word	0x2000007c

08001654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <USART2_IRQHandler+0x10>)
 800165a:	f002 f8ab 	bl	80037b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000104 	.word	0x20000104

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f003 fc92 	bl	8004fc0 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20018000 	.word	0x20018000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	200002a8 	.word	0x200002a8
 80016d0:	200003f8 	.word	0x200003f8

080016d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016fc:	f7ff ffea 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopForever+0xe>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopForever+0x16>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001726:	f003 fc51 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172a:	f7ff f923 	bl	8000974 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001730:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800173c:	0800665c 	.word	0x0800665c
  ldr r2, =_sbss
 8001740:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001744:	200003f8 	.word	0x200003f8

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>

0800174a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f961 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f80e 	bl	800177c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176c:	f7ff fe62 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_InitTick+0x70>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f96d 	bl	8001a86 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d809      	bhi.n	80017cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017c0:	f000 f937 	bl	8001a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0x74>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e007      	b.n	80017dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e004      	b.n	80017dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e001      	b.n	80017dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000004 	.word	0x20000004
 80017f0:	20000008 	.word	0x20000008

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c
 8001818:	200002ac 	.word	0x200002ac

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200002ac 	.word	0x200002ac

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000000c 	.word	0x2000000c

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	@ (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff3e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff31 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e022      	b.n	8001b0e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 020e 	bic.w	r2, r2, #14
 8001ad6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f003 021c 	and.w	r2, r3, #28
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d005      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e029      	b.n	8001b92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020e 	bic.w	r2, r2, #14
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f003 021c 	and.w	r2, r3, #28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
    }
  }
  return status;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e17f      	b.n	8001eac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8171 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x40>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d118      	bne.n	8001c7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	6939      	ldr	r1, [r7, #16]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80ac 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a5e      	ldr	r2, [pc, #376]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d66:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x242>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	@ (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4d      	ldr	r2, [pc, #308]	@ (8001edc <HAL_GPIO_Init+0x340>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee0 <HAL_GPIO_Init+0x344>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee4 <HAL_GPIO_Init+0x348>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00c      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00a      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dca:	2305      	movs	r3, #5
 8001dcc:	e008      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dde:	2300      	movs	r3, #0
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4093      	lsls	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df0:	4937      	ldr	r1, [pc, #220]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e22:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e28:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4c:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e76:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea0:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f ae78 	bne.w	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	48001000 	.word	0x48001000
 8001ee4:	48001400 	.word	0x48001400
 8001ee8:	48001800 	.word	0x48001800
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43d9      	mvns	r1, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	400b      	ands	r3, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fae:	d130      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fbc:	d038      	beq.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2232      	movs	r2, #50	@ 0x32
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	e002      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff8:	d102      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f2      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200c:	d110      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e00f      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201e:	d007      	beq.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002028:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40007000 	.word	0x40007000
 8002044:	20000004 	.word	0x20000004
 8002048:	431bde83 	.word	0x431bde83

0800204c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e3ca      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	4b97      	ldr	r3, [pc, #604]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002068:	4b94      	ldr	r3, [pc, #592]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80e4 	beq.w	8002248 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_RCC_OscConfig+0x4a>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	f040 808b 	bne.w	80021a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 8087 	bne.w	80021a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x62>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e3a2      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	4b82      	ldr	r3, [pc, #520]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_RCC_OscConfig+0x7c>
 80020be:	4b7f      	ldr	r3, [pc, #508]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_OscConfig+0x88>
 80020c8:	4b7c      	ldr	r3, [pc, #496]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d223      	bcs.n	8002120 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd55 	bl	8002b8c <RCC_SetFlashLatencyFromMSIRange>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e383      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	4b73      	ldr	r3, [pc, #460]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a72      	ldr	r2, [pc, #456]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b70      	ldr	r3, [pc, #448]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	496d      	ldr	r1, [pc, #436]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	4b6c      	ldr	r3, [pc, #432]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4968      	ldr	r1, [pc, #416]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
 800211e:	e025      	b.n	800216c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	4b66      	ldr	r3, [pc, #408]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a65      	ldr	r2, [pc, #404]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b63      	ldr	r3, [pc, #396]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4960      	ldr	r1, [pc, #384]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213e:	4b5f      	ldr	r3, [pc, #380]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	495b      	ldr	r1, [pc, #364]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fd15 	bl	8002b8c <RCC_SetFlashLatencyFromMSIRange>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e343      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216c:	f000 fc4a 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b52      	ldr	r3, [pc, #328]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	4950      	ldr	r1, [pc, #320]	@ (80022c0 <HAL_RCC_OscConfig+0x274>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a4e      	ldr	r2, [pc, #312]	@ (80022c4 <HAL_RCC_OscConfig+0x278>)
 800218a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800218c:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff faf3 	bl	800177c <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d052      	beq.n	8002246 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	e327      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d032      	beq.n	8002212 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021ac:	4b43      	ldr	r3, [pc, #268]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a42      	ldr	r2, [pc, #264]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fb30 	bl	800181c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c0:	f7ff fb2c 	bl	800181c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e310      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d2:	4b3a      	ldr	r3, [pc, #232]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021de:	4b37      	ldr	r3, [pc, #220]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a36      	ldr	r2, [pc, #216]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b34      	ldr	r3, [pc, #208]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4931      	ldr	r1, [pc, #196]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fc:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	492c      	ldr	r1, [pc, #176]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
 8002210:	e01a      	b.n	8002248 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002212:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a29      	ldr	r2, [pc, #164]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221e:	f7ff fafd 	bl	800181c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7ff faf9 	bl	800181c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e2dd      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002238:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x1da>
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002246:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d074      	beq.n	800233e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b08      	cmp	r3, #8
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x21a>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d10e      	bne.n	800227e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d064      	beq.n	800233c <HAL_RCC_OscConfig+0x2f0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d160      	bne.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e2ba      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x24a>
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e026      	b.n	80022e4 <HAL_RCC_OscConfig+0x298>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229e:	d115      	bne.n	80022cc <HAL_RCC_OscConfig+0x280>
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80022a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a02      	ldr	r2, [pc, #8]	@ (80022bc <HAL_RCC_OscConfig+0x270>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x298>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	080064b4 	.word	0x080064b4
 80022c4:	20000004 	.word	0x20000004
 80022c8:	20000008 	.word	0x20000008
 80022cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff fa96 	bl	800181c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fa92 	bl	800181c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	@ 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e276      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	4b92      	ldr	r3, [pc, #584]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2a8>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff fa82 	bl	800181c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fa7e 	bl	800181c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e262      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232e:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x2d0>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d060      	beq.n	800240c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x310>
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d119      	bne.n	800238a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d116      	bne.n	800238a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235c:	4b7c      	ldr	r3, [pc, #496]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x328>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e23f      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	4973      	ldr	r1, [pc, #460]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002388:	e040      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d023      	beq.n	80023da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002392:	4b6f      	ldr	r3, [pc, #444]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6e      	ldr	r2, [pc, #440]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff fa3d 	bl	800181c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fa39 	bl	800181c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e21d      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	4b65      	ldr	r3, [pc, #404]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b62      	ldr	r3, [pc, #392]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	495f      	ldr	r1, [pc, #380]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e018      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b5d      	ldr	r3, [pc, #372]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5c      	ldr	r2, [pc, #368]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7ff fa19 	bl	800181c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fa15 	bl	800181c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1f9      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002400:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03c      	beq.n	8002492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01c      	beq.n	800245a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002420:	4b4b      	ldr	r3, [pc, #300]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002426:	4a4a      	ldr	r2, [pc, #296]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7ff f9f4 	bl	800181c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7ff f9f0 	bl	800181c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1d4      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ef      	beq.n	8002438 <HAL_RCC_OscConfig+0x3ec>
 8002458:	e01b      	b.n	8002492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002460:	4a3b      	ldr	r2, [pc, #236]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7ff f9d7 	bl	800181c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff f9d3 	bl	800181c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1b7      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	4b32      	ldr	r3, [pc, #200]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ef      	bne.n	8002472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a6 	beq.w	80025ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4a26      	ldr	r2, [pc, #152]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d118      	bne.n	800250a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <HAL_RCC_OscConfig+0x508>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_RCC_OscConfig+0x508>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e4:	f7ff f99a 	bl	800181c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7ff f996 	bl	800181c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e17a      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_RCC_OscConfig+0x508>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x4d8>
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002522:	e029      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d115      	bne.n	8002558 <HAL_RCC_OscConfig+0x50c>
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002532:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	4a03      	ldr	r2, [pc, #12]	@ (8002550 <HAL_RCC_OscConfig+0x504>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	4b9c      	ldr	r3, [pc, #624]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	4a9b      	ldr	r2, [pc, #620]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002568:	4b98      	ldr	r3, [pc, #608]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a97      	ldr	r2, [pc, #604]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff f94c 	bl	800181c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff f948 	bl	800181c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e12a      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	4b8b      	ldr	r3, [pc, #556]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ed      	beq.n	8002588 <HAL_RCC_OscConfig+0x53c>
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff f935 	bl	800181c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff f931 	bl	800181c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e113      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025cc:	4b7f      	ldr	r3, [pc, #508]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ed      	bne.n	80025b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b7a      	ldr	r3, [pc, #488]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	4a79      	ldr	r2, [pc, #484]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80fe 	beq.w	80027f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	f040 80d0 	bne.w	80027a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002600:	4b72      	ldr	r3, [pc, #456]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 0203 	and.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	429a      	cmp	r2, r3
 8002612:	d130      	bne.n	8002676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	3b01      	subs	r3, #1
 8002620:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d127      	bne.n	8002676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d11f      	bne.n	8002676 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002640:	2a07      	cmp	r2, #7
 8002642:	bf14      	ite	ne
 8002644:	2201      	movne	r2, #1
 8002646:	2200      	moveq	r2, #0
 8002648:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d109      	bne.n	8002676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d06e      	beq.n	8002754 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d069      	beq.n	8002750 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002688:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0ad      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002698:	4b4c      	ldr	r3, [pc, #304]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4b      	ldr	r2, [pc, #300]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800269e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a4:	f7ff f8ba 	bl	800181c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff f8b6 	bl	800181c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e09a      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026be:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ca:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b40      	ldr	r3, [pc, #256]	@ (80027d0 <HAL_RCC_OscConfig+0x784>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026da:	3a01      	subs	r2, #1
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026e4:	0212      	lsls	r2, r2, #8
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026ec:	0852      	lsrs	r2, r2, #1
 80026ee:	3a01      	subs	r2, #1
 80026f0:	0552      	lsls	r2, r2, #21
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0652      	lsls	r2, r2, #25
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002704:	0912      	lsrs	r2, r2, #4
 8002706:	0452      	lsls	r2, r2, #17
 8002708:	430a      	orrs	r2, r1
 800270a:	4930      	ldr	r1, [pc, #192]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800270c:	4313      	orrs	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002710:	4b2e      	ldr	r3, [pc, #184]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2d      	ldr	r2, [pc, #180]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800271c:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a2a      	ldr	r2, [pc, #168]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002728:	f7ff f878 	bl	800181c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff f874 	bl	800181c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e058      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274e:	e050      	b.n	80027f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e04f      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d148      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002778:	f7ff f850 	bl	800181c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f84c 	bl	800181c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e030      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x734>
 800279e:	e028      	b.n	80027f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d023      	beq.n	80027ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_RCC_OscConfig+0x780>)
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff f833 	bl	800181c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e00c      	b.n	80027d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff f82f 	bl	800181c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d905      	bls.n	80027d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_OscConfig+0x7b0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ec      	bne.n	80027ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x7b0>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4905      	ldr	r1, [pc, #20]	@ (80027fc <HAL_RCC_OscConfig+0x7b0>)
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCC_OscConfig+0x7b4>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
 80027ec:	e001      	b.n	80027f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	feeefffc 	.word	0xfeeefffc

08002804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0e7      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b75      	ldr	r3, [pc, #468]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b72      	ldr	r3, [pc, #456]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4970      	ldr	r1, [pc, #448]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b6e      	ldr	r3, [pc, #440]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0cf      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002860:	429a      	cmp	r2, r3
 8002862:	d908      	bls.n	8002876 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4960      	ldr	r1, [pc, #384]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04c      	beq.n	800291c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	4b5a      	ldr	r3, [pc, #360]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d121      	bne.n	80028da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0a6      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d115      	bne.n	80028da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e09a      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ba:	4b4e      	ldr	r3, [pc, #312]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e08e      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e086      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4943      	ldr	r1, [pc, #268]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe ff96 	bl	800181c <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe ff92 	bl	800181c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e06e      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	429a      	cmp	r2, r3
 8002936:	d208      	bcs.n	800294a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	492b      	ldr	r1, [pc, #172]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294a:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d210      	bcs.n	800297a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002958:	4b25      	ldr	r3, [pc, #148]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 0207 	bic.w	r2, r3, #7
 8002960:	4923      	ldr	r1, [pc, #140]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002968:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_RCC_ClockConfig+0x1ec>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e036      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4918      	ldr	r1, [pc, #96]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4910      	ldr	r1, [pc, #64]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b8:	f000 f824 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	490b      	ldr	r1, [pc, #44]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f4>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	4a09      	ldr	r2, [pc, #36]	@ (80029fc <HAL_RCC_ClockConfig+0x1f8>)
 80029d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x1fc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fecd 	bl	800177c <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029e6:	7afb      	ldrb	r3, [r7, #11]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080064b4 	.word	0x080064b4
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000008 	.word	0x20000008

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	@ 0x24
 8002a08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	4b3e      	ldr	r3, [pc, #248]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x34>
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d121      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d11e      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a54:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a60:	4a2b      	ldr	r2, [pc, #172]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a7c:	4b25      	ldr	r3, [pc, #148]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e004      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a88:	4b23      	ldr	r3, [pc, #140]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d134      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0xa6>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d003      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xac>
 8002aa8:	e005      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aac:	617b      	str	r3, [r7, #20]
      break;
 8002aae:	e005      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ab2:	617b      	str	r3, [r7, #20]
      break;
 8002ab4:	e002      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	617b      	str	r3, [r7, #20]
      break;
 8002aba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	fb03 f202 	mul.w	r2, r3, r2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	0e5b      	lsrs	r3, r3, #25
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	3301      	adds	r3, #1
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002afc:	69bb      	ldr	r3, [r7, #24]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	080064cc 	.word	0x080064cc
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080064c4 	.word	0x080064c4

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b64:	f7ff ffda 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0adb      	lsrs	r3, r3, #11
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	080064c4 	.word	0x080064c4

08002b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ba4:	f7ff f9ee 	bl	8001f84 <HAL_PWREx_GetVoltageRange>
 8002ba8:	6178      	str	r0, [r7, #20]
 8002baa:	e014      	b.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bc4:	f7ff f9de 	bl	8001f84 <HAL_PWREx_GetVoltageRange>
 8002bc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	4a1d      	ldr	r2, [pc, #116]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bdc:	d10b      	bne.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b80      	cmp	r3, #128	@ 0x80
 8002be2:	d919      	bls.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002be8:	d902      	bls.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bea:	2302      	movs	r3, #2
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e013      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e010      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b80      	cmp	r3, #128	@ 0x80
 8002bfa:	d902      	bls.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e00a      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b80      	cmp	r3, #128	@ 0x80
 8002c06:	d102      	bne.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c08:	2302      	movs	r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e004      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b70      	cmp	r3, #112	@ 0x70
 8002c12:	d101      	bne.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c14:	2301      	movs	r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 0207 	bic.w	r2, r3, #7
 8002c20:	4909      	ldr	r1, [pc, #36]	@ (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40022000 	.word	0x40022000

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d041      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c70:	d02a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c76:	d824      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c82:	d81e      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c90:	4b86      	ldr	r3, [pc, #536]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a85      	ldr	r2, [pc, #532]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e015      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fabb 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fba6 	bl	8003408 <RCCEx_PLLSAI2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd0:	4b76      	ldr	r3, [pc, #472]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cde:	4973      	ldr	r1, [pc, #460]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d041      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d06:	d824      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d12:	d81e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d20:	4b62      	ldr	r3, [pc, #392]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a61      	ldr	r2, [pc, #388]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2c:	e015      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa73 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3320      	adds	r3, #32
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fb5e 	bl	8003408 <RCCEx_PLLSAI2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	74fb      	strb	r3, [r7, #19]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d60:	4b52      	ldr	r3, [pc, #328]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6e:	494f      	ldr	r1, [pc, #316]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a0 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	4a40      	ldr	r2, [pc, #256]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db0:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fd26 	bl	800181c <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe fd22 	bl	800181c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	74fb      	strb	r3, [r7, #19]
        break;
 8002de6:	e005      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de8:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d15c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01f      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d019      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e18:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe fce1 	bl	800181c <HAL_GetTick>
 8002e5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fcdd 	bl	800181c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d902      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	74fb      	strb	r3, [r7, #19]
            break;
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ec      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9a:	4904      	ldr	r1, [pc, #16]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ea2:	e009      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7c7b      	ldrb	r3, [r7, #17]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	4a9d      	ldr	r2, [pc, #628]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed6:	4b98      	ldr	r3, [pc, #608]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002edc:	f023 0203 	bic.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	4994      	ldr	r1, [pc, #592]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f023 020c 	bic.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	498c      	ldr	r1, [pc, #560]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1a:	4b87      	ldr	r3, [pc, #540]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	4983      	ldr	r1, [pc, #524]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	497b      	ldr	r1, [pc, #492]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f5e:	4b76      	ldr	r3, [pc, #472]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	4972      	ldr	r1, [pc, #456]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f80:	4b6d      	ldr	r3, [pc, #436]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	496a      	ldr	r1, [pc, #424]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa2:	4b65      	ldr	r3, [pc, #404]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	4961      	ldr	r1, [pc, #388]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	4959      	ldr	r1, [pc, #356]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe6:	4b54      	ldr	r3, [pc, #336]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff4:	4950      	ldr	r1, [pc, #320]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003008:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	4948      	ldr	r1, [pc, #288]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302a:	4b43      	ldr	r3, [pc, #268]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	493f      	ldr	r1, [pc, #252]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d028      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800304c:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305a:	4937      	ldr	r1, [pc, #220]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306a:	d106      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a31      	ldr	r2, [pc, #196]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003076:	60d3      	str	r3, [r2, #12]
 8003078:	e011      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003082:	d10c      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f8c8 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d028      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	491f      	ldr	r1, [pc, #124]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c8:	d106      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d4:	60d3      	str	r3, [r2, #12]
 80030d6:	e011      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f899 	bl	8003220 <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003116:	4908      	ldr	r1, [pc, #32]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003126:	d109      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a02      	ldr	r2, [pc, #8]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003132:	60d3      	str	r3, [r2, #12]
 8003134:	e014      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f867 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02f      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800317a:	4928      	ldr	r1, [pc, #160]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f844 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d014      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	74bb      	strb	r3, [r7, #18]
 80031a6:	e011      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3320      	adds	r3, #32
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f925 	bl	8003408 <RCCEx_PLLSAI2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031d8:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031e6:	490d      	ldr	r1, [pc, #52]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800320a:	4904      	ldr	r1, [pc, #16]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003212:	7cbb      	ldrb	r3, [r7, #18]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322e:	4b75      	ldr	r3, [pc, #468]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800323a:	4b72      	ldr	r3, [pc, #456]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d10d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
       ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003252:	4b6c      	ldr	r3, [pc, #432]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
       ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d047      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e044      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d018      	beq.n	80032a6 <RCCEx_PLLSAI1_Config+0x86>
 8003274:	2b03      	cmp	r3, #3
 8003276:	d825      	bhi.n	80032c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <RCCEx_PLLSAI1_Config+0x62>
 800327c:	2b02      	cmp	r3, #2
 800327e:	d009      	beq.n	8003294 <RCCEx_PLLSAI1_Config+0x74>
 8003280:	e020      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003282:	4b60      	ldr	r3, [pc, #384]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e01a      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003294:	4b5b      	ldr	r3, [pc, #364]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a4:	e013      	b.n	80032ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032a6:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032c2:	e006      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e004      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e002      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032da:	4b4a      	ldr	r3, [pc, #296]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	430b      	orrs	r3, r1
 80032f0:	4944      	ldr	r1, [pc, #272]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d17d      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032fc:	4b41      	ldr	r3, [pc, #260]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a40      	ldr	r2, [pc, #256]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fe fa88 	bl	800181c <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800330e:	e009      	b.n	8003324 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003310:	f7fe fa84 	bl	800181c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
        break;
 8003322:	e005      	b.n	8003330 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003324:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d160      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333c:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	0912      	lsrs	r2, r2, #4
 8003354:	0452      	lsls	r2, r2, #17
 8003356:	430a      	orrs	r2, r1
 8003358:	492a      	ldr	r1, [pc, #168]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	610b      	str	r3, [r1, #16]
 800335e:	e027      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d112      	bne.n	800338c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800336e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6892      	ldr	r2, [r2, #8]
 8003376:	0211      	lsls	r1, r2, #8
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6912      	ldr	r2, [r2, #16]
 800337c:	0852      	lsrs	r2, r2, #1
 800337e:	3a01      	subs	r2, #1
 8003380:	0552      	lsls	r2, r2, #21
 8003382:	430a      	orrs	r2, r1
 8003384:	491f      	ldr	r1, [pc, #124]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	610b      	str	r3, [r1, #16]
 800338a:	e011      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800338c:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003394:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	0211      	lsls	r1, r2, #8
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6952      	ldr	r2, [r2, #20]
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0652      	lsls	r2, r2, #25
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4916      	ldr	r1, [pc, #88]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a13      	ldr	r2, [pc, #76]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe fa2e 	bl	800181c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033c2:	e009      	b.n	80033d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033c4:	f7fe fa2a 	bl	800181c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	73fb      	strb	r3, [r7, #15]
          break;
 80033d6:	e005      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ef      	beq.n	80033c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	4904      	ldr	r1, [pc, #16]	@ (8003404 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000

08003408 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003422:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0203 	and.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d10d      	bne.n	800344e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
       ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800343a:	4b61      	ldr	r3, [pc, #388]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
       ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d047      	beq.n	80034de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e044      	b.n	80034de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d018      	beq.n	800348e <RCCEx_PLLSAI2_Config+0x86>
 800345c:	2b03      	cmp	r3, #3
 800345e:	d825      	bhi.n	80034ac <RCCEx_PLLSAI2_Config+0xa4>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d002      	beq.n	800346a <RCCEx_PLLSAI2_Config+0x62>
 8003464:	2b02      	cmp	r3, #2
 8003466:	d009      	beq.n	800347c <RCCEx_PLLSAI2_Config+0x74>
 8003468:	e020      	b.n	80034ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800346a:	4b55      	ldr	r3, [pc, #340]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11d      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347a:	e01a      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800347c:	4b50      	ldr	r3, [pc, #320]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348c:	e013      	b.n	80034b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800348e:	4b4c      	ldr	r3, [pc, #304]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800349a:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034aa:	e006      	b.n	80034ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e004      	b.n	80034bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b2:	bf00      	nop
 80034b4:	e002      	b.n	80034bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034c2:	4b3f      	ldr	r3, [pc, #252]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	430b      	orrs	r3, r1
 80034d8:	4939      	ldr	r1, [pc, #228]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d167      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a35      	ldr	r2, [pc, #212]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe f994 	bl	800181c <HAL_GetTick>
 80034f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f6:	e009      	b.n	800350c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f8:	f7fe f990 	bl	800181c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	73fb      	strb	r3, [r7, #15]
        break;
 800350a:	e005      	b.n	8003518 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800350c:	4b2c      	ldr	r3, [pc, #176]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ef      	bne.n	80034f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d14a      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003524:	4b26      	ldr	r3, [pc, #152]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800352c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6892      	ldr	r2, [r2, #8]
 8003534:	0211      	lsls	r1, r2, #8
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	0912      	lsrs	r2, r2, #4
 800353c:	0452      	lsls	r2, r2, #17
 800353e:	430a      	orrs	r2, r1
 8003540:	491f      	ldr	r1, [pc, #124]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	614b      	str	r3, [r1, #20]
 8003546:	e011      	b.n	800356c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003550:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6892      	ldr	r2, [r2, #8]
 8003558:	0211      	lsls	r1, r2, #8
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6912      	ldr	r2, [r2, #16]
 800355e:	0852      	lsrs	r2, r2, #1
 8003560:	3a01      	subs	r2, #1
 8003562:	0652      	lsls	r2, r2, #25
 8003564:	430a      	orrs	r2, r1
 8003566:	4916      	ldr	r1, [pc, #88]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003568:	4313      	orrs	r3, r2
 800356a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800356c:	4b14      	ldr	r3, [pc, #80]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe f950 	bl	800181c <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800357e:	e009      	b.n	8003594 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003580:	f7fe f94c 	bl	800181c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	73fb      	strb	r3, [r7, #15]
          break;
 8003592:	e005      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ef      	beq.n	8003580 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	4904      	ldr	r1, [pc, #16]	@ (80035c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e040      	b.n	8003658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd ff48 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fea6 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fbeb 	bl	8003dec <UART_SetConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e01b      	b.n	8003658 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800362e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800363e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 ff25 	bl	80044a0 <UART_CheckIdleState>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003660:	b480      	push	{r7}
 8003662:	b08b      	sub	sp, #44	@ 0x2c
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003672:	2b20      	cmp	r3, #32
 8003674:	d147      	bne.n	8003706 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit_IT+0x22>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e040      	b.n	8003708 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2221      	movs	r2, #33	@ 0x21
 80036ae:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b8:	d107      	bne.n	80036ca <HAL_UART_Transmit_IT+0x6a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a13      	ldr	r2, [pc, #76]	@ (8003714 <HAL_UART_Transmit_IT+0xb4>)
 80036c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80036c8:	e002      	b.n	80036d0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_UART_Transmit_IT+0xb8>)
 80036ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	613b      	str	r3, [r7, #16]
   return(result);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	69f9      	ldr	r1, [r7, #28]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e6      	bne.n	80036d0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003706:	2302      	movs	r3, #2
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	372c      	adds	r7, #44	@ 0x2c
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	08004a03 	.word	0x08004a03
 8003718:	0800494d 	.word	0x0800494d

0800371c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	@ 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003730:	2b20      	cmp	r3, #32
 8003732:	d137      	bne.n	80037a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_UART_Receive_IT+0x24>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e030      	b.n	80037a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_UART_Receive_IT+0x94>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d01f      	beq.n	8003794 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	69f9      	ldr	r1, [r7, #28]
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	61bb      	str	r3, [r7, #24]
   return(result);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	461a      	mov	r2, r3
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 ff96 	bl	80046cc <UART_Start_Receive_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	e000      	b.n	80037a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	@ 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40008000 	.word	0x40008000

080037b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0ba      	sub	sp, #232	@ 0xe8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037e2:	4013      	ands	r3, r2
 80037e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 82ca 	beq.w	8003da6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      }
      return;
 800381a:	e2c4      	b.n	8003da6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800381c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8117 	beq.w	8003a54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_UART_IRQHandler+0x298>)
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 810a 	beq.w	8003a54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <HAL_UART_IRQHandler+0xbc>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_UART_IRQHandler+0xec>
 800387c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2202      	movs	r2, #2
 800388e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d011      	beq.n	80038d0 <HAL_UART_IRQHandler+0x11c>
 80038ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2204      	movs	r2, #4
 80038be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2208      	movs	r2, #8
 80038fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003902:	f043 0208 	orr.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <HAL_UART_IRQHandler+0x18a>
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800392c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8230 	beq.w	8003daa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 ff5e 	bl	8004858 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d141      	bne.n	8003a2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <HAL_UART_IRQHandler+0x29c>)
 8003a04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f885 	bl	8001b1a <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00f      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9ca 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00b      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9c6 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e007      	b.n	8003a46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9c2 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a44:	e1b1      	b.n	8003daa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a46:	bf00      	nop
    return;
 8003a48:	e1af      	b.n	8003daa <HAL_UART_IRQHandler+0x5f6>
 8003a4a:	bf00      	nop
 8003a4c:	04000120 	.word	0x04000120
 8003a50:	08004921 	.word	0x08004921

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 816a 	bne.w	8003d32 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8163 	beq.w	8003d32 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 815c 	beq.w	8003d32 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	f040 80d4 	bne.w	8003c3a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80ad 	beq.w	8003c02 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f080 80a5 	bcs.w	8003c02 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003abe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8086 	bne.w	8003be0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1da      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3308      	adds	r3, #8
 8003b24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e1      	bne.n	8003b1e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e3      	bne.n	8003b5a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb0:	f023 0310 	bic.w	r3, r3, #16
 8003bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e4      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd ff5f 	bl	8001a9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8ea 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c00:	e0d5      	b.n	8003dae <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 80ce 	bne.w	8003dae <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f040 80c5 	bne.w	8003dae <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8ce 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
      return;
 8003c38:	e0b9      	b.n	8003dae <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80ab 	beq.w	8003db2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a6 	beq.w	8003db2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e4      	bne.n	8003c66 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f023 0310 	bic.w	r3, r3, #16
 8003cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	617b      	str	r3, [r7, #20]
   return(result);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e4      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f852 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d30:	e03f      	b.n	8003db2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <HAL_UART_IRQHandler+0x5a8>
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f001 f89b 	bl	8004e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d5a:	e02d      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
    }
    return;
 8003d84:	e017      	b.n	8003db6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_UART_IRQHandler+0x604>
 8003d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fe8f 	bl	8004ac2 <UART_EndTransmit_IT>
    return;
 8003da4:	e008      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
      return;
 8003da6:	bf00      	nop
 8003da8:	e006      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
    return;
 8003daa:	bf00      	nop
 8003dac:	e004      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
      return;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
      return;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <HAL_UART_IRQHandler+0x604>
    return;
 8003db6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003db8:	37e8      	adds	r7, #232	@ 0xe8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop

08003dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b08a      	sub	sp, #40	@ 0x28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4ba4      	ldr	r3, [pc, #656]	@ (80040ac <UART_SetConfig+0x2c0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a99      	ldr	r2, [pc, #612]	@ (80040b0 <UART_SetConfig+0x2c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a90      	ldr	r2, [pc, #576]	@ (80040b4 <UART_SetConfig+0x2c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d126      	bne.n	8003ec4 <UART_SetConfig+0xd8>
 8003e76:	4b90      	ldr	r3, [pc, #576]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0xd0>
 8003e84:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <UART_SetConfig+0xa0>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e116      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e112      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e10e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eba:	e10a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec2:	e106      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80040bc <UART_SetConfig+0x2d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d138      	bne.n	8003f40 <UART_SetConfig+0x154>
 8003ece:	4b7a      	ldr	r3, [pc, #488]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d82d      	bhi.n	8003f38 <UART_SetConfig+0x14c>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0xf8>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e0d8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e0d4      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e0d0      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e0cc      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e0c8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5e      	ldr	r2, [pc, #376]	@ (80040c0 <UART_SetConfig+0x2d4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <UART_SetConfig+0x1aa>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f54:	2b30      	cmp	r3, #48	@ 0x30
 8003f56:	d016      	beq.n	8003f86 <UART_SetConfig+0x19a>
 8003f58:	2b30      	cmp	r3, #48	@ 0x30
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d00a      	beq.n	8003f76 <UART_SetConfig+0x18a>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d814      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x182>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d008      	beq.n	8003f7e <UART_SetConfig+0x192>
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x1a2>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f74:	e0ad      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7c:	e0a9      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f84:	e0a5      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f86:	2308      	movs	r3, #8
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8c:	e0a1      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f94:	e09d      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80040c4 <UART_SetConfig+0x2d8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x200>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fac:	d016      	beq.n	8003fdc <UART_SetConfig+0x1f0>
 8003fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fb0:	d818      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fb2:	2b80      	cmp	r3, #128	@ 0x80
 8003fb4:	d00a      	beq.n	8003fcc <UART_SetConfig+0x1e0>
 8003fb6:	2b80      	cmp	r3, #128	@ 0x80
 8003fb8:	d814      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x1d8>
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x1e8>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e082      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e07e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e07a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e076      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fea:	e072      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <UART_SetConfig+0x2dc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12a      	bne.n	800404c <UART_SetConfig+0x260>
 8003ff6:	4b30      	ldr	r3, [pc, #192]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0x250>
 8004006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0x258>
 800400c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004010:	d00c      	beq.n	800402c <UART_SetConfig+0x240>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d815      	bhi.n	8004044 <UART_SetConfig+0x258>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <UART_SetConfig+0x238>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004020:	d008      	beq.n	8004034 <UART_SetConfig+0x248>
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x258>
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402a:	e052      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800402c:	2302      	movs	r3, #2
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004032:	e04e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004034:	2304      	movs	r3, #4
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403a:	e04a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800403c:	2308      	movs	r3, #8
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004042:	e046      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004044:	2310      	movs	r3, #16
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404a:	e042      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <UART_SetConfig+0x2c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13a      	bne.n	80040cc <UART_SetConfig+0x2e0>
 8004056:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004064:	d01a      	beq.n	800409c <UART_SetConfig+0x2b0>
 8004066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800406a:	d81b      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004070:	d00c      	beq.n	800408c <UART_SetConfig+0x2a0>
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004076:	d815      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x298>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004080:	d008      	beq.n	8004094 <UART_SetConfig+0x2a8>
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x2b8>
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408a:	e022      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004092:	e01e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e01a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e016      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e012      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040ac:	efff69f3 	.word	0xefff69f3
 80040b0:	40008000 	.word	0x40008000
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40004c00 	.word	0x40004c00
 80040c8:	40005000 	.word	0x40005000
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004354 <UART_SetConfig+0x568>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d17a      	bne.n	80041d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d824      	bhi.n	800412e <UART_SetConfig+0x342>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x300>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	08004119 	.word	0x08004119
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800412f 	.word	0x0800412f
 800410c:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe fd10 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b8f      	ldr	r3, [pc, #572]	@ (8004358 <UART_SetConfig+0x56c>)
 800411a:	61fb      	str	r3, [r7, #28]
        break;
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7fe fc71 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8004122:	61f8      	str	r0, [r7, #28]
        break;
 8004124:	e009      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
        break;
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80fb 	beq.w	8004338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	429a      	cmp	r2, r3
 8004150:	d305      	bcc.n	800415e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004164:	e0e8      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2200      	movs	r2, #0
 800416a:	461c      	mov	r4, r3
 800416c:	4615      	mov	r5, r2
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	022b      	lsls	r3, r5, #8
 8004178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800417c:	0222      	lsls	r2, r4, #8
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6849      	ldr	r1, [r1, #4]
 8004182:	0849      	lsrs	r1, r1, #1
 8004184:	2000      	movs	r0, #0
 8004186:	4688      	mov	r8, r1
 8004188:	4681      	mov	r9, r0
 800418a:	eb12 0a08 	adds.w	sl, r2, r8
 800418e:	eb43 0b09 	adc.w	fp, r3, r9
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	4650      	mov	r0, sl
 80041a2:	4659      	mov	r1, fp
 80041a4:	f7fc fa28 	bl	80005f8 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b6:	d308      	bcc.n	80041ca <UART_SetConfig+0x3de>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041be:	d204      	bcs.n	80041ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e0b6      	b.n	8004338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041d0:	e0b2      	b.n	8004338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041da:	d15e      	bne.n	800429a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d828      	bhi.n	8004236 <UART_SetConfig+0x44a>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0x400>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
 800420c:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe fc90 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
        break;
 8004216:	e014      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe fca2 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 800421c:	61f8      	str	r0, [r7, #28]
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <UART_SetConfig+0x56c>)
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe fbed 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d077      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005a      	lsls	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d916      	bls.n	8004292 <UART_SetConfig+0x4a6>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426a:	d212      	bcs.n	8004292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f023 030f 	bic.w	r3, r3, #15
 8004274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	b29a      	uxth	r2, r3
 8004282:	8afb      	ldrh	r3, [r7, #22]
 8004284:	4313      	orrs	r3, r2
 8004286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	8afa      	ldrh	r2, [r7, #22]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e052      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004298:	e04e      	b.n	8004338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d827      	bhi.n	80042f2 <UART_SetConfig+0x506>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0x4bc>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042f3 	.word	0x080042f3
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042f3 	.word	0x080042f3
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fe fc32 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
        break;
 80042d2:	e014      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fc44 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 80042d8:	61f8      	str	r0, [r7, #28]
        break;
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <UART_SetConfig+0x56c>)
 80042de:	61fb      	str	r3, [r7, #28]
        break;
 80042e0:	e00d      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe fb8f 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80042e6:	61f8      	str	r0, [r7, #28]
        break;
 80042e8:	e009      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ee:	61fb      	str	r3, [r7, #28]
        break;
 80042f0:	e005      	b.n	80042fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042fc:	bf00      	nop
    }

    if (pclk != 0U)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d019      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	085a      	lsrs	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d909      	bls.n	8004332 <UART_SetConfig+0x546>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d205      	bcs.n	8004332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	@ 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40008000 	.word	0x40008000
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b098      	sub	sp, #96	@ 0x60
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fd f9b4 	bl	800181c <HAL_GetTick>
 80044b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d12e      	bne.n	8004522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f88c 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d021      	beq.n	8004522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800450a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e062      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d149      	bne.n	80045c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004538:	2200      	movs	r2, #0
 800453a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f856 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03c      	beq.n	80045c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	623b      	str	r3, [r7, #32]
   return(result);
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
 800456a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800456e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60fb      	str	r3, [r7, #12]
   return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	617b      	str	r3, [r7, #20]
   return(result);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e011      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3758      	adds	r7, #88	@ 0x58
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	e04f      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004608:	d04b      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fd f907 	bl	800181c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e04e      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d037      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b80      	cmp	r3, #128	@ 0x80
 8004636:	d034      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b40      	cmp	r3, #64	@ 0x40
 800463c:	d031      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d110      	bne.n	800466e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2208      	movs	r2, #8
 8004652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8ff 	bl	8004858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2208      	movs	r2, #8
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e029      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467c:	d111      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8e5 	bl	8004858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d0a0      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b097      	sub	sp, #92	@ 0x5c
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fe:	d10e      	bne.n	800471e <UART_Start_Receive_IT+0x52>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <UART_Start_Receive_IT+0x48>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800470e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004712:	e02d      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	22ff      	movs	r2, #255	@ 0xff
 8004718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800471c:	e028      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <UART_Start_Receive_IT+0x76>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <UART_Start_Receive_IT+0x6c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	@ 0xff
 8004732:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004736:	e01b      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	227f      	movs	r2, #127	@ 0x7f
 800473c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004740:	e016      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800474a:	d10d      	bne.n	8004768 <UART_Start_Receive_IT+0x9c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <UART_Start_Receive_IT+0x92>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	227f      	movs	r2, #127	@ 0x7f
 8004758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800475c:	e008      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	223f      	movs	r2, #63	@ 0x3f
 8004762:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004766:	e003      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2222      	movs	r2, #34	@ 0x22
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	657b      	str	r3, [r7, #84]	@ 0x54
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80047ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047bc:	d107      	bne.n	80047ce <UART_Start_Receive_IT+0x102>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a21      	ldr	r2, [pc, #132]	@ (8004850 <UART_Start_Receive_IT+0x184>)
 80047ca:	669a      	str	r2, [r3, #104]	@ 0x68
 80047cc:	e002      	b.n	80047d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a20      	ldr	r2, [pc, #128]	@ (8004854 <UART_Start_Receive_IT+0x188>)
 80047d2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d019      	beq.n	8004810 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80047f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_Start_Receive_IT+0x110>
 800480e:	e018      	b.n	8004842 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f043 0320 	orr.w	r3, r3, #32
 8004824:	653b      	str	r3, [r7, #80]	@ 0x50
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	375c      	adds	r7, #92	@ 0x5c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	08004cd5 	.word	0x08004cd5
 8004854:	08004b19 	.word	0x08004b19

08004858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b095      	sub	sp, #84	@ 0x54
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004880:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d118      	bne.n	8004900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	60bb      	str	r3, [r7, #8]
   return(result);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f023 0310 	bic.w	r3, r3, #16
 80048e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	613b      	str	r3, [r7, #16]
   return(result);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004914:	bf00      	nop
 8004916:	3754      	adds	r7, #84	@ 0x54
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fa3e 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b08f      	sub	sp, #60	@ 0x3c
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004958:	2b21      	cmp	r3, #33	@ 0x21
 800495a:	d14c      	bne.n	80049f6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d132      	bne.n	80049ce <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	61fb      	str	r3, [r7, #28]
   return(result);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004988:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800498c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049cc:	e013      	b.n	80049f6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80049f6:	bf00      	nop
 80049f8:	373c      	adds	r7, #60	@ 0x3c
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b091      	sub	sp, #68	@ 0x44
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a0e:	2b21      	cmp	r3, #33	@ 0x21
 8004a10:	d151      	bne.n	8004ab6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d132      	bne.n	8004a84 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	69b9      	ldr	r1, [r7, #24]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a82:	e018      	b.n	8004ab6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a96:	b292      	uxth	r2, r2
 8004a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004ab6:	bf00      	nop
 8004ab8:	3744      	adds	r7, #68	@ 0x44
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6979      	ldr	r1, [r7, #20]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	613b      	str	r3, [r7, #16]
   return(result);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e6      	bne.n	8004aca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fb ff0f 	bl	800092c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0e:	bf00      	nop
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b09c      	sub	sp, #112	@ 0x70
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b30:	2b22      	cmp	r3, #34	@ 0x22
 8004b32:	f040 80be 	bne.w	8004cb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b44:	b2d9      	uxtb	r1, r3
 8004b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	400a      	ands	r2, r1
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80a3 	bne.w	8004cc6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ba0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e6      	bne.n	8004b80 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a34      	ldr	r2, [pc, #208]	@ (8004cd0 <UART_RxISR_8BIT+0x1b8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01f      	beq.n	8004c44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d12e      	bne.n	8004caa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d103      	bne.n	8004c9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff f896 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ca8:	e00d      	b.n	8004cc6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fb fe1c 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 8004cb0:	e009      	b.n	8004cc6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	8b1b      	ldrh	r3, [r3, #24]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	831a      	strh	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	3770      	adds	r7, #112	@ 0x70
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40008000 	.word	0x40008000

08004cd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b09c      	sub	sp, #112	@ 0x70
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cec:	2b22      	cmp	r3, #34	@ 0x22
 8004cee:	f040 80be 	bne.w	8004e6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 80a3 	bne.w	8004e82 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e6      	bne.n	8004d3c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <UART_RxISR_16BIT+0x1b8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01f      	beq.n	8004e00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d018      	beq.n	8004e00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d12e      	bne.n	8004e66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d103      	bne.n	8004e56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fe ffb8 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e64:	e00d      	b.n	8004e82 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fd3e 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 8004e6c:	e009      	b.n	8004e82 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	8b1b      	ldrh	r3, [r3, #24]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	831a      	strh	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	3770      	adds	r7, #112	@ 0x70
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40008000 	.word	0x40008000

08004e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <sniprintf>:
 8004ea4:	b40c      	push	{r2, r3}
 8004ea6:	b530      	push	{r4, r5, lr}
 8004ea8:	4b17      	ldr	r3, [pc, #92]	@ (8004f08 <sniprintf+0x64>)
 8004eaa:	1e0c      	subs	r4, r1, #0
 8004eac:	681d      	ldr	r5, [r3, #0]
 8004eae:	b09d      	sub	sp, #116	@ 0x74
 8004eb0:	da08      	bge.n	8004ec4 <sniprintf+0x20>
 8004eb2:	238b      	movs	r3, #139	@ 0x8b
 8004eb4:	602b      	str	r3, [r5, #0]
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004eba:	b01d      	add	sp, #116	@ 0x74
 8004ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ec0:	b002      	add	sp, #8
 8004ec2:	4770      	bx	lr
 8004ec4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ec8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ecc:	bf14      	ite	ne
 8004ece:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004ed2:	4623      	moveq	r3, r4
 8004ed4:	9304      	str	r3, [sp, #16]
 8004ed6:	9307      	str	r3, [sp, #28]
 8004ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004edc:	9002      	str	r0, [sp, #8]
 8004ede:	9006      	str	r0, [sp, #24]
 8004ee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ee4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ee6:	ab21      	add	r3, sp, #132	@ 0x84
 8004ee8:	a902      	add	r1, sp, #8
 8004eea:	4628      	mov	r0, r5
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	f000 f941 	bl	8005174 <_svfiprintf_r>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	bfbc      	itt	lt
 8004ef6:	238b      	movlt	r3, #139	@ 0x8b
 8004ef8:	602b      	strlt	r3, [r5, #0]
 8004efa:	2c00      	cmp	r4, #0
 8004efc:	d0dd      	beq.n	8004eba <sniprintf+0x16>
 8004efe:	9b02      	ldr	r3, [sp, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e7d9      	b.n	8004eba <sniprintf+0x16>
 8004f06:	bf00      	nop
 8004f08:	20000010 	.word	0x20000010

08004f0c <siscanf>:
 8004f0c:	b40e      	push	{r1, r2, r3}
 8004f0e:	b530      	push	{r4, r5, lr}
 8004f10:	b09c      	sub	sp, #112	@ 0x70
 8004f12:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004f14:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004f18:	f854 5b04 	ldr.w	r5, [r4], #4
 8004f1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004f20:	9002      	str	r0, [sp, #8]
 8004f22:	9006      	str	r0, [sp, #24]
 8004f24:	f7fb f954 	bl	80001d0 <strlen>
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <siscanf+0x4c>)
 8004f2a:	9003      	str	r0, [sp, #12]
 8004f2c:	9007      	str	r0, [sp, #28]
 8004f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f30:	480a      	ldr	r0, [pc, #40]	@ (8004f5c <siscanf+0x50>)
 8004f32:	9401      	str	r4, [sp, #4]
 8004f34:	2300      	movs	r3, #0
 8004f36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f38:	9314      	str	r3, [sp, #80]	@ 0x50
 8004f3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f42:	462a      	mov	r2, r5
 8004f44:	4623      	mov	r3, r4
 8004f46:	a902      	add	r1, sp, #8
 8004f48:	6800      	ldr	r0, [r0, #0]
 8004f4a:	f000 fa67 	bl	800541c <__ssvfiscanf_r>
 8004f4e:	b01c      	add	sp, #112	@ 0x70
 8004f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f54:	b003      	add	sp, #12
 8004f56:	4770      	bx	lr
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	20000010 	.word	0x20000010

08004f60 <__seofread>:
 8004f60:	2000      	movs	r0, #0
 8004f62:	4770      	bx	lr

08004f64 <strncmp>:
 8004f64:	b510      	push	{r4, lr}
 8004f66:	b16a      	cbz	r2, 8004f84 <strncmp+0x20>
 8004f68:	3901      	subs	r1, #1
 8004f6a:	1884      	adds	r4, r0, r2
 8004f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d103      	bne.n	8004f80 <strncmp+0x1c>
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d001      	beq.n	8004f80 <strncmp+0x1c>
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	d1f5      	bne.n	8004f6c <strncmp+0x8>
 8004f80:	1ad0      	subs	r0, r2, r3
 8004f82:	bd10      	pop	{r4, pc}
 8004f84:	4610      	mov	r0, r2
 8004f86:	e7fc      	b.n	8004f82 <strncmp+0x1e>

08004f88 <strncpy>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	3901      	subs	r1, #1
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	b132      	cbz	r2, 8004f9e <strncpy+0x16>
 8004f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f94:	f803 4b01 	strb.w	r4, [r3], #1
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	d1f7      	bne.n	8004f8e <strncpy+0x6>
 8004f9e:	441a      	add	r2, r3
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d100      	bne.n	8004fa8 <strncpy+0x20>
 8004fa6:	bd10      	pop	{r4, pc}
 8004fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fac:	e7f9      	b.n	8004fa2 <strncpy+0x1a>

08004fae <memset>:
 8004fae:	4402      	add	r2, r0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d100      	bne.n	8004fb8 <memset+0xa>
 8004fb6:	4770      	bx	lr
 8004fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbc:	e7f9      	b.n	8004fb2 <memset+0x4>
	...

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	@ (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000010 	.word	0x20000010

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	@ (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x44>)
 8004fe0:	f001 f8e8 	bl	80061b4 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08006654 	.word	0x08006654
 8005008:	08006654 	.word	0x08006654
 800500c:	08006654 	.word	0x08006654
 8005010:	08006658 	.word	0x08006658

08005014 <__retarget_lock_acquire_recursive>:
 8005014:	4770      	bx	lr

08005016 <__retarget_lock_release_recursive>:
 8005016:	4770      	bx	lr

08005018 <strcpy>:
 8005018:	4603      	mov	r3, r0
 800501a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800501e:	f803 2b01 	strb.w	r2, [r3], #1
 8005022:	2a00      	cmp	r2, #0
 8005024:	d1f9      	bne.n	800501a <strcpy+0x2>
 8005026:	4770      	bx	lr

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d041      	beq.n	80050b4 <_free_r+0x8c>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 ff1a 	bl	8005e74 <__malloc_lock>
 8005040:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <_free_r+0x90>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	b933      	cbnz	r3, 8005054 <_free_r+0x2c>
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005050:	f000 bf16 	b.w	8005e80 <__malloc_unlock>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d908      	bls.n	800506a <_free_r+0x42>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	1821      	adds	r1, r4, r0
 800505c:	428b      	cmp	r3, r1
 800505e:	bf01      	itttt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	1809      	addeq	r1, r1, r0
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	e7ed      	b.n	8005046 <_free_r+0x1e>
 800506a:	461a      	mov	r2, r3
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b10b      	cbz	r3, 8005074 <_free_r+0x4c>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d9fa      	bls.n	800506a <_free_r+0x42>
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	1850      	adds	r0, r2, r1
 8005078:	42a0      	cmp	r0, r4
 800507a:	d10b      	bne.n	8005094 <_free_r+0x6c>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	4401      	add	r1, r0
 8005080:	1850      	adds	r0, r2, r1
 8005082:	4283      	cmp	r3, r0
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	d1e0      	bne.n	800504a <_free_r+0x22>
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6053      	str	r3, [r2, #4]
 800508e:	4408      	add	r0, r1
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	e7da      	b.n	800504a <_free_r+0x22>
 8005094:	d902      	bls.n	800509c <_free_r+0x74>
 8005096:	230c      	movs	r3, #12
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	e7d6      	b.n	800504a <_free_r+0x22>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	1821      	adds	r1, r4, r0
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf04      	itt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	bf04      	itt	eq
 80050ac:	1809      	addeq	r1, r1, r0
 80050ae:	6021      	streq	r1, [r4, #0]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7ca      	b.n	800504a <_free_r+0x22>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	200003f4 	.word	0x200003f4

080050bc <__ssputs_r>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	688e      	ldr	r6, [r1, #8]
 80050c2:	461f      	mov	r7, r3
 80050c4:	42be      	cmp	r6, r7
 80050c6:	680b      	ldr	r3, [r1, #0]
 80050c8:	4682      	mov	sl, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	4690      	mov	r8, r2
 80050ce:	d82d      	bhi.n	800512c <__ssputs_r+0x70>
 80050d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050d8:	d026      	beq.n	8005128 <__ssputs_r+0x6c>
 80050da:	6965      	ldr	r5, [r4, #20]
 80050dc:	6909      	ldr	r1, [r1, #16]
 80050de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e2:	eba3 0901 	sub.w	r9, r3, r1
 80050e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ea:	1c7b      	adds	r3, r7, #1
 80050ec:	444b      	add	r3, r9
 80050ee:	106d      	asrs	r5, r5, #1
 80050f0:	429d      	cmp	r5, r3
 80050f2:	bf38      	it	cc
 80050f4:	461d      	movcc	r5, r3
 80050f6:	0553      	lsls	r3, r2, #21
 80050f8:	d527      	bpl.n	800514a <__ssputs_r+0x8e>
 80050fa:	4629      	mov	r1, r5
 80050fc:	f000 fb24 	bl	8005748 <_malloc_r>
 8005100:	4606      	mov	r6, r0
 8005102:	b360      	cbz	r0, 800515e <__ssputs_r+0xa2>
 8005104:	6921      	ldr	r1, [r4, #16]
 8005106:	464a      	mov	r2, r9
 8005108:	f001 f83e 	bl	8006188 <memcpy>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	6126      	str	r6, [r4, #16]
 800511a:	6165      	str	r5, [r4, #20]
 800511c:	444e      	add	r6, r9
 800511e:	eba5 0509 	sub.w	r5, r5, r9
 8005122:	6026      	str	r6, [r4, #0]
 8005124:	60a5      	str	r5, [r4, #8]
 8005126:	463e      	mov	r6, r7
 8005128:	42be      	cmp	r6, r7
 800512a:	d900      	bls.n	800512e <__ssputs_r+0x72>
 800512c:	463e      	mov	r6, r7
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	4632      	mov	r2, r6
 8005132:	4641      	mov	r1, r8
 8005134:	f000 fffe 	bl	8006134 <memmove>
 8005138:	68a3      	ldr	r3, [r4, #8]
 800513a:	1b9b      	subs	r3, r3, r6
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	4433      	add	r3, r6
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	2000      	movs	r0, #0
 8005146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514a:	462a      	mov	r2, r5
 800514c:	f000 fed8 	bl	8005f00 <_realloc_r>
 8005150:	4606      	mov	r6, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	d1e0      	bne.n	8005118 <__ssputs_r+0x5c>
 8005156:	6921      	ldr	r1, [r4, #16]
 8005158:	4650      	mov	r0, sl
 800515a:	f7ff ff65 	bl	8005028 <_free_r>
 800515e:	230c      	movs	r3, #12
 8005160:	f8ca 3000 	str.w	r3, [sl]
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005170:	e7e9      	b.n	8005146 <__ssputs_r+0x8a>
	...

08005174 <_svfiprintf_r>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	4698      	mov	r8, r3
 800517a:	898b      	ldrh	r3, [r1, #12]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	b09d      	sub	sp, #116	@ 0x74
 8005180:	4607      	mov	r7, r0
 8005182:	460d      	mov	r5, r1
 8005184:	4614      	mov	r4, r2
 8005186:	d510      	bpl.n	80051aa <_svfiprintf_r+0x36>
 8005188:	690b      	ldr	r3, [r1, #16]
 800518a:	b973      	cbnz	r3, 80051aa <_svfiprintf_r+0x36>
 800518c:	2140      	movs	r1, #64	@ 0x40
 800518e:	f000 fadb 	bl	8005748 <_malloc_r>
 8005192:	6028      	str	r0, [r5, #0]
 8005194:	6128      	str	r0, [r5, #16]
 8005196:	b930      	cbnz	r0, 80051a6 <_svfiprintf_r+0x32>
 8005198:	230c      	movs	r3, #12
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051a0:	b01d      	add	sp, #116	@ 0x74
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	2340      	movs	r3, #64	@ 0x40
 80051a8:	616b      	str	r3, [r5, #20]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ae:	2320      	movs	r3, #32
 80051b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b8:	2330      	movs	r3, #48	@ 0x30
 80051ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005358 <_svfiprintf_r+0x1e4>
 80051be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051c2:	f04f 0901 	mov.w	r9, #1
 80051c6:	4623      	mov	r3, r4
 80051c8:	469a      	mov	sl, r3
 80051ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ce:	b10a      	cbz	r2, 80051d4 <_svfiprintf_r+0x60>
 80051d0:	2a25      	cmp	r2, #37	@ 0x25
 80051d2:	d1f9      	bne.n	80051c8 <_svfiprintf_r+0x54>
 80051d4:	ebba 0b04 	subs.w	fp, sl, r4
 80051d8:	d00b      	beq.n	80051f2 <_svfiprintf_r+0x7e>
 80051da:	465b      	mov	r3, fp
 80051dc:	4622      	mov	r2, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ff6b 	bl	80050bc <__ssputs_r>
 80051e6:	3001      	adds	r0, #1
 80051e8:	f000 80a7 	beq.w	800533a <_svfiprintf_r+0x1c6>
 80051ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ee:	445a      	add	r2, fp
 80051f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051f2:	f89a 3000 	ldrb.w	r3, [sl]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 809f 	beq.w	800533a <_svfiprintf_r+0x1c6>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005206:	f10a 0a01 	add.w	sl, sl, #1
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	9307      	str	r3, [sp, #28]
 800520e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005212:	931a      	str	r3, [sp, #104]	@ 0x68
 8005214:	4654      	mov	r4, sl
 8005216:	2205      	movs	r2, #5
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	484e      	ldr	r0, [pc, #312]	@ (8005358 <_svfiprintf_r+0x1e4>)
 800521e:	f7fa ffdf 	bl	80001e0 <memchr>
 8005222:	9a04      	ldr	r2, [sp, #16]
 8005224:	b9d8      	cbnz	r0, 800525e <_svfiprintf_r+0xea>
 8005226:	06d0      	lsls	r0, r2, #27
 8005228:	bf44      	itt	mi
 800522a:	2320      	movmi	r3, #32
 800522c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005230:	0711      	lsls	r1, r2, #28
 8005232:	bf44      	itt	mi
 8005234:	232b      	movmi	r3, #43	@ 0x2b
 8005236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800523a:	f89a 3000 	ldrb.w	r3, [sl]
 800523e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005240:	d015      	beq.n	800526e <_svfiprintf_r+0xfa>
 8005242:	9a07      	ldr	r2, [sp, #28]
 8005244:	4654      	mov	r4, sl
 8005246:	2000      	movs	r0, #0
 8005248:	f04f 0c0a 	mov.w	ip, #10
 800524c:	4621      	mov	r1, r4
 800524e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005252:	3b30      	subs	r3, #48	@ 0x30
 8005254:	2b09      	cmp	r3, #9
 8005256:	d94b      	bls.n	80052f0 <_svfiprintf_r+0x17c>
 8005258:	b1b0      	cbz	r0, 8005288 <_svfiprintf_r+0x114>
 800525a:	9207      	str	r2, [sp, #28]
 800525c:	e014      	b.n	8005288 <_svfiprintf_r+0x114>
 800525e:	eba0 0308 	sub.w	r3, r0, r8
 8005262:	fa09 f303 	lsl.w	r3, r9, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	9304      	str	r3, [sp, #16]
 800526a:	46a2      	mov	sl, r4
 800526c:	e7d2      	b.n	8005214 <_svfiprintf_r+0xa0>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9103      	str	r1, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfbb      	ittet	lt
 800527a:	425b      	neglt	r3, r3
 800527c:	f042 0202 	orrlt.w	r2, r2, #2
 8005280:	9307      	strge	r3, [sp, #28]
 8005282:	9307      	strlt	r3, [sp, #28]
 8005284:	bfb8      	it	lt
 8005286:	9204      	strlt	r2, [sp, #16]
 8005288:	7823      	ldrb	r3, [r4, #0]
 800528a:	2b2e      	cmp	r3, #46	@ 0x2e
 800528c:	d10a      	bne.n	80052a4 <_svfiprintf_r+0x130>
 800528e:	7863      	ldrb	r3, [r4, #1]
 8005290:	2b2a      	cmp	r3, #42	@ 0x2a
 8005292:	d132      	bne.n	80052fa <_svfiprintf_r+0x186>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	9203      	str	r2, [sp, #12]
 800529c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052a0:	3402      	adds	r4, #2
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005368 <_svfiprintf_r+0x1f4>
 80052a8:	7821      	ldrb	r1, [r4, #0]
 80052aa:	2203      	movs	r2, #3
 80052ac:	4650      	mov	r0, sl
 80052ae:	f7fa ff97 	bl	80001e0 <memchr>
 80052b2:	b138      	cbz	r0, 80052c4 <_svfiprintf_r+0x150>
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	eba0 000a 	sub.w	r0, r0, sl
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	4082      	lsls	r2, r0
 80052be:	4313      	orrs	r3, r2
 80052c0:	3401      	adds	r4, #1
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	4824      	ldr	r0, [pc, #144]	@ (800535c <_svfiprintf_r+0x1e8>)
 80052ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052ce:	2206      	movs	r2, #6
 80052d0:	f7fa ff86 	bl	80001e0 <memchr>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d036      	beq.n	8005346 <_svfiprintf_r+0x1d2>
 80052d8:	4b21      	ldr	r3, [pc, #132]	@ (8005360 <_svfiprintf_r+0x1ec>)
 80052da:	bb1b      	cbnz	r3, 8005324 <_svfiprintf_r+0x1b0>
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	3307      	adds	r3, #7
 80052e0:	f023 0307 	bic.w	r3, r3, #7
 80052e4:	3308      	adds	r3, #8
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ea:	4433      	add	r3, r6
 80052ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ee:	e76a      	b.n	80051c6 <_svfiprintf_r+0x52>
 80052f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f4:	460c      	mov	r4, r1
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7a8      	b.n	800524c <_svfiprintf_r+0xd8>
 80052fa:	2300      	movs	r3, #0
 80052fc:	3401      	adds	r4, #1
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	4619      	mov	r1, r3
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	4620      	mov	r0, r4
 8005308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530c:	3a30      	subs	r2, #48	@ 0x30
 800530e:	2a09      	cmp	r2, #9
 8005310:	d903      	bls.n	800531a <_svfiprintf_r+0x1a6>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0c6      	beq.n	80052a4 <_svfiprintf_r+0x130>
 8005316:	9105      	str	r1, [sp, #20]
 8005318:	e7c4      	b.n	80052a4 <_svfiprintf_r+0x130>
 800531a:	fb0c 2101 	mla	r1, ip, r1, r2
 800531e:	4604      	mov	r4, r0
 8005320:	2301      	movs	r3, #1
 8005322:	e7f0      	b.n	8005306 <_svfiprintf_r+0x192>
 8005324:	ab03      	add	r3, sp, #12
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	462a      	mov	r2, r5
 800532a:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <_svfiprintf_r+0x1f0>)
 800532c:	a904      	add	r1, sp, #16
 800532e:	4638      	mov	r0, r7
 8005330:	f3af 8000 	nop.w
 8005334:	1c42      	adds	r2, r0, #1
 8005336:	4606      	mov	r6, r0
 8005338:	d1d6      	bne.n	80052e8 <_svfiprintf_r+0x174>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	065b      	lsls	r3, r3, #25
 800533e:	f53f af2d 	bmi.w	800519c <_svfiprintf_r+0x28>
 8005342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005344:	e72c      	b.n	80051a0 <_svfiprintf_r+0x2c>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <_svfiprintf_r+0x1f0>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4638      	mov	r0, r7
 8005352:	f000 fae7 	bl	8005924 <_printf_i>
 8005356:	e7ed      	b.n	8005334 <_svfiprintf_r+0x1c0>
 8005358:	080064fc 	.word	0x080064fc
 800535c:	08006506 	.word	0x08006506
 8005360:	00000000 	.word	0x00000000
 8005364:	080050bd 	.word	0x080050bd
 8005368:	08006502 	.word	0x08006502

0800536c <_sungetc_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	1c4b      	adds	r3, r1, #1
 8005370:	4614      	mov	r4, r2
 8005372:	d103      	bne.n	800537c <_sungetc_r+0x10>
 8005374:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005378:	4628      	mov	r0, r5
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	8993      	ldrh	r3, [r2, #12]
 800537e:	f023 0320 	bic.w	r3, r3, #32
 8005382:	8193      	strh	r3, [r2, #12]
 8005384:	6853      	ldr	r3, [r2, #4]
 8005386:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005388:	b2cd      	uxtb	r5, r1
 800538a:	b18a      	cbz	r2, 80053b0 <_sungetc_r+0x44>
 800538c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800538e:	429a      	cmp	r2, r3
 8005390:	dd08      	ble.n	80053a4 <_sungetc_r+0x38>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	1e5a      	subs	r2, r3, #1
 8005396:	6022      	str	r2, [r4, #0]
 8005398:	f803 5c01 	strb.w	r5, [r3, #-1]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	3301      	adds	r3, #1
 80053a0:	6063      	str	r3, [r4, #4]
 80053a2:	e7e9      	b.n	8005378 <_sungetc_r+0xc>
 80053a4:	4621      	mov	r1, r4
 80053a6:	f000 fd71 	bl	8005e8c <__submore>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0f1      	beq.n	8005392 <_sungetc_r+0x26>
 80053ae:	e7e1      	b.n	8005374 <_sungetc_r+0x8>
 80053b0:	6921      	ldr	r1, [r4, #16]
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	b141      	cbz	r1, 80053c8 <_sungetc_r+0x5c>
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d206      	bcs.n	80053c8 <_sungetc_r+0x5c>
 80053ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80053be:	42a9      	cmp	r1, r5
 80053c0:	d102      	bne.n	80053c8 <_sungetc_r+0x5c>
 80053c2:	3a01      	subs	r2, #1
 80053c4:	6022      	str	r2, [r4, #0]
 80053c6:	e7ea      	b.n	800539e <_sungetc_r+0x32>
 80053c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80053cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80053d2:	2303      	movs	r3, #3
 80053d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80053d6:	4623      	mov	r3, r4
 80053d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	2301      	movs	r3, #1
 80053e0:	e7de      	b.n	80053a0 <_sungetc_r+0x34>

080053e2 <__ssrefill_r>:
 80053e2:	b510      	push	{r4, lr}
 80053e4:	460c      	mov	r4, r1
 80053e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80053e8:	b169      	cbz	r1, 8005406 <__ssrefill_r+0x24>
 80053ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ee:	4299      	cmp	r1, r3
 80053f0:	d001      	beq.n	80053f6 <__ssrefill_r+0x14>
 80053f2:	f7ff fe19 	bl	8005028 <_free_r>
 80053f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	2000      	movs	r0, #0
 80053fc:	6360      	str	r0, [r4, #52]	@ 0x34
 80053fe:	b113      	cbz	r3, 8005406 <__ssrefill_r+0x24>
 8005400:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	bd10      	pop	{r4, pc}
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	81a3      	strh	r3, [r4, #12]
 8005416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800541a:	e7f3      	b.n	8005404 <__ssrefill_r+0x22>

0800541c <__ssvfiscanf_r>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	460c      	mov	r4, r1
 8005422:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005426:	2100      	movs	r1, #0
 8005428:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800542c:	49a5      	ldr	r1, [pc, #660]	@ (80056c4 <__ssvfiscanf_r+0x2a8>)
 800542e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005430:	f10d 0804 	add.w	r8, sp, #4
 8005434:	49a4      	ldr	r1, [pc, #656]	@ (80056c8 <__ssvfiscanf_r+0x2ac>)
 8005436:	4fa5      	ldr	r7, [pc, #660]	@ (80056cc <__ssvfiscanf_r+0x2b0>)
 8005438:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800543c:	4606      	mov	r6, r0
 800543e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	7813      	ldrb	r3, [r2, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8158 	beq.w	80056fa <__ssvfiscanf_r+0x2de>
 800544a:	5cf9      	ldrb	r1, [r7, r3]
 800544c:	f011 0108 	ands.w	r1, r1, #8
 8005450:	f102 0501 	add.w	r5, r2, #1
 8005454:	d019      	beq.n	800548a <__ssvfiscanf_r+0x6e>
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dd0f      	ble.n	800547c <__ssvfiscanf_r+0x60>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	781a      	ldrb	r2, [r3, #0]
 8005460:	5cba      	ldrb	r2, [r7, r2]
 8005462:	0712      	lsls	r2, r2, #28
 8005464:	d401      	bmi.n	800546a <__ssvfiscanf_r+0x4e>
 8005466:	462a      	mov	r2, r5
 8005468:	e7eb      	b.n	8005442 <__ssvfiscanf_r+0x26>
 800546a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800546c:	3201      	adds	r2, #1
 800546e:	9245      	str	r2, [sp, #276]	@ 0x114
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	3301      	adds	r3, #1
 8005474:	3a01      	subs	r2, #1
 8005476:	6062      	str	r2, [r4, #4]
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	e7ec      	b.n	8005456 <__ssvfiscanf_r+0x3a>
 800547c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800547e:	4621      	mov	r1, r4
 8005480:	4630      	mov	r0, r6
 8005482:	4798      	blx	r3
 8005484:	2800      	cmp	r0, #0
 8005486:	d0e9      	beq.n	800545c <__ssvfiscanf_r+0x40>
 8005488:	e7ed      	b.n	8005466 <__ssvfiscanf_r+0x4a>
 800548a:	2b25      	cmp	r3, #37	@ 0x25
 800548c:	d012      	beq.n	80054b4 <__ssvfiscanf_r+0x98>
 800548e:	4699      	mov	r9, r3
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f340 8093 	ble.w	80055be <__ssvfiscanf_r+0x1a2>
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	7813      	ldrb	r3, [r2, #0]
 800549c:	454b      	cmp	r3, r9
 800549e:	f040 812c 	bne.w	80056fa <__ssvfiscanf_r+0x2de>
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80054aa:	3201      	adds	r2, #1
 80054ac:	3301      	adds	r3, #1
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	9345      	str	r3, [sp, #276]	@ 0x114
 80054b2:	e7d8      	b.n	8005466 <__ssvfiscanf_r+0x4a>
 80054b4:	9141      	str	r1, [sp, #260]	@ 0x104
 80054b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80054b8:	7853      	ldrb	r3, [r2, #1]
 80054ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80054bc:	bf02      	ittt	eq
 80054be:	2310      	moveq	r3, #16
 80054c0:	1c95      	addeq	r5, r2, #2
 80054c2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80054c4:	220a      	movs	r2, #10
 80054c6:	46a9      	mov	r9, r5
 80054c8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80054cc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d91e      	bls.n	8005512 <__ssvfiscanf_r+0xf6>
 80054d4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80056d0 <__ssvfiscanf_r+0x2b4>
 80054d8:	2203      	movs	r2, #3
 80054da:	4650      	mov	r0, sl
 80054dc:	f7fa fe80 	bl	80001e0 <memchr>
 80054e0:	b138      	cbz	r0, 80054f2 <__ssvfiscanf_r+0xd6>
 80054e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80054e4:	eba0 000a 	sub.w	r0, r0, sl
 80054e8:	2301      	movs	r3, #1
 80054ea:	4083      	lsls	r3, r0
 80054ec:	4313      	orrs	r3, r2
 80054ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80054f0:	464d      	mov	r5, r9
 80054f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054f6:	2b78      	cmp	r3, #120	@ 0x78
 80054f8:	d806      	bhi.n	8005508 <__ssvfiscanf_r+0xec>
 80054fa:	2b57      	cmp	r3, #87	@ 0x57
 80054fc:	d810      	bhi.n	8005520 <__ssvfiscanf_r+0x104>
 80054fe:	2b25      	cmp	r3, #37	@ 0x25
 8005500:	d0c5      	beq.n	800548e <__ssvfiscanf_r+0x72>
 8005502:	d857      	bhi.n	80055b4 <__ssvfiscanf_r+0x198>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d065      	beq.n	80055d4 <__ssvfiscanf_r+0x1b8>
 8005508:	2303      	movs	r3, #3
 800550a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800550c:	230a      	movs	r3, #10
 800550e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005510:	e078      	b.n	8005604 <__ssvfiscanf_r+0x1e8>
 8005512:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005514:	fb02 1103 	mla	r1, r2, r3, r1
 8005518:	3930      	subs	r1, #48	@ 0x30
 800551a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800551c:	464d      	mov	r5, r9
 800551e:	e7d2      	b.n	80054c6 <__ssvfiscanf_r+0xaa>
 8005520:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005524:	2a20      	cmp	r2, #32
 8005526:	d8ef      	bhi.n	8005508 <__ssvfiscanf_r+0xec>
 8005528:	a101      	add	r1, pc, #4	@ (adr r1, 8005530 <__ssvfiscanf_r+0x114>)
 800552a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800552e:	bf00      	nop
 8005530:	080055e3 	.word	0x080055e3
 8005534:	08005509 	.word	0x08005509
 8005538:	08005509 	.word	0x08005509
 800553c:	0800563d 	.word	0x0800563d
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	08005509 	.word	0x08005509
 8005550:	08005509 	.word	0x08005509
 8005554:	08005509 	.word	0x08005509
 8005558:	08005509 	.word	0x08005509
 800555c:	08005653 	.word	0x08005653
 8005560:	08005639 	.word	0x08005639
 8005564:	080055bb 	.word	0x080055bb
 8005568:	080055bb 	.word	0x080055bb
 800556c:	080055bb 	.word	0x080055bb
 8005570:	08005509 	.word	0x08005509
 8005574:	080055f5 	.word	0x080055f5
 8005578:	08005509 	.word	0x08005509
 800557c:	08005509 	.word	0x08005509
 8005580:	08005509 	.word	0x08005509
 8005584:	08005509 	.word	0x08005509
 8005588:	08005663 	.word	0x08005663
 800558c:	080055fd 	.word	0x080055fd
 8005590:	080055db 	.word	0x080055db
 8005594:	08005509 	.word	0x08005509
 8005598:	08005509 	.word	0x08005509
 800559c:	0800565f 	.word	0x0800565f
 80055a0:	08005509 	.word	0x08005509
 80055a4:	08005639 	.word	0x08005639
 80055a8:	08005509 	.word	0x08005509
 80055ac:	08005509 	.word	0x08005509
 80055b0:	080055e3 	.word	0x080055e3
 80055b4:	3b45      	subs	r3, #69	@ 0x45
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d8a6      	bhi.n	8005508 <__ssvfiscanf_r+0xec>
 80055ba:	2305      	movs	r3, #5
 80055bc:	e021      	b.n	8005602 <__ssvfiscanf_r+0x1e6>
 80055be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80055c0:	4621      	mov	r1, r4
 80055c2:	4630      	mov	r0, r6
 80055c4:	4798      	blx	r3
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f43f af66 	beq.w	8005498 <__ssvfiscanf_r+0x7c>
 80055cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 808b 	bne.w	80056ea <__ssvfiscanf_r+0x2ce>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055d8:	e08b      	b.n	80056f2 <__ssvfiscanf_r+0x2d6>
 80055da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80055dc:	f042 0220 	orr.w	r2, r2, #32
 80055e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80055e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80055e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80055ea:	2210      	movs	r2, #16
 80055ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80055ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80055f0:	d902      	bls.n	80055f8 <__ssvfiscanf_r+0x1dc>
 80055f2:	e005      	b.n	8005600 <__ssvfiscanf_r+0x1e4>
 80055f4:	2300      	movs	r3, #0
 80055f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80055f8:	2303      	movs	r3, #3
 80055fa:	e002      	b.n	8005602 <__ssvfiscanf_r+0x1e6>
 80055fc:	2308      	movs	r3, #8
 80055fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8005600:	2304      	movs	r3, #4
 8005602:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd39      	ble.n	800567e <__ssvfiscanf_r+0x262>
 800560a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800560c:	0659      	lsls	r1, r3, #25
 800560e:	d404      	bmi.n	800561a <__ssvfiscanf_r+0x1fe>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	5cba      	ldrb	r2, [r7, r2]
 8005616:	0712      	lsls	r2, r2, #28
 8005618:	d438      	bmi.n	800568c <__ssvfiscanf_r+0x270>
 800561a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800561c:	2b02      	cmp	r3, #2
 800561e:	dc47      	bgt.n	80056b0 <__ssvfiscanf_r+0x294>
 8005620:	466b      	mov	r3, sp
 8005622:	4622      	mov	r2, r4
 8005624:	a941      	add	r1, sp, #260	@ 0x104
 8005626:	4630      	mov	r0, r6
 8005628:	f000 fa9c 	bl	8005b64 <_scanf_chars>
 800562c:	2801      	cmp	r0, #1
 800562e:	d064      	beq.n	80056fa <__ssvfiscanf_r+0x2de>
 8005630:	2802      	cmp	r0, #2
 8005632:	f47f af18 	bne.w	8005466 <__ssvfiscanf_r+0x4a>
 8005636:	e7c9      	b.n	80055cc <__ssvfiscanf_r+0x1b0>
 8005638:	220a      	movs	r2, #10
 800563a:	e7d7      	b.n	80055ec <__ssvfiscanf_r+0x1d0>
 800563c:	4629      	mov	r1, r5
 800563e:	4640      	mov	r0, r8
 8005640:	f000 fbde 	bl	8005e00 <__sccl>
 8005644:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800564a:	9341      	str	r3, [sp, #260]	@ 0x104
 800564c:	4605      	mov	r5, r0
 800564e:	2301      	movs	r3, #1
 8005650:	e7d7      	b.n	8005602 <__ssvfiscanf_r+0x1e6>
 8005652:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005658:	9341      	str	r3, [sp, #260]	@ 0x104
 800565a:	2300      	movs	r3, #0
 800565c:	e7d1      	b.n	8005602 <__ssvfiscanf_r+0x1e6>
 800565e:	2302      	movs	r3, #2
 8005660:	e7cf      	b.n	8005602 <__ssvfiscanf_r+0x1e6>
 8005662:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005664:	06c3      	lsls	r3, r0, #27
 8005666:	f53f aefe 	bmi.w	8005466 <__ssvfiscanf_r+0x4a>
 800566a:	9b00      	ldr	r3, [sp, #0]
 800566c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800566e:	1d19      	adds	r1, r3, #4
 8005670:	9100      	str	r1, [sp, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	07c0      	lsls	r0, r0, #31
 8005676:	bf4c      	ite	mi
 8005678:	801a      	strhmi	r2, [r3, #0]
 800567a:	601a      	strpl	r2, [r3, #0]
 800567c:	e6f3      	b.n	8005466 <__ssvfiscanf_r+0x4a>
 800567e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005680:	4621      	mov	r1, r4
 8005682:	4630      	mov	r0, r6
 8005684:	4798      	blx	r3
 8005686:	2800      	cmp	r0, #0
 8005688:	d0bf      	beq.n	800560a <__ssvfiscanf_r+0x1ee>
 800568a:	e79f      	b.n	80055cc <__ssvfiscanf_r+0x1b0>
 800568c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800568e:	3201      	adds	r2, #1
 8005690:	9245      	str	r2, [sp, #276]	@ 0x114
 8005692:	6862      	ldr	r2, [r4, #4]
 8005694:	3a01      	subs	r2, #1
 8005696:	2a00      	cmp	r2, #0
 8005698:	6062      	str	r2, [r4, #4]
 800569a:	dd02      	ble.n	80056a2 <__ssvfiscanf_r+0x286>
 800569c:	3301      	adds	r3, #1
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	e7b6      	b.n	8005610 <__ssvfiscanf_r+0x1f4>
 80056a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80056a4:	4621      	mov	r1, r4
 80056a6:	4630      	mov	r0, r6
 80056a8:	4798      	blx	r3
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d0b0      	beq.n	8005610 <__ssvfiscanf_r+0x1f4>
 80056ae:	e78d      	b.n	80055cc <__ssvfiscanf_r+0x1b0>
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	dc0f      	bgt.n	80056d4 <__ssvfiscanf_r+0x2b8>
 80056b4:	466b      	mov	r3, sp
 80056b6:	4622      	mov	r2, r4
 80056b8:	a941      	add	r1, sp, #260	@ 0x104
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 faac 	bl	8005c18 <_scanf_i>
 80056c0:	e7b4      	b.n	800562c <__ssvfiscanf_r+0x210>
 80056c2:	bf00      	nop
 80056c4:	0800536d 	.word	0x0800536d
 80056c8:	080053e3 	.word	0x080053e3
 80056cc:	0800654b 	.word	0x0800654b
 80056d0:	08006502 	.word	0x08006502
 80056d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <__ssvfiscanf_r+0x2e4>)
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f43f aec5 	beq.w	8005466 <__ssvfiscanf_r+0x4a>
 80056dc:	466b      	mov	r3, sp
 80056de:	4622      	mov	r2, r4
 80056e0:	a941      	add	r1, sp, #260	@ 0x104
 80056e2:	4630      	mov	r0, r6
 80056e4:	f3af 8000 	nop.w
 80056e8:	e7a0      	b.n	800562c <__ssvfiscanf_r+0x210>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	065b      	lsls	r3, r3, #25
 80056ee:	f53f af71 	bmi.w	80055d4 <__ssvfiscanf_r+0x1b8>
 80056f2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80056fc:	e7f9      	b.n	80056f2 <__ssvfiscanf_r+0x2d6>
 80056fe:	bf00      	nop
 8005700:	00000000 	.word	0x00000000

08005704 <sbrk_aligned>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4e0f      	ldr	r6, [pc, #60]	@ (8005744 <sbrk_aligned+0x40>)
 8005708:	460c      	mov	r4, r1
 800570a:	6831      	ldr	r1, [r6, #0]
 800570c:	4605      	mov	r5, r0
 800570e:	b911      	cbnz	r1, 8005716 <sbrk_aligned+0x12>
 8005710:	f000 fd2a 	bl	8006168 <_sbrk_r>
 8005714:	6030      	str	r0, [r6, #0]
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 fd25 	bl	8006168 <_sbrk_r>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d103      	bne.n	800572a <sbrk_aligned+0x26>
 8005722:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005726:	4620      	mov	r0, r4
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	1cc4      	adds	r4, r0, #3
 800572c:	f024 0403 	bic.w	r4, r4, #3
 8005730:	42a0      	cmp	r0, r4
 8005732:	d0f8      	beq.n	8005726 <sbrk_aligned+0x22>
 8005734:	1a21      	subs	r1, r4, r0
 8005736:	4628      	mov	r0, r5
 8005738:	f000 fd16 	bl	8006168 <_sbrk_r>
 800573c:	3001      	adds	r0, #1
 800573e:	d1f2      	bne.n	8005726 <sbrk_aligned+0x22>
 8005740:	e7ef      	b.n	8005722 <sbrk_aligned+0x1e>
 8005742:	bf00      	nop
 8005744:	200003f0 	.word	0x200003f0

08005748 <_malloc_r>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	1ccd      	adds	r5, r1, #3
 800574e:	f025 0503 	bic.w	r5, r5, #3
 8005752:	3508      	adds	r5, #8
 8005754:	2d0c      	cmp	r5, #12
 8005756:	bf38      	it	cc
 8005758:	250c      	movcc	r5, #12
 800575a:	2d00      	cmp	r5, #0
 800575c:	4606      	mov	r6, r0
 800575e:	db01      	blt.n	8005764 <_malloc_r+0x1c>
 8005760:	42a9      	cmp	r1, r5
 8005762:	d904      	bls.n	800576e <_malloc_r+0x26>
 8005764:	230c      	movs	r3, #12
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	2000      	movs	r0, #0
 800576a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005844 <_malloc_r+0xfc>
 8005772:	f000 fb7f 	bl	8005e74 <__malloc_lock>
 8005776:	f8d8 3000 	ldr.w	r3, [r8]
 800577a:	461c      	mov	r4, r3
 800577c:	bb44      	cbnz	r4, 80057d0 <_malloc_r+0x88>
 800577e:	4629      	mov	r1, r5
 8005780:	4630      	mov	r0, r6
 8005782:	f7ff ffbf 	bl	8005704 <sbrk_aligned>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	4604      	mov	r4, r0
 800578a:	d158      	bne.n	800583e <_malloc_r+0xf6>
 800578c:	f8d8 4000 	ldr.w	r4, [r8]
 8005790:	4627      	mov	r7, r4
 8005792:	2f00      	cmp	r7, #0
 8005794:	d143      	bne.n	800581e <_malloc_r+0xd6>
 8005796:	2c00      	cmp	r4, #0
 8005798:	d04b      	beq.n	8005832 <_malloc_r+0xea>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	4639      	mov	r1, r7
 800579e:	4630      	mov	r0, r6
 80057a0:	eb04 0903 	add.w	r9, r4, r3
 80057a4:	f000 fce0 	bl	8006168 <_sbrk_r>
 80057a8:	4581      	cmp	r9, r0
 80057aa:	d142      	bne.n	8005832 <_malloc_r+0xea>
 80057ac:	6821      	ldr	r1, [r4, #0]
 80057ae:	1a6d      	subs	r5, r5, r1
 80057b0:	4629      	mov	r1, r5
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7ff ffa6 	bl	8005704 <sbrk_aligned>
 80057b8:	3001      	adds	r0, #1
 80057ba:	d03a      	beq.n	8005832 <_malloc_r+0xea>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	442b      	add	r3, r5
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	f8d8 3000 	ldr.w	r3, [r8]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	bb62      	cbnz	r2, 8005824 <_malloc_r+0xdc>
 80057ca:	f8c8 7000 	str.w	r7, [r8]
 80057ce:	e00f      	b.n	80057f0 <_malloc_r+0xa8>
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	1b52      	subs	r2, r2, r5
 80057d4:	d420      	bmi.n	8005818 <_malloc_r+0xd0>
 80057d6:	2a0b      	cmp	r2, #11
 80057d8:	d917      	bls.n	800580a <_malloc_r+0xc2>
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	42a3      	cmp	r3, r4
 80057de:	6025      	str	r5, [r4, #0]
 80057e0:	bf18      	it	ne
 80057e2:	6059      	strne	r1, [r3, #4]
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	bf08      	it	eq
 80057e8:	f8c8 1000 	streq.w	r1, [r8]
 80057ec:	5162      	str	r2, [r4, r5]
 80057ee:	604b      	str	r3, [r1, #4]
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 fb45 	bl	8005e80 <__malloc_unlock>
 80057f6:	f104 000b 	add.w	r0, r4, #11
 80057fa:	1d23      	adds	r3, r4, #4
 80057fc:	f020 0007 	bic.w	r0, r0, #7
 8005800:	1ac2      	subs	r2, r0, r3
 8005802:	bf1c      	itt	ne
 8005804:	1a1b      	subne	r3, r3, r0
 8005806:	50a3      	strne	r3, [r4, r2]
 8005808:	e7af      	b.n	800576a <_malloc_r+0x22>
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	42a3      	cmp	r3, r4
 800580e:	bf0c      	ite	eq
 8005810:	f8c8 2000 	streq.w	r2, [r8]
 8005814:	605a      	strne	r2, [r3, #4]
 8005816:	e7eb      	b.n	80057f0 <_malloc_r+0xa8>
 8005818:	4623      	mov	r3, r4
 800581a:	6864      	ldr	r4, [r4, #4]
 800581c:	e7ae      	b.n	800577c <_malloc_r+0x34>
 800581e:	463c      	mov	r4, r7
 8005820:	687f      	ldr	r7, [r7, #4]
 8005822:	e7b6      	b.n	8005792 <_malloc_r+0x4a>
 8005824:	461a      	mov	r2, r3
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	42a3      	cmp	r3, r4
 800582a:	d1fb      	bne.n	8005824 <_malloc_r+0xdc>
 800582c:	2300      	movs	r3, #0
 800582e:	6053      	str	r3, [r2, #4]
 8005830:	e7de      	b.n	80057f0 <_malloc_r+0xa8>
 8005832:	230c      	movs	r3, #12
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	4630      	mov	r0, r6
 8005838:	f000 fb22 	bl	8005e80 <__malloc_unlock>
 800583c:	e794      	b.n	8005768 <_malloc_r+0x20>
 800583e:	6005      	str	r5, [r0, #0]
 8005840:	e7d6      	b.n	80057f0 <_malloc_r+0xa8>
 8005842:	bf00      	nop
 8005844:	200003f4 	.word	0x200003f4

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4698      	mov	r8, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005858:	4293      	cmp	r3, r2
 800585a:	bfb8      	it	lt
 800585c:	4613      	movlt	r3, r2
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005864:	4607      	mov	r7, r0
 8005866:	460c      	mov	r4, r1
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc26      	bgt.n	80058de <_printf_common+0x96>
 8005890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	3b00      	subs	r3, #0
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42b      	bmi.n	80058f8 <_printf_common+0xb0>
 80058a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a4:	4641      	mov	r1, r8
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c8      	blx	r9
 80058aa:	3001      	adds	r0, #1
 80058ac:	d01e      	beq.n	80058ec <_printf_common+0xa4>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf02      	ittt	eq
 80058ba:	68e5      	ldreq	r5, [r4, #12]
 80058bc:	6833      	ldreq	r3, [r6, #0]
 80058be:	1aed      	subeq	r5, r5, r3
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	bf0c      	ite	eq
 80058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c8:	2500      	movne	r5, #0
 80058ca:	4293      	cmp	r3, r2
 80058cc:	bfc4      	itt	gt
 80058ce:	1a9b      	subgt	r3, r3, r2
 80058d0:	18ed      	addgt	r5, r5, r3
 80058d2:	2600      	movs	r6, #0
 80058d4:	341a      	adds	r4, #26
 80058d6:	42b5      	cmp	r5, r6
 80058d8:	d11a      	bne.n	8005910 <_printf_common+0xc8>
 80058da:	2000      	movs	r0, #0
 80058dc:	e008      	b.n	80058f0 <_printf_common+0xa8>
 80058de:	2301      	movs	r3, #1
 80058e0:	4652      	mov	r2, sl
 80058e2:	4641      	mov	r1, r8
 80058e4:	4638      	mov	r0, r7
 80058e6:	47c8      	blx	r9
 80058e8:	3001      	adds	r0, #1
 80058ea:	d103      	bne.n	80058f4 <_printf_common+0xac>
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7c6      	b.n	8005886 <_printf_common+0x3e>
 80058f8:	18e1      	adds	r1, r4, r3
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	2030      	movs	r0, #48	@ 0x30
 80058fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005902:	4422      	add	r2, r4
 8005904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800590c:	3302      	adds	r3, #2
 800590e:	e7c7      	b.n	80058a0 <_printf_common+0x58>
 8005910:	2301      	movs	r3, #1
 8005912:	4622      	mov	r2, r4
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d0e6      	beq.n	80058ec <_printf_common+0xa4>
 800591e:	3601      	adds	r6, #1
 8005920:	e7d9      	b.n	80058d6 <_printf_common+0x8e>
	...

08005924 <_printf_i>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	7e0f      	ldrb	r7, [r1, #24]
 800592a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800592c:	2f78      	cmp	r7, #120	@ 0x78
 800592e:	4691      	mov	r9, r2
 8005930:	4680      	mov	r8, r0
 8005932:	460c      	mov	r4, r1
 8005934:	469a      	mov	sl, r3
 8005936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800593a:	d807      	bhi.n	800594c <_printf_i+0x28>
 800593c:	2f62      	cmp	r7, #98	@ 0x62
 800593e:	d80a      	bhi.n	8005956 <_printf_i+0x32>
 8005940:	2f00      	cmp	r7, #0
 8005942:	f000 80d2 	beq.w	8005aea <_printf_i+0x1c6>
 8005946:	2f58      	cmp	r7, #88	@ 0x58
 8005948:	f000 80b9 	beq.w	8005abe <_printf_i+0x19a>
 800594c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005954:	e03a      	b.n	80059cc <_printf_i+0xa8>
 8005956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800595a:	2b15      	cmp	r3, #21
 800595c:	d8f6      	bhi.n	800594c <_printf_i+0x28>
 800595e:	a101      	add	r1, pc, #4	@ (adr r1, 8005964 <_printf_i+0x40>)
 8005960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059d1 	.word	0x080059d1
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800594d 	.word	0x0800594d
 8005974:	0800594d 	.word	0x0800594d
 8005978:	0800594d 	.word	0x0800594d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800594d 	.word	0x0800594d
 8005984:	0800594d 	.word	0x0800594d
 8005988:	0800594d 	.word	0x0800594d
 800598c:	0800594d 	.word	0x0800594d
 8005990:	08005ad1 	.word	0x08005ad1
 8005994:	080059fb 	.word	0x080059fb
 8005998:	08005a8b 	.word	0x08005a8b
 800599c:	0800594d 	.word	0x0800594d
 80059a0:	0800594d 	.word	0x0800594d
 80059a4:	08005af3 	.word	0x08005af3
 80059a8:	0800594d 	.word	0x0800594d
 80059ac:	080059fb 	.word	0x080059fb
 80059b0:	0800594d 	.word	0x0800594d
 80059b4:	0800594d 	.word	0x0800594d
 80059b8:	08005a93 	.word	0x08005a93
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6032      	str	r2, [r6, #0]
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059cc:	2301      	movs	r3, #1
 80059ce:	e09d      	b.n	8005b0c <_printf_i+0x1e8>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	6031      	str	r1, [r6, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xbc>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e003      	b.n	80059e8 <_printf_i+0xc4>
 80059e0:	0645      	lsls	r5, r0, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xb8>
 80059e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	da03      	bge.n	80059f4 <_printf_i+0xd0>
 80059ec:	232d      	movs	r3, #45	@ 0x2d
 80059ee:	426d      	negs	r5, r5
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f4:	4859      	ldr	r0, [pc, #356]	@ (8005b5c <_printf_i+0x238>)
 80059f6:	230a      	movs	r3, #10
 80059f8:	e011      	b.n	8005a1e <_printf_i+0xfa>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	0608      	lsls	r0, r1, #24
 8005a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a04:	d402      	bmi.n	8005a0c <_printf_i+0xe8>
 8005a06:	0649      	lsls	r1, r1, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2ad      	uxthmi	r5, r5
 8005a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0e:	4853      	ldr	r0, [pc, #332]	@ (8005b5c <_printf_i+0x238>)
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	bf14      	ite	ne
 8005a14:	230a      	movne	r3, #10
 8005a16:	2308      	moveq	r3, #8
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1e:	6866      	ldr	r6, [r4, #4]
 8005a20:	60a6      	str	r6, [r4, #8]
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	bfa2      	ittt	ge
 8005a26:	6821      	ldrge	r1, [r4, #0]
 8005a28:	f021 0104 	bicge.w	r1, r1, #4
 8005a2c:	6021      	strge	r1, [r4, #0]
 8005a2e:	b90d      	cbnz	r5, 8005a34 <_printf_i+0x110>
 8005a30:	2e00      	cmp	r6, #0
 8005a32:	d04b      	beq.n	8005acc <_printf_i+0x1a8>
 8005a34:	4616      	mov	r6, r2
 8005a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a3e:	5dc7      	ldrb	r7, [r0, r7]
 8005a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a44:	462f      	mov	r7, r5
 8005a46:	42bb      	cmp	r3, r7
 8005a48:	460d      	mov	r5, r1
 8005a4a:	d9f4      	bls.n	8005a36 <_printf_i+0x112>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d10b      	bne.n	8005a68 <_printf_i+0x144>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	d508      	bpl.n	8005a68 <_printf_i+0x144>
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6861      	ldr	r1, [r4, #4]
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	bfde      	ittt	le
 8005a5e:	2330      	movle	r3, #48	@ 0x30
 8005a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a68:	1b92      	subs	r2, r2, r6
 8005a6a:	6122      	str	r2, [r4, #16]
 8005a6c:	f8cd a000 	str.w	sl, [sp]
 8005a70:	464b      	mov	r3, r9
 8005a72:	aa03      	add	r2, sp, #12
 8005a74:	4621      	mov	r1, r4
 8005a76:	4640      	mov	r0, r8
 8005a78:	f7ff fee6 	bl	8005848 <_printf_common>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d14a      	bne.n	8005b16 <_printf_i+0x1f2>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a84:	b004      	add	sp, #16
 8005a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f043 0320 	orr.w	r3, r3, #32
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	4833      	ldr	r0, [pc, #204]	@ (8005b60 <_printf_i+0x23c>)
 8005a94:	2778      	movs	r7, #120	@ 0x78
 8005a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	6831      	ldr	r1, [r6, #0]
 8005a9e:	061f      	lsls	r7, r3, #24
 8005aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa4:	d402      	bmi.n	8005aac <_printf_i+0x188>
 8005aa6:	065f      	lsls	r7, r3, #25
 8005aa8:	bf48      	it	mi
 8005aaa:	b2ad      	uxthmi	r5, r5
 8005aac:	6031      	str	r1, [r6, #0]
 8005aae:	07d9      	lsls	r1, r3, #31
 8005ab0:	bf44      	itt	mi
 8005ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab6:	6023      	strmi	r3, [r4, #0]
 8005ab8:	b11d      	cbz	r5, 8005ac2 <_printf_i+0x19e>
 8005aba:	2310      	movs	r3, #16
 8005abc:	e7ac      	b.n	8005a18 <_printf_i+0xf4>
 8005abe:	4827      	ldr	r0, [pc, #156]	@ (8005b5c <_printf_i+0x238>)
 8005ac0:	e7e9      	b.n	8005a96 <_printf_i+0x172>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f023 0320 	bic.w	r3, r3, #32
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	e7f6      	b.n	8005aba <_printf_i+0x196>
 8005acc:	4616      	mov	r6, r2
 8005ace:	e7bd      	b.n	8005a4c <_printf_i+0x128>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	6825      	ldr	r5, [r4, #0]
 8005ad4:	6961      	ldr	r1, [r4, #20]
 8005ad6:	1d18      	adds	r0, r3, #4
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	062e      	lsls	r6, r5, #24
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	d501      	bpl.n	8005ae4 <_printf_i+0x1c0>
 8005ae0:	6019      	str	r1, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <_printf_i+0x1c6>
 8005ae4:	0668      	lsls	r0, r5, #25
 8005ae6:	d5fb      	bpl.n	8005ae0 <_printf_i+0x1bc>
 8005ae8:	8019      	strh	r1, [r3, #0]
 8005aea:	2300      	movs	r3, #0
 8005aec:	6123      	str	r3, [r4, #16]
 8005aee:	4616      	mov	r6, r2
 8005af0:	e7bc      	b.n	8005a6c <_printf_i+0x148>
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	6032      	str	r2, [r6, #0]
 8005af8:	681e      	ldr	r6, [r3, #0]
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	2100      	movs	r1, #0
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7fa fb6e 	bl	80001e0 <memchr>
 8005b04:	b108      	cbz	r0, 8005b0a <_printf_i+0x1e6>
 8005b06:	1b80      	subs	r0, r0, r6
 8005b08:	6060      	str	r0, [r4, #4]
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b14:	e7aa      	b.n	8005a6c <_printf_i+0x148>
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	4632      	mov	r2, r6
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	47d0      	blx	sl
 8005b20:	3001      	adds	r0, #1
 8005b22:	d0ad      	beq.n	8005a80 <_printf_i+0x15c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	079b      	lsls	r3, r3, #30
 8005b28:	d413      	bmi.n	8005b52 <_printf_i+0x22e>
 8005b2a:	68e0      	ldr	r0, [r4, #12]
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	4298      	cmp	r0, r3
 8005b30:	bfb8      	it	lt
 8005b32:	4618      	movlt	r0, r3
 8005b34:	e7a6      	b.n	8005a84 <_printf_i+0x160>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4632      	mov	r2, r6
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	47d0      	blx	sl
 8005b40:	3001      	adds	r0, #1
 8005b42:	d09d      	beq.n	8005a80 <_printf_i+0x15c>
 8005b44:	3501      	adds	r5, #1
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	9903      	ldr	r1, [sp, #12]
 8005b4a:	1a5b      	subs	r3, r3, r1
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dcf2      	bgt.n	8005b36 <_printf_i+0x212>
 8005b50:	e7eb      	b.n	8005b2a <_printf_i+0x206>
 8005b52:	2500      	movs	r5, #0
 8005b54:	f104 0619 	add.w	r6, r4, #25
 8005b58:	e7f5      	b.n	8005b46 <_printf_i+0x222>
 8005b5a:	bf00      	nop
 8005b5c:	0800650d 	.word	0x0800650d
 8005b60:	0800651e 	.word	0x0800651e

08005b64 <_scanf_chars>:
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b68:	4615      	mov	r5, r2
 8005b6a:	688a      	ldr	r2, [r1, #8]
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b932      	cbnz	r2, 8005b80 <_scanf_chars+0x1c>
 8005b72:	698a      	ldr	r2, [r1, #24]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	bf14      	ite	ne
 8005b78:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8005b7c:	2201      	moveq	r2, #1
 8005b7e:	608a      	str	r2, [r1, #8]
 8005b80:	6822      	ldr	r2, [r4, #0]
 8005b82:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005c14 <_scanf_chars+0xb0>
 8005b86:	06d1      	lsls	r1, r2, #27
 8005b88:	bf5f      	itttt	pl
 8005b8a:	681a      	ldrpl	r2, [r3, #0]
 8005b8c:	1d11      	addpl	r1, r2, #4
 8005b8e:	6019      	strpl	r1, [r3, #0]
 8005b90:	6816      	ldrpl	r6, [r2, #0]
 8005b92:	2700      	movs	r7, #0
 8005b94:	69a0      	ldr	r0, [r4, #24]
 8005b96:	b188      	cbz	r0, 8005bbc <_scanf_chars+0x58>
 8005b98:	2801      	cmp	r0, #1
 8005b9a:	d107      	bne.n	8005bac <_scanf_chars+0x48>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	6963      	ldr	r3, [r4, #20]
 8005ba2:	5c9b      	ldrb	r3, [r3, r2]
 8005ba4:	b953      	cbnz	r3, 8005bbc <_scanf_chars+0x58>
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	d031      	beq.n	8005c0e <_scanf_chars+0xaa>
 8005baa:	e022      	b.n	8005bf2 <_scanf_chars+0x8e>
 8005bac:	2802      	cmp	r0, #2
 8005bae:	d120      	bne.n	8005bf2 <_scanf_chars+0x8e>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005bb8:	071b      	lsls	r3, r3, #28
 8005bba:	d41a      	bmi.n	8005bf2 <_scanf_chars+0x8e>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	06da      	lsls	r2, r3, #27
 8005bc0:	bf5e      	ittt	pl
 8005bc2:	682b      	ldrpl	r3, [r5, #0]
 8005bc4:	781b      	ldrbpl	r3, [r3, #0]
 8005bc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005bca:	682a      	ldr	r2, [r5, #0]
 8005bcc:	686b      	ldr	r3, [r5, #4]
 8005bce:	3201      	adds	r2, #1
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	68a2      	ldr	r2, [r4, #8]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	606b      	str	r3, [r5, #4]
 8005bda:	3701      	adds	r7, #1
 8005bdc:	60a2      	str	r2, [r4, #8]
 8005bde:	b142      	cbz	r2, 8005bf2 <_scanf_chars+0x8e>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dcd7      	bgt.n	8005b94 <_scanf_chars+0x30>
 8005be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005be8:	4629      	mov	r1, r5
 8005bea:	4640      	mov	r0, r8
 8005bec:	4798      	blx	r3
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0d0      	beq.n	8005b94 <_scanf_chars+0x30>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f013 0310 	ands.w	r3, r3, #16
 8005bf8:	d105      	bne.n	8005c06 <_scanf_chars+0xa2>
 8005bfa:	68e2      	ldr	r2, [r4, #12]
 8005bfc:	3201      	adds	r2, #1
 8005bfe:	60e2      	str	r2, [r4, #12]
 8005c00:	69a2      	ldr	r2, [r4, #24]
 8005c02:	b102      	cbz	r2, 8005c06 <_scanf_chars+0xa2>
 8005c04:	7033      	strb	r3, [r6, #0]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	443b      	add	r3, r7
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	bf00      	nop
 8005c14:	0800654b 	.word	0x0800654b

08005c18 <_scanf_i>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	4b74      	ldr	r3, [pc, #464]	@ (8005df0 <_scanf_i+0x1d8>)
 8005c20:	460c      	mov	r4, r1
 8005c22:	4682      	mov	sl, r0
 8005c24:	4616      	mov	r6, r2
 8005c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	ab03      	add	r3, sp, #12
 8005c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c32:	4b70      	ldr	r3, [pc, #448]	@ (8005df4 <_scanf_i+0x1dc>)
 8005c34:	69a1      	ldr	r1, [r4, #24]
 8005c36:	4a70      	ldr	r2, [pc, #448]	@ (8005df8 <_scanf_i+0x1e0>)
 8005c38:	2903      	cmp	r1, #3
 8005c3a:	bf08      	it	eq
 8005c3c:	461a      	moveq	r2, r3
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	9201      	str	r2, [sp, #4]
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c48:	bf88      	it	hi
 8005c4a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c4e:	4627      	mov	r7, r4
 8005c50:	bf82      	ittt	hi
 8005c52:	eb03 0905 	addhi.w	r9, r3, r5
 8005c56:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c5a:	60a3      	strhi	r3, [r4, #8]
 8005c5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005c60:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005c64:	bf98      	it	ls
 8005c66:	f04f 0900 	movls.w	r9, #0
 8005c6a:	6023      	str	r3, [r4, #0]
 8005c6c:	463d      	mov	r5, r7
 8005c6e:	f04f 0b00 	mov.w	fp, #0
 8005c72:	6831      	ldr	r1, [r6, #0]
 8005c74:	ab03      	add	r3, sp, #12
 8005c76:	7809      	ldrb	r1, [r1, #0]
 8005c78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f7fa faaf 	bl	80001e0 <memchr>
 8005c82:	b328      	cbz	r0, 8005cd0 <_scanf_i+0xb8>
 8005c84:	f1bb 0f01 	cmp.w	fp, #1
 8005c88:	d159      	bne.n	8005d3e <_scanf_i+0x126>
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	b92a      	cbnz	r2, 8005c9a <_scanf_i+0x82>
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	2108      	movs	r1, #8
 8005c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c96:	6061      	str	r1, [r4, #4]
 8005c98:	6022      	str	r2, [r4, #0]
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	68a2      	ldr	r2, [r4, #8]
 8005ca4:	1e51      	subs	r1, r2, #1
 8005ca6:	60a1      	str	r1, [r4, #8]
 8005ca8:	b192      	cbz	r2, 8005cd0 <_scanf_i+0xb8>
 8005caa:	6832      	ldr	r2, [r6, #0]
 8005cac:	1c51      	adds	r1, r2, #1
 8005cae:	6031      	str	r1, [r6, #0]
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	f805 2b01 	strb.w	r2, [r5], #1
 8005cb6:	6872      	ldr	r2, [r6, #4]
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	6072      	str	r2, [r6, #4]
 8005cbe:	dc07      	bgt.n	8005cd0 <_scanf_i+0xb8>
 8005cc0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005cc4:	4631      	mov	r1, r6
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	4790      	blx	r2
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f040 8085 	bne.w	8005dda <_scanf_i+0x1c2>
 8005cd0:	f10b 0b01 	add.w	fp, fp, #1
 8005cd4:	f1bb 0f03 	cmp.w	fp, #3
 8005cd8:	d1cb      	bne.n	8005c72 <_scanf_i+0x5a>
 8005cda:	6863      	ldr	r3, [r4, #4]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_scanf_i+0xca>
 8005cde:	230a      	movs	r3, #10
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	4945      	ldr	r1, [pc, #276]	@ (8005dfc <_scanf_i+0x1e4>)
 8005ce6:	6960      	ldr	r0, [r4, #20]
 8005ce8:	1ac9      	subs	r1, r1, r3
 8005cea:	f000 f889 	bl	8005e00 <__sccl>
 8005cee:	f04f 0b00 	mov.w	fp, #0
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d03d      	beq.n	8005d76 <_scanf_i+0x15e>
 8005cfa:	6831      	ldr	r1, [r6, #0]
 8005cfc:	6960      	ldr	r0, [r4, #20]
 8005cfe:	f891 c000 	ldrb.w	ip, [r1]
 8005d02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d035      	beq.n	8005d76 <_scanf_i+0x15e>
 8005d0a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005d0e:	d124      	bne.n	8005d5a <_scanf_i+0x142>
 8005d10:	0510      	lsls	r0, r2, #20
 8005d12:	d522      	bpl.n	8005d5a <_scanf_i+0x142>
 8005d14:	f10b 0b01 	add.w	fp, fp, #1
 8005d18:	f1b9 0f00 	cmp.w	r9, #0
 8005d1c:	d003      	beq.n	8005d26 <_scanf_i+0x10e>
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	6873      	ldr	r3, [r6, #4]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	6073      	str	r3, [r6, #4]
 8005d2e:	dd1b      	ble.n	8005d68 <_scanf_i+0x150>
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	e7d9      	b.n	8005cf2 <_scanf_i+0xda>
 8005d3e:	f1bb 0f02 	cmp.w	fp, #2
 8005d42:	d1ae      	bne.n	8005ca2 <_scanf_i+0x8a>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005d4a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005d4e:	d1bf      	bne.n	8005cd0 <_scanf_i+0xb8>
 8005d50:	2110      	movs	r1, #16
 8005d52:	6061      	str	r1, [r4, #4]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d58:	e7a2      	b.n	8005ca0 <_scanf_i+0x88>
 8005d5a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005d5e:	6022      	str	r2, [r4, #0]
 8005d60:	780b      	ldrb	r3, [r1, #0]
 8005d62:	f805 3b01 	strb.w	r3, [r5], #1
 8005d66:	e7de      	b.n	8005d26 <_scanf_i+0x10e>
 8005d68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4650      	mov	r0, sl
 8005d70:	4798      	blx	r3
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0df      	beq.n	8005d36 <_scanf_i+0x11e>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	05d9      	lsls	r1, r3, #23
 8005d7a:	d50d      	bpl.n	8005d98 <_scanf_i+0x180>
 8005d7c:	42bd      	cmp	r5, r7
 8005d7e:	d909      	bls.n	8005d94 <_scanf_i+0x17c>
 8005d80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	4798      	blx	r3
 8005d8e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8005d92:	464d      	mov	r5, r9
 8005d94:	42bd      	cmp	r5, r7
 8005d96:	d028      	beq.n	8005dea <_scanf_i+0x1d2>
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	f012 0210 	ands.w	r2, r2, #16
 8005d9e:	d113      	bne.n	8005dc8 <_scanf_i+0x1b0>
 8005da0:	702a      	strb	r2, [r5, #0]
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	9e01      	ldr	r6, [sp, #4]
 8005da6:	4639      	mov	r1, r7
 8005da8:	4650      	mov	r0, sl
 8005daa:	47b0      	blx	r6
 8005dac:	f8d8 3000 	ldr.w	r3, [r8]
 8005db0:	6821      	ldr	r1, [r4, #0]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	f8c8 2000 	str.w	r2, [r8]
 8005db8:	f011 0f20 	tst.w	r1, #32
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	d00f      	beq.n	8005de0 <_scanf_i+0x1c8>
 8005dc0:	6018      	str	r0, [r3, #0]
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60e3      	str	r3, [r4, #12]
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	1bed      	subs	r5, r5, r7
 8005dcc:	445d      	add	r5, fp
 8005dce:	442b      	add	r3, r5
 8005dd0:	6123      	str	r3, [r4, #16]
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	b007      	add	sp, #28
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	f04f 0b00 	mov.w	fp, #0
 8005dde:	e7ca      	b.n	8005d76 <_scanf_i+0x15e>
 8005de0:	07ca      	lsls	r2, r1, #31
 8005de2:	bf4c      	ite	mi
 8005de4:	8018      	strhmi	r0, [r3, #0]
 8005de6:	6018      	strpl	r0, [r3, #0]
 8005de8:	e7eb      	b.n	8005dc2 <_scanf_i+0x1aa>
 8005dea:	2001      	movs	r0, #1
 8005dec:	e7f2      	b.n	8005dd4 <_scanf_i+0x1bc>
 8005dee:	bf00      	nop
 8005df0:	080064a8 	.word	0x080064a8
 8005df4:	08006051 	.word	0x08006051
 8005df8:	08006131 	.word	0x08006131
 8005dfc:	0800653f 	.word	0x0800653f

08005e00 <__sccl>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	780b      	ldrb	r3, [r1, #0]
 8005e04:	4604      	mov	r4, r0
 8005e06:	2b5e      	cmp	r3, #94	@ 0x5e
 8005e08:	bf0b      	itete	eq
 8005e0a:	784b      	ldrbeq	r3, [r1, #1]
 8005e0c:	1c4a      	addne	r2, r1, #1
 8005e0e:	1c8a      	addeq	r2, r1, #2
 8005e10:	2100      	movne	r1, #0
 8005e12:	bf08      	it	eq
 8005e14:	2101      	moveq	r1, #1
 8005e16:	3801      	subs	r0, #1
 8005e18:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005e1c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005e20:	42a8      	cmp	r0, r5
 8005e22:	d1fb      	bne.n	8005e1c <__sccl+0x1c>
 8005e24:	b90b      	cbnz	r3, 8005e2a <__sccl+0x2a>
 8005e26:	1e50      	subs	r0, r2, #1
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	f081 0101 	eor.w	r1, r1, #1
 8005e2e:	54e1      	strb	r1, [r4, r3]
 8005e30:	4610      	mov	r0, r2
 8005e32:	4602      	mov	r2, r0
 8005e34:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e38:	2d2d      	cmp	r5, #45	@ 0x2d
 8005e3a:	d005      	beq.n	8005e48 <__sccl+0x48>
 8005e3c:	2d5d      	cmp	r5, #93	@ 0x5d
 8005e3e:	d016      	beq.n	8005e6e <__sccl+0x6e>
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	d0f1      	beq.n	8005e28 <__sccl+0x28>
 8005e44:	462b      	mov	r3, r5
 8005e46:	e7f2      	b.n	8005e2e <__sccl+0x2e>
 8005e48:	7846      	ldrb	r6, [r0, #1]
 8005e4a:	2e5d      	cmp	r6, #93	@ 0x5d
 8005e4c:	d0fa      	beq.n	8005e44 <__sccl+0x44>
 8005e4e:	42b3      	cmp	r3, r6
 8005e50:	dcf8      	bgt.n	8005e44 <__sccl+0x44>
 8005e52:	3002      	adds	r0, #2
 8005e54:	461a      	mov	r2, r3
 8005e56:	3201      	adds	r2, #1
 8005e58:	4296      	cmp	r6, r2
 8005e5a:	54a1      	strb	r1, [r4, r2]
 8005e5c:	dcfb      	bgt.n	8005e56 <__sccl+0x56>
 8005e5e:	1af2      	subs	r2, r6, r3
 8005e60:	3a01      	subs	r2, #1
 8005e62:	1c5d      	adds	r5, r3, #1
 8005e64:	42b3      	cmp	r3, r6
 8005e66:	bfa8      	it	ge
 8005e68:	2200      	movge	r2, #0
 8005e6a:	18ab      	adds	r3, r5, r2
 8005e6c:	e7e1      	b.n	8005e32 <__sccl+0x32>
 8005e6e:	4610      	mov	r0, r2
 8005e70:	e7da      	b.n	8005e28 <__sccl+0x28>
	...

08005e74 <__malloc_lock>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__malloc_lock+0x8>)
 8005e76:	f7ff b8cd 	b.w	8005014 <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200003ec 	.word	0x200003ec

08005e80 <__malloc_unlock>:
 8005e80:	4801      	ldr	r0, [pc, #4]	@ (8005e88 <__malloc_unlock+0x8>)
 8005e82:	f7ff b8c8 	b.w	8005016 <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	200003ec 	.word	0x200003ec

08005e8c <__submore>:
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	460c      	mov	r4, r1
 8005e92:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	d11d      	bne.n	8005ed8 <__submore+0x4c>
 8005e9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ea0:	f7ff fc52 	bl	8005748 <_malloc_r>
 8005ea4:	b918      	cbnz	r0, 8005eae <__submore+0x22>
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005eb4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005eb8:	6360      	str	r0, [r4, #52]	@ 0x34
 8005eba:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005ebe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005ec2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005ec6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005eca:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005ece:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005ed2:	6020      	str	r0, [r4, #0]
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	e7e8      	b.n	8005eaa <__submore+0x1e>
 8005ed8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005eda:	0077      	lsls	r7, r6, #1
 8005edc:	463a      	mov	r2, r7
 8005ede:	f000 f80f 	bl	8005f00 <_realloc_r>
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d0de      	beq.n	8005ea6 <__submore+0x1a>
 8005ee8:	eb00 0806 	add.w	r8, r0, r6
 8005eec:	4601      	mov	r1, r0
 8005eee:	4632      	mov	r2, r6
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	f000 f949 	bl	8006188 <memcpy>
 8005ef6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005efa:	f8c4 8000 	str.w	r8, [r4]
 8005efe:	e7e9      	b.n	8005ed4 <__submore+0x48>

08005f00 <_realloc_r>:
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f04:	4680      	mov	r8, r0
 8005f06:	4615      	mov	r5, r2
 8005f08:	460c      	mov	r4, r1
 8005f0a:	b921      	cbnz	r1, 8005f16 <_realloc_r+0x16>
 8005f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	4611      	mov	r1, r2
 8005f12:	f7ff bc19 	b.w	8005748 <_malloc_r>
 8005f16:	b92a      	cbnz	r2, 8005f24 <_realloc_r+0x24>
 8005f18:	f7ff f886 	bl	8005028 <_free_r>
 8005f1c:	2400      	movs	r4, #0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	f000 f93e 	bl	80061a4 <_malloc_usable_size_r>
 8005f28:	4285      	cmp	r5, r0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	d802      	bhi.n	8005f34 <_realloc_r+0x34>
 8005f2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f32:	d8f4      	bhi.n	8005f1e <_realloc_r+0x1e>
 8005f34:	4629      	mov	r1, r5
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fc06 	bl	8005748 <_malloc_r>
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0ec      	beq.n	8005f1c <_realloc_r+0x1c>
 8005f42:	42b5      	cmp	r5, r6
 8005f44:	462a      	mov	r2, r5
 8005f46:	4621      	mov	r1, r4
 8005f48:	bf28      	it	cs
 8005f4a:	4632      	movcs	r2, r6
 8005f4c:	f000 f91c 	bl	8006188 <memcpy>
 8005f50:	4621      	mov	r1, r4
 8005f52:	4640      	mov	r0, r8
 8005f54:	f7ff f868 	bl	8005028 <_free_r>
 8005f58:	463c      	mov	r4, r7
 8005f5a:	e7e0      	b.n	8005f1e <_realloc_r+0x1e>

08005f5c <_strtol_l.constprop.0>:
 8005f5c:	2b24      	cmp	r3, #36	@ 0x24
 8005f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f62:	4686      	mov	lr, r0
 8005f64:	4690      	mov	r8, r2
 8005f66:	d801      	bhi.n	8005f6c <_strtol_l.constprop.0+0x10>
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d106      	bne.n	8005f7a <_strtol_l.constprop.0+0x1e>
 8005f6c:	f7ff f828 	bl	8004fc0 <__errno>
 8005f70:	2316      	movs	r3, #22
 8005f72:	6003      	str	r3, [r0, #0]
 8005f74:	2000      	movs	r0, #0
 8005f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7a:	4834      	ldr	r0, [pc, #208]	@ (800604c <_strtol_l.constprop.0+0xf0>)
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	462a      	mov	r2, r5
 8005f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f84:	5d06      	ldrb	r6, [r0, r4]
 8005f86:	f016 0608 	ands.w	r6, r6, #8
 8005f8a:	d1f8      	bne.n	8005f7e <_strtol_l.constprop.0+0x22>
 8005f8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f8e:	d12d      	bne.n	8005fec <_strtol_l.constprop.0+0x90>
 8005f90:	782c      	ldrb	r4, [r5, #0]
 8005f92:	2601      	movs	r6, #1
 8005f94:	1c95      	adds	r5, r2, #2
 8005f96:	f033 0210 	bics.w	r2, r3, #16
 8005f9a:	d109      	bne.n	8005fb0 <_strtol_l.constprop.0+0x54>
 8005f9c:	2c30      	cmp	r4, #48	@ 0x30
 8005f9e:	d12a      	bne.n	8005ff6 <_strtol_l.constprop.0+0x9a>
 8005fa0:	782a      	ldrb	r2, [r5, #0]
 8005fa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005fa6:	2a58      	cmp	r2, #88	@ 0x58
 8005fa8:	d125      	bne.n	8005ff6 <_strtol_l.constprop.0+0x9a>
 8005faa:	786c      	ldrb	r4, [r5, #1]
 8005fac:	2310      	movs	r3, #16
 8005fae:	3502      	adds	r5, #2
 8005fb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005fb4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005fb8:	2200      	movs	r2, #0
 8005fba:	fbbc f9f3 	udiv	r9, ip, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005fc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005fc8:	2f09      	cmp	r7, #9
 8005fca:	d81b      	bhi.n	8006004 <_strtol_l.constprop.0+0xa8>
 8005fcc:	463c      	mov	r4, r7
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	dd27      	ble.n	8006022 <_strtol_l.constprop.0+0xc6>
 8005fd2:	1c57      	adds	r7, r2, #1
 8005fd4:	d007      	beq.n	8005fe6 <_strtol_l.constprop.0+0x8a>
 8005fd6:	4581      	cmp	r9, r0
 8005fd8:	d320      	bcc.n	800601c <_strtol_l.constprop.0+0xc0>
 8005fda:	d101      	bne.n	8005fe0 <_strtol_l.constprop.0+0x84>
 8005fdc:	45a2      	cmp	sl, r4
 8005fde:	db1d      	blt.n	800601c <_strtol_l.constprop.0+0xc0>
 8005fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fea:	e7eb      	b.n	8005fc4 <_strtol_l.constprop.0+0x68>
 8005fec:	2c2b      	cmp	r4, #43	@ 0x2b
 8005fee:	bf04      	itt	eq
 8005ff0:	782c      	ldrbeq	r4, [r5, #0]
 8005ff2:	1c95      	addeq	r5, r2, #2
 8005ff4:	e7cf      	b.n	8005f96 <_strtol_l.constprop.0+0x3a>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1da      	bne.n	8005fb0 <_strtol_l.constprop.0+0x54>
 8005ffa:	2c30      	cmp	r4, #48	@ 0x30
 8005ffc:	bf0c      	ite	eq
 8005ffe:	2308      	moveq	r3, #8
 8006000:	230a      	movne	r3, #10
 8006002:	e7d5      	b.n	8005fb0 <_strtol_l.constprop.0+0x54>
 8006004:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006008:	2f19      	cmp	r7, #25
 800600a:	d801      	bhi.n	8006010 <_strtol_l.constprop.0+0xb4>
 800600c:	3c37      	subs	r4, #55	@ 0x37
 800600e:	e7de      	b.n	8005fce <_strtol_l.constprop.0+0x72>
 8006010:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006014:	2f19      	cmp	r7, #25
 8006016:	d804      	bhi.n	8006022 <_strtol_l.constprop.0+0xc6>
 8006018:	3c57      	subs	r4, #87	@ 0x57
 800601a:	e7d8      	b.n	8005fce <_strtol_l.constprop.0+0x72>
 800601c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006020:	e7e1      	b.n	8005fe6 <_strtol_l.constprop.0+0x8a>
 8006022:	1c53      	adds	r3, r2, #1
 8006024:	d108      	bne.n	8006038 <_strtol_l.constprop.0+0xdc>
 8006026:	2322      	movs	r3, #34	@ 0x22
 8006028:	f8ce 3000 	str.w	r3, [lr]
 800602c:	4660      	mov	r0, ip
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	d0a0      	beq.n	8005f76 <_strtol_l.constprop.0+0x1a>
 8006034:	1e69      	subs	r1, r5, #1
 8006036:	e006      	b.n	8006046 <_strtol_l.constprop.0+0xea>
 8006038:	b106      	cbz	r6, 800603c <_strtol_l.constprop.0+0xe0>
 800603a:	4240      	negs	r0, r0
 800603c:	f1b8 0f00 	cmp.w	r8, #0
 8006040:	d099      	beq.n	8005f76 <_strtol_l.constprop.0+0x1a>
 8006042:	2a00      	cmp	r2, #0
 8006044:	d1f6      	bne.n	8006034 <_strtol_l.constprop.0+0xd8>
 8006046:	f8c8 1000 	str.w	r1, [r8]
 800604a:	e794      	b.n	8005f76 <_strtol_l.constprop.0+0x1a>
 800604c:	0800654b 	.word	0x0800654b

08006050 <_strtol_r>:
 8006050:	f7ff bf84 	b.w	8005f5c <_strtol_l.constprop.0>

08006054 <_strtoul_l.constprop.0>:
 8006054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006058:	4e34      	ldr	r6, [pc, #208]	@ (800612c <_strtoul_l.constprop.0+0xd8>)
 800605a:	4686      	mov	lr, r0
 800605c:	460d      	mov	r5, r1
 800605e:	4628      	mov	r0, r5
 8006060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006064:	5d37      	ldrb	r7, [r6, r4]
 8006066:	f017 0708 	ands.w	r7, r7, #8
 800606a:	d1f8      	bne.n	800605e <_strtoul_l.constprop.0+0xa>
 800606c:	2c2d      	cmp	r4, #45	@ 0x2d
 800606e:	d12f      	bne.n	80060d0 <_strtoul_l.constprop.0+0x7c>
 8006070:	782c      	ldrb	r4, [r5, #0]
 8006072:	2701      	movs	r7, #1
 8006074:	1c85      	adds	r5, r0, #2
 8006076:	f033 0010 	bics.w	r0, r3, #16
 800607a:	d109      	bne.n	8006090 <_strtoul_l.constprop.0+0x3c>
 800607c:	2c30      	cmp	r4, #48	@ 0x30
 800607e:	d12c      	bne.n	80060da <_strtoul_l.constprop.0+0x86>
 8006080:	7828      	ldrb	r0, [r5, #0]
 8006082:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006086:	2858      	cmp	r0, #88	@ 0x58
 8006088:	d127      	bne.n	80060da <_strtoul_l.constprop.0+0x86>
 800608a:	786c      	ldrb	r4, [r5, #1]
 800608c:	2310      	movs	r3, #16
 800608e:	3502      	adds	r5, #2
 8006090:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006094:	2600      	movs	r6, #0
 8006096:	fbb8 f8f3 	udiv	r8, r8, r3
 800609a:	fb03 f908 	mul.w	r9, r3, r8
 800609e:	ea6f 0909 	mvn.w	r9, r9
 80060a2:	4630      	mov	r0, r6
 80060a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80060a8:	f1bc 0f09 	cmp.w	ip, #9
 80060ac:	d81c      	bhi.n	80060e8 <_strtoul_l.constprop.0+0x94>
 80060ae:	4664      	mov	r4, ip
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	dd2a      	ble.n	800610a <_strtoul_l.constprop.0+0xb6>
 80060b4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80060b8:	d007      	beq.n	80060ca <_strtoul_l.constprop.0+0x76>
 80060ba:	4580      	cmp	r8, r0
 80060bc:	d322      	bcc.n	8006104 <_strtoul_l.constprop.0+0xb0>
 80060be:	d101      	bne.n	80060c4 <_strtoul_l.constprop.0+0x70>
 80060c0:	45a1      	cmp	r9, r4
 80060c2:	db1f      	blt.n	8006104 <_strtoul_l.constprop.0+0xb0>
 80060c4:	fb00 4003 	mla	r0, r0, r3, r4
 80060c8:	2601      	movs	r6, #1
 80060ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060ce:	e7e9      	b.n	80060a4 <_strtoul_l.constprop.0+0x50>
 80060d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80060d2:	bf04      	itt	eq
 80060d4:	782c      	ldrbeq	r4, [r5, #0]
 80060d6:	1c85      	addeq	r5, r0, #2
 80060d8:	e7cd      	b.n	8006076 <_strtoul_l.constprop.0+0x22>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d8      	bne.n	8006090 <_strtoul_l.constprop.0+0x3c>
 80060de:	2c30      	cmp	r4, #48	@ 0x30
 80060e0:	bf0c      	ite	eq
 80060e2:	2308      	moveq	r3, #8
 80060e4:	230a      	movne	r3, #10
 80060e6:	e7d3      	b.n	8006090 <_strtoul_l.constprop.0+0x3c>
 80060e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80060ec:	f1bc 0f19 	cmp.w	ip, #25
 80060f0:	d801      	bhi.n	80060f6 <_strtoul_l.constprop.0+0xa2>
 80060f2:	3c37      	subs	r4, #55	@ 0x37
 80060f4:	e7dc      	b.n	80060b0 <_strtoul_l.constprop.0+0x5c>
 80060f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80060fa:	f1bc 0f19 	cmp.w	ip, #25
 80060fe:	d804      	bhi.n	800610a <_strtoul_l.constprop.0+0xb6>
 8006100:	3c57      	subs	r4, #87	@ 0x57
 8006102:	e7d5      	b.n	80060b0 <_strtoul_l.constprop.0+0x5c>
 8006104:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006108:	e7df      	b.n	80060ca <_strtoul_l.constprop.0+0x76>
 800610a:	1c73      	adds	r3, r6, #1
 800610c:	d106      	bne.n	800611c <_strtoul_l.constprop.0+0xc8>
 800610e:	2322      	movs	r3, #34	@ 0x22
 8006110:	f8ce 3000 	str.w	r3, [lr]
 8006114:	4630      	mov	r0, r6
 8006116:	b932      	cbnz	r2, 8006126 <_strtoul_l.constprop.0+0xd2>
 8006118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800611c:	b107      	cbz	r7, 8006120 <_strtoul_l.constprop.0+0xcc>
 800611e:	4240      	negs	r0, r0
 8006120:	2a00      	cmp	r2, #0
 8006122:	d0f9      	beq.n	8006118 <_strtoul_l.constprop.0+0xc4>
 8006124:	b106      	cbz	r6, 8006128 <_strtoul_l.constprop.0+0xd4>
 8006126:	1e69      	subs	r1, r5, #1
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	e7f5      	b.n	8006118 <_strtoul_l.constprop.0+0xc4>
 800612c:	0800654b 	.word	0x0800654b

08006130 <_strtoul_r>:
 8006130:	f7ff bf90 	b.w	8006054 <_strtoul_l.constprop.0>

08006134 <memmove>:
 8006134:	4288      	cmp	r0, r1
 8006136:	b510      	push	{r4, lr}
 8006138:	eb01 0402 	add.w	r4, r1, r2
 800613c:	d902      	bls.n	8006144 <memmove+0x10>
 800613e:	4284      	cmp	r4, r0
 8006140:	4623      	mov	r3, r4
 8006142:	d807      	bhi.n	8006154 <memmove+0x20>
 8006144:	1e43      	subs	r3, r0, #1
 8006146:	42a1      	cmp	r1, r4
 8006148:	d008      	beq.n	800615c <memmove+0x28>
 800614a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800614e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006152:	e7f8      	b.n	8006146 <memmove+0x12>
 8006154:	4402      	add	r2, r0
 8006156:	4601      	mov	r1, r0
 8006158:	428a      	cmp	r2, r1
 800615a:	d100      	bne.n	800615e <memmove+0x2a>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006166:	e7f7      	b.n	8006158 <memmove+0x24>

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d06      	ldr	r5, [pc, #24]	@ (8006184 <_sbrk_r+0x1c>)
 800616c:	2300      	movs	r3, #0
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fb fa78 	bl	8001668 <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200003e8 	.word	0x200003e8

08006188 <memcpy>:
 8006188:	440a      	add	r2, r1
 800618a:	4291      	cmp	r1, r2
 800618c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006190:	d100      	bne.n	8006194 <memcpy+0xc>
 8006192:	4770      	bx	lr
 8006194:	b510      	push	{r4, lr}
 8006196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619e:	4291      	cmp	r1, r2
 80061a0:	d1f9      	bne.n	8006196 <memcpy+0xe>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <_malloc_usable_size_r>:
 80061a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a8:	1f18      	subs	r0, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfbc      	itt	lt
 80061ae:	580b      	ldrlt	r3, [r1, r0]
 80061b0:	18c0      	addlt	r0, r0, r3
 80061b2:	4770      	bx	lr

080061b4 <_init>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr

080061c0 <_fini>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr
