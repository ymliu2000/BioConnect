
PB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006114  08006114  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006114  08006114  00007114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800611c  0800611c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006124  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000060  08006184  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006184  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c544  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0b  00000000  00000000  000145d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  000163e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ba  00000000  00000000  00016df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d05  00000000  00000000  000175b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c571  00000000  00000000  0003d2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d25  00000000  00000000  00049828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013154d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  00131590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00134678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc8 	.word	0x08005cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005cc8 	.word	0x08005cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
/**
 * @brief  USART1 Rx回调函数 (采集板发送DATA或ACK时触发)
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b0c4      	sub	sp, #272	@ 0x110
 8000574:	af00      	add	r7, sp, #0
 8000576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800057a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800057e:	6018      	str	r0, [r3, #0]
  if(huart->Instance == USART1)
 8000580:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000584:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a56      	ldr	r2, [pc, #344]	@ (80006e8 <HAL_UART_RxCpltCallback+0x178>)
 800058e:	4293      	cmp	r3, r2
 8000590:	f040 80a5 	bne.w	80006de <HAL_UART_RxCpltCallback+0x16e>
  {
    rxBuffer[63] = '\0';
 8000594:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <HAL_UART_RxCpltCallback+0x17c>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    char line[64];
    strcpy(line, rxBuffer);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4952      	ldr	r1, [pc, #328]	@ (80006ec <HAL_UART_RxCpltCallback+0x17c>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fac2 	bl	8004b2c <strcpy>

    // 调试打印：收到采集板一行数据
    char debugLine[128];
    sprintf(debugLine,"[PB] RxCplt: %s\n", line);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005b0:	494f      	ldr	r1, [pc, #316]	@ (80006f0 <HAL_UART_RxCpltCallback+0x180>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fa28 	bl	8004a08 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)debugLine, strlen(debugLine), HAL_MAX_DELAY);
 80005b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ce:	4849      	ldr	r0, [pc, #292]	@ (80006f4 <HAL_UART_RxCpltCallback+0x184>)
 80005d0:	f002 fe7e 	bl	80032d0 <HAL_UART_Transmit>

    if(strncmp(line, "DATA,",5)==0)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2205      	movs	r2, #5
 80005da:	4947      	ldr	r1, [pc, #284]	@ (80006f8 <HAL_UART_RxCpltCallback+0x188>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fa5f 	bl	8004aa0 <strncmp>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d105      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x84>
    {
      ProcessCollectorData(line); // "DATA, raw, preprocessed"
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fbf3 	bl	8000dd8 <ProcessCollectorData>
 80005f2:	e06a      	b.n	80006ca <HAL_UART_RxCpltCallback+0x15a>
    }
    else if(strncmp(line,"ACK:START",9)==0)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2209      	movs	r2, #9
 80005fa:	4940      	ldr	r1, [pc, #256]	@ (80006fc <HAL_UART_RxCpltCallback+0x18c>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fa4f 	bl	8004aa0 <strncmp>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d119      	bne.n	800063c <HAL_UART_RxCpltCallback+0xcc>
    {
      char dbg[]="Collector ACK:START\r\n";
 8000608:	4b3d      	ldr	r3, [pc, #244]	@ (8000700 <HAL_UART_RxCpltCallback+0x190>)
 800060a:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000618:	6020      	str	r0, [r4, #0]
 800061a:	3404      	adds	r4, #4
 800061c:	8021      	strh	r1, [r4, #0]
      HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 800061e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fdd4 	bl	80001d0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8000630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000634:	482f      	ldr	r0, [pc, #188]	@ (80006f4 <HAL_UART_RxCpltCallback+0x184>)
 8000636:	f002 fe4b 	bl	80032d0 <HAL_UART_Transmit>
 800063a:	e046      	b.n	80006ca <HAL_UART_RxCpltCallback+0x15a>
    }
    else if(strncmp(line,"ACK:STOP",8)==0)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2208      	movs	r2, #8
 8000642:	4930      	ldr	r1, [pc, #192]	@ (8000704 <HAL_UART_RxCpltCallback+0x194>)
 8000644:	4618      	mov	r0, r3
 8000646:	f004 fa2b 	bl	8004aa0 <strncmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d119      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x114>
    {
      char dbg[]="Collector ACK:STOP\r\n";
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <HAL_UART_RxCpltCallback+0x198>)
 8000652:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000660:	6020      	str	r0, [r4, #0]
 8000662:	3404      	adds	r4, #4
 8000664:	7021      	strb	r1, [r4, #0]
      HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000666:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdb0 	bl	80001d0 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067c:	481d      	ldr	r0, [pc, #116]	@ (80006f4 <HAL_UART_RxCpltCallback+0x184>)
 800067e:	f002 fe27 	bl	80032d0 <HAL_UART_Transmit>
 8000682:	e022      	b.n	80006ca <HAL_UART_RxCpltCallback+0x15a>
    }
    else if(strncmp(line,"ERROR:",6)==0)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2206      	movs	r2, #6
 800068a:	4920      	ldr	r1, [pc, #128]	@ (800070c <HAL_UART_RxCpltCallback+0x19c>)
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fa07 	bl	8004aa0 <strncmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d118      	bne.n	80006ca <HAL_UART_RxCpltCallback+0x15a>
    {
      char dbg[]="Collector ERROR\r\n";
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <HAL_UART_RxCpltCallback+0x1a0>)
 800069a:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	682b      	ldr	r3, [r5, #0]
 80006a6:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 80006a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd8f 	bl	80001d0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <HAL_UART_RxCpltCallback+0x184>)
 80006c0:	f002 fe06 	bl	80032d0 <HAL_UART_Transmit>
      level1State = STATE_ERROR;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <HAL_UART_RxCpltCallback+0x1a4>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
    }

    // 继续启动中断接收
    memset(rxBuffer,0,sizeof(rxBuffer));
 80006ca:	2240      	movs	r2, #64	@ 0x40
 80006cc:	2100      	movs	r1, #0
 80006ce:	4807      	ldr	r0, [pc, #28]	@ (80006ec <HAL_UART_RxCpltCallback+0x17c>)
 80006d0:	f004 f9f8 	bl	8004ac4 <memset>
    HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,sizeof(rxBuffer)-1);
 80006d4:	223f      	movs	r2, #63	@ 0x3f
 80006d6:	4905      	ldr	r1, [pc, #20]	@ (80006ec <HAL_UART_RxCpltCallback+0x17c>)
 80006d8:	480f      	ldr	r0, [pc, #60]	@ (8000718 <HAL_UART_RxCpltCallback+0x1a8>)
 80006da:	f002 fe83 	bl	80033e4 <HAL_UART_Receive_IT>
  }
}
 80006de:	bf00      	nop
 80006e0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bdb0      	pop	{r4, r5, r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	2000018c 	.word	0x2000018c
 80006f0:	08005ce0 	.word	0x08005ce0
 80006f4:	20000104 	.word	0x20000104
 80006f8:	08005cf4 	.word	0x08005cf4
 80006fc:	08005cfc 	.word	0x08005cfc
 8000700:	08005d1c 	.word	0x08005d1c
 8000704:	08005d08 	.word	0x08005d08
 8000708:	08005d34 	.word	0x08005d34
 800070c:	08005d14 	.word	0x08005d14
 8000710:	08005d4c 	.word	0x08005d4c
 8000714:	200001cc 	.word	0x200001cc
 8000718:	2000007c 	.word	0x2000007c

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fe4a 	bl	80013ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 fb99 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 fc49 	bl	8000fc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072e:	f000 fc17 	bl	8000f60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000732:	f000 fbe5 	bl	8000f00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   memset(rxBuffer,0,sizeof(rxBuffer));
 8000736:	2240      	movs	r2, #64	@ 0x40
 8000738:	2100      	movs	r1, #0
 800073a:	4810      	ldr	r0, [pc, #64]	@ (800077c <main+0x60>)
 800073c:	f004 f9c2 	bl	8004ac4 <memset>
   HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,sizeof(rxBuffer)-1);
 8000740:	223f      	movs	r2, #63	@ 0x3f
 8000742:	490e      	ldr	r1, [pc, #56]	@ (800077c <main+0x60>)
 8000744:	480e      	ldr	r0, [pc, #56]	@ (8000780 <main+0x64>)
 8000746:	f002 fe4d 	bl	80033e4 <HAL_UART_Receive_IT>

   char *initMsg = "Processing Board (3-level SM). Start in IDLE.\r\n";
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <main+0x68>)
 800074c:	607b      	str	r3, [r7, #4]
   HAL_UART_Transmit(&huart2,(uint8_t*)initMsg,strlen(initMsg),HAL_MAX_DELAY);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	480a      	ldr	r0, [pc, #40]	@ (8000788 <main+0x6c>)
 8000760:	f002 fdb6 	bl	80032d0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE BEGIN WHILE */
	    CheckButton();      // 检测按钮短按
 8000764:	f000 f956 	bl	8000a14 <CheckButton>
	    RunStateMachine();  // 运行状态机逻辑
 8000768:	f000 f810 	bl	800078c <RunStateMachine>
	    UpdateLedBlink();   // 根据当前状态控制LED闪烁节奏
 800076c:	f000 f9ce 	bl	8000b0c <UpdateLedBlink>

	    HAL_Delay(20);
 8000770:	2014      	movs	r0, #20
 8000772:	f000 fe97 	bl	80014a4 <HAL_Delay>
	    CheckButton();      // 检测按钮短按
 8000776:	bf00      	nop
 8000778:	e7f4      	b.n	8000764 <main+0x48>
 800077a:	bf00      	nop
 800077c:	2000018c 	.word	0x2000018c
 8000780:	2000007c 	.word	0x2000007c
 8000784:	08005d60 	.word	0x08005d60
 8000788:	20000104 	.word	0x20000104

0800078c <RunStateMachine>:
  /* USER CODE END 3 */
}

//===================== 状态机核心逻辑 =====================//
void RunStateMachine(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b0a0      	sub	sp, #128	@ 0x80
 8000790:	af00      	add	r7, sp, #0
  switch(level1State)
 8000792:	4b8e      	ldr	r3, [pc, #568]	@ (80009cc <RunStateMachine+0x240>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b03      	cmp	r3, #3
 8000798:	f200 8114 	bhi.w	80009c4 <RunStateMachine+0x238>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <RunStateMachine+0x18>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007b5 	.word	0x080007b5
 80007a8:	08000803 	.word	0x08000803
 80007ac:	08000921 	.word	0x08000921
 80007b0:	08000971 	.word	0x08000971
  {
    case STATE_IDLE:
      if(btnShortPress)
 80007b4:	4b86      	ldr	r3, [pc, #536]	@ (80009d0 <RunStateMachine+0x244>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f000 80fc 	beq.w	80009b6 <RunStateMachine+0x22a>
      {
        level1State = STATE_SELECT;
 80007be:	4b83      	ldr	r3, [pc, #524]	@ (80009cc <RunStateMachine+0x240>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
        selectSubState = SUB_WORKMODE_SELECT;
 80007c4:	4b83      	ldr	r3, [pc, #524]	@ (80009d4 <RunStateMachine+0x248>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]

        char dbg[64];
        sprintf(dbg, "Enter STATE_SELECT, Sub=WORKMODE_SELECT (workMode=%s)\r\n", (workMode==0?"IR":"RED"));
 80007ca:	4b83      	ldr	r3, [pc, #524]	@ (80009d8 <RunStateMachine+0x24c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <RunStateMachine+0x4a>
 80007d2:	4a82      	ldr	r2, [pc, #520]	@ (80009dc <RunStateMachine+0x250>)
 80007d4:	e000      	b.n	80007d8 <RunStateMachine+0x4c>
 80007d6:	4a82      	ldr	r2, [pc, #520]	@ (80009e0 <RunStateMachine+0x254>)
 80007d8:	463b      	mov	r3, r7
 80007da:	4982      	ldr	r1, [pc, #520]	@ (80009e4 <RunStateMachine+0x258>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f004 f913 	bl	8004a08 <siprintf>
        HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcf3 	bl	80001d0 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4639      	mov	r1, r7
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f4:	487c      	ldr	r0, [pc, #496]	@ (80009e8 <RunStateMachine+0x25c>)
 80007f6:	f002 fd6b 	bl	80032d0 <HAL_UART_Transmit>

        btnShortPress=0;
 80007fa:	4b75      	ldr	r3, [pc, #468]	@ (80009d0 <RunStateMachine+0x244>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000800:	e0d9      	b.n	80009b6 <RunStateMachine+0x22a>

    case STATE_SELECT:
      switch(selectSubState)
 8000802:	4b74      	ldr	r3, [pc, #464]	@ (80009d4 <RunStateMachine+0x248>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d05a      	beq.n	80008c0 <RunStateMachine+0x134>
 800080a:	2b02      	cmp	r3, #2
 800080c:	f300 80d5 	bgt.w	80009ba <RunStateMachine+0x22e>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <RunStateMachine+0x8e>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d02a      	beq.n	800086e <RunStateMachine+0xe2>
            sprintf(dbg,"Now AdvMode=%s\r\n", (advMode==0?"心率/心律失常":"血氧"));
            HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
          }
          break;
      }
      break;
 8000818:	e0cf      	b.n	80009ba <RunStateMachine+0x22e>
          if(btnShortPress)
 800081a:	4b6d      	ldr	r3, [pc, #436]	@ (80009d0 <RunStateMachine+0x244>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d078      	beq.n	8000914 <RunStateMachine+0x188>
            workMode = !workMode;
 8000822:	4b6d      	ldr	r3, [pc, #436]	@ (80009d8 <RunStateMachine+0x24c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b69      	ldr	r3, [pc, #420]	@ (80009d8 <RunStateMachine+0x24c>)
 8000834:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 8000836:	4b66      	ldr	r3, [pc, #408]	@ (80009d0 <RunStateMachine+0x244>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
            sprintf(dbg,"Now WorkMode=%s\r\n", (workMode==0?"IR":"RED"));
 800083c:	4b66      	ldr	r3, [pc, #408]	@ (80009d8 <RunStateMachine+0x24c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <RunStateMachine+0xbc>
 8000844:	4a65      	ldr	r2, [pc, #404]	@ (80009dc <RunStateMachine+0x250>)
 8000846:	e000      	b.n	800084a <RunStateMachine+0xbe>
 8000848:	4a65      	ldr	r2, [pc, #404]	@ (80009e0 <RunStateMachine+0x254>)
 800084a:	463b      	mov	r3, r7
 800084c:	4967      	ldr	r1, [pc, #412]	@ (80009ec <RunStateMachine+0x260>)
 800084e:	4618      	mov	r0, r3
 8000850:	f004 f8da 	bl	8004a08 <siprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000854:	463b      	mov	r3, r7
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcba 	bl	80001d0 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	4639      	mov	r1, r7
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	4860      	ldr	r0, [pc, #384]	@ (80009e8 <RunStateMachine+0x25c>)
 8000868:	f002 fd32 	bl	80032d0 <HAL_UART_Transmit>
          break;
 800086c:	e052      	b.n	8000914 <RunStateMachine+0x188>
          if(btnShortPress)
 800086e:	4b58      	ldr	r3, [pc, #352]	@ (80009d0 <RunStateMachine+0x244>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d050      	beq.n	8000918 <RunStateMachine+0x18c>
            preprocMode++;
 8000876:	4b5e      	ldr	r3, [pc, #376]	@ (80009f0 <RunStateMachine+0x264>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b5c      	ldr	r3, [pc, #368]	@ (80009f0 <RunStateMachine+0x264>)
 8000880:	701a      	strb	r2, [r3, #0]
            if(preprocMode>3) preprocMode=1;
 8000882:	4b5b      	ldr	r3, [pc, #364]	@ (80009f0 <RunStateMachine+0x264>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d902      	bls.n	8000890 <RunStateMachine+0x104>
 800088a:	4b59      	ldr	r3, [pc, #356]	@ (80009f0 <RunStateMachine+0x264>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 8000890:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <RunStateMachine+0x244>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
            sprintf(dbg,"Now PreprocMode=%d\r\n", preprocMode);
 8000896:	4b56      	ldr	r3, [pc, #344]	@ (80009f0 <RunStateMachine+0x264>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	463b      	mov	r3, r7
 800089e:	4955      	ldr	r1, [pc, #340]	@ (80009f4 <RunStateMachine+0x268>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 f8b1 	bl	8004a08 <siprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc91 	bl	80001d0 <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4639      	mov	r1, r7
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b8:	484b      	ldr	r0, [pc, #300]	@ (80009e8 <RunStateMachine+0x25c>)
 80008ba:	f002 fd09 	bl	80032d0 <HAL_UART_Transmit>
          break;
 80008be:	e02b      	b.n	8000918 <RunStateMachine+0x18c>
          if(btnShortPress)
 80008c0:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <RunStateMachine+0x244>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d029      	beq.n	800091c <RunStateMachine+0x190>
            advMode = !advMode;
 80008c8:	4b4b      	ldr	r3, [pc, #300]	@ (80009f8 <RunStateMachine+0x26c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b47      	ldr	r3, [pc, #284]	@ (80009f8 <RunStateMachine+0x26c>)
 80008da:	701a      	strb	r2, [r3, #0]
            btnShortPress=0;
 80008dc:	4b3c      	ldr	r3, [pc, #240]	@ (80009d0 <RunStateMachine+0x244>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
            sprintf(dbg,"Now AdvMode=%s\r\n", (advMode==0?"心率/心律失常":"血氧"));
 80008e2:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <RunStateMachine+0x26c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <RunStateMachine+0x162>
 80008ea:	4a44      	ldr	r2, [pc, #272]	@ (80009fc <RunStateMachine+0x270>)
 80008ec:	e000      	b.n	80008f0 <RunStateMachine+0x164>
 80008ee:	4a44      	ldr	r2, [pc, #272]	@ (8000a00 <RunStateMachine+0x274>)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4944      	ldr	r1, [pc, #272]	@ (8000a04 <RunStateMachine+0x278>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f887 	bl	8004a08 <siprintf>
            HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc67 	bl	80001d0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	4639      	mov	r1, r7
 8000908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090c:	4836      	ldr	r0, [pc, #216]	@ (80009e8 <RunStateMachine+0x25c>)
 800090e:	f002 fcdf 	bl	80032d0 <HAL_UART_Transmit>
          break;
 8000912:	e003      	b.n	800091c <RunStateMachine+0x190>
          break;
 8000914:	bf00      	nop
 8000916:	e050      	b.n	80009ba <RunStateMachine+0x22e>
          break;
 8000918:	bf00      	nop
 800091a:	e04e      	b.n	80009ba <RunStateMachine+0x22e>
          break;
 800091c:	bf00      	nop
      break;
 800091e:	e04c      	b.n	80009ba <RunStateMachine+0x22e>

    case STATE_RUNNING:
      if(btnShortPress)
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <RunStateMachine+0x244>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d04a      	beq.n	80009be <RunStateMachine+0x232>
      {
        SendStopCmd();
 8000928:	f000 fa2c 	bl	8000d84 <SendStopCmd>
        isRunning=0;
 800092c:	4b36      	ldr	r3, [pc, #216]	@ (8000a08 <RunStateMachine+0x27c>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
        level1State=STATE_IDLE;
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <RunStateMachine+0x240>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]

        char dbg[]="Now STOP => Go back to IDLE\r\n";
 8000938:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <RunStateMachine+0x280>)
 800093a:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000948:	c407      	stmia	r4!, {r0, r1, r2}
 800094a:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 800094c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc3d 	bl	80001d0 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800095e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000962:	4821      	ldr	r0, [pc, #132]	@ (80009e8 <RunStateMachine+0x25c>)
 8000964:	f002 fcb4 	bl	80032d0 <HAL_UART_Transmit>

        btnShortPress=0;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <RunStateMachine+0x244>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800096e:	e026      	b.n	80009be <RunStateMachine+0x232>

    case STATE_ERROR:
      if(btnShortPress)
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <RunStateMachine+0x244>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d024      	beq.n	80009c2 <RunStateMachine+0x236>
      {
        level1State=STATE_IDLE;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <RunStateMachine+0x240>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
        char dbg[]="Error cleared, back to IDLE\r\n";
 800097e:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <RunStateMachine+0x284>)
 8000980:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000984:	461d      	mov	r5, r3
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800098e:	c407      	stmia	r4!, {r0, r1, r2}
 8000990:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000992:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc1a 	bl	80001d0 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009a8:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <RunStateMachine+0x25c>)
 80009aa:	f002 fc91 	bl	80032d0 <HAL_UART_Transmit>
        btnShortPress=0;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <RunStateMachine+0x244>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80009b4:	e005      	b.n	80009c2 <RunStateMachine+0x236>
      break;
 80009b6:	bf00      	nop
 80009b8:	e004      	b.n	80009c4 <RunStateMachine+0x238>
      break;
 80009ba:	bf00      	nop
 80009bc:	e002      	b.n	80009c4 <RunStateMachine+0x238>
      break;
 80009be:	bf00      	nop
 80009c0:	e000      	b.n	80009c4 <RunStateMachine+0x238>
      break;
 80009c2:	bf00      	nop
  }
}
 80009c4:	bf00      	nop
 80009c6:	3780      	adds	r7, #128	@ 0x80
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	200001cc 	.word	0x200001cc
 80009d0:	200001e0 	.word	0x200001e0
 80009d4:	200001cd 	.word	0x200001cd
 80009d8:	200001ce 	.word	0x200001ce
 80009dc:	08005d90 	.word	0x08005d90
 80009e0:	08005d94 	.word	0x08005d94
 80009e4:	08005d98 	.word	0x08005d98
 80009e8:	20000104 	.word	0x20000104
 80009ec:	08005dd0 	.word	0x08005dd0
 80009f0:	20000000 	.word	0x20000000
 80009f4:	08005de4 	.word	0x08005de4
 80009f8:	200001cf 	.word	0x200001cf
 80009fc:	08005dfc 	.word	0x08005dfc
 8000a00:	08005e10 	.word	0x08005e10
 8000a04:	08005e18 	.word	0x08005e18
 8000a08:	200001d0 	.word	0x200001d0
 8000a0c:	08005e2c 	.word	0x08005e2c
 8000a10:	08005e4c 	.word	0x08005e4c

08000a14 <CheckButton>:

void CheckButton(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  static uint8_t prevPin=1;
  uint8_t pinVal = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); // 1=未按,0=按下
 8000a1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1e:	4830      	ldr	r0, [pc, #192]	@ (8000ae0 <CheckButton+0xcc>)
 8000a20:	f001 f89e 	bl	8001b60 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]

  if(pinVal!=prevPin)
 8000a28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <CheckButton+0xd0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d052      	beq.n	8000ad8 <CheckButton+0xc4>
  {
    if(pinVal==0)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d108      	bne.n	8000a4a <CheckButton+0x36>
    {
      btnPressed=1;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <CheckButton+0xd4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
      btnPressTick=HAL_GetTick();
 8000a3e:	f000 fd25 	bl	800148c <HAL_GetTick>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a29      	ldr	r2, [pc, #164]	@ (8000aec <CheckButton+0xd8>)
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e043      	b.n	8000ad2 <CheckButton+0xbe>
    }
    else
    {
      if(btnPressed)
 8000a4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <CheckButton+0xd4>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d03f      	beq.n	8000ad2 <CheckButton+0xbe>
      {
        uint32_t pressDuration=HAL_GetTick()-btnPressTick;
 8000a52:	f000 fd1b 	bl	800148c <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <CheckButton+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	603b      	str	r3, [r7, #0]
        if(pressDuration<800) // 短按
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000a66:	d203      	bcs.n	8000a70 <CheckButton+0x5c>
        {
          btnShortPress=1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <CheckButton+0xdc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e02d      	b.n	8000acc <CheckButton+0xb8>
        }
        else
        {
          // 长按 => 切换子状态或进入RUNNING
          if(level1State==STATE_SELECT)
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <CheckButton+0xe0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d129      	bne.n	8000acc <CheckButton+0xb8>
          {
            switch(selectSubState)
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <CheckButton+0xe4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d01c      	beq.n	8000aba <CheckButton+0xa6>
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	dc23      	bgt.n	8000acc <CheckButton+0xb8>
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <CheckButton+0x7a>
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d00b      	beq.n	8000aa4 <CheckButton+0x90>
 8000a8c:	e01e      	b.n	8000acc <CheckButton+0xb8>
            {
              case SUB_WORKMODE_SELECT:
                selectSubState=SUB_PREPROC_SELECT;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <CheckButton+0xe4>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2,(uint8_t*)"Enter STATE_SELECT, Sub=PREPROC_SELECT\r\n",39,HAL_MAX_DELAY);
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a98:	2227      	movs	r2, #39	@ 0x27
 8000a9a:	4918      	ldr	r1, [pc, #96]	@ (8000afc <CheckButton+0xe8>)
 8000a9c:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <CheckButton+0xec>)
 8000a9e:	f002 fc17 	bl	80032d0 <HAL_UART_Transmit>
                break;
 8000aa2:	e013      	b.n	8000acc <CheckButton+0xb8>
              case SUB_PREPROC_SELECT:
                selectSubState=SUB_ADVPROC_SELECT;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <CheckButton+0xe4>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2,(uint8_t*)"Enter STATE_SELECT, Sub=ADVPROC_SELECT\r\n",38,HAL_MAX_DELAY);
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aae:	2226      	movs	r2, #38	@ 0x26
 8000ab0:	4914      	ldr	r1, [pc, #80]	@ (8000b04 <CheckButton+0xf0>)
 8000ab2:	4813      	ldr	r0, [pc, #76]	@ (8000b00 <CheckButton+0xec>)
 8000ab4:	f002 fc0c 	bl	80032d0 <HAL_UART_Transmit>
                break;
 8000ab8:	e008      	b.n	8000acc <CheckButton+0xb8>
              case SUB_ADVPROC_SELECT:
                SendStartCmd();
 8000aba:	f000 f909 	bl	8000cd0 <SendStartCmd>
                isRunning=1;
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <CheckButton+0xf4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
                level1State=STATE_RUNNING;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <CheckButton+0xe0>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	701a      	strb	r2, [r3, #0]
                break;
 8000aca:	bf00      	nop
            }
          }
        }
        btnPressed=0;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <CheckButton+0xd4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
      }
    }
    prevPin=pinVal;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <CheckButton+0xd0>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	7013      	strb	r3, [r2, #0]
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	20000001 	.word	0x20000001
 8000ae8:	200001d9 	.word	0x200001d9
 8000aec:	200001dc 	.word	0x200001dc
 8000af0:	200001e0 	.word	0x200001e0
 8000af4:	200001cc 	.word	0x200001cc
 8000af8:	200001cd 	.word	0x200001cd
 8000afc:	08005e6c 	.word	0x08005e6c
 8000b00:	20000104 	.word	0x20000104
 8000b04:	08005e98 	.word	0x08005e98
 8000b08:	200001d0 	.word	0x200001d0

08000b0c <UpdateLedBlink>:

void UpdateLedBlink(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  static uint8_t ledOn=0;
  uint32_t now=HAL_GetTick();
 8000b12:	f000 fcbb 	bl	800148c <HAL_GetTick>
 8000b16:	6078      	str	r0, [r7, #4]

  if(level1State==STATE_IDLE)
 8000b18:	4b68      	ldr	r3, [pc, #416]	@ (8000cbc <UpdateLedBlink+0x1b0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d106      	bne.n	8000b2e <UpdateLedBlink+0x22>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2120      	movs	r1, #32
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b28:	f001 f832 	bl	8001b90 <HAL_GPIO_WritePin>
      lastBlinkTick=now;
      ledOn=!ledOn;
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
    }
  }
}
 8000b2c:	e0c1      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
  else if(level1State==STATE_SELECT)
 8000b2e:	4b63      	ldr	r3, [pc, #396]	@ (8000cbc <UpdateLedBlink+0x1b0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	f040 808c 	bne.w	8000c50 <UpdateLedBlink+0x144>
    if(selectSubState==SUB_WORKMODE_SELECT)
 8000b38:	4b61      	ldr	r3, [pc, #388]	@ (8000cc0 <UpdateLedBlink+0x1b4>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d122      	bne.n	8000b86 <UpdateLedBlink+0x7a>
      if(now-lastBlinkTick>1000)
 8000b40:	4b60      	ldr	r3, [pc, #384]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b4c:	f240 80b1 	bls.w	8000cb2 <UpdateLedBlink+0x1a6>
        lastBlinkTick=now;
 8000b50:	4a5c      	ldr	r2, [pc, #368]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
        ledOn=!ledOn;
 8000b56:	4b5c      	ldr	r3, [pc, #368]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2301      	moveq	r3, #1
 8000b60:	2300      	movne	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b58      	ldr	r3, [pc, #352]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000b68:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000b6a:	4b57      	ldr	r3, [pc, #348]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f001 f806 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000b84:	e095      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
    else if(selectSubState==SUB_PREPROC_SELECT)
 8000b86:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <UpdateLedBlink+0x1b4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d12c      	bne.n	8000be8 <UpdateLedBlink+0xdc>
      if(now-lastBlinkTick>200)
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b98:	f240 808b 	bls.w	8000cb2 <UpdateLedBlink+0x1a6>
        lastBlinkTick=now;
 8000b9c:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
        blinkPhase++;
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b48      	ldr	r3, [pc, #288]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000bac:	701a      	strb	r2, [r3, #0]
        if(blinkPhase>=5) blinkPhase=0;
 8000bae:	4b47      	ldr	r3, [pc, #284]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d902      	bls.n	8000bbc <UpdateLedBlink+0xb0>
 8000bb6:	4b45      	ldr	r3, [pc, #276]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
        if(blinkPhase==0||blinkPhase==2)
 8000bbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <UpdateLedBlink+0xc0>
 8000bc4:	4b41      	ldr	r3, [pc, #260]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d106      	bne.n	8000bda <UpdateLedBlink+0xce>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd4:	f000 ffdc 	bl	8001b90 <HAL_GPIO_WritePin>
 8000bd8:	e06b      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f000 ffd5 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000be6:	e064      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
    else if(selectSubState==SUB_ADVPROC_SELECT)
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <UpdateLedBlink+0x1b4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d160      	bne.n	8000cb2 <UpdateLedBlink+0x1a6>
      if(now-lastBlinkTick>150)
 8000bf0:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b96      	cmp	r3, #150	@ 0x96
 8000bfa:	d95a      	bls.n	8000cb2 <UpdateLedBlink+0x1a6>
        lastBlinkTick=now;
 8000bfc:	4a31      	ldr	r2, [pc, #196]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
        blinkPhase++;
 8000c02:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c0c:	701a      	strb	r2, [r3, #0]
        if(blinkPhase>=6) blinkPhase=0;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d902      	bls.n	8000c1c <UpdateLedBlink+0x110>
 8000c16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
        if(blinkPhase==0||blinkPhase==2||blinkPhase==4)
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <UpdateLedBlink+0x128>
 8000c24:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d003      	beq.n	8000c34 <UpdateLedBlink+0x128>
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <UpdateLedBlink+0x1c0>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d106      	bne.n	8000c42 <UpdateLedBlink+0x136>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2120      	movs	r1, #32
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f000 ffa8 	bl	8001b90 <HAL_GPIO_WritePin>
 8000c40:	e037      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2120      	movs	r1, #32
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4a:	f000 ffa1 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000c4e:	e030      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
  else if(level1State==STATE_RUNNING)
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <UpdateLedBlink+0x1b0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d106      	bne.n	8000c66 <UpdateLedBlink+0x15a>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f000 ff96 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000c64:	e025      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
  else if(level1State==STATE_ERROR)
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <UpdateLedBlink+0x1b0>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d121      	bne.n	8000cb2 <UpdateLedBlink+0x1a6>
    if(now-lastBlinkTick>300)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000c7a:	d91a      	bls.n	8000cb2 <UpdateLedBlink+0x1a6>
      lastBlinkTick=now;
 8000c7c:	4a11      	ldr	r2, [pc, #68]	@ (8000cc4 <UpdateLedBlink+0x1b8>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
      ledOn=!ledOn;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000c94:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ledOn?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <UpdateLedBlink+0x1bc>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cac:	f000 ff70 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000cb0:	e7ff      	b.n	8000cb2 <UpdateLedBlink+0x1a6>
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001cc 	.word	0x200001cc
 8000cc0:	200001cd 	.word	0x200001cd
 8000cc4:	200001d4 	.word	0x200001d4
 8000cc8:	200001e1 	.word	0x200001e1
 8000ccc:	200001d8 	.word	0x200001d8

08000cd0 <SendStartCmd>:

/** 发送 START 命令给采集板 */
void SendStartCmd(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0a8      	sub	sp, #160	@ 0xa0
 8000cd4:	af02      	add	r7, sp, #8
  char wStr[8];
  if(workMode==0) strcpy(wStr,"IR"); else strcpy(wStr,"RED");
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <SendStartCmd+0x90>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d109      	bne.n	8000cf2 <SendStartCmd+0x22>
 8000cde:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ce2:	4a20      	ldr	r2, [pc, #128]	@ (8000d64 <SendStartCmd+0x94>)
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	8019      	strh	r1, [r3, #0]
 8000cea:	3302      	adds	r3, #2
 8000cec:	0c12      	lsrs	r2, r2, #16
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e003      	b.n	8000cfa <SendStartCmd+0x2a>
 8000cf2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <SendStartCmd+0x98>)
 8000cf8:	601a      	str	r2, [r3, #0]

  char cmdBuf[64];
  sprintf(cmdBuf, "CMD:START,%s,%d,%d\r\n", wStr, preprocMode, advMode);
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <SendStartCmd+0x9c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <SendStartCmd+0xa0>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000d08:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4918      	ldr	r1, [pc, #96]	@ (8000d74 <SendStartCmd+0xa4>)
 8000d12:	f003 fe79 	bl	8004a08 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)cmdBuf,strlen(cmdBuf),HAL_MAX_DELAY);
 8000d16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa58 	bl	80001d0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2c:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <SendStartCmd+0xa8>)
 8000d2e:	f002 facf 	bl	80032d0 <HAL_UART_Transmit>

  char dbg[80];
  sprintf(dbg,"Send START: %s", cmdBuf);
 8000d32:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000d36:	463b      	mov	r3, r7
 8000d38:	4910      	ldr	r1, [pc, #64]	@ (8000d7c <SendStartCmd+0xac>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fe64 	bl	8004a08 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000d40:	463b      	mov	r3, r7
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa44 	bl	80001d0 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d52:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <SendStartCmd+0xb0>)
 8000d54:	f002 fabc 	bl	80032d0 <HAL_UART_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3798      	adds	r7, #152	@ 0x98
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200001ce 	.word	0x200001ce
 8000d64:	08005d90 	.word	0x08005d90
 8000d68:	00444552 	.word	0x00444552
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	200001cf 	.word	0x200001cf
 8000d74:	08005ec4 	.word	0x08005ec4
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	08005edc 	.word	0x08005edc
 8000d80:	20000104 	.word	0x20000104

08000d84 <SendStopCmd>:

/** 发送 STOP 命令给采集板 */
void SendStopCmd(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
  char stopCmd[]="CMD:STOP\r\n";
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <SendStopCmd+0x44>)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d90:	c303      	stmia	r3!, {r0, r1}
 8000d92:	801a      	strh	r2, [r3, #0]
 8000d94:	3302      	adds	r3, #2
 8000d96:	0c12      	lsrs	r2, r2, #16
 8000d98:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t*)stopCmd,strlen(stopCmd),HAL_MAX_DELAY);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fa17 	bl	80001d0 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	1d39      	adds	r1, r7, #4
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <SendStopCmd+0x48>)
 8000dae:	f002 fa8f 	bl	80032d0 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart2,(uint8_t*)"Send CMD:STOP\r\n",15,HAL_MAX_DELAY);
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db6:	220f      	movs	r2, #15
 8000db8:	4905      	ldr	r1, [pc, #20]	@ (8000dd0 <SendStopCmd+0x4c>)
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <SendStopCmd+0x50>)
 8000dbc:	f002 fa88 	bl	80032d0 <HAL_UART_Transmit>
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08005efc 	.word	0x08005efc
 8000dcc:	2000007c 	.word	0x2000007c
 8000dd0:	08005eec 	.word	0x08005eec
 8000dd4:	20000104 	.word	0x20000104

08000dd8 <ProcessCollectorData>:

void ProcessCollectorData(char* line)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	@ 0x50
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint16_t rawVal, preVal;
  sscanf(line,"DATA,%hu,%hu",&rawVal,&preVal);
 8000de0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000de4:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000de8:	4917      	ldr	r1, [pc, #92]	@ (8000e48 <ProcessCollectorData+0x70>)
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f003 fe2c 	bl	8004a48 <siscanf>

  char dbg[64];
  if(advMode==0)
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <ProcessCollectorData+0x74>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10a      	bne.n	8000e0e <ProcessCollectorData+0x36>
    sprintf(dbg,"Recv DATA: raw=%u, pre=%u, [Adv=心率]\r\n", rawVal, preVal);
 8000df8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e02:	f107 000c 	add.w	r0, r7, #12
 8000e06:	4912      	ldr	r1, [pc, #72]	@ (8000e50 <ProcessCollectorData+0x78>)
 8000e08:	f003 fdfe 	bl	8004a08 <siprintf>
 8000e0c:	e009      	b.n	8000e22 <ProcessCollectorData+0x4a>
  else
    sprintf(dbg,"Recv DATA: raw=%u, pre=%u, [Adv=血氧]\r\n", rawVal, preVal);
 8000e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e12:	461a      	mov	r2, r3
 8000e14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e18:	f107 000c 	add.w	r0, r7, #12
 8000e1c:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <ProcessCollectorData+0x7c>)
 8000e1e:	f003 fdf3 	bl	8004a08 <siprintf>

  HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9d2 	bl	80001d0 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 010c 	add.w	r1, r7, #12
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <ProcessCollectorData+0x80>)
 8000e3a:	f002 fa49 	bl	80032d0 <HAL_UART_Transmit>
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	@ 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	08005f08 	.word	0x08005f08
 8000e4c:	200001cf 	.word	0x200001cf
 8000e50:	08005f18 	.word	0x08005f18
 8000e54:	08005f44 	.word	0x08005f44
 8000e58:	20000104 	.word	0x20000104

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	@ 0x58
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2244      	movs	r2, #68	@ 0x44
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fe2a 	bl	8004ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e82:	f000 fec5 	bl	8001c10 <HAL_PWREx_ControlVoltageScaling>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e8c:	f000 f8fa 	bl	8001084 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e90:	2310      	movs	r3, #16
 8000e92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e9c:	2360      	movs	r3, #96	@ 0x60
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000eac:	2318      	movs	r3, #24
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fefb 	bl	8001cbc <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ecc:	f000 f8da 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fac3 	bl	8002474 <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ef4:	f000 f8c6 	bl	8001084 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3758      	adds	r7, #88	@ 0x58
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	@ (8000f5c <MX_USART1_UART_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f44:	f002 f976 	bl	8003234 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f899 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000007c 	.word	0x2000007c
 8000f5c:	40013800 	.word	0x40013800

08000f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	@ (8000fbc <MX_USART2_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000fa4:	f002 f946 	bl	8003234 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f869 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000104 	.word	0x20000104
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b29      	ldr	r3, [pc, #164]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a28      	ldr	r2, [pc, #160]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a22      	ldr	r2, [pc, #136]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <MX_GPIO_Init+0xbc>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2120      	movs	r1, #32
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f000 fdbf 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	4816      	ldr	r0, [pc, #88]	@ (8001080 <MX_GPIO_Init+0xc0>)
 8001028:	f000 fbf0 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800102c:	2320      	movs	r3, #32
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001046:	f000 fbe1 	bl	800180c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f000 fd9d 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001056:	2320      	movs	r3, #32
 8001058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f000 fbcc 	bl	800180c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000800 	.word	0x48000800

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800108c:	2120      	movs	r1, #32
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f000 fd95 	bl	8001bc0 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 8001096:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109a:	f000 fa03 	bl	80014a4 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800109e:	bf00      	nop
 80010a0:	e7f4      	b.n	800108c <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ae      	sub	sp, #184	@ 0xb8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2288      	movs	r2, #136	@ 0x88
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fcd9 	bl	8004ac4 <memset>
  if(huart->Instance==USART1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <HAL_UART_MspInit+0x158>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d145      	bne.n	80011a8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001120:	2300      	movs	r3, #0
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fbc7 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001134:	f7ff ffa6 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001138:	4b43      	ldr	r3, [pc, #268]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 800113a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113c:	4a42      	ldr	r2, [pc, #264]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001142:	6613      	str	r3, [r2, #96]	@ 0x60
 8001144:	4b40      	ldr	r3, [pc, #256]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b3d      	ldr	r3, [pc, #244]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a3c      	ldr	r2, [pc, #240]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115c:	4b3a      	ldr	r3, [pc, #232]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001168:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001182:	2307      	movs	r3, #7
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001192:	f000 fb3b 	bl	800180c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2025      	movs	r0, #37	@ 0x25
 800119c:	f000 fa81 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011a0:	2025      	movs	r0, #37	@ 0x25
 80011a2:	f000 fa9a 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a6:	e048      	b.n	800123a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_UART_MspInit+0x160>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d143      	bne.n	800123a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fb7c 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80011ca:	f7ff ff5b 	bl	8001084 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_UART_MspInit+0x15c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f000 faf1 	bl	800180c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2026      	movs	r0, #38	@ 0x26
 8001230:	f000 fa37 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001234:	2026      	movs	r0, #38	@ 0x26
 8001236:	f000 fa50 	bl	80016da <HAL_NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	37b8      	adds	r7, #184	@ 0xb8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800
 8001248:	40021000 	.word	0x40021000
 800124c:	40004400 	.word	0x40004400

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8dd 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <USART1_IRQHandler+0x10>)
 80012b6:	f002 f8e1 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000007c 	.word	0x2000007c

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f002 f8d7 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000104 	.word	0x20000104

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f003 fbe4 	bl	8004ad4 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20018000 	.word	0x20018000
 8001338:	00000400 	.word	0x00000400
 800133c:	200001e4 	.word	0x200001e4
 8001340:	20000338 	.word	0x20000338

08001344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f003 fba3 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff f9bf 	bl	800071c <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013ac:	08006124 	.word	0x08006124
  ldr r2, =_sbss
 80013b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013b4:	20000334 	.word	0x20000334

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>

080013ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f961 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f80e 	bl	80013ec <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e001      	b.n	80013e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013dc:	f7ff fe62 	bl	80010a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_InitTick+0x6c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d023      	beq.n	8001448 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_InitTick+0x70>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_InitTick+0x6c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f96d 	bl	80016f6 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d809      	bhi.n	800143c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001430:	f000 f937 	bl	80016a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_InitTick+0x74>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e007      	b.n	800144c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e004      	b.n	800144c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e001      	b.n	800144c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000004 	.word	0x20000004
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000000c 	.word	0x2000000c
 8001488:	200001e8 	.word	0x200001e8

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200001e8 	.word	0x200001e8

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d008      	beq.n	8001738 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2204      	movs	r2, #4
 800172a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e022      	b.n	800177e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020e 	bic.w	r2, r2, #14
 8001746:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	f003 021c 	and.w	r2, r3, #28
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d005      	beq.n	80017ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2204      	movs	r2, #4
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e029      	b.n	8001802 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020e 	bic.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f003 021c 	and.w	r2, r3, #28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    }
  }
  return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	e17f      	b.n	8001b1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8171 	beq.w	8001b16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x40>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 0201 	and.w	r2, r3, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d118      	bne.n	80018ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d017      	beq.n	8001928 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d123      	bne.n	800197c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	6939      	ldr	r1, [r7, #16]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80ac 	beq.w	8001b16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	4b5f      	ldr	r3, [pc, #380]	@ (8001b3c <HAL_GPIO_Init+0x330>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b3c <HAL_GPIO_Init+0x330>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b5c      	ldr	r3, [pc, #368]	@ (8001b3c <HAL_GPIO_Init+0x330>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b40 <HAL_GPIO_Init+0x334>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a00:	d025      	beq.n	8001a4e <HAL_GPIO_Init+0x242>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4f      	ldr	r2, [pc, #316]	@ (8001b44 <HAL_GPIO_Init+0x338>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01f      	beq.n	8001a4a <HAL_GPIO_Init+0x23e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b48 <HAL_GPIO_Init+0x33c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x23a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4d      	ldr	r2, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x340>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x236>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <HAL_GPIO_Init+0x344>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x232>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4b      	ldr	r2, [pc, #300]	@ (8001b54 <HAL_GPIO_Init+0x348>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x22e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <HAL_GPIO_Init+0x34c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x22a>
 8001a32:	2306      	movs	r3, #6
 8001a34:	e00c      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00a      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x244>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a60:	4937      	ldr	r1, [pc, #220]	@ (8001b40 <HAL_GPIO_Init+0x334>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a92:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <HAL_GPIO_Init+0x350>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae78 	bne.w	800181c <HAL_GPIO_Init+0x10>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48000c00 	.word	0x48000c00
 8001b50:	48001000 	.word	0x48001000
 8001b54:	48001400 	.word	0x48001400
 8001b58:	48001800 	.word	0x48001800
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43d9      	mvns	r1, r3
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	400b      	ands	r3, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000

08001c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c1e:	d130      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c2c:	d038      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c36:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2232      	movs	r2, #50	@ 0x32
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9b      	lsrs	r3, r3, #18
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c54:	e002      	b.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c68:	d102      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f2      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c70:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7c:	d110      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e00f      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8e:	d007      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c98:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e3ca      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b97      	ldr	r3, [pc, #604]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b94      	ldr	r3, [pc, #592]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80e4 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4a>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	f040 808b 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 8087 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x62>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e3a2      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4b82      	ldr	r3, [pc, #520]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_RCC_OscConfig+0x7c>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d38:	4b7c      	ldr	r3, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d223      	bcs.n	8001d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fd55 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e383      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5c:	4b73      	ldr	r3, [pc, #460]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a72      	ldr	r2, [pc, #456]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b70      	ldr	r3, [pc, #448]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	496d      	ldr	r1, [pc, #436]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4968      	ldr	r1, [pc, #416]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e025      	b.n	8001ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d90:	4b66      	ldr	r3, [pc, #408]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4960      	ldr	r1, [pc, #384]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	495b      	ldr	r1, [pc, #364]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd15 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e343      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ddc:	f000 fc4a 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b52      	ldr	r3, [pc, #328]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4950      	ldr	r1, [pc, #320]	@ (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f34 <HAL_RCC_OscConfig+0x278>)
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff faf3 	bl	80013ec <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d052      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	e327      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d032      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e1c:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a42      	ldr	r2, [pc, #264]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb30 	bl	800148c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb2c 	bl	800148c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e310      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e42:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4931      	ldr	r1, [pc, #196]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	492c      	ldr	r1, [pc, #176]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e01a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fafd 	bl	800148c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e96:	f7ff faf9 	bl	800148c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e2dd      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea8:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1da>
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d074      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x21a>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d064      	beq.n	8001fac <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d160      	bne.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e2ba      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x24a>
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e026      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f0e:	d115      	bne.n	8001f3c <HAL_RCC_OscConfig+0x280>
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a02      	ldr	r2, [pc, #8]	@ (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08005f7c 	.word	0x08005f7c
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	4ba0      	ldr	r3, [pc, #640]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a9f      	ldr	r2, [pc, #636]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b9d      	ldr	r3, [pc, #628]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fa96 	bl	800148c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fa92 	bl	800148c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e276      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b92      	ldr	r3, [pc, #584]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2a8>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fa82 	bl	800148c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fa7e 	bl	800148c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e262      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9e:	4b88      	ldr	r3, [pc, #544]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2d0>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d060      	beq.n	800207c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x310>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d119      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x328>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e23f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4973      	ldr	r1, [pc, #460]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	e040      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d023      	beq.n	800204a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002002:	4b6f      	ldr	r3, [pc, #444]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6e      	ldr	r2, [pc, #440]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff fa3d 	bl	800148c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fa39 	bl	800148c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e21d      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b65      	ldr	r3, [pc, #404]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	495f      	ldr	r1, [pc, #380]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e018      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b5d      	ldr	r3, [pc, #372]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff fa19 	bl	800148c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fa15 	bl	800148c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1f9      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d03c      	beq.n	8002102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01c      	beq.n	80020ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002090:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002096:	4a4a      	ldr	r2, [pc, #296]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f9f4 	bl	800148c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f9f0 	bl	800148c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1d4      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ba:	4b41      	ldr	r3, [pc, #260]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ef      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3ec>
 80020c8:	e01b      	b.n	8002102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d0:	4a3b      	ldr	r2, [pc, #236]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff f9d7 	bl	800148c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f9d3 	bl	800148c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1b7      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b32      	ldr	r3, [pc, #200]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002114:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b27      	ldr	r3, [pc, #156]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	4a26      	ldr	r2, [pc, #152]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	@ 0x58
 800212c:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_RCC_OscConfig+0x508>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d118      	bne.n	800217a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002154:	f7ff f99a 	bl	800148c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215c:	f7ff f996 	bl	800148c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e17a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <HAL_RCC_OscConfig+0x508>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d8>
 8002182:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002192:	e029      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_OscConfig+0x50c>
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	4a07      	ldr	r2, [pc, #28]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a03      	ldr	r2, [pc, #12]	@ (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	4b9c      	ldr	r3, [pc, #624]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a9b      	ldr	r2, [pc, #620]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	4b98      	ldr	r3, [pc, #608]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a97      	ldr	r2, [pc, #604]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f94c 	bl	800148c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f948 	bl	800148c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e12a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b8b      	ldr	r3, [pc, #556]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCC_OscConfig+0x53c>
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff f935 	bl	800148c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff f931 	bl	800148c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e113      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ed      	bne.n	8002226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b7a      	ldr	r3, [pc, #488]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a79      	ldr	r2, [pc, #484]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80fe 	beq.w	8002462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 80d0 	bne.w	8002410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002270:	4b72      	ldr	r3, [pc, #456]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	429a      	cmp	r2, r3
 8002282:	d130      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	3b01      	subs	r3, #1
 8002290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d127      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022b0:	2a07      	cmp	r2, #7
 80022b2:	bf14      	ite	ne
 80022b4:	2201      	movne	r2, #1
 80022b6:	2200      	moveq	r2, #0
 80022b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d06e      	beq.n	80023c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d069      	beq.n	80023c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ec:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022f8:	4b50      	ldr	r3, [pc, #320]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ad      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002308:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4b      	ldr	r2, [pc, #300]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7ff f8ba 	bl	800148c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f8b6 	bl	800148c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e09a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232e:	4b43      	ldr	r3, [pc, #268]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233a:	4b40      	ldr	r3, [pc, #256]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b40      	ldr	r3, [pc, #256]	@ (8002440 <HAL_RCC_OscConfig+0x784>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800234a:	3a01      	subs	r2, #1
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0552      	lsls	r2, r2, #21
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	0652      	lsls	r2, r2, #25
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002374:	0912      	lsrs	r2, r2, #4
 8002376:	0452      	lsls	r2, r2, #17
 8002378:	430a      	orrs	r2, r1
 800237a:	4930      	ldr	r1, [pc, #192]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002380:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a2a      	ldr	r2, [pc, #168]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7ff f878 	bl	800148c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f874 	bl	800148c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e058      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	e050      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d148      	bne.n	8002462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a16      	ldr	r2, [pc, #88]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e8:	f7ff f850 	bl	800148c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f84c 	bl	800148c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e030      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x734>
 800240e:	e028      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d023      	beq.n	800245e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_RCC_OscConfig+0x780>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f833 	bl	800148c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	e00c      	b.n	8002444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f82f 	bl	800148c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d905      	bls.n	8002444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
 800243c:	40021000 	.word	0x40021000
 8002440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4905      	ldr	r1, [pc, #20]	@ (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x7b4>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e001      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	feeefffc 	.word	0xfeeefffc

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0e7      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b75      	ldr	r3, [pc, #468]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b72      	ldr	r3, [pc, #456]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4970      	ldr	r1, [pc, #448]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cf      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b66      	ldr	r3, [pc, #408]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4960      	ldr	r1, [pc, #384]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04c      	beq.n	800258c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a6      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09a      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252a:	4b4e      	ldr	r3, [pc, #312]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e086      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4943      	ldr	r1, [pc, #268]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7fe ff96 	bl	800148c <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe ff92 	bl	800148c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e06e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b3a      	ldr	r3, [pc, #232]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d208      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	492b      	ldr	r1, [pc, #172]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ba:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d210      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 0207 	bic.w	r2, r3, #7
 80025d0:	4923      	ldr	r1, [pc, #140]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e036      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4918      	ldr	r1, [pc, #96]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4910      	ldr	r1, [pc, #64]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002628:	f000 f824 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	490b      	ldr	r1, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1f4>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1fc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fecd 	bl	80013ec <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	72fb      	strb	r3, [r7, #11]

  return status;
 8002656:	7afb      	ldrb	r3, [r7, #11]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08005f7c 	.word	0x08005f7c
 800266c:	20000004 	.word	0x20000004
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b3e      	ldr	r3, [pc, #248]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a8:	4b34      	ldr	r3, [pc, #208]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b4:	4b31      	ldr	r3, [pc, #196]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d134      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xa6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xac>
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fb03 f202 	mul.w	r2, r3, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08005f94 	.word	0x08005f94
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08005f8c 	.word	0x08005f8c

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08005f8c 	.word	0x08005f8c

080027fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002814:	f7ff f9ee 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 8002818:	6178      	str	r0, [r7, #20]
 800281a:	e014      	b.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
 8002828:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002834:	f7ff f9de 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 8002838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800284c:	d10b      	bne.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d919      	bls.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2ba0      	cmp	r3, #160	@ 0xa0
 8002858:	d902      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e013      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e010      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	@ 0x80
 800286a:	d902      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e00a      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d102      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e004      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b70      	cmp	r3, #112	@ 0x70
 8002882:	d101      	bne.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4909      	ldr	r1, [pc, #36]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d041      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028e0:	d02a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028e6:	d824      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028f2:	d81e      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028fc:	d010      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028fe:	e018      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002900:	4b86      	ldr	r3, [pc, #536]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a85      	ldr	r2, [pc, #532]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290c:	e015      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fabb 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800291e:	e00c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3320      	adds	r3, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fba6 	bl	8003078 <RCCEx_PLLSAI2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002940:	4b76      	ldr	r3, [pc, #472]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294e:	4973      	ldr	r1, [pc, #460]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002956:	e001      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d041      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800296c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002970:	d02a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002976:	d824      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800297e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002982:	d81e      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298c:	d010      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800298e:	e018      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002990:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a61      	ldr	r2, [pc, #388]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299c:	e015      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fa73 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3320      	adds	r3, #32
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fb5e 	bl	8003078 <RCCEx_PLLSAI2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c0:	e003      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	74fb      	strb	r3, [r7, #19]
      break;
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d0:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029de:	494f      	ldr	r1, [pc, #316]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029e6:	e001      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a0 	beq.w	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029fe:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	4a40      	ldr	r2, [pc, #256]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a20:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3a      	ldr	r2, [pc, #232]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fd26 	bl	800148c <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a42:	e009      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fd22 	bl	800148c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	74fb      	strb	r3, [r7, #19]
        break;
 8002a56:	e005      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ef      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d15c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d019      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a88:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a20      	ldr	r2, [pc, #128]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ab4:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fce1 	bl	800148c <HAL_GetTick>
 8002aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe fcdd 	bl	800148c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d902      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ae4:	e006      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ec      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0a:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b12:	e009      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
 8002b18:	e006      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b28:	7c7b      	ldrb	r3, [r7, #17]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2e:	4b9e      	ldr	r3, [pc, #632]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	4a9d      	ldr	r2, [pc, #628]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b46:	4b98      	ldr	r3, [pc, #608]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	4994      	ldr	r1, [pc, #592]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b68:	4b8f      	ldr	r3, [pc, #572]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 020c 	bic.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	498c      	ldr	r1, [pc, #560]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b8a:	4b87      	ldr	r3, [pc, #540]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4983      	ldr	r1, [pc, #524]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bac:	4b7e      	ldr	r3, [pc, #504]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	497b      	ldr	r1, [pc, #492]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bce:	4b76      	ldr	r3, [pc, #472]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	4972      	ldr	r1, [pc, #456]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	496a      	ldr	r1, [pc, #424]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b65      	ldr	r3, [pc, #404]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	4961      	ldr	r1, [pc, #388]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c34:	4b5c      	ldr	r3, [pc, #368]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	4959      	ldr	r1, [pc, #356]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c56:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c64:	4950      	ldr	r1, [pc, #320]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c78:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	4948      	ldr	r1, [pc, #288]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c9a:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	493f      	ldr	r1, [pc, #252]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d028      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	4937      	ldr	r1, [pc, #220]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cda:	d106      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a31      	ldr	r2, [pc, #196]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	e011      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f8c8 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d028      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	491f      	ldr	r1, [pc, #124]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d44:	60d3      	str	r3, [r2, #12]
 8002d46:	e011      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f899 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d86:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d96:	d109      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a02      	ldr	r2, [pc, #8]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002da2:	60d3      	str	r3, [r2, #12]
 8002da4:	e014      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f867 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02f      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dea:	4928      	ldr	r1, [pc, #160]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2102      	movs	r1, #2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f844 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
 8002e16:	e011      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3320      	adds	r3, #32
 8002e26:	2102      	movs	r1, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f925 	bl	8003078 <RCCEx_PLLSAI2_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e48:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e56:	490d      	ldr	r1, [pc, #52]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e7a:	4904      	ldr	r1, [pc, #16]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e9e:	4b75      	ldr	r3, [pc, #468]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eaa:	4b72      	ldr	r3, [pc, #456]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d047      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e044      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d018      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x86>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d825      	bhi.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x62>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d009      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x74>
 8002ef0:	e020      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef2:	4b60      	ldr	r3, [pc, #384]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e01a      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e013      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f16:	4b57      	ldr	r3, [pc, #348]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f22:	4b54      	ldr	r3, [pc, #336]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f32:	e006      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e004      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	4944      	ldr	r1, [pc, #272]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d17d      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f6c:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a40      	ldr	r2, [pc, #256]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe fa88 	bl	800148c <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f80:	f7fe fa84 	bl	800148c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
        break;
 8002f92:	e005      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f94:	4b37      	ldr	r3, [pc, #220]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ef      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d160      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d111      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fac:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	0211      	lsls	r1, r2, #8
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0912      	lsrs	r2, r2, #4
 8002fc4:	0452      	lsls	r2, r2, #17
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	492a      	ldr	r1, [pc, #168]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
 8002fce:	e027      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d112      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd6:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	0211      	lsls	r1, r2, #8
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6912      	ldr	r2, [r2, #16]
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0552      	lsls	r2, r2, #21
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	491f      	ldr	r1, [pc, #124]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
 8002ffa:	e011      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6952      	ldr	r2, [r2, #20]
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0652      	lsls	r2, r2, #25
 8003018:	430a      	orrs	r2, r1
 800301a:	4916      	ldr	r1, [pc, #88]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a13      	ldr	r2, [pc, #76]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800302a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fa2e 	bl	800148c <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003034:	f7fe fa2a 	bl	800148c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	73fb      	strb	r3, [r7, #15]
          break;
 8003046:	e005      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ef      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	4904      	ldr	r1, [pc, #16]	@ (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003086:	4b6a      	ldr	r3, [pc, #424]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003092:	4b67      	ldr	r3, [pc, #412]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0203 	and.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
       ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030aa:	4b61      	ldr	r3, [pc, #388]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
       ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d047      	beq.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e044      	b.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d018      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x86>
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d825      	bhi.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x62>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d009      	beq.n	80030ec <RCCEx_PLLSAI2_Config+0x74>
 80030d8:	e020      	b.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030da:	4b55      	ldr	r3, [pc, #340]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ea:	e01a      	b.n	8003122 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ec:	4b50      	ldr	r3, [pc, #320]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e013      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310a:	4b49      	ldr	r3, [pc, #292]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311a:	e006      	b.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e004      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800312a:	bf00      	nop
    }

    if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003132:	4b3f      	ldr	r3, [pc, #252]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	430b      	orrs	r3, r1
 8003148:	4939      	ldr	r1, [pc, #228]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d167      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003154:	4b36      	ldr	r3, [pc, #216]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a35      	ldr	r2, [pc, #212]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fe f994 	bl	800148c <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003166:	e009      	b.n	800317c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003168:	f7fe f990 	bl	800148c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	73fb      	strb	r3, [r7, #15]
        break;
 800317a:	e005      	b.n	8003188 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317c:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ef      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d14a      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	0912      	lsrs	r2, r2, #4
 80031ac:	0452      	lsls	r2, r2, #17
 80031ae:	430a      	orrs	r2, r1
 80031b0:	491f      	ldr	r1, [pc, #124]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	614b      	str	r3, [r1, #20]
 80031b6:	e011      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	0211      	lsls	r1, r2, #8
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6912      	ldr	r2, [r2, #16]
 80031ce:	0852      	lsrs	r2, r2, #1
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0652      	lsls	r2, r2, #25
 80031d4:	430a      	orrs	r2, r1
 80031d6:	4916      	ldr	r1, [pc, #88]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f950 	bl	800148c <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ee:	e009      	b.n	8003204 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031f0:	f7fe f94c 	bl	800148c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	73fb      	strb	r3, [r7, #15]
          break;
 8003202:	e005      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4904      	ldr	r1, [pc, #16]	@ (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003220:	4313      	orrs	r3, r2
 8003222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e040      	b.n	80032c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd ff48 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fedc 	bl	8004038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fc21 	bl	8003ac8 <UART_SetConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e01b      	b.n	80032c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 ff5b 	bl	800417c <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d177      	bne.n	80033d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Transmit+0x24>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e070      	b.n	80033da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2221      	movs	r2, #33	@ 0x21
 8003304:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003306:	f7fe f8c1 	bl	800148c <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x68>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003340:	e02f      	b.n	80033a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 ffbd 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e03b      	b.n	80033da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003374:	b292      	uxth	r2, r2
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3302      	adds	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e007      	b.n	8003390 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3301      	adds	r3, #1
 800338e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1c9      	bne.n	8003342 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2140      	movs	r1, #64	@ 0x40
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 ff87 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e005      	b.n	80033da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d137      	bne.n	800346c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Receive_IT+0x24>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e030      	b.n	800346e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <HAL_UART_Receive_IT+0x94>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01f      	beq.n	800345c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	613b      	str	r3, [r7, #16]
   return(result);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69f9      	ldr	r1, [r7, #28]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	61bb      	str	r3, [r7, #24]
   return(result);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	461a      	mov	r2, r3
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 ffa0 	bl	80043a8 <UART_Start_Receive_IT>
 8003468:	4603      	mov	r3, r0
 800346a:	e000      	b.n	800346e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3728      	adds	r7, #40	@ 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40008000 	.word	0x40008000

0800347c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ba      	sub	sp, #232	@ 0xe8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80034a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80034aa:	4013      	ands	r3, r2
 80034ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80034b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 82ca 	beq.w	8003a6e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
      return;
 80034e2:	e2c4      	b.n	8003a6e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8117 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <HAL_UART_IRQHandler+0x298>)
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 810a 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d011      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8230 	beq.w	8003a72 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d005      	beq.n	800365e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04f      	beq.n	80036fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff68 	bl	8004534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d141      	bne.n	80036f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800368c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800369e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d9      	bne.n	8003672 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <HAL_UART_IRQHandler+0x29c>)
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f859 	bl	800178a <HAL_DMA_Abort_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00f      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9d4 	bl	8003a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00b      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9d0 	bl	8003a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e007      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9cc 	bl	8003a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800370c:	e1b1      	b.n	8003a72 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370e:	bf00      	nop
    return;
 8003710:	e1af      	b.n	8003a72 <HAL_UART_IRQHandler+0x5f6>
 8003712:	bf00      	nop
 8003714:	04000120 	.word	0x04000120
 8003718:	080045fd 	.word	0x080045fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 816a 	bne.w	80039fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8163 	beq.w	80039fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 815c 	beq.w	80039fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	f040 80d4 	bne.w	8003902 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003766:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80ad 	beq.w	80038ca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377a:	429a      	cmp	r2, r3
 800377c:	f080 80a5 	bcs.w	80038ca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003786:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8086 	bne.w	80038a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1da      	bne.n	800379c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800380a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800380e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800381c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e1      	bne.n	80037e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800384c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e3      	bne.n	8003822 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003878:	f023 0310 	bic.w	r3, r3, #16
 800387c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800388a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800388c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e4      	bne.n	8003868 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd ff33 	bl	800170e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8f4 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038c8:	e0d5      	b.n	8003a76 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 80ce 	bne.w	8003a76 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	f040 80c5 	bne.w	8003a76 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8d8 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
      return;
 8003900:	e0b9      	b.n	8003a76 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800390e:	b29b      	uxth	r3, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80ab 	beq.w	8003a7a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a6 	beq.w	8003a7a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003950:	647b      	str	r3, [r7, #68]	@ 0x44
 8003952:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800395e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e4      	bne.n	800392e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	623b      	str	r3, [r7, #32]
   return(result);
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003988:	633a      	str	r2, [r7, #48]	@ 0x30
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800398e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e3      	bne.n	8003964 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f023 0310 	bic.w	r3, r3, #16
 80039c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	617b      	str	r3, [r7, #20]
   return(result);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e4      	bne.n	80039b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f85c 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f8:	e03f      	b.n	8003a7a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00e      	beq.n	8003a24 <HAL_UART_IRQHandler+0x5a8>
 8003a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 ffe9 	bl	80049f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a22:	e02d      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
    }
    return;
 8003a4c:	e017      	b.n	8003a7e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_UART_IRQHandler+0x604>
 8003a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fdde 	bl	8004628 <UART_EndTransmit_IT>
    return;
 8003a6c:	e008      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
      return;
 8003a6e:	bf00      	nop
 8003a70:	e006      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
    return;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
      return;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
      return;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_IRQHandler+0x604>
    return;
 8003a7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a80:	37e8      	adds	r7, #232	@ 0xe8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b08a      	sub	sp, #40	@ 0x28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4ba4      	ldr	r3, [pc, #656]	@ (8003d88 <UART_SetConfig+0x2c0>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a99      	ldr	r2, [pc, #612]	@ (8003d8c <UART_SetConfig+0x2c4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b30:	4313      	orrs	r3, r2
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a90      	ldr	r2, [pc, #576]	@ (8003d90 <UART_SetConfig+0x2c8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d126      	bne.n	8003ba0 <UART_SetConfig+0xd8>
 8003b52:	4b90      	ldr	r3, [pc, #576]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d81b      	bhi.n	8003b98 <UART_SetConfig+0xd0>
 8003b60:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <UART_SetConfig+0xa0>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b89 	.word	0x08003b89
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b91 	.word	0x08003b91
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7e:	e116      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b86:	e112      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8e:	e10e      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b96:	e10a      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9e:	e106      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8003d98 <UART_SetConfig+0x2d0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d138      	bne.n	8003c1c <UART_SetConfig+0x154>
 8003baa:	4b7a      	ldr	r3, [pc, #488]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d82d      	bhi.n	8003c14 <UART_SetConfig+0x14c>
 8003bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <UART_SetConfig+0xf8>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003c15 	.word	0x08003c15
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e0d8      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e0d4      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c04:	2304      	movs	r3, #4
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e0d0      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e0cc      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e0c8      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5e      	ldr	r2, [pc, #376]	@ (8003d9c <UART_SetConfig+0x2d4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d125      	bne.n	8003c72 <UART_SetConfig+0x1aa>
 8003c26:	4b5b      	ldr	r3, [pc, #364]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c30:	2b30      	cmp	r3, #48	@ 0x30
 8003c32:	d016      	beq.n	8003c62 <UART_SetConfig+0x19a>
 8003c34:	2b30      	cmp	r3, #48	@ 0x30
 8003c36:	d818      	bhi.n	8003c6a <UART_SetConfig+0x1a2>
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d00a      	beq.n	8003c52 <UART_SetConfig+0x18a>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d814      	bhi.n	8003c6a <UART_SetConfig+0x1a2>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <UART_SetConfig+0x182>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d008      	beq.n	8003c5a <UART_SetConfig+0x192>
 8003c48:	e00f      	b.n	8003c6a <UART_SetConfig+0x1a2>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c50:	e0ad      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c52:	2302      	movs	r3, #2
 8003c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c58:	e0a9      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c60:	e0a5      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c62:	2308      	movs	r3, #8
 8003c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c68:	e0a1      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c6a:	2310      	movs	r3, #16
 8003c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c70:	e09d      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <UART_SetConfig+0x2d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d125      	bne.n	8003cc8 <UART_SetConfig+0x200>
 8003c7c:	4b45      	ldr	r3, [pc, #276]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c88:	d016      	beq.n	8003cb8 <UART_SetConfig+0x1f0>
 8003c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c8c:	d818      	bhi.n	8003cc0 <UART_SetConfig+0x1f8>
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d00a      	beq.n	8003ca8 <UART_SetConfig+0x1e0>
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d814      	bhi.n	8003cc0 <UART_SetConfig+0x1f8>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <UART_SetConfig+0x1d8>
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d008      	beq.n	8003cb0 <UART_SetConfig+0x1e8>
 8003c9e:	e00f      	b.n	8003cc0 <UART_SetConfig+0x1f8>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca6:	e082      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cae:	e07e      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb6:	e07a      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cbe:	e076      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc6:	e072      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a35      	ldr	r2, [pc, #212]	@ (8003da4 <UART_SetConfig+0x2dc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d12a      	bne.n	8003d28 <UART_SetConfig+0x260>
 8003cd2:	4b30      	ldr	r3, [pc, #192]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce0:	d01a      	beq.n	8003d18 <UART_SetConfig+0x250>
 8003ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce6:	d81b      	bhi.n	8003d20 <UART_SetConfig+0x258>
 8003ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cec:	d00c      	beq.n	8003d08 <UART_SetConfig+0x240>
 8003cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cf2:	d815      	bhi.n	8003d20 <UART_SetConfig+0x258>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <UART_SetConfig+0x238>
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfc:	d008      	beq.n	8003d10 <UART_SetConfig+0x248>
 8003cfe:	e00f      	b.n	8003d20 <UART_SetConfig+0x258>
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e052      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0e:	e04e      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d10:	2304      	movs	r3, #4
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d16:	e04a      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1e:	e046      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d20:	2310      	movs	r3, #16
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d26:	e042      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <UART_SetConfig+0x2c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d13a      	bne.n	8003da8 <UART_SetConfig+0x2e0>
 8003d32:	4b18      	ldr	r3, [pc, #96]	@ (8003d94 <UART_SetConfig+0x2cc>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d40:	d01a      	beq.n	8003d78 <UART_SetConfig+0x2b0>
 8003d42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d46:	d81b      	bhi.n	8003d80 <UART_SetConfig+0x2b8>
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d4c:	d00c      	beq.n	8003d68 <UART_SetConfig+0x2a0>
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d52:	d815      	bhi.n	8003d80 <UART_SetConfig+0x2b8>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <UART_SetConfig+0x298>
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d008      	beq.n	8003d70 <UART_SetConfig+0x2a8>
 8003d5e:	e00f      	b.n	8003d80 <UART_SetConfig+0x2b8>
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e022      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e01e      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e01a      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e016      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d86:	e012      	b.n	8003dae <UART_SetConfig+0x2e6>
 8003d88:	efff69f3 	.word	0xefff69f3
 8003d8c:	40008000 	.word	0x40008000
 8003d90:	40013800 	.word	0x40013800
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40004400 	.word	0x40004400
 8003d9c:	40004800 	.word	0x40004800
 8003da0:	40004c00 	.word	0x40004c00
 8003da4:	40005000 	.word	0x40005000
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a9f      	ldr	r2, [pc, #636]	@ (8004030 <UART_SetConfig+0x568>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d17a      	bne.n	8003eae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003db8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d824      	bhi.n	8003e0a <UART_SetConfig+0x342>
 8003dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <UART_SetConfig+0x300>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e0b 	.word	0x08003e0b
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003e0b 	.word	0x08003e0b
 8003dd8:	08003dfb 	.word	0x08003dfb
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e0b 	.word	0x08003e0b
 8003de8:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fcda 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e010      	b.n	8003e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b8f      	ldr	r3, [pc, #572]	@ (8004034 <UART_SetConfig+0x56c>)
 8003df6:	61fb      	str	r3, [r7, #28]
        break;
 8003df8:	e00d      	b.n	8003e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe fc3b 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003dfe:	61f8      	str	r0, [r7, #28]
        break;
 8003e00:	e009      	b.n	8003e16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e06:	61fb      	str	r3, [r7, #28]
        break;
 8003e08:	e005      	b.n	8003e16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80fb 	beq.w	8004014 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d305      	bcc.n	8003e3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e40:	e0e8      	b.n	8004014 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2200      	movs	r2, #0
 8003e46:	461c      	mov	r4, r3
 8003e48:	4615      	mov	r5, r2
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	022b      	lsls	r3, r5, #8
 8003e54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e58:	0222      	lsls	r2, r4, #8
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	6849      	ldr	r1, [r1, #4]
 8003e5e:	0849      	lsrs	r1, r1, #1
 8003e60:	2000      	movs	r0, #0
 8003e62:	4688      	mov	r8, r1
 8003e64:	4681      	mov	r9, r0
 8003e66:	eb12 0a08 	adds.w	sl, r2, r8
 8003e6a:	eb43 0b09 	adc.w	fp, r3, r9
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e7c:	4650      	mov	r0, sl
 8003e7e:	4659      	mov	r1, fp
 8003e80:	f7fc f9fe 	bl	8000280 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e92:	d308      	bcc.n	8003ea6 <UART_SetConfig+0x3de>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9a:	d204      	bcs.n	8003ea6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e0b6      	b.n	8004014 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eac:	e0b2      	b.n	8004014 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb6:	d15e      	bne.n	8003f76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d828      	bhi.n	8003f12 <UART_SetConfig+0x44a>
 8003ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <UART_SetConfig+0x400>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe fc5a 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	61f8      	str	r0, [r7, #28]
        break;
 8003ef2:	e014      	b.n	8003f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fc6c 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	61f8      	str	r0, [r7, #28]
        break;
 8003efa:	e010      	b.n	8003f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b4d      	ldr	r3, [pc, #308]	@ (8004034 <UART_SetConfig+0x56c>)
 8003efe:	61fb      	str	r3, [r7, #28]
        break;
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe fbb7 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003f06:	61f8      	str	r0, [r7, #28]
        break;
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d077      	beq.n	8004014 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005a      	lsls	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0f      	cmp	r3, #15
 8003f3e:	d916      	bls.n	8003f6e <UART_SetConfig+0x4a6>
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f46:	d212      	bcs.n	8003f6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	8afa      	ldrh	r2, [r7, #22]
 8003f6a:	60da      	str	r2, [r3, #12]
 8003f6c:	e052      	b.n	8004014 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f74:	e04e      	b.n	8004014 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d827      	bhi.n	8003fce <UART_SetConfig+0x506>
 8003f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <UART_SetConfig+0x4bc>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fcf 	.word	0x08003fcf
 8003f94:	08003fbf 	.word	0x08003fbf
 8003f98:	08003fcf 	.word	0x08003fcf
 8003f9c:	08003fcf 	.word	0x08003fcf
 8003fa0:	08003fcf 	.word	0x08003fcf
 8003fa4:	08003fc7 	.word	0x08003fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7fe fbfc 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003fac:	61f8      	str	r0, [r7, #28]
        break;
 8003fae:	e014      	b.n	8003fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7fe fc0e 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	61f8      	str	r0, [r7, #28]
        break;
 8003fb6:	e010      	b.n	8003fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <UART_SetConfig+0x56c>)
 8003fba:	61fb      	str	r3, [r7, #28]
        break;
 8003fbc:	e00d      	b.n	8003fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe fb59 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003fc2:	61f8      	str	r0, [r7, #28]
        break;
 8003fc4:	e009      	b.n	8003fda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fca:	61fb      	str	r3, [r7, #28]
        break;
 8003fcc:	e005      	b.n	8003fda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d019      	beq.n	8004014 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	085a      	lsrs	r2, r3, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	441a      	add	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	d909      	bls.n	800400e <UART_SetConfig+0x546>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004000:	d205      	bcs.n	800400e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e002      	b.n	8004014 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004020:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	@ 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402e:	bf00      	nop
 8004030:	40008000 	.word	0x40008000
 8004034:	00f42400 	.word	0x00f42400

08004038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01a      	beq.n	800414e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004136:	d10a      	bne.n	800414e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b098      	sub	sp, #96	@ 0x60
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800418c:	f7fd f97e 	bl	800148c <HAL_GetTick>
 8004190:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d12e      	bne.n	80041fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	2200      	movs	r2, #0
 80041aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f88c 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d021      	beq.n	80041fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e062      	b.n	80042c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d149      	bne.n	80042a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f856 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03c      	beq.n	80042a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	623b      	str	r3, [r7, #32]
   return(result);
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800423a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004244:	633b      	str	r3, [r7, #48]	@ 0x30
 8004246:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800424a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	60fb      	str	r3, [r7, #12]
   return(result);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	617b      	str	r3, [r7, #20]
   return(result);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e011      	b.n	80042c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3758      	adds	r7, #88	@ 0x58
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	e04f      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e4:	d04b      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fd f8d1 	bl	800148c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e04e      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d037      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b80      	cmp	r3, #128	@ 0x80
 8004312:	d034      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d031      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b08      	cmp	r3, #8
 8004326:	d110      	bne.n	800434a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2208      	movs	r2, #8
 800432e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f8ff 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2208      	movs	r2, #8
 800433a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e029      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004358:	d111      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f8e5 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e00f      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	bf0c      	ite	eq
 800438e:	2301      	moveq	r3, #1
 8004390:	2300      	movne	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	429a      	cmp	r2, r3
 800439a:	d0a0      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b097      	sub	sp, #92	@ 0x5c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043da:	d10e      	bne.n	80043fa <UART_Start_Receive_IT+0x52>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <UART_Start_Receive_IT+0x48>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80043ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043ee:	e02d      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22ff      	movs	r2, #255	@ 0xff
 80043f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043f8:	e028      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <UART_Start_Receive_IT+0x76>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <UART_Start_Receive_IT+0x6c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004412:	e01b      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	227f      	movs	r2, #127	@ 0x7f
 8004418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800441c:	e016      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004426:	d10d      	bne.n	8004444 <UART_Start_Receive_IT+0x9c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <UART_Start_Receive_IT+0x92>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	227f      	movs	r2, #127	@ 0x7f
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004438:	e008      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	223f      	movs	r2, #63	@ 0x3f
 800443e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004442:	e003      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2222      	movs	r2, #34	@ 0x22
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800446c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	657b      	str	r3, [r7, #84]	@ 0x54
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800447c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800447e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800448a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	d107      	bne.n	80044aa <UART_Start_Receive_IT+0x102>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a21      	ldr	r2, [pc, #132]	@ (800452c <UART_Start_Receive_IT+0x184>)
 80044a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80044a8:	e002      	b.n	80044b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <UART_Start_Receive_IT+0x188>)
 80044ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d019      	beq.n	80044ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80044cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <UART_Start_Receive_IT+0x110>
 80044ea:	e018      	b.n	800451e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f043 0320 	orr.w	r3, r3, #32
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69f9      	ldr	r1, [r7, #28]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	61bb      	str	r3, [r7, #24]
   return(result);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e6      	bne.n	80044ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	375c      	adds	r7, #92	@ 0x5c
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	08004839 	.word	0x08004839
 8004530:	0800467d 	.word	0x0800467d

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b095      	sub	sp, #84	@ 0x54
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455a:	643b      	str	r3, [r7, #64]	@ 0x40
 800455c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	61fb      	str	r3, [r7, #28]
   return(result);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800458e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d118      	bne.n	80045dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	613b      	str	r3, [r7, #16]
   return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e6      	bne.n	80045aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045f0:	bf00      	nop
 80045f2:	3754      	adds	r7, #84	@ 0x54
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fa3e 	bl	8003a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	60bb      	str	r3, [r7, #8]
   return(result);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	613b      	str	r3, [r7, #16]
   return(result);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e6      	bne.n	8004630 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fa0a 	bl	8003a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004674:	bf00      	nop
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b09c      	sub	sp, #112	@ 0x70
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800468a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004694:	2b22      	cmp	r3, #34	@ 0x22
 8004696:	f040 80be 	bne.w	8004816 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80046a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046a8:	b2d9      	uxtb	r1, r3
 80046aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	400a      	ands	r2, r1
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 80a3 	bne.w	800482a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004704:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004708:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	667b      	str	r3, [r7, #100]	@ 0x64
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004736:	647a      	str	r2, [r7, #68]	@ 0x44
 8004738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800473c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a34      	ldr	r2, [pc, #208]	@ (8004834 <UART_RxISR_8BIT+0x1b8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01f      	beq.n	80047a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d018      	beq.n	80047a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	623b      	str	r3, [r7, #32]
   return(result);
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800478a:	663b      	str	r3, [r7, #96]	@ 0x60
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
 8004796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800479a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d12e      	bne.n	800480e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	617b      	str	r3, [r7, #20]
   return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d103      	bne.n	80047fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2210      	movs	r2, #16
 80047fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff f952 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800480c:	e00d      	b.n	800482a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fb feae 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8004814:	e009      	b.n	800482a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	8b1b      	ldrh	r3, [r3, #24]
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	b292      	uxth	r2, r2
 8004828:	831a      	strh	r2, [r3, #24]
}
 800482a:	bf00      	nop
 800482c:	3770      	adds	r7, #112	@ 0x70
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40008000 	.word	0x40008000

08004838 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b09c      	sub	sp, #112	@ 0x70
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004846:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004850:	2b22      	cmp	r3, #34	@ 0x22
 8004852:	f040 80be 	bne.w	80049d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800485c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004864:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004866:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800486a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800486e:	4013      	ands	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004874:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80a3 	bne.w	80049e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048be:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80048cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a34      	ldr	r2, [pc, #208]	@ (80049f0 <UART_RxISR_16BIT+0x1b8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01f      	beq.n	8004964 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004952:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	2b01      	cmp	r3, #1
 800496a:	d12e      	bne.n	80049ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	613b      	str	r3, [r7, #16]
   return(result);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d103      	bne.n	80049ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2210      	movs	r2, #16
 80049b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff f874 	bl	8003ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049c8:	e00d      	b.n	80049e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fb fdd0 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 80049d0:	e009      	b.n	80049e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	8b1b      	ldrh	r3, [r3, #24]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	b292      	uxth	r2, r2
 80049e4:	831a      	strh	r2, [r3, #24]
}
 80049e6:	bf00      	nop
 80049e8:	3770      	adds	r7, #112	@ 0x70
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40008000 	.word	0x40008000

080049f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <siprintf>:
 8004a08:	b40e      	push	{r1, r2, r3}
 8004a0a:	b500      	push	{lr}
 8004a0c:	b09c      	sub	sp, #112	@ 0x70
 8004a0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a10:	9002      	str	r0, [sp, #8]
 8004a12:	9006      	str	r0, [sp, #24]
 8004a14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a18:	4809      	ldr	r0, [pc, #36]	@ (8004a40 <siprintf+0x38>)
 8004a1a:	9107      	str	r1, [sp, #28]
 8004a1c:	9104      	str	r1, [sp, #16]
 8004a1e:	4909      	ldr	r1, [pc, #36]	@ (8004a44 <siprintf+0x3c>)
 8004a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a24:	9105      	str	r1, [sp, #20]
 8004a26:	6800      	ldr	r0, [r0, #0]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	a902      	add	r1, sp, #8
 8004a2c:	f000 f92c 	bl	8004c88 <_svfiprintf_r>
 8004a30:	9b02      	ldr	r3, [sp, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	b01c      	add	sp, #112	@ 0x70
 8004a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a3c:	b003      	add	sp, #12
 8004a3e:	4770      	bx	lr
 8004a40:	20000010 	.word	0x20000010
 8004a44:	ffff0208 	.word	0xffff0208

08004a48 <siscanf>:
 8004a48:	b40e      	push	{r1, r2, r3}
 8004a4a:	b530      	push	{r4, r5, lr}
 8004a4c:	b09c      	sub	sp, #112	@ 0x70
 8004a4e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004a50:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004a54:	f854 5b04 	ldr.w	r5, [r4], #4
 8004a58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	9006      	str	r0, [sp, #24]
 8004a60:	f7fb fbb6 	bl	80001d0 <strlen>
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <siscanf+0x4c>)
 8004a66:	9003      	str	r0, [sp, #12]
 8004a68:	9007      	str	r0, [sp, #28]
 8004a6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a6c:	480a      	ldr	r0, [pc, #40]	@ (8004a98 <siscanf+0x50>)
 8004a6e:	9401      	str	r4, [sp, #4]
 8004a70:	2300      	movs	r3, #0
 8004a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a74:	9314      	str	r3, [sp, #80]	@ 0x50
 8004a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a7e:	462a      	mov	r2, r5
 8004a80:	4623      	mov	r3, r4
 8004a82:	a902      	add	r1, sp, #8
 8004a84:	6800      	ldr	r0, [r0, #0]
 8004a86:	f000 fa53 	bl	8004f30 <__ssvfiscanf_r>
 8004a8a:	b01c      	add	sp, #112	@ 0x70
 8004a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a90:	b003      	add	sp, #12
 8004a92:	4770      	bx	lr
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	20000010 	.word	0x20000010

08004a9c <__seofread>:
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr

08004aa0 <strncmp>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	b16a      	cbz	r2, 8004ac0 <strncmp+0x20>
 8004aa4:	3901      	subs	r1, #1
 8004aa6:	1884      	adds	r4, r0, r2
 8004aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d103      	bne.n	8004abc <strncmp+0x1c>
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d001      	beq.n	8004abc <strncmp+0x1c>
 8004ab8:	2a00      	cmp	r2, #0
 8004aba:	d1f5      	bne.n	8004aa8 <strncmp+0x8>
 8004abc:	1ad0      	subs	r0, r2, r3
 8004abe:	bd10      	pop	{r4, pc}
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	e7fc      	b.n	8004abe <strncmp+0x1e>

08004ac4 <memset>:
 8004ac4:	4402      	add	r2, r0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d100      	bne.n	8004ace <memset+0xa>
 8004acc:	4770      	bx	lr
 8004ace:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad2:	e7f9      	b.n	8004ac8 <memset+0x4>

08004ad4 <__errno>:
 8004ad4:	4b01      	ldr	r3, [pc, #4]	@ (8004adc <__errno+0x8>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8004b18 <__libc_init_array+0x38>)
 8004ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8004b1c <__libc_init_array+0x3c>)
 8004ae6:	1b64      	subs	r4, r4, r5
 8004ae8:	10a4      	asrs	r4, r4, #2
 8004aea:	2600      	movs	r6, #0
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	4d0b      	ldr	r5, [pc, #44]	@ (8004b20 <__libc_init_array+0x40>)
 8004af2:	4c0c      	ldr	r4, [pc, #48]	@ (8004b24 <__libc_init_array+0x44>)
 8004af4:	f001 f8e8 	bl	8005cc8 <_init>
 8004af8:	1b64      	subs	r4, r4, r5
 8004afa:	10a4      	asrs	r4, r4, #2
 8004afc:	2600      	movs	r6, #0
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	0800611c 	.word	0x0800611c
 8004b1c:	0800611c 	.word	0x0800611c
 8004b20:	0800611c 	.word	0x0800611c
 8004b24:	08006120 	.word	0x08006120

08004b28 <__retarget_lock_acquire_recursive>:
 8004b28:	4770      	bx	lr

08004b2a <__retarget_lock_release_recursive>:
 8004b2a:	4770      	bx	lr

08004b2c <strcpy>:
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b32:	f803 2b01 	strb.w	r2, [r3], #1
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1f9      	bne.n	8004b2e <strcpy+0x2>
 8004b3a:	4770      	bx	lr

08004b3c <_free_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d041      	beq.n	8004bc8 <_free_r+0x8c>
 8004b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b48:	1f0c      	subs	r4, r1, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	18e4      	addlt	r4, r4, r3
 8004b50:	f000 ff1a 	bl	8005988 <__malloc_lock>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <_free_r+0x90>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	b933      	cbnz	r3, 8004b68 <_free_r+0x2c>
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6014      	str	r4, [r2, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b64:	f000 bf16 	b.w	8005994 <__malloc_unlock>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d908      	bls.n	8004b7e <_free_r+0x42>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf01      	itttt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	e7ed      	b.n	8004b5a <_free_r+0x1e>
 8004b7e:	461a      	mov	r2, r3
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b10b      	cbz	r3, 8004b88 <_free_r+0x4c>
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d9fa      	bls.n	8004b7e <_free_r+0x42>
 8004b88:	6811      	ldr	r1, [r2, #0]
 8004b8a:	1850      	adds	r0, r2, r1
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d10b      	bne.n	8004ba8 <_free_r+0x6c>
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	4401      	add	r1, r0
 8004b94:	1850      	adds	r0, r2, r1
 8004b96:	4283      	cmp	r3, r0
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	d1e0      	bne.n	8004b5e <_free_r+0x22>
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	4408      	add	r0, r1
 8004ba4:	6010      	str	r0, [r2, #0]
 8004ba6:	e7da      	b.n	8004b5e <_free_r+0x22>
 8004ba8:	d902      	bls.n	8004bb0 <_free_r+0x74>
 8004baa:	230c      	movs	r3, #12
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	e7d6      	b.n	8004b5e <_free_r+0x22>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	1821      	adds	r1, r4, r0
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf04      	itt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	bf04      	itt	eq
 8004bc0:	1809      	addeq	r1, r1, r0
 8004bc2:	6021      	streq	r1, [r4, #0]
 8004bc4:	6054      	str	r4, [r2, #4]
 8004bc6:	e7ca      	b.n	8004b5e <_free_r+0x22>
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000330 	.word	0x20000330

08004bd0 <__ssputs_r>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	688e      	ldr	r6, [r1, #8]
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	42be      	cmp	r6, r7
 8004bda:	680b      	ldr	r3, [r1, #0]
 8004bdc:	4682      	mov	sl, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	4690      	mov	r8, r2
 8004be2:	d82d      	bhi.n	8004c40 <__ssputs_r+0x70>
 8004be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004be8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bec:	d026      	beq.n	8004c3c <__ssputs_r+0x6c>
 8004bee:	6965      	ldr	r5, [r4, #20]
 8004bf0:	6909      	ldr	r1, [r1, #16]
 8004bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf6:	eba3 0901 	sub.w	r9, r3, r1
 8004bfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bfe:	1c7b      	adds	r3, r7, #1
 8004c00:	444b      	add	r3, r9
 8004c02:	106d      	asrs	r5, r5, #1
 8004c04:	429d      	cmp	r5, r3
 8004c06:	bf38      	it	cc
 8004c08:	461d      	movcc	r5, r3
 8004c0a:	0553      	lsls	r3, r2, #21
 8004c0c:	d527      	bpl.n	8004c5e <__ssputs_r+0x8e>
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f000 fb24 	bl	800525c <_malloc_r>
 8004c14:	4606      	mov	r6, r0
 8004c16:	b360      	cbz	r0, 8004c72 <__ssputs_r+0xa2>
 8004c18:	6921      	ldr	r1, [r4, #16]
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	f001 f83e 	bl	8005c9c <memcpy>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6126      	str	r6, [r4, #16]
 8004c2e:	6165      	str	r5, [r4, #20]
 8004c30:	444e      	add	r6, r9
 8004c32:	eba5 0509 	sub.w	r5, r5, r9
 8004c36:	6026      	str	r6, [r4, #0]
 8004c38:	60a5      	str	r5, [r4, #8]
 8004c3a:	463e      	mov	r6, r7
 8004c3c:	42be      	cmp	r6, r7
 8004c3e:	d900      	bls.n	8004c42 <__ssputs_r+0x72>
 8004c40:	463e      	mov	r6, r7
 8004c42:	6820      	ldr	r0, [r4, #0]
 8004c44:	4632      	mov	r2, r6
 8004c46:	4641      	mov	r1, r8
 8004c48:	f000 fffe 	bl	8005c48 <memmove>
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	1b9b      	subs	r3, r3, r6
 8004c50:	60a3      	str	r3, [r4, #8]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	4433      	add	r3, r6
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5e:	462a      	mov	r2, r5
 8004c60:	f000 fed8 	bl	8005a14 <_realloc_r>
 8004c64:	4606      	mov	r6, r0
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d1e0      	bne.n	8004c2c <__ssputs_r+0x5c>
 8004c6a:	6921      	ldr	r1, [r4, #16]
 8004c6c:	4650      	mov	r0, sl
 8004c6e:	f7ff ff65 	bl	8004b3c <_free_r>
 8004c72:	230c      	movs	r3, #12
 8004c74:	f8ca 3000 	str.w	r3, [sl]
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c84:	e7e9      	b.n	8004c5a <__ssputs_r+0x8a>
	...

08004c88 <_svfiprintf_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	4698      	mov	r8, r3
 8004c8e:	898b      	ldrh	r3, [r1, #12]
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	b09d      	sub	sp, #116	@ 0x74
 8004c94:	4607      	mov	r7, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	4614      	mov	r4, r2
 8004c9a:	d510      	bpl.n	8004cbe <_svfiprintf_r+0x36>
 8004c9c:	690b      	ldr	r3, [r1, #16]
 8004c9e:	b973      	cbnz	r3, 8004cbe <_svfiprintf_r+0x36>
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	f000 fadb 	bl	800525c <_malloc_r>
 8004ca6:	6028      	str	r0, [r5, #0]
 8004ca8:	6128      	str	r0, [r5, #16]
 8004caa:	b930      	cbnz	r0, 8004cba <_svfiprintf_r+0x32>
 8004cac:	230c      	movs	r3, #12
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cb4:	b01d      	add	sp, #116	@ 0x74
 8004cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cba:	2340      	movs	r3, #64	@ 0x40
 8004cbc:	616b      	str	r3, [r5, #20]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ccc:	2330      	movs	r3, #48	@ 0x30
 8004cce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e6c <_svfiprintf_r+0x1e4>
 8004cd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cd6:	f04f 0901 	mov.w	r9, #1
 8004cda:	4623      	mov	r3, r4
 8004cdc:	469a      	mov	sl, r3
 8004cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce2:	b10a      	cbz	r2, 8004ce8 <_svfiprintf_r+0x60>
 8004ce4:	2a25      	cmp	r2, #37	@ 0x25
 8004ce6:	d1f9      	bne.n	8004cdc <_svfiprintf_r+0x54>
 8004ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cec:	d00b      	beq.n	8004d06 <_svfiprintf_r+0x7e>
 8004cee:	465b      	mov	r3, fp
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff ff6b 	bl	8004bd0 <__ssputs_r>
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f000 80a7 	beq.w	8004e4e <_svfiprintf_r+0x1c6>
 8004d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d02:	445a      	add	r2, fp
 8004d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d06:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 809f 	beq.w	8004e4e <_svfiprintf_r+0x1c6>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d1a:	f10a 0a01 	add.w	sl, sl, #1
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d26:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d28:	4654      	mov	r4, sl
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d30:	484e      	ldr	r0, [pc, #312]	@ (8004e6c <_svfiprintf_r+0x1e4>)
 8004d32:	f7fb fa55 	bl	80001e0 <memchr>
 8004d36:	9a04      	ldr	r2, [sp, #16]
 8004d38:	b9d8      	cbnz	r0, 8004d72 <_svfiprintf_r+0xea>
 8004d3a:	06d0      	lsls	r0, r2, #27
 8004d3c:	bf44      	itt	mi
 8004d3e:	2320      	movmi	r3, #32
 8004d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d44:	0711      	lsls	r1, r2, #28
 8004d46:	bf44      	itt	mi
 8004d48:	232b      	movmi	r3, #43	@ 0x2b
 8004d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d54:	d015      	beq.n	8004d82 <_svfiprintf_r+0xfa>
 8004d56:	9a07      	ldr	r2, [sp, #28]
 8004d58:	4654      	mov	r4, sl
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f04f 0c0a 	mov.w	ip, #10
 8004d60:	4621      	mov	r1, r4
 8004d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d66:	3b30      	subs	r3, #48	@ 0x30
 8004d68:	2b09      	cmp	r3, #9
 8004d6a:	d94b      	bls.n	8004e04 <_svfiprintf_r+0x17c>
 8004d6c:	b1b0      	cbz	r0, 8004d9c <_svfiprintf_r+0x114>
 8004d6e:	9207      	str	r2, [sp, #28]
 8004d70:	e014      	b.n	8004d9c <_svfiprintf_r+0x114>
 8004d72:	eba0 0308 	sub.w	r3, r0, r8
 8004d76:	fa09 f303 	lsl.w	r3, r9, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	46a2      	mov	sl, r4
 8004d80:	e7d2      	b.n	8004d28 <_svfiprintf_r+0xa0>
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	9103      	str	r1, [sp, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfbb      	ittet	lt
 8004d8e:	425b      	neglt	r3, r3
 8004d90:	f042 0202 	orrlt.w	r2, r2, #2
 8004d94:	9307      	strge	r3, [sp, #28]
 8004d96:	9307      	strlt	r3, [sp, #28]
 8004d98:	bfb8      	it	lt
 8004d9a:	9204      	strlt	r2, [sp, #16]
 8004d9c:	7823      	ldrb	r3, [r4, #0]
 8004d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004da0:	d10a      	bne.n	8004db8 <_svfiprintf_r+0x130>
 8004da2:	7863      	ldrb	r3, [r4, #1]
 8004da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004da6:	d132      	bne.n	8004e0e <_svfiprintf_r+0x186>
 8004da8:	9b03      	ldr	r3, [sp, #12]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004db4:	3402      	adds	r4, #2
 8004db6:	9305      	str	r3, [sp, #20]
 8004db8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e7c <_svfiprintf_r+0x1f4>
 8004dbc:	7821      	ldrb	r1, [r4, #0]
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	4650      	mov	r0, sl
 8004dc2:	f7fb fa0d 	bl	80001e0 <memchr>
 8004dc6:	b138      	cbz	r0, 8004dd8 <_svfiprintf_r+0x150>
 8004dc8:	9b04      	ldr	r3, [sp, #16]
 8004dca:	eba0 000a 	sub.w	r0, r0, sl
 8004dce:	2240      	movs	r2, #64	@ 0x40
 8004dd0:	4082      	lsls	r2, r0
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	3401      	adds	r4, #1
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ddc:	4824      	ldr	r0, [pc, #144]	@ (8004e70 <_svfiprintf_r+0x1e8>)
 8004dde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004de2:	2206      	movs	r2, #6
 8004de4:	f7fb f9fc 	bl	80001e0 <memchr>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d036      	beq.n	8004e5a <_svfiprintf_r+0x1d2>
 8004dec:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <_svfiprintf_r+0x1ec>)
 8004dee:	bb1b      	cbnz	r3, 8004e38 <_svfiprintf_r+0x1b0>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	3307      	adds	r3, #7
 8004df4:	f023 0307 	bic.w	r3, r3, #7
 8004df8:	3308      	adds	r3, #8
 8004dfa:	9303      	str	r3, [sp, #12]
 8004dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfe:	4433      	add	r3, r6
 8004e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e02:	e76a      	b.n	8004cda <_svfiprintf_r+0x52>
 8004e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e08:	460c      	mov	r4, r1
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	e7a8      	b.n	8004d60 <_svfiprintf_r+0xd8>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	3401      	adds	r4, #1
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	4619      	mov	r1, r3
 8004e16:	f04f 0c0a 	mov.w	ip, #10
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e20:	3a30      	subs	r2, #48	@ 0x30
 8004e22:	2a09      	cmp	r2, #9
 8004e24:	d903      	bls.n	8004e2e <_svfiprintf_r+0x1a6>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0c6      	beq.n	8004db8 <_svfiprintf_r+0x130>
 8004e2a:	9105      	str	r1, [sp, #20]
 8004e2c:	e7c4      	b.n	8004db8 <_svfiprintf_r+0x130>
 8004e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e32:	4604      	mov	r4, r0
 8004e34:	2301      	movs	r3, #1
 8004e36:	e7f0      	b.n	8004e1a <_svfiprintf_r+0x192>
 8004e38:	ab03      	add	r3, sp, #12
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	462a      	mov	r2, r5
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <_svfiprintf_r+0x1f0>)
 8004e40:	a904      	add	r1, sp, #16
 8004e42:	4638      	mov	r0, r7
 8004e44:	f3af 8000 	nop.w
 8004e48:	1c42      	adds	r2, r0, #1
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	d1d6      	bne.n	8004dfc <_svfiprintf_r+0x174>
 8004e4e:	89ab      	ldrh	r3, [r5, #12]
 8004e50:	065b      	lsls	r3, r3, #25
 8004e52:	f53f af2d 	bmi.w	8004cb0 <_svfiprintf_r+0x28>
 8004e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e58:	e72c      	b.n	8004cb4 <_svfiprintf_r+0x2c>
 8004e5a:	ab03      	add	r3, sp, #12
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	462a      	mov	r2, r5
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <_svfiprintf_r+0x1f0>)
 8004e62:	a904      	add	r1, sp, #16
 8004e64:	4638      	mov	r0, r7
 8004e66:	f000 fae7 	bl	8005438 <_printf_i>
 8004e6a:	e7ed      	b.n	8004e48 <_svfiprintf_r+0x1c0>
 8004e6c:	08005fc4 	.word	0x08005fc4
 8004e70:	08005fce 	.word	0x08005fce
 8004e74:	00000000 	.word	0x00000000
 8004e78:	08004bd1 	.word	0x08004bd1
 8004e7c:	08005fca 	.word	0x08005fca

08004e80 <_sungetc_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	1c4b      	adds	r3, r1, #1
 8004e84:	4614      	mov	r4, r2
 8004e86:	d103      	bne.n	8004e90 <_sungetc_r+0x10>
 8004e88:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	8993      	ldrh	r3, [r2, #12]
 8004e92:	f023 0320 	bic.w	r3, r3, #32
 8004e96:	8193      	strh	r3, [r2, #12]
 8004e98:	6853      	ldr	r3, [r2, #4]
 8004e9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e9c:	b2cd      	uxtb	r5, r1
 8004e9e:	b18a      	cbz	r2, 8004ec4 <_sungetc_r+0x44>
 8004ea0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	dd08      	ble.n	8004eb8 <_sungetc_r+0x38>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004eb0:	6863      	ldr	r3, [r4, #4]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	e7e9      	b.n	8004e8c <_sungetc_r+0xc>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f000 fd71 	bl	80059a0 <__submore>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d0f1      	beq.n	8004ea6 <_sungetc_r+0x26>
 8004ec2:	e7e1      	b.n	8004e88 <_sungetc_r+0x8>
 8004ec4:	6921      	ldr	r1, [r4, #16]
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	b141      	cbz	r1, 8004edc <_sungetc_r+0x5c>
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	d206      	bcs.n	8004edc <_sungetc_r+0x5c>
 8004ece:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004ed2:	42a9      	cmp	r1, r5
 8004ed4:	d102      	bne.n	8004edc <_sungetc_r+0x5c>
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	6022      	str	r2, [r4, #0]
 8004eda:	e7ea      	b.n	8004eb2 <_sungetc_r+0x32>
 8004edc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004ee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004eea:	4623      	mov	r3, r4
 8004eec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e7de      	b.n	8004eb4 <_sungetc_r+0x34>

08004ef6 <__ssrefill_r>:
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	460c      	mov	r4, r1
 8004efa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004efc:	b169      	cbz	r1, 8004f1a <__ssrefill_r+0x24>
 8004efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d001      	beq.n	8004f0a <__ssrefill_r+0x14>
 8004f06:	f7ff fe19 	bl	8004b3c <_free_r>
 8004f0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	2000      	movs	r0, #0
 8004f10:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f12:	b113      	cbz	r3, 8004f1a <__ssrefill_r+0x24>
 8004f14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f2e:	e7f3      	b.n	8004f18 <__ssrefill_r+0x22>

08004f30 <__ssvfiscanf_r>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	460c      	mov	r4, r1
 8004f36:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004f40:	49a5      	ldr	r1, [pc, #660]	@ (80051d8 <__ssvfiscanf_r+0x2a8>)
 8004f42:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004f44:	f10d 0804 	add.w	r8, sp, #4
 8004f48:	49a4      	ldr	r1, [pc, #656]	@ (80051dc <__ssvfiscanf_r+0x2ac>)
 8004f4a:	4fa5      	ldr	r7, [pc, #660]	@ (80051e0 <__ssvfiscanf_r+0x2b0>)
 8004f4c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004f50:	4606      	mov	r6, r0
 8004f52:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	7813      	ldrb	r3, [r2, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8158 	beq.w	800520e <__ssvfiscanf_r+0x2de>
 8004f5e:	5cf9      	ldrb	r1, [r7, r3]
 8004f60:	f011 0108 	ands.w	r1, r1, #8
 8004f64:	f102 0501 	add.w	r5, r2, #1
 8004f68:	d019      	beq.n	8004f9e <__ssvfiscanf_r+0x6e>
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dd0f      	ble.n	8004f90 <__ssvfiscanf_r+0x60>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	5cba      	ldrb	r2, [r7, r2]
 8004f76:	0712      	lsls	r2, r2, #28
 8004f78:	d401      	bmi.n	8004f7e <__ssvfiscanf_r+0x4e>
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	e7eb      	b.n	8004f56 <__ssvfiscanf_r+0x26>
 8004f7e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004f80:	3201      	adds	r2, #1
 8004f82:	9245      	str	r2, [sp, #276]	@ 0x114
 8004f84:	6862      	ldr	r2, [r4, #4]
 8004f86:	3301      	adds	r3, #1
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	6062      	str	r2, [r4, #4]
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	e7ec      	b.n	8004f6a <__ssvfiscanf_r+0x3a>
 8004f90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004f92:	4621      	mov	r1, r4
 8004f94:	4630      	mov	r0, r6
 8004f96:	4798      	blx	r3
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d0e9      	beq.n	8004f70 <__ssvfiscanf_r+0x40>
 8004f9c:	e7ed      	b.n	8004f7a <__ssvfiscanf_r+0x4a>
 8004f9e:	2b25      	cmp	r3, #37	@ 0x25
 8004fa0:	d012      	beq.n	8004fc8 <__ssvfiscanf_r+0x98>
 8004fa2:	4699      	mov	r9, r3
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f340 8093 	ble.w	80050d2 <__ssvfiscanf_r+0x1a2>
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	7813      	ldrb	r3, [r2, #0]
 8004fb0:	454b      	cmp	r3, r9
 8004fb2:	f040 812c 	bne.w	800520e <__ssvfiscanf_r+0x2de>
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	9345      	str	r3, [sp, #276]	@ 0x114
 8004fc6:	e7d8      	b.n	8004f7a <__ssvfiscanf_r+0x4a>
 8004fc8:	9141      	str	r1, [sp, #260]	@ 0x104
 8004fca:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004fcc:	7853      	ldrb	r3, [r2, #1]
 8004fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd0:	bf02      	ittt	eq
 8004fd2:	2310      	moveq	r3, #16
 8004fd4:	1c95      	addeq	r5, r2, #2
 8004fd6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004fd8:	220a      	movs	r2, #10
 8004fda:	46a9      	mov	r9, r5
 8004fdc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004fe0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	d91e      	bls.n	8005026 <__ssvfiscanf_r+0xf6>
 8004fe8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80051e4 <__ssvfiscanf_r+0x2b4>
 8004fec:	2203      	movs	r2, #3
 8004fee:	4650      	mov	r0, sl
 8004ff0:	f7fb f8f6 	bl	80001e0 <memchr>
 8004ff4:	b138      	cbz	r0, 8005006 <__ssvfiscanf_r+0xd6>
 8004ff6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ff8:	eba0 000a 	sub.w	r0, r0, sl
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4083      	lsls	r3, r0
 8005000:	4313      	orrs	r3, r2
 8005002:	9341      	str	r3, [sp, #260]	@ 0x104
 8005004:	464d      	mov	r5, r9
 8005006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800500a:	2b78      	cmp	r3, #120	@ 0x78
 800500c:	d806      	bhi.n	800501c <__ssvfiscanf_r+0xec>
 800500e:	2b57      	cmp	r3, #87	@ 0x57
 8005010:	d810      	bhi.n	8005034 <__ssvfiscanf_r+0x104>
 8005012:	2b25      	cmp	r3, #37	@ 0x25
 8005014:	d0c5      	beq.n	8004fa2 <__ssvfiscanf_r+0x72>
 8005016:	d857      	bhi.n	80050c8 <__ssvfiscanf_r+0x198>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d065      	beq.n	80050e8 <__ssvfiscanf_r+0x1b8>
 800501c:	2303      	movs	r3, #3
 800501e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005020:	230a      	movs	r3, #10
 8005022:	9342      	str	r3, [sp, #264]	@ 0x108
 8005024:	e078      	b.n	8005118 <__ssvfiscanf_r+0x1e8>
 8005026:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005028:	fb02 1103 	mla	r1, r2, r3, r1
 800502c:	3930      	subs	r1, #48	@ 0x30
 800502e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005030:	464d      	mov	r5, r9
 8005032:	e7d2      	b.n	8004fda <__ssvfiscanf_r+0xaa>
 8005034:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005038:	2a20      	cmp	r2, #32
 800503a:	d8ef      	bhi.n	800501c <__ssvfiscanf_r+0xec>
 800503c:	a101      	add	r1, pc, #4	@ (adr r1, 8005044 <__ssvfiscanf_r+0x114>)
 800503e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005042:	bf00      	nop
 8005044:	080050f7 	.word	0x080050f7
 8005048:	0800501d 	.word	0x0800501d
 800504c:	0800501d 	.word	0x0800501d
 8005050:	08005151 	.word	0x08005151
 8005054:	0800501d 	.word	0x0800501d
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	0800501d 	.word	0x0800501d
 8005064:	0800501d 	.word	0x0800501d
 8005068:	0800501d 	.word	0x0800501d
 800506c:	0800501d 	.word	0x0800501d
 8005070:	08005167 	.word	0x08005167
 8005074:	0800514d 	.word	0x0800514d
 8005078:	080050cf 	.word	0x080050cf
 800507c:	080050cf 	.word	0x080050cf
 8005080:	080050cf 	.word	0x080050cf
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005109 	.word	0x08005109
 800508c:	0800501d 	.word	0x0800501d
 8005090:	0800501d 	.word	0x0800501d
 8005094:	0800501d 	.word	0x0800501d
 8005098:	0800501d 	.word	0x0800501d
 800509c:	08005177 	.word	0x08005177
 80050a0:	08005111 	.word	0x08005111
 80050a4:	080050ef 	.word	0x080050ef
 80050a8:	0800501d 	.word	0x0800501d
 80050ac:	0800501d 	.word	0x0800501d
 80050b0:	08005173 	.word	0x08005173
 80050b4:	0800501d 	.word	0x0800501d
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800501d 	.word	0x0800501d
 80050c0:	0800501d 	.word	0x0800501d
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	3b45      	subs	r3, #69	@ 0x45
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d8a6      	bhi.n	800501c <__ssvfiscanf_r+0xec>
 80050ce:	2305      	movs	r3, #5
 80050d0:	e021      	b.n	8005116 <__ssvfiscanf_r+0x1e6>
 80050d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80050d4:	4621      	mov	r1, r4
 80050d6:	4630      	mov	r0, r6
 80050d8:	4798      	blx	r3
 80050da:	2800      	cmp	r0, #0
 80050dc:	f43f af66 	beq.w	8004fac <__ssvfiscanf_r+0x7c>
 80050e0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f040 808b 	bne.w	80051fe <__ssvfiscanf_r+0x2ce>
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050ec:	e08b      	b.n	8005206 <__ssvfiscanf_r+0x2d6>
 80050ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80050f0:	f042 0220 	orr.w	r2, r2, #32
 80050f4:	9241      	str	r2, [sp, #260]	@ 0x104
 80050f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80050f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80050fe:	2210      	movs	r2, #16
 8005100:	2b6e      	cmp	r3, #110	@ 0x6e
 8005102:	9242      	str	r2, [sp, #264]	@ 0x108
 8005104:	d902      	bls.n	800510c <__ssvfiscanf_r+0x1dc>
 8005106:	e005      	b.n	8005114 <__ssvfiscanf_r+0x1e4>
 8005108:	2300      	movs	r3, #0
 800510a:	9342      	str	r3, [sp, #264]	@ 0x108
 800510c:	2303      	movs	r3, #3
 800510e:	e002      	b.n	8005116 <__ssvfiscanf_r+0x1e6>
 8005110:	2308      	movs	r3, #8
 8005112:	9342      	str	r3, [sp, #264]	@ 0x108
 8005114:	2304      	movs	r3, #4
 8005116:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	dd39      	ble.n	8005192 <__ssvfiscanf_r+0x262>
 800511e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005120:	0659      	lsls	r1, r3, #25
 8005122:	d404      	bmi.n	800512e <__ssvfiscanf_r+0x1fe>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	5cba      	ldrb	r2, [r7, r2]
 800512a:	0712      	lsls	r2, r2, #28
 800512c:	d438      	bmi.n	80051a0 <__ssvfiscanf_r+0x270>
 800512e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005130:	2b02      	cmp	r3, #2
 8005132:	dc47      	bgt.n	80051c4 <__ssvfiscanf_r+0x294>
 8005134:	466b      	mov	r3, sp
 8005136:	4622      	mov	r2, r4
 8005138:	a941      	add	r1, sp, #260	@ 0x104
 800513a:	4630      	mov	r0, r6
 800513c:	f000 fa9c 	bl	8005678 <_scanf_chars>
 8005140:	2801      	cmp	r0, #1
 8005142:	d064      	beq.n	800520e <__ssvfiscanf_r+0x2de>
 8005144:	2802      	cmp	r0, #2
 8005146:	f47f af18 	bne.w	8004f7a <__ssvfiscanf_r+0x4a>
 800514a:	e7c9      	b.n	80050e0 <__ssvfiscanf_r+0x1b0>
 800514c:	220a      	movs	r2, #10
 800514e:	e7d7      	b.n	8005100 <__ssvfiscanf_r+0x1d0>
 8005150:	4629      	mov	r1, r5
 8005152:	4640      	mov	r0, r8
 8005154:	f000 fbde 	bl	8005914 <__sccl>
 8005158:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800515a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005160:	4605      	mov	r5, r0
 8005162:	2301      	movs	r3, #1
 8005164:	e7d7      	b.n	8005116 <__ssvfiscanf_r+0x1e6>
 8005166:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516c:	9341      	str	r3, [sp, #260]	@ 0x104
 800516e:	2300      	movs	r3, #0
 8005170:	e7d1      	b.n	8005116 <__ssvfiscanf_r+0x1e6>
 8005172:	2302      	movs	r3, #2
 8005174:	e7cf      	b.n	8005116 <__ssvfiscanf_r+0x1e6>
 8005176:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005178:	06c3      	lsls	r3, r0, #27
 800517a:	f53f aefe 	bmi.w	8004f7a <__ssvfiscanf_r+0x4a>
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005182:	1d19      	adds	r1, r3, #4
 8005184:	9100      	str	r1, [sp, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	07c0      	lsls	r0, r0, #31
 800518a:	bf4c      	ite	mi
 800518c:	801a      	strhmi	r2, [r3, #0]
 800518e:	601a      	strpl	r2, [r3, #0]
 8005190:	e6f3      	b.n	8004f7a <__ssvfiscanf_r+0x4a>
 8005192:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005194:	4621      	mov	r1, r4
 8005196:	4630      	mov	r0, r6
 8005198:	4798      	blx	r3
 800519a:	2800      	cmp	r0, #0
 800519c:	d0bf      	beq.n	800511e <__ssvfiscanf_r+0x1ee>
 800519e:	e79f      	b.n	80050e0 <__ssvfiscanf_r+0x1b0>
 80051a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051a2:	3201      	adds	r2, #1
 80051a4:	9245      	str	r2, [sp, #276]	@ 0x114
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	3a01      	subs	r2, #1
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	6062      	str	r2, [r4, #4]
 80051ae:	dd02      	ble.n	80051b6 <__ssvfiscanf_r+0x286>
 80051b0:	3301      	adds	r3, #1
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	e7b6      	b.n	8005124 <__ssvfiscanf_r+0x1f4>
 80051b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051b8:	4621      	mov	r1, r4
 80051ba:	4630      	mov	r0, r6
 80051bc:	4798      	blx	r3
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0b0      	beq.n	8005124 <__ssvfiscanf_r+0x1f4>
 80051c2:	e78d      	b.n	80050e0 <__ssvfiscanf_r+0x1b0>
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	dc0f      	bgt.n	80051e8 <__ssvfiscanf_r+0x2b8>
 80051c8:	466b      	mov	r3, sp
 80051ca:	4622      	mov	r2, r4
 80051cc:	a941      	add	r1, sp, #260	@ 0x104
 80051ce:	4630      	mov	r0, r6
 80051d0:	f000 faac 	bl	800572c <_scanf_i>
 80051d4:	e7b4      	b.n	8005140 <__ssvfiscanf_r+0x210>
 80051d6:	bf00      	nop
 80051d8:	08004e81 	.word	0x08004e81
 80051dc:	08004ef7 	.word	0x08004ef7
 80051e0:	08006013 	.word	0x08006013
 80051e4:	08005fca 	.word	0x08005fca
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <__ssvfiscanf_r+0x2e4>)
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f43f aec5 	beq.w	8004f7a <__ssvfiscanf_r+0x4a>
 80051f0:	466b      	mov	r3, sp
 80051f2:	4622      	mov	r2, r4
 80051f4:	a941      	add	r1, sp, #260	@ 0x104
 80051f6:	4630      	mov	r0, r6
 80051f8:	f3af 8000 	nop.w
 80051fc:	e7a0      	b.n	8005140 <__ssvfiscanf_r+0x210>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	065b      	lsls	r3, r3, #25
 8005202:	f53f af71 	bmi.w	80050e8 <__ssvfiscanf_r+0x1b8>
 8005206:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005210:	e7f9      	b.n	8005206 <__ssvfiscanf_r+0x2d6>
 8005212:	bf00      	nop
 8005214:	00000000 	.word	0x00000000

08005218 <sbrk_aligned>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0f      	ldr	r6, [pc, #60]	@ (8005258 <sbrk_aligned+0x40>)
 800521c:	460c      	mov	r4, r1
 800521e:	6831      	ldr	r1, [r6, #0]
 8005220:	4605      	mov	r5, r0
 8005222:	b911      	cbnz	r1, 800522a <sbrk_aligned+0x12>
 8005224:	f000 fd2a 	bl	8005c7c <_sbrk_r>
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fd25 	bl	8005c7c <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d103      	bne.n	800523e <sbrk_aligned+0x26>
 8005236:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800523a:	4620      	mov	r0, r4
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0f8      	beq.n	800523a <sbrk_aligned+0x22>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 fd16 	bl	8005c7c <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1f2      	bne.n	800523a <sbrk_aligned+0x22>
 8005254:	e7ef      	b.n	8005236 <sbrk_aligned+0x1e>
 8005256:	bf00      	nop
 8005258:	2000032c 	.word	0x2000032c

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4606      	mov	r6, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d904      	bls.n	8005282 <_malloc_r+0x26>
 8005278:	230c      	movs	r3, #12
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	2000      	movs	r0, #0
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005358 <_malloc_r+0xfc>
 8005286:	f000 fb7f 	bl	8005988 <__malloc_lock>
 800528a:	f8d8 3000 	ldr.w	r3, [r8]
 800528e:	461c      	mov	r4, r3
 8005290:	bb44      	cbnz	r4, 80052e4 <_malloc_r+0x88>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbf 	bl	8005218 <sbrk_aligned>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	4604      	mov	r4, r0
 800529e:	d158      	bne.n	8005352 <_malloc_r+0xf6>
 80052a0:	f8d8 4000 	ldr.w	r4, [r8]
 80052a4:	4627      	mov	r7, r4
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d143      	bne.n	8005332 <_malloc_r+0xd6>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04b      	beq.n	8005346 <_malloc_r+0xea>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	eb04 0903 	add.w	r9, r4, r3
 80052b8:	f000 fce0 	bl	8005c7c <_sbrk_r>
 80052bc:	4581      	cmp	r9, r0
 80052be:	d142      	bne.n	8005346 <_malloc_r+0xea>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	1a6d      	subs	r5, r5, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ffa6 	bl	8005218 <sbrk_aligned>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d03a      	beq.n	8005346 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	442b      	add	r3, r5
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	bb62      	cbnz	r2, 8005338 <_malloc_r+0xdc>
 80052de:	f8c8 7000 	str.w	r7, [r8]
 80052e2:	e00f      	b.n	8005304 <_malloc_r+0xa8>
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1b52      	subs	r2, r2, r5
 80052e8:	d420      	bmi.n	800532c <_malloc_r+0xd0>
 80052ea:	2a0b      	cmp	r2, #11
 80052ec:	d917      	bls.n	800531e <_malloc_r+0xc2>
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	6025      	str	r5, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	6059      	strne	r1, [r3, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	bf08      	it	eq
 80052fc:	f8c8 1000 	streq.w	r1, [r8]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	f000 fb45 	bl	8005994 <__malloc_unlock>
 800530a:	f104 000b 	add.w	r0, r4, #11
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	f020 0007 	bic.w	r0, r0, #7
 8005314:	1ac2      	subs	r2, r0, r3
 8005316:	bf1c      	itt	ne
 8005318:	1a1b      	subne	r3, r3, r0
 800531a:	50a3      	strne	r3, [r4, r2]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	f8c8 2000 	streq.w	r2, [r8]
 8005328:	605a      	strne	r2, [r3, #4]
 800532a:	e7eb      	b.n	8005304 <_malloc_r+0xa8>
 800532c:	4623      	mov	r3, r4
 800532e:	6864      	ldr	r4, [r4, #4]
 8005330:	e7ae      	b.n	8005290 <_malloc_r+0x34>
 8005332:	463c      	mov	r4, r7
 8005334:	687f      	ldr	r7, [r7, #4]
 8005336:	e7b6      	b.n	80052a6 <_malloc_r+0x4a>
 8005338:	461a      	mov	r2, r3
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d1fb      	bne.n	8005338 <_malloc_r+0xdc>
 8005340:	2300      	movs	r3, #0
 8005342:	6053      	str	r3, [r2, #4]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa8>
 8005346:	230c      	movs	r3, #12
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	4630      	mov	r0, r6
 800534c:	f000 fb22 	bl	8005994 <__malloc_unlock>
 8005350:	e794      	b.n	800527c <_malloc_r+0x20>
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	e7d6      	b.n	8005304 <_malloc_r+0xa8>
 8005356:	bf00      	nop
 8005358:	20000330 	.word	0x20000330

0800535c <_printf_common>:
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	4616      	mov	r6, r2
 8005362:	4698      	mov	r8, r3
 8005364:	688a      	ldr	r2, [r1, #8]
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800536c:	4293      	cmp	r3, r2
 800536e:	bfb8      	it	lt
 8005370:	4613      	movlt	r3, r2
 8005372:	6033      	str	r3, [r6, #0]
 8005374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005378:	4607      	mov	r7, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b10a      	cbz	r2, 8005382 <_printf_common+0x26>
 800537e:	3301      	adds	r3, #1
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	0699      	lsls	r1, r3, #26
 8005386:	bf42      	ittt	mi
 8005388:	6833      	ldrmi	r3, [r6, #0]
 800538a:	3302      	addmi	r3, #2
 800538c:	6033      	strmi	r3, [r6, #0]
 800538e:	6825      	ldr	r5, [r4, #0]
 8005390:	f015 0506 	ands.w	r5, r5, #6
 8005394:	d106      	bne.n	80053a4 <_printf_common+0x48>
 8005396:	f104 0a19 	add.w	sl, r4, #25
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	6832      	ldr	r2, [r6, #0]
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dc26      	bgt.n	80053f2 <_printf_common+0x96>
 80053a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	3b00      	subs	r3, #0
 80053ac:	bf18      	it	ne
 80053ae:	2301      	movne	r3, #1
 80053b0:	0692      	lsls	r2, r2, #26
 80053b2:	d42b      	bmi.n	800540c <_printf_common+0xb0>
 80053b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b8:	4641      	mov	r1, r8
 80053ba:	4638      	mov	r0, r7
 80053bc:	47c8      	blx	r9
 80053be:	3001      	adds	r0, #1
 80053c0:	d01e      	beq.n	8005400 <_printf_common+0xa4>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	f003 0306 	and.w	r3, r3, #6
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf02      	ittt	eq
 80053ce:	68e5      	ldreq	r5, [r4, #12]
 80053d0:	6833      	ldreq	r3, [r6, #0]
 80053d2:	1aed      	subeq	r5, r5, r3
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	bf0c      	ite	eq
 80053d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053dc:	2500      	movne	r5, #0
 80053de:	4293      	cmp	r3, r2
 80053e0:	bfc4      	itt	gt
 80053e2:	1a9b      	subgt	r3, r3, r2
 80053e4:	18ed      	addgt	r5, r5, r3
 80053e6:	2600      	movs	r6, #0
 80053e8:	341a      	adds	r4, #26
 80053ea:	42b5      	cmp	r5, r6
 80053ec:	d11a      	bne.n	8005424 <_printf_common+0xc8>
 80053ee:	2000      	movs	r0, #0
 80053f0:	e008      	b.n	8005404 <_printf_common+0xa8>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4652      	mov	r2, sl
 80053f6:	4641      	mov	r1, r8
 80053f8:	4638      	mov	r0, r7
 80053fa:	47c8      	blx	r9
 80053fc:	3001      	adds	r0, #1
 80053fe:	d103      	bne.n	8005408 <_printf_common+0xac>
 8005400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	3501      	adds	r5, #1
 800540a:	e7c6      	b.n	800539a <_printf_common+0x3e>
 800540c:	18e1      	adds	r1, r4, r3
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	2030      	movs	r0, #48	@ 0x30
 8005412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005416:	4422      	add	r2, r4
 8005418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800541c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005420:	3302      	adds	r3, #2
 8005422:	e7c7      	b.n	80053b4 <_printf_common+0x58>
 8005424:	2301      	movs	r3, #1
 8005426:	4622      	mov	r2, r4
 8005428:	4641      	mov	r1, r8
 800542a:	4638      	mov	r0, r7
 800542c:	47c8      	blx	r9
 800542e:	3001      	adds	r0, #1
 8005430:	d0e6      	beq.n	8005400 <_printf_common+0xa4>
 8005432:	3601      	adds	r6, #1
 8005434:	e7d9      	b.n	80053ea <_printf_common+0x8e>
	...

08005438 <_printf_i>:
 8005438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	7e0f      	ldrb	r7, [r1, #24]
 800543e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005440:	2f78      	cmp	r7, #120	@ 0x78
 8005442:	4691      	mov	r9, r2
 8005444:	4680      	mov	r8, r0
 8005446:	460c      	mov	r4, r1
 8005448:	469a      	mov	sl, r3
 800544a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800544e:	d807      	bhi.n	8005460 <_printf_i+0x28>
 8005450:	2f62      	cmp	r7, #98	@ 0x62
 8005452:	d80a      	bhi.n	800546a <_printf_i+0x32>
 8005454:	2f00      	cmp	r7, #0
 8005456:	f000 80d2 	beq.w	80055fe <_printf_i+0x1c6>
 800545a:	2f58      	cmp	r7, #88	@ 0x58
 800545c:	f000 80b9 	beq.w	80055d2 <_printf_i+0x19a>
 8005460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005468:	e03a      	b.n	80054e0 <_printf_i+0xa8>
 800546a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800546e:	2b15      	cmp	r3, #21
 8005470:	d8f6      	bhi.n	8005460 <_printf_i+0x28>
 8005472:	a101      	add	r1, pc, #4	@ (adr r1, 8005478 <_printf_i+0x40>)
 8005474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005478:	080054d1 	.word	0x080054d1
 800547c:	080054e5 	.word	0x080054e5
 8005480:	08005461 	.word	0x08005461
 8005484:	08005461 	.word	0x08005461
 8005488:	08005461 	.word	0x08005461
 800548c:	08005461 	.word	0x08005461
 8005490:	080054e5 	.word	0x080054e5
 8005494:	08005461 	.word	0x08005461
 8005498:	08005461 	.word	0x08005461
 800549c:	08005461 	.word	0x08005461
 80054a0:	08005461 	.word	0x08005461
 80054a4:	080055e5 	.word	0x080055e5
 80054a8:	0800550f 	.word	0x0800550f
 80054ac:	0800559f 	.word	0x0800559f
 80054b0:	08005461 	.word	0x08005461
 80054b4:	08005461 	.word	0x08005461
 80054b8:	08005607 	.word	0x08005607
 80054bc:	08005461 	.word	0x08005461
 80054c0:	0800550f 	.word	0x0800550f
 80054c4:	08005461 	.word	0x08005461
 80054c8:	08005461 	.word	0x08005461
 80054cc:	080055a7 	.word	0x080055a7
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6032      	str	r2, [r6, #0]
 80054d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e0:	2301      	movs	r3, #1
 80054e2:	e09d      	b.n	8005620 <_printf_i+0x1e8>
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1d19      	adds	r1, r3, #4
 80054ea:	6031      	str	r1, [r6, #0]
 80054ec:	0606      	lsls	r6, r0, #24
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0xbc>
 80054f0:	681d      	ldr	r5, [r3, #0]
 80054f2:	e003      	b.n	80054fc <_printf_i+0xc4>
 80054f4:	0645      	lsls	r5, r0, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0xb8>
 80054f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	da03      	bge.n	8005508 <_printf_i+0xd0>
 8005500:	232d      	movs	r3, #45	@ 0x2d
 8005502:	426d      	negs	r5, r5
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005508:	4859      	ldr	r0, [pc, #356]	@ (8005670 <_printf_i+0x238>)
 800550a:	230a      	movs	r3, #10
 800550c:	e011      	b.n	8005532 <_printf_i+0xfa>
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	0608      	lsls	r0, r1, #24
 8005514:	f853 5b04 	ldr.w	r5, [r3], #4
 8005518:	d402      	bmi.n	8005520 <_printf_i+0xe8>
 800551a:	0649      	lsls	r1, r1, #25
 800551c:	bf48      	it	mi
 800551e:	b2ad      	uxthmi	r5, r5
 8005520:	2f6f      	cmp	r7, #111	@ 0x6f
 8005522:	4853      	ldr	r0, [pc, #332]	@ (8005670 <_printf_i+0x238>)
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	bf14      	ite	ne
 8005528:	230a      	movne	r3, #10
 800552a:	2308      	moveq	r3, #8
 800552c:	2100      	movs	r1, #0
 800552e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005532:	6866      	ldr	r6, [r4, #4]
 8005534:	60a6      	str	r6, [r4, #8]
 8005536:	2e00      	cmp	r6, #0
 8005538:	bfa2      	ittt	ge
 800553a:	6821      	ldrge	r1, [r4, #0]
 800553c:	f021 0104 	bicge.w	r1, r1, #4
 8005540:	6021      	strge	r1, [r4, #0]
 8005542:	b90d      	cbnz	r5, 8005548 <_printf_i+0x110>
 8005544:	2e00      	cmp	r6, #0
 8005546:	d04b      	beq.n	80055e0 <_printf_i+0x1a8>
 8005548:	4616      	mov	r6, r2
 800554a:	fbb5 f1f3 	udiv	r1, r5, r3
 800554e:	fb03 5711 	mls	r7, r3, r1, r5
 8005552:	5dc7      	ldrb	r7, [r0, r7]
 8005554:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005558:	462f      	mov	r7, r5
 800555a:	42bb      	cmp	r3, r7
 800555c:	460d      	mov	r5, r1
 800555e:	d9f4      	bls.n	800554a <_printf_i+0x112>
 8005560:	2b08      	cmp	r3, #8
 8005562:	d10b      	bne.n	800557c <_printf_i+0x144>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	07df      	lsls	r7, r3, #31
 8005568:	d508      	bpl.n	800557c <_printf_i+0x144>
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	6861      	ldr	r1, [r4, #4]
 800556e:	4299      	cmp	r1, r3
 8005570:	bfde      	ittt	le
 8005572:	2330      	movle	r3, #48	@ 0x30
 8005574:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005578:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800557c:	1b92      	subs	r2, r2, r6
 800557e:	6122      	str	r2, [r4, #16]
 8005580:	f8cd a000 	str.w	sl, [sp]
 8005584:	464b      	mov	r3, r9
 8005586:	aa03      	add	r2, sp, #12
 8005588:	4621      	mov	r1, r4
 800558a:	4640      	mov	r0, r8
 800558c:	f7ff fee6 	bl	800535c <_printf_common>
 8005590:	3001      	adds	r0, #1
 8005592:	d14a      	bne.n	800562a <_printf_i+0x1f2>
 8005594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005598:	b004      	add	sp, #16
 800559a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f043 0320 	orr.w	r3, r3, #32
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	4833      	ldr	r0, [pc, #204]	@ (8005674 <_printf_i+0x23c>)
 80055a8:	2778      	movs	r7, #120	@ 0x78
 80055aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	6831      	ldr	r1, [r6, #0]
 80055b2:	061f      	lsls	r7, r3, #24
 80055b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80055b8:	d402      	bmi.n	80055c0 <_printf_i+0x188>
 80055ba:	065f      	lsls	r7, r3, #25
 80055bc:	bf48      	it	mi
 80055be:	b2ad      	uxthmi	r5, r5
 80055c0:	6031      	str	r1, [r6, #0]
 80055c2:	07d9      	lsls	r1, r3, #31
 80055c4:	bf44      	itt	mi
 80055c6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ca:	6023      	strmi	r3, [r4, #0]
 80055cc:	b11d      	cbz	r5, 80055d6 <_printf_i+0x19e>
 80055ce:	2310      	movs	r3, #16
 80055d0:	e7ac      	b.n	800552c <_printf_i+0xf4>
 80055d2:	4827      	ldr	r0, [pc, #156]	@ (8005670 <_printf_i+0x238>)
 80055d4:	e7e9      	b.n	80055aa <_printf_i+0x172>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f023 0320 	bic.w	r3, r3, #32
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	e7f6      	b.n	80055ce <_printf_i+0x196>
 80055e0:	4616      	mov	r6, r2
 80055e2:	e7bd      	b.n	8005560 <_printf_i+0x128>
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	6825      	ldr	r5, [r4, #0]
 80055e8:	6961      	ldr	r1, [r4, #20]
 80055ea:	1d18      	adds	r0, r3, #4
 80055ec:	6030      	str	r0, [r6, #0]
 80055ee:	062e      	lsls	r6, r5, #24
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	d501      	bpl.n	80055f8 <_printf_i+0x1c0>
 80055f4:	6019      	str	r1, [r3, #0]
 80055f6:	e002      	b.n	80055fe <_printf_i+0x1c6>
 80055f8:	0668      	lsls	r0, r5, #25
 80055fa:	d5fb      	bpl.n	80055f4 <_printf_i+0x1bc>
 80055fc:	8019      	strh	r1, [r3, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	4616      	mov	r6, r2
 8005604:	e7bc      	b.n	8005580 <_printf_i+0x148>
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	1d1a      	adds	r2, r3, #4
 800560a:	6032      	str	r2, [r6, #0]
 800560c:	681e      	ldr	r6, [r3, #0]
 800560e:	6862      	ldr	r2, [r4, #4]
 8005610:	2100      	movs	r1, #0
 8005612:	4630      	mov	r0, r6
 8005614:	f7fa fde4 	bl	80001e0 <memchr>
 8005618:	b108      	cbz	r0, 800561e <_printf_i+0x1e6>
 800561a:	1b80      	subs	r0, r0, r6
 800561c:	6060      	str	r0, [r4, #4]
 800561e:	6863      	ldr	r3, [r4, #4]
 8005620:	6123      	str	r3, [r4, #16]
 8005622:	2300      	movs	r3, #0
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005628:	e7aa      	b.n	8005580 <_printf_i+0x148>
 800562a:	6923      	ldr	r3, [r4, #16]
 800562c:	4632      	mov	r2, r6
 800562e:	4649      	mov	r1, r9
 8005630:	4640      	mov	r0, r8
 8005632:	47d0      	blx	sl
 8005634:	3001      	adds	r0, #1
 8005636:	d0ad      	beq.n	8005594 <_printf_i+0x15c>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	079b      	lsls	r3, r3, #30
 800563c:	d413      	bmi.n	8005666 <_printf_i+0x22e>
 800563e:	68e0      	ldr	r0, [r4, #12]
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	4298      	cmp	r0, r3
 8005644:	bfb8      	it	lt
 8005646:	4618      	movlt	r0, r3
 8005648:	e7a6      	b.n	8005598 <_printf_i+0x160>
 800564a:	2301      	movs	r3, #1
 800564c:	4632      	mov	r2, r6
 800564e:	4649      	mov	r1, r9
 8005650:	4640      	mov	r0, r8
 8005652:	47d0      	blx	sl
 8005654:	3001      	adds	r0, #1
 8005656:	d09d      	beq.n	8005594 <_printf_i+0x15c>
 8005658:	3501      	adds	r5, #1
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	9903      	ldr	r1, [sp, #12]
 800565e:	1a5b      	subs	r3, r3, r1
 8005660:	42ab      	cmp	r3, r5
 8005662:	dcf2      	bgt.n	800564a <_printf_i+0x212>
 8005664:	e7eb      	b.n	800563e <_printf_i+0x206>
 8005666:	2500      	movs	r5, #0
 8005668:	f104 0619 	add.w	r6, r4, #25
 800566c:	e7f5      	b.n	800565a <_printf_i+0x222>
 800566e:	bf00      	nop
 8005670:	08005fd5 	.word	0x08005fd5
 8005674:	08005fe6 	.word	0x08005fe6

08005678 <_scanf_chars>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4615      	mov	r5, r2
 800567e:	688a      	ldr	r2, [r1, #8]
 8005680:	4680      	mov	r8, r0
 8005682:	460c      	mov	r4, r1
 8005684:	b932      	cbnz	r2, 8005694 <_scanf_chars+0x1c>
 8005686:	698a      	ldr	r2, [r1, #24]
 8005688:	2a00      	cmp	r2, #0
 800568a:	bf14      	ite	ne
 800568c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8005690:	2201      	moveq	r2, #1
 8005692:	608a      	str	r2, [r1, #8]
 8005694:	6822      	ldr	r2, [r4, #0]
 8005696:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005728 <_scanf_chars+0xb0>
 800569a:	06d1      	lsls	r1, r2, #27
 800569c:	bf5f      	itttt	pl
 800569e:	681a      	ldrpl	r2, [r3, #0]
 80056a0:	1d11      	addpl	r1, r2, #4
 80056a2:	6019      	strpl	r1, [r3, #0]
 80056a4:	6816      	ldrpl	r6, [r2, #0]
 80056a6:	2700      	movs	r7, #0
 80056a8:	69a0      	ldr	r0, [r4, #24]
 80056aa:	b188      	cbz	r0, 80056d0 <_scanf_chars+0x58>
 80056ac:	2801      	cmp	r0, #1
 80056ae:	d107      	bne.n	80056c0 <_scanf_chars+0x48>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	6963      	ldr	r3, [r4, #20]
 80056b6:	5c9b      	ldrb	r3, [r3, r2]
 80056b8:	b953      	cbnz	r3, 80056d0 <_scanf_chars+0x58>
 80056ba:	2f00      	cmp	r7, #0
 80056bc:	d031      	beq.n	8005722 <_scanf_chars+0xaa>
 80056be:	e022      	b.n	8005706 <_scanf_chars+0x8e>
 80056c0:	2802      	cmp	r0, #2
 80056c2:	d120      	bne.n	8005706 <_scanf_chars+0x8e>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	d41a      	bmi.n	8005706 <_scanf_chars+0x8e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	06da      	lsls	r2, r3, #27
 80056d4:	bf5e      	ittt	pl
 80056d6:	682b      	ldrpl	r3, [r5, #0]
 80056d8:	781b      	ldrbpl	r3, [r3, #0]
 80056da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80056de:	682a      	ldr	r2, [r5, #0]
 80056e0:	686b      	ldr	r3, [r5, #4]
 80056e2:	3201      	adds	r2, #1
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	68a2      	ldr	r2, [r4, #8]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	3a01      	subs	r2, #1
 80056ec:	606b      	str	r3, [r5, #4]
 80056ee:	3701      	adds	r7, #1
 80056f0:	60a2      	str	r2, [r4, #8]
 80056f2:	b142      	cbz	r2, 8005706 <_scanf_chars+0x8e>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dcd7      	bgt.n	80056a8 <_scanf_chars+0x30>
 80056f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80056fc:	4629      	mov	r1, r5
 80056fe:	4640      	mov	r0, r8
 8005700:	4798      	blx	r3
 8005702:	2800      	cmp	r0, #0
 8005704:	d0d0      	beq.n	80056a8 <_scanf_chars+0x30>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	f013 0310 	ands.w	r3, r3, #16
 800570c:	d105      	bne.n	800571a <_scanf_chars+0xa2>
 800570e:	68e2      	ldr	r2, [r4, #12]
 8005710:	3201      	adds	r2, #1
 8005712:	60e2      	str	r2, [r4, #12]
 8005714:	69a2      	ldr	r2, [r4, #24]
 8005716:	b102      	cbz	r2, 800571a <_scanf_chars+0xa2>
 8005718:	7033      	strb	r3, [r6, #0]
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	443b      	add	r3, r7
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	2000      	movs	r0, #0
 8005722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005726:	bf00      	nop
 8005728:	08006013 	.word	0x08006013

0800572c <_scanf_i>:
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	4698      	mov	r8, r3
 8005732:	4b74      	ldr	r3, [pc, #464]	@ (8005904 <_scanf_i+0x1d8>)
 8005734:	460c      	mov	r4, r1
 8005736:	4682      	mov	sl, r0
 8005738:	4616      	mov	r6, r2
 800573a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800573e:	b087      	sub	sp, #28
 8005740:	ab03      	add	r3, sp, #12
 8005742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005746:	4b70      	ldr	r3, [pc, #448]	@ (8005908 <_scanf_i+0x1dc>)
 8005748:	69a1      	ldr	r1, [r4, #24]
 800574a:	4a70      	ldr	r2, [pc, #448]	@ (800590c <_scanf_i+0x1e0>)
 800574c:	2903      	cmp	r1, #3
 800574e:	bf08      	it	eq
 8005750:	461a      	moveq	r2, r3
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	9201      	str	r2, [sp, #4]
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800575c:	bf88      	it	hi
 800575e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005762:	4627      	mov	r7, r4
 8005764:	bf82      	ittt	hi
 8005766:	eb03 0905 	addhi.w	r9, r3, r5
 800576a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800576e:	60a3      	strhi	r3, [r4, #8]
 8005770:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005774:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005778:	bf98      	it	ls
 800577a:	f04f 0900 	movls.w	r9, #0
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	463d      	mov	r5, r7
 8005782:	f04f 0b00 	mov.w	fp, #0
 8005786:	6831      	ldr	r1, [r6, #0]
 8005788:	ab03      	add	r3, sp, #12
 800578a:	7809      	ldrb	r1, [r1, #0]
 800578c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005790:	2202      	movs	r2, #2
 8005792:	f7fa fd25 	bl	80001e0 <memchr>
 8005796:	b328      	cbz	r0, 80057e4 <_scanf_i+0xb8>
 8005798:	f1bb 0f01 	cmp.w	fp, #1
 800579c:	d159      	bne.n	8005852 <_scanf_i+0x126>
 800579e:	6862      	ldr	r2, [r4, #4]
 80057a0:	b92a      	cbnz	r2, 80057ae <_scanf_i+0x82>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	2108      	movs	r1, #8
 80057a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057aa:	6061      	str	r1, [r4, #4]
 80057ac:	6022      	str	r2, [r4, #0]
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	68a2      	ldr	r2, [r4, #8]
 80057b8:	1e51      	subs	r1, r2, #1
 80057ba:	60a1      	str	r1, [r4, #8]
 80057bc:	b192      	cbz	r2, 80057e4 <_scanf_i+0xb8>
 80057be:	6832      	ldr	r2, [r6, #0]
 80057c0:	1c51      	adds	r1, r2, #1
 80057c2:	6031      	str	r1, [r6, #0]
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	f805 2b01 	strb.w	r2, [r5], #1
 80057ca:	6872      	ldr	r2, [r6, #4]
 80057cc:	3a01      	subs	r2, #1
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	6072      	str	r2, [r6, #4]
 80057d2:	dc07      	bgt.n	80057e4 <_scanf_i+0xb8>
 80057d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80057d8:	4631      	mov	r1, r6
 80057da:	4650      	mov	r0, sl
 80057dc:	4790      	blx	r2
 80057de:	2800      	cmp	r0, #0
 80057e0:	f040 8085 	bne.w	80058ee <_scanf_i+0x1c2>
 80057e4:	f10b 0b01 	add.w	fp, fp, #1
 80057e8:	f1bb 0f03 	cmp.w	fp, #3
 80057ec:	d1cb      	bne.n	8005786 <_scanf_i+0x5a>
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	b90b      	cbnz	r3, 80057f6 <_scanf_i+0xca>
 80057f2:	230a      	movs	r3, #10
 80057f4:	6063      	str	r3, [r4, #4]
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	4945      	ldr	r1, [pc, #276]	@ (8005910 <_scanf_i+0x1e4>)
 80057fa:	6960      	ldr	r0, [r4, #20]
 80057fc:	1ac9      	subs	r1, r1, r3
 80057fe:	f000 f889 	bl	8005914 <__sccl>
 8005802:	f04f 0b00 	mov.w	fp, #0
 8005806:	68a3      	ldr	r3, [r4, #8]
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d03d      	beq.n	800588a <_scanf_i+0x15e>
 800580e:	6831      	ldr	r1, [r6, #0]
 8005810:	6960      	ldr	r0, [r4, #20]
 8005812:	f891 c000 	ldrb.w	ip, [r1]
 8005816:	f810 000c 	ldrb.w	r0, [r0, ip]
 800581a:	2800      	cmp	r0, #0
 800581c:	d035      	beq.n	800588a <_scanf_i+0x15e>
 800581e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005822:	d124      	bne.n	800586e <_scanf_i+0x142>
 8005824:	0510      	lsls	r0, r2, #20
 8005826:	d522      	bpl.n	800586e <_scanf_i+0x142>
 8005828:	f10b 0b01 	add.w	fp, fp, #1
 800582c:	f1b9 0f00 	cmp.w	r9, #0
 8005830:	d003      	beq.n	800583a <_scanf_i+0x10e>
 8005832:	3301      	adds	r3, #1
 8005834:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	6873      	ldr	r3, [r6, #4]
 800583c:	3b01      	subs	r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	6073      	str	r3, [r6, #4]
 8005842:	dd1b      	ble.n	800587c <_scanf_i+0x150>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	3b01      	subs	r3, #1
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	e7d9      	b.n	8005806 <_scanf_i+0xda>
 8005852:	f1bb 0f02 	cmp.w	fp, #2
 8005856:	d1ae      	bne.n	80057b6 <_scanf_i+0x8a>
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800585e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005862:	d1bf      	bne.n	80057e4 <_scanf_i+0xb8>
 8005864:	2110      	movs	r1, #16
 8005866:	6061      	str	r1, [r4, #4]
 8005868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800586c:	e7a2      	b.n	80057b4 <_scanf_i+0x88>
 800586e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005872:	6022      	str	r2, [r4, #0]
 8005874:	780b      	ldrb	r3, [r1, #0]
 8005876:	f805 3b01 	strb.w	r3, [r5], #1
 800587a:	e7de      	b.n	800583a <_scanf_i+0x10e>
 800587c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005880:	4631      	mov	r1, r6
 8005882:	4650      	mov	r0, sl
 8005884:	4798      	blx	r3
 8005886:	2800      	cmp	r0, #0
 8005888:	d0df      	beq.n	800584a <_scanf_i+0x11e>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	05d9      	lsls	r1, r3, #23
 800588e:	d50d      	bpl.n	80058ac <_scanf_i+0x180>
 8005890:	42bd      	cmp	r5, r7
 8005892:	d909      	bls.n	80058a8 <_scanf_i+0x17c>
 8005894:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005898:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800589c:	4632      	mov	r2, r6
 800589e:	4650      	mov	r0, sl
 80058a0:	4798      	blx	r3
 80058a2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80058a6:	464d      	mov	r5, r9
 80058a8:	42bd      	cmp	r5, r7
 80058aa:	d028      	beq.n	80058fe <_scanf_i+0x1d2>
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	f012 0210 	ands.w	r2, r2, #16
 80058b2:	d113      	bne.n	80058dc <_scanf_i+0x1b0>
 80058b4:	702a      	strb	r2, [r5, #0]
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	9e01      	ldr	r6, [sp, #4]
 80058ba:	4639      	mov	r1, r7
 80058bc:	4650      	mov	r0, sl
 80058be:	47b0      	blx	r6
 80058c0:	f8d8 3000 	ldr.w	r3, [r8]
 80058c4:	6821      	ldr	r1, [r4, #0]
 80058c6:	1d1a      	adds	r2, r3, #4
 80058c8:	f8c8 2000 	str.w	r2, [r8]
 80058cc:	f011 0f20 	tst.w	r1, #32
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	d00f      	beq.n	80058f4 <_scanf_i+0x1c8>
 80058d4:	6018      	str	r0, [r3, #0]
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60e3      	str	r3, [r4, #12]
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	1bed      	subs	r5, r5, r7
 80058e0:	445d      	add	r5, fp
 80058e2:	442b      	add	r3, r5
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	2000      	movs	r0, #0
 80058e8:	b007      	add	sp, #28
 80058ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ee:	f04f 0b00 	mov.w	fp, #0
 80058f2:	e7ca      	b.n	800588a <_scanf_i+0x15e>
 80058f4:	07ca      	lsls	r2, r1, #31
 80058f6:	bf4c      	ite	mi
 80058f8:	8018      	strhmi	r0, [r3, #0]
 80058fa:	6018      	strpl	r0, [r3, #0]
 80058fc:	e7eb      	b.n	80058d6 <_scanf_i+0x1aa>
 80058fe:	2001      	movs	r0, #1
 8005900:	e7f2      	b.n	80058e8 <_scanf_i+0x1bc>
 8005902:	bf00      	nop
 8005904:	08005f70 	.word	0x08005f70
 8005908:	08005b65 	.word	0x08005b65
 800590c:	08005c45 	.word	0x08005c45
 8005910:	08006007 	.word	0x08006007

08005914 <__sccl>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	780b      	ldrb	r3, [r1, #0]
 8005918:	4604      	mov	r4, r0
 800591a:	2b5e      	cmp	r3, #94	@ 0x5e
 800591c:	bf0b      	itete	eq
 800591e:	784b      	ldrbeq	r3, [r1, #1]
 8005920:	1c4a      	addne	r2, r1, #1
 8005922:	1c8a      	addeq	r2, r1, #2
 8005924:	2100      	movne	r1, #0
 8005926:	bf08      	it	eq
 8005928:	2101      	moveq	r1, #1
 800592a:	3801      	subs	r0, #1
 800592c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005930:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005934:	42a8      	cmp	r0, r5
 8005936:	d1fb      	bne.n	8005930 <__sccl+0x1c>
 8005938:	b90b      	cbnz	r3, 800593e <__sccl+0x2a>
 800593a:	1e50      	subs	r0, r2, #1
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	f081 0101 	eor.w	r1, r1, #1
 8005942:	54e1      	strb	r1, [r4, r3]
 8005944:	4610      	mov	r0, r2
 8005946:	4602      	mov	r2, r0
 8005948:	f812 5b01 	ldrb.w	r5, [r2], #1
 800594c:	2d2d      	cmp	r5, #45	@ 0x2d
 800594e:	d005      	beq.n	800595c <__sccl+0x48>
 8005950:	2d5d      	cmp	r5, #93	@ 0x5d
 8005952:	d016      	beq.n	8005982 <__sccl+0x6e>
 8005954:	2d00      	cmp	r5, #0
 8005956:	d0f1      	beq.n	800593c <__sccl+0x28>
 8005958:	462b      	mov	r3, r5
 800595a:	e7f2      	b.n	8005942 <__sccl+0x2e>
 800595c:	7846      	ldrb	r6, [r0, #1]
 800595e:	2e5d      	cmp	r6, #93	@ 0x5d
 8005960:	d0fa      	beq.n	8005958 <__sccl+0x44>
 8005962:	42b3      	cmp	r3, r6
 8005964:	dcf8      	bgt.n	8005958 <__sccl+0x44>
 8005966:	3002      	adds	r0, #2
 8005968:	461a      	mov	r2, r3
 800596a:	3201      	adds	r2, #1
 800596c:	4296      	cmp	r6, r2
 800596e:	54a1      	strb	r1, [r4, r2]
 8005970:	dcfb      	bgt.n	800596a <__sccl+0x56>
 8005972:	1af2      	subs	r2, r6, r3
 8005974:	3a01      	subs	r2, #1
 8005976:	1c5d      	adds	r5, r3, #1
 8005978:	42b3      	cmp	r3, r6
 800597a:	bfa8      	it	ge
 800597c:	2200      	movge	r2, #0
 800597e:	18ab      	adds	r3, r5, r2
 8005980:	e7e1      	b.n	8005946 <__sccl+0x32>
 8005982:	4610      	mov	r0, r2
 8005984:	e7da      	b.n	800593c <__sccl+0x28>
	...

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	@ (8005990 <__malloc_lock+0x8>)
 800598a:	f7ff b8cd 	b.w	8004b28 <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20000328 	.word	0x20000328

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	@ (800599c <__malloc_unlock+0x8>)
 8005996:	f7ff b8c8 	b.w	8004b2a <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20000328 	.word	0x20000328

080059a0 <__submore>:
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80059a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ac:	4299      	cmp	r1, r3
 80059ae:	d11d      	bne.n	80059ec <__submore+0x4c>
 80059b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059b4:	f7ff fc52 	bl	800525c <_malloc_r>
 80059b8:	b918      	cbnz	r0, 80059c2 <__submore+0x22>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059c6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80059c8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80059cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80059ce:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80059d2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80059d6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80059da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80059de:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80059e2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	2000      	movs	r0, #0
 80059ea:	e7e8      	b.n	80059be <__submore+0x1e>
 80059ec:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80059ee:	0077      	lsls	r7, r6, #1
 80059f0:	463a      	mov	r2, r7
 80059f2:	f000 f80f 	bl	8005a14 <_realloc_r>
 80059f6:	4605      	mov	r5, r0
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d0de      	beq.n	80059ba <__submore+0x1a>
 80059fc:	eb00 0806 	add.w	r8, r0, r6
 8005a00:	4601      	mov	r1, r0
 8005a02:	4632      	mov	r2, r6
 8005a04:	4640      	mov	r0, r8
 8005a06:	f000 f949 	bl	8005c9c <memcpy>
 8005a0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005a0e:	f8c4 8000 	str.w	r8, [r4]
 8005a12:	e7e9      	b.n	80059e8 <__submore+0x48>

08005a14 <_realloc_r>:
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4615      	mov	r5, r2
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	b921      	cbnz	r1, 8005a2a <_realloc_r+0x16>
 8005a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4611      	mov	r1, r2
 8005a26:	f7ff bc19 	b.w	800525c <_malloc_r>
 8005a2a:	b92a      	cbnz	r2, 8005a38 <_realloc_r+0x24>
 8005a2c:	f7ff f886 	bl	8004b3c <_free_r>
 8005a30:	2400      	movs	r4, #0
 8005a32:	4620      	mov	r0, r4
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	f000 f93e 	bl	8005cb8 <_malloc_usable_size_r>
 8005a3c:	4285      	cmp	r5, r0
 8005a3e:	4606      	mov	r6, r0
 8005a40:	d802      	bhi.n	8005a48 <_realloc_r+0x34>
 8005a42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a46:	d8f4      	bhi.n	8005a32 <_realloc_r+0x1e>
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7ff fc06 	bl	800525c <_malloc_r>
 8005a50:	4607      	mov	r7, r0
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0ec      	beq.n	8005a30 <_realloc_r+0x1c>
 8005a56:	42b5      	cmp	r5, r6
 8005a58:	462a      	mov	r2, r5
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	bf28      	it	cs
 8005a5e:	4632      	movcs	r2, r6
 8005a60:	f000 f91c 	bl	8005c9c <memcpy>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff f868 	bl	8004b3c <_free_r>
 8005a6c:	463c      	mov	r4, r7
 8005a6e:	e7e0      	b.n	8005a32 <_realloc_r+0x1e>

08005a70 <_strtol_l.constprop.0>:
 8005a70:	2b24      	cmp	r3, #36	@ 0x24
 8005a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a76:	4686      	mov	lr, r0
 8005a78:	4690      	mov	r8, r2
 8005a7a:	d801      	bhi.n	8005a80 <_strtol_l.constprop.0+0x10>
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d106      	bne.n	8005a8e <_strtol_l.constprop.0+0x1e>
 8005a80:	f7ff f828 	bl	8004ad4 <__errno>
 8005a84:	2316      	movs	r3, #22
 8005a86:	6003      	str	r3, [r0, #0]
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	4834      	ldr	r0, [pc, #208]	@ (8005b60 <_strtol_l.constprop.0+0xf0>)
 8005a90:	460d      	mov	r5, r1
 8005a92:	462a      	mov	r2, r5
 8005a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a98:	5d06      	ldrb	r6, [r0, r4]
 8005a9a:	f016 0608 	ands.w	r6, r6, #8
 8005a9e:	d1f8      	bne.n	8005a92 <_strtol_l.constprop.0+0x22>
 8005aa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005aa2:	d12d      	bne.n	8005b00 <_strtol_l.constprop.0+0x90>
 8005aa4:	782c      	ldrb	r4, [r5, #0]
 8005aa6:	2601      	movs	r6, #1
 8005aa8:	1c95      	adds	r5, r2, #2
 8005aaa:	f033 0210 	bics.w	r2, r3, #16
 8005aae:	d109      	bne.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005ab0:	2c30      	cmp	r4, #48	@ 0x30
 8005ab2:	d12a      	bne.n	8005b0a <_strtol_l.constprop.0+0x9a>
 8005ab4:	782a      	ldrb	r2, [r5, #0]
 8005ab6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005aba:	2a58      	cmp	r2, #88	@ 0x58
 8005abc:	d125      	bne.n	8005b0a <_strtol_l.constprop.0+0x9a>
 8005abe:	786c      	ldrb	r4, [r5, #1]
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	3502      	adds	r5, #2
 8005ac4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ac8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005acc:	2200      	movs	r2, #0
 8005ace:	fbbc f9f3 	udiv	r9, ip, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ad8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005adc:	2f09      	cmp	r7, #9
 8005ade:	d81b      	bhi.n	8005b18 <_strtol_l.constprop.0+0xa8>
 8005ae0:	463c      	mov	r4, r7
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	dd27      	ble.n	8005b36 <_strtol_l.constprop.0+0xc6>
 8005ae6:	1c57      	adds	r7, r2, #1
 8005ae8:	d007      	beq.n	8005afa <_strtol_l.constprop.0+0x8a>
 8005aea:	4581      	cmp	r9, r0
 8005aec:	d320      	bcc.n	8005b30 <_strtol_l.constprop.0+0xc0>
 8005aee:	d101      	bne.n	8005af4 <_strtol_l.constprop.0+0x84>
 8005af0:	45a2      	cmp	sl, r4
 8005af2:	db1d      	blt.n	8005b30 <_strtol_l.constprop.0+0xc0>
 8005af4:	fb00 4003 	mla	r0, r0, r3, r4
 8005af8:	2201      	movs	r2, #1
 8005afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005afe:	e7eb      	b.n	8005ad8 <_strtol_l.constprop.0+0x68>
 8005b00:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b02:	bf04      	itt	eq
 8005b04:	782c      	ldrbeq	r4, [r5, #0]
 8005b06:	1c95      	addeq	r5, r2, #2
 8005b08:	e7cf      	b.n	8005aaa <_strtol_l.constprop.0+0x3a>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1da      	bne.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005b0e:	2c30      	cmp	r4, #48	@ 0x30
 8005b10:	bf0c      	ite	eq
 8005b12:	2308      	moveq	r3, #8
 8005b14:	230a      	movne	r3, #10
 8005b16:	e7d5      	b.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005b18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b1c:	2f19      	cmp	r7, #25
 8005b1e:	d801      	bhi.n	8005b24 <_strtol_l.constprop.0+0xb4>
 8005b20:	3c37      	subs	r4, #55	@ 0x37
 8005b22:	e7de      	b.n	8005ae2 <_strtol_l.constprop.0+0x72>
 8005b24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b28:	2f19      	cmp	r7, #25
 8005b2a:	d804      	bhi.n	8005b36 <_strtol_l.constprop.0+0xc6>
 8005b2c:	3c57      	subs	r4, #87	@ 0x57
 8005b2e:	e7d8      	b.n	8005ae2 <_strtol_l.constprop.0+0x72>
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b34:	e7e1      	b.n	8005afa <_strtol_l.constprop.0+0x8a>
 8005b36:	1c53      	adds	r3, r2, #1
 8005b38:	d108      	bne.n	8005b4c <_strtol_l.constprop.0+0xdc>
 8005b3a:	2322      	movs	r3, #34	@ 0x22
 8005b3c:	f8ce 3000 	str.w	r3, [lr]
 8005b40:	4660      	mov	r0, ip
 8005b42:	f1b8 0f00 	cmp.w	r8, #0
 8005b46:	d0a0      	beq.n	8005a8a <_strtol_l.constprop.0+0x1a>
 8005b48:	1e69      	subs	r1, r5, #1
 8005b4a:	e006      	b.n	8005b5a <_strtol_l.constprop.0+0xea>
 8005b4c:	b106      	cbz	r6, 8005b50 <_strtol_l.constprop.0+0xe0>
 8005b4e:	4240      	negs	r0, r0
 8005b50:	f1b8 0f00 	cmp.w	r8, #0
 8005b54:	d099      	beq.n	8005a8a <_strtol_l.constprop.0+0x1a>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d1f6      	bne.n	8005b48 <_strtol_l.constprop.0+0xd8>
 8005b5a:	f8c8 1000 	str.w	r1, [r8]
 8005b5e:	e794      	b.n	8005a8a <_strtol_l.constprop.0+0x1a>
 8005b60:	08006013 	.word	0x08006013

08005b64 <_strtol_r>:
 8005b64:	f7ff bf84 	b.w	8005a70 <_strtol_l.constprop.0>

08005b68 <_strtoul_l.constprop.0>:
 8005b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4e34      	ldr	r6, [pc, #208]	@ (8005c40 <_strtoul_l.constprop.0+0xd8>)
 8005b6e:	4686      	mov	lr, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	4628      	mov	r0, r5
 8005b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b78:	5d37      	ldrb	r7, [r6, r4]
 8005b7a:	f017 0708 	ands.w	r7, r7, #8
 8005b7e:	d1f8      	bne.n	8005b72 <_strtoul_l.constprop.0+0xa>
 8005b80:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b82:	d12f      	bne.n	8005be4 <_strtoul_l.constprop.0+0x7c>
 8005b84:	782c      	ldrb	r4, [r5, #0]
 8005b86:	2701      	movs	r7, #1
 8005b88:	1c85      	adds	r5, r0, #2
 8005b8a:	f033 0010 	bics.w	r0, r3, #16
 8005b8e:	d109      	bne.n	8005ba4 <_strtoul_l.constprop.0+0x3c>
 8005b90:	2c30      	cmp	r4, #48	@ 0x30
 8005b92:	d12c      	bne.n	8005bee <_strtoul_l.constprop.0+0x86>
 8005b94:	7828      	ldrb	r0, [r5, #0]
 8005b96:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005b9a:	2858      	cmp	r0, #88	@ 0x58
 8005b9c:	d127      	bne.n	8005bee <_strtoul_l.constprop.0+0x86>
 8005b9e:	786c      	ldrb	r4, [r5, #1]
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	3502      	adds	r5, #2
 8005ba4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8005ba8:	2600      	movs	r6, #0
 8005baa:	fbb8 f8f3 	udiv	r8, r8, r3
 8005bae:	fb03 f908 	mul.w	r9, r3, r8
 8005bb2:	ea6f 0909 	mvn.w	r9, r9
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005bbc:	f1bc 0f09 	cmp.w	ip, #9
 8005bc0:	d81c      	bhi.n	8005bfc <_strtoul_l.constprop.0+0x94>
 8005bc2:	4664      	mov	r4, ip
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	dd2a      	ble.n	8005c1e <_strtoul_l.constprop.0+0xb6>
 8005bc8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8005bcc:	d007      	beq.n	8005bde <_strtoul_l.constprop.0+0x76>
 8005bce:	4580      	cmp	r8, r0
 8005bd0:	d322      	bcc.n	8005c18 <_strtoul_l.constprop.0+0xb0>
 8005bd2:	d101      	bne.n	8005bd8 <_strtoul_l.constprop.0+0x70>
 8005bd4:	45a1      	cmp	r9, r4
 8005bd6:	db1f      	blt.n	8005c18 <_strtoul_l.constprop.0+0xb0>
 8005bd8:	fb00 4003 	mla	r0, r0, r3, r4
 8005bdc:	2601      	movs	r6, #1
 8005bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005be2:	e7e9      	b.n	8005bb8 <_strtoul_l.constprop.0+0x50>
 8005be4:	2c2b      	cmp	r4, #43	@ 0x2b
 8005be6:	bf04      	itt	eq
 8005be8:	782c      	ldrbeq	r4, [r5, #0]
 8005bea:	1c85      	addeq	r5, r0, #2
 8005bec:	e7cd      	b.n	8005b8a <_strtoul_l.constprop.0+0x22>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d8      	bne.n	8005ba4 <_strtoul_l.constprop.0+0x3c>
 8005bf2:	2c30      	cmp	r4, #48	@ 0x30
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2308      	moveq	r3, #8
 8005bf8:	230a      	movne	r3, #10
 8005bfa:	e7d3      	b.n	8005ba4 <_strtoul_l.constprop.0+0x3c>
 8005bfc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005c00:	f1bc 0f19 	cmp.w	ip, #25
 8005c04:	d801      	bhi.n	8005c0a <_strtoul_l.constprop.0+0xa2>
 8005c06:	3c37      	subs	r4, #55	@ 0x37
 8005c08:	e7dc      	b.n	8005bc4 <_strtoul_l.constprop.0+0x5c>
 8005c0a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005c0e:	f1bc 0f19 	cmp.w	ip, #25
 8005c12:	d804      	bhi.n	8005c1e <_strtoul_l.constprop.0+0xb6>
 8005c14:	3c57      	subs	r4, #87	@ 0x57
 8005c16:	e7d5      	b.n	8005bc4 <_strtoul_l.constprop.0+0x5c>
 8005c18:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8005c1c:	e7df      	b.n	8005bde <_strtoul_l.constprop.0+0x76>
 8005c1e:	1c73      	adds	r3, r6, #1
 8005c20:	d106      	bne.n	8005c30 <_strtoul_l.constprop.0+0xc8>
 8005c22:	2322      	movs	r3, #34	@ 0x22
 8005c24:	f8ce 3000 	str.w	r3, [lr]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	b932      	cbnz	r2, 8005c3a <_strtoul_l.constprop.0+0xd2>
 8005c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c30:	b107      	cbz	r7, 8005c34 <_strtoul_l.constprop.0+0xcc>
 8005c32:	4240      	negs	r0, r0
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	d0f9      	beq.n	8005c2c <_strtoul_l.constprop.0+0xc4>
 8005c38:	b106      	cbz	r6, 8005c3c <_strtoul_l.constprop.0+0xd4>
 8005c3a:	1e69      	subs	r1, r5, #1
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	e7f5      	b.n	8005c2c <_strtoul_l.constprop.0+0xc4>
 8005c40:	08006013 	.word	0x08006013

08005c44 <_strtoul_r>:
 8005c44:	f7ff bf90 	b.w	8005b68 <_strtoul_l.constprop.0>

08005c48 <memmove>:
 8005c48:	4288      	cmp	r0, r1
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	eb01 0402 	add.w	r4, r1, r2
 8005c50:	d902      	bls.n	8005c58 <memmove+0x10>
 8005c52:	4284      	cmp	r4, r0
 8005c54:	4623      	mov	r3, r4
 8005c56:	d807      	bhi.n	8005c68 <memmove+0x20>
 8005c58:	1e43      	subs	r3, r0, #1
 8005c5a:	42a1      	cmp	r1, r4
 8005c5c:	d008      	beq.n	8005c70 <memmove+0x28>
 8005c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c66:	e7f8      	b.n	8005c5a <memmove+0x12>
 8005c68:	4402      	add	r2, r0
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	428a      	cmp	r2, r1
 8005c6e:	d100      	bne.n	8005c72 <memmove+0x2a>
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c7a:	e7f7      	b.n	8005c6c <memmove+0x24>

08005c7c <_sbrk_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d06      	ldr	r5, [pc, #24]	@ (8005c98 <_sbrk_r+0x1c>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	f7fb fb26 	bl	80012d8 <_sbrk>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_sbrk_r+0x1a>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_sbrk_r+0x1a>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20000324 	.word	0x20000324

08005c9c <memcpy>:
 8005c9c:	440a      	add	r2, r1
 8005c9e:	4291      	cmp	r1, r2
 8005ca0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ca4:	d100      	bne.n	8005ca8 <memcpy+0xc>
 8005ca6:	4770      	bx	lr
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cb2:	4291      	cmp	r1, r2
 8005cb4:	d1f9      	bne.n	8005caa <memcpy+0xe>
 8005cb6:	bd10      	pop	{r4, pc}

08005cb8 <_malloc_usable_size_r>:
 8005cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cbc:	1f18      	subs	r0, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfbc      	itt	lt
 8005cc2:	580b      	ldrlt	r3, [r1, r0]
 8005cc4:	18c0      	addlt	r0, r0, r3
 8005cc6:	4770      	bx	lr

08005cc8 <_init>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr

08005cd4 <_fini>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr
