#include "main.h"
#include <string.h>
#include <stdio.h>

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart1; // USART1: 发送ADC数据给处理板
UART_HandleTypeDef huart2; // USART2: 调试输出
UART_HandleTypeDef huart3; // USART3: 接收来自处理板的命令

/* USER CODE BEGIN PV */
#define RX3_BUFFER_SIZE 128
uint8_t rx3_data; // USART3接收的单字节数据
uint8_t rx3_buffer[RX3_BUFFER_SIZE];
uint16_t rx3_index = 0;

char debugBuffer[128];
uint32_t adcValue = 0;
uint32_t lastSendTick = 0;
uint32_t sendInterval = 500; // 每500ms发送一次ADC数据

volatile uint8_t acquisition_running = 1; // 初始为运行状态
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
static void ProcessCommand(const char *command);
static void ADC_ReadValue(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  主程序入口
  * @retval int
  */
int main(void)
{
  /* MCU Configuration */

  /* 初始化HAL库，配置Flash接口和SysTick */
  HAL_Init();

  /* 配置系统时钟 */
  SystemClock_Config();

  /* 初始化所有配置的外设 */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
  // 初始化PA0为输出并设为高电平
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: PA0 set HIGH, ADC active.\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

  // 启动USART3的中断接收，用于接收命令
  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);

  /* USER CODE END 2 */

  /* 无限循环 */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (acquisition_running && (HAL_GetTick() - lastSendTick >= sendInterval))
    {
      lastSendTick = HAL_GetTick();
      ADC_ReadValue();

      // 将ADC值通过USART1发送给处理板
      snprintf(debugBuffer, sizeof(debugBuffer), "ADC:%lu\r\n", adcValue);
      HAL_UART_Transmit(&huart1, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

      // 同时通过USART2输出调试信息
      snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: ADC Value = %lu (sent to Processing Board)\r\n", adcValue);
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 可选：加入小延时以避免忙循环
    HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
  * @brief  读取ADC值
  * @retval None
  */
static void ADC_ReadValue(void)
{
  HAL_ADC_Start(&hadc1);
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
  {
    adcValue = HAL_ADC_GetValue(&hadc1);
  }
  else
  {
    snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: ADC conversion timeout.\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
  }
  HAL_ADC_Stop(&hadc1);
}

/**
  * @brief  UART接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART3)
  {
    // 打印接收到的单个字节及其十六进制值
    snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: Received byte: '%c' (0x%02X)\r\n", rx3_data, rx3_data);
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

    // 将接收到的字节存入缓冲区
    if (rx3_index < RX3_BUFFER_SIZE - 1)
    {
      rx3_buffer[rx3_index++] = rx3_data;
    }
    else
    {
      // 缓冲区溢出
      snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: RX3 buffer overflow.\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
      rx3_index = 0; // 重置缓冲区索引
    }

    // 检查是否接收到换行符，认为命令结束
    if (rx3_data == '\n')
    {
      rx3_buffer[rx3_index] = '\0'; // 末尾添加空字符
      snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: Received command: '%s'\r\n", rx3_buffer);
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);

      // 处理命令
      ProcessCommand((const char*)rx3_buffer);

      // 重置缓冲区索引和内容
      rx3_index = 0;
      memset(rx3_buffer, 0, RX3_BUFFER_SIZE);
    }

    // 重新启用USART3的接收中断
    HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
  }
}

/**
  * @brief  处理接收到的命令
  * @param  command: 空字符结尾的命令字符串
  * @retval None
  */
static void ProcessCommand(const char *command)
{
  // 去除可能的回车符
  char cmd[RX3_BUFFER_SIZE];
  strncpy(cmd, command, RX3_BUFFER_SIZE - 1);
  cmd[RX3_BUFFER_SIZE - 1] = '\0'; // 确保字符串终止
  cmd[strcspn(cmd, "\r")] = '\0';

  if (strcmp(cmd, "CMD:STOP") == 0)
  {
    if (acquisition_running)
    {
      acquisition_running = 0;

      // 关闭PA0
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
      snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: CMD:STOP received. PA0 OFF, ADC stopped.\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
    }
    else
    {
      snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: CMD:STOP received, but already stopped.\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
    }
  }
  else
  {
    snprintf(debugBuffer, sizeof(debugBuffer), "Collector Board: Unknown command: '%s'\r\n", cmd);
    HAL_UART_Transmit(&huart2, (uint8_t*)debugBuffer, strlen(debugBuffer), HAL_MAX_DELAY);
  }
}

/**
  * @brief  系统时钟配置
  * @retval None
  */
void SystemClock_Config(void)
{
  // CubeMX生成的代码
}

/**
  * @brief  ADC1初始化函数
  * @param  None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
  // CubeMX生成的代码，确保ADC1配置为IN10（PC0）
}

/**
  * @brief  USART1初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与处理板一致（如115200）
}

/**
  * @brief  USART2初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与处理板一致（如115200）
}

/**
  * @brief  USART3初始化函数
  * @param  None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
  // CubeMX生成的代码，确保波特率与处理板一致（如115200）
}

/**
  * @brief  GPIO初始化函数
  * @param  None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /* Configure PA0 as output */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* Configure PC0 as analog input (ADC1_IN10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* Configure PA5 as output (optional, for LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* Initialize LED (PA5) to OFF */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

/* 错误处理函数 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
    // 可选：闪烁LED或其他错误指示
    HAL_Delay(1000);
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  报告断言失败的文件名和行号
  * @param  file: 源文件名
  * @param  line: 发生断言的行号
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  // 可选：实现断言失败处理
}
#endif /* USE_FULL_ASSERT */






