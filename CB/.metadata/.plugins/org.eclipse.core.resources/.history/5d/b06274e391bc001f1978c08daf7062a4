/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <string.h>
#include <stdio.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* 定义GPIO引脚（根据实际硬件替换） */
#define IR_LED_Pin       GPIO_PIN_0
#define IR_LED_GPIO_Port GPIOA
#define RED_LED_Pin      GPIO_PIN_1
#define RED_LED_GPIO_Port GPIOA

/* 全局变量：工作模式 / 滤波模式等 */
volatile uint8_t isWorking = 0;  // 是否处于工作状态
uint8_t workMode = 0;    // 0=IR, 1=RED
uint8_t preMode  = 1;    // 1=无处理,2=滑动平均,3=低通滤波
uint8_t advMode  = 0;    // 暂时用不上

/* 单字节中断接收相关 */
static uint8_t  rxByte;
static char     cmdLine[64];
static uint16_t cmdIndex = 0;

/* ========== 预处理滤波器实现 ========== */
#define WINDOW_SIZE 5
float moving_average_filter(float new_sample) {
    static float buffer[WINDOW_SIZE] = {0.0f};
    static int index = 0;
    static float sum = 0.0f;

    sum -= buffer[index];         // 从总和里移除旧值
    buffer[index] = new_sample;   // 替换成新值
    sum += new_sample;            // 总和加上新值

    index = (index + 1) % WINDOW_SIZE;

    return sum / WINDOW_SIZE;
}

#define ALPHA 0.1f
float low_pass_filter(float input) {
    static float prev_output = 0.0f;
    float output = ALPHA * input + (1.0f - ALPHA) * prev_output;
    prev_output = output;
    return output;
}

/**
  * @brief 根据 preMode 选择相应预处理函数
  */
float PreprocessData(float raw, uint8_t mode)
{
  switch(mode)
  {
    case 1: // 不做任何处理
      return raw;

    case 2: // 滑动平均
      return moving_average_filter(raw);

    case 3: // 低通滤波
      return low_pass_filter(raw);

    default:
      return raw;
  }
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void ProcessUartCommand(const char *cmd);
uint16_t ReadADC(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* 单字节接收回调：接收处理板发来的命令 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if(huart->Instance == USART1)
  {
    if(rxByte == '\n' || rxByte == '\r')
    {
      cmdLine[cmdIndex] = '\0';  // 字符串结束
      ProcessUartCommand(cmdLine);

      // 复位缓冲
      cmdIndex = 0;
      memset(cmdLine, 0, sizeof(cmdLine));
    }
    else
    {
      if(cmdIndex < sizeof(cmdLine) - 1)
      {
        cmdLine[cmdIndex++] = (char)rxByte;
      }
    }
    // 再次启动单字节接收
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
    /* 初始化单字节中断接收 */
    cmdIndex = 0;
    memset(cmdLine, 0, sizeof(cmdLine));
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);

    /* 启动提示 */
    char initMsg[] = "Collector Board: Ready.\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t*)initMsg, strlen(initMsg), HAL_MAX_DELAY);

    /* 默认关 IR/RED LED */
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(isWorking)
	    {
	      // 周期性采集 + 发送
	      uint16_t rawVal = ReadADC();
	      float preValF   = PreprocessData((float)rawVal, preMode);  // float滤波
	      uint16_t preVal = (uint16_t)(preValF + 0.5f);  // 转换成uint16_t

	      // 发送DATA到处理板
	      char txBuf[64];
	      sprintf(txBuf, "DATA,%u,%u\r\n", rawVal, preVal);
	      HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, strlen(txBuf), HAL_MAX_DELAY);

	      // 调试打印
	      char dbg[64];
	      sprintf(dbg, "Send Data: raw=%u, pre=%u\r\n", rawVal, preVal);
	      HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);

	      HAL_Delay(100); // ~10Hz
	    }
	    else
	    {
	      // 待机空转
	      HAL_Delay(100);
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief 解析命令：CMD:START,<IR/RED>,<preMode>,<advMode> / CMD:STOP
  */
void ProcessUartCommand(const char *cmd)
{
  if(strncmp(cmd,"CMD:START",9) == 0)
  {
    // 示例: CMD:START,IR,2,1
    char wStr[8] = {0};
    int p=0, a=0;
    sscanf(cmd,"CMD:START,%[^,],%d,%d", wStr, &p, &a);

    // 设置 GPIO
    if(strcmp(wStr,"IR")==0){
      workMode=0;
      HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_SET);   // IR on
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);// RED off
    } else {
      workMode=1;
      HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
    }

    preMode = (uint8_t)p;  // 1=无处理,2=滑动平均,3=低通滤波
    advMode = (uint8_t)a;  // 暂时不用
    isWorking = 1;

    // 返回 ACK:START
    char ack[] = "ACK:START\r\n";
    HAL_UART_Transmit(&huart1,(uint8_t*)ack,strlen(ack),HAL_MAX_DELAY);

    // 调试打印
    char dbg[128];
    sprintf(dbg,"now running: workMode=%s, preMode=%d, advMode=%d\r\n",
            (workMode==0?"IR":"RED"), preMode, advMode);
    HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
  }
  else if(strncmp(cmd,"CMD:STOP",7) == 0)
  {
    isWorking = 0;
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);

    char ack[] = "ACK:STOP\r\n";
    HAL_UART_Transmit(&huart1,(uint8_t*)ack,strlen(ack),HAL_MAX_DELAY);

    HAL_UART_Transmit(&huart2,(uint8_t*)"now stop\r\n",10,HAL_MAX_DELAY);
  }
  else
  {
    char err[] = "ERROR:Unknown CMD\r\n";
    HAL_UART_Transmit(&huart1,(uint8_t*)err,strlen(err),HAL_MAX_DELAY);

    HAL_UART_Transmit(&huart2,(uint8_t*)"Unknown CMD.\r\n",14,HAL_MAX_DELAY);
  }
}

/** 读取ADC一次 */
uint16_t ReadADC(void)
{
  uint16_t val=0;
  HAL_ADC_Start(&hadc1);
  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
  {
    val=HAL_ADC_GetValue(&hadc1);
  }
  HAL_ADC_Stop(&hadc1);
  return val;
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState           = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue= 0;
  RCC_OscInitStruct.MSIClockRange      = RCC_MSIRANGE_6; // 4 MHz
  RCC_OscInitStruct.PLL.PLLState       = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource      = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM           = 1;
  RCC_OscInitStruct.PLL.PLLN           = 24;
  RCC_OscInitStruct.PLL.PLLP           = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ           = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR           = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                   |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;
    hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hadc1.Init.ScanConvMode          = ADC_SCAN_DISABLE;
    hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
    hadc1.Init.LowPowerAutoWait      = DISABLE;
    hadc1.Init.ContinuousConvMode    = DISABLE;
    hadc1.Init.NbrOfConversion       = 1;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
    hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.Overrun               = ADC_OVR_DATA_PRESERVED;
    hadc1.Init.OversamplingMode      = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel      = ADC_CHANNEL_10;  // NOTE: 修改为你的实际传感器引脚
  sConfig.Rank         = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset       = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
	  huart1.Instance          = USART1;
	  huart1.Init.BaudRate     = 115200;
	  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
	  huart1.Init.StopBits     = UART_STOPBITS_1;
	  huart1.Init.Parity       = UART_PARITY_NONE;
	  huart1.Init.Mode         = UART_MODE_TX_RX;
	  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	  huart1.Init.OneBitSampling= UART_ONE_BIT_SAMPLE_DISABLE;
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance          = USART2;
	  huart2.Init.BaudRate     = 115200;
	  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
	  huart2.Init.StopBits     = UART_STOPBITS_1;
	  huart2.Init.Parity       = UART_PARITY_NONE;
	  huart2.Init.Mode         = UART_MODE_TX_RX;
	  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	  huart2.Init.OneBitSampling= UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();


/* USER CODE BEGIN MX_GPIO_Init_2 */
  // IR_LED_Pin / RED_LED_Pin
  GPIO_InitStruct.Pin   = IR_LED_Pin|RED_LED_Pin;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
