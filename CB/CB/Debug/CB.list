
CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007950  08007950  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007958  08007958  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007958  08007958  00008958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007960  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  080079bc  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080079bc  00009380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a6d  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244e  00000000  00000000  00019af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab6  00000000  00000000  0001cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b9f  00000000  00000000  0001d7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff65  00000000  00000000  00045385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb04a  00000000  00000000  000552ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  00150378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00154620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007698 	.word	0x08007698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007698 	.word	0x08007698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
  * @brief USART1 RxCpltCallback
  * 当处理板发送命令时触发此回调
  */
/** USART1 Rx中断回调：处理板命令到来时触发 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <HAL_UART_RxCpltCallback+0x3c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d110      	bne.n	80005c4 <HAL_UART_RxCpltCallback+0x34>
  {
    rxBuffer[63] = '\0';
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    ProcessUartCommand(rxBuffer);
 80005aa:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005ac:	f000 f8b0 	bl	8000710 <ProcessUartCommand>

    memset(rxBuffer,0,sizeof(rxBuffer));
 80005b0:	2240      	movs	r2, #64	@ 0x40
 80005b2:	2100      	movs	r1, #0
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005b6:	f005 ff75 	bl	80064a4 <memset>
    HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,sizeof(rxBuffer)-1);
 80005ba:	223f      	movs	r2, #63	@ 0x3f
 80005bc:	4904      	ldr	r1, [pc, #16]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <HAL_UART_RxCpltCallback+0x44>)
 80005c0:	f004 fc00 	bl	8004dc4 <HAL_UART_Receive_IT>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40013800 	.word	0x40013800
 80005d0:	200001f0 	.word	0x200001f0
 80005d4:	200000dc 	.word	0x200000dc

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0a8      	sub	sp, #160	@ 0xa0
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd46 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f9ed 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb07 	bl	8000bf8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ea:	f000 fa2f 	bl	8000a4c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005ee:	f000 faa3 	bl	8000b38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 fad1 	bl	8000b98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 校准ADC（可选）
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80005f6:	217f      	movs	r1, #127	@ 0x7f
 80005f8:	483c      	ldr	r0, [pc, #240]	@ (80006ec <main+0x114>)
 80005fa:	f002 fb57 	bl	8002cac <HAL_ADCEx_Calibration_Start>

  // 启动USART1中断接收
  memset(rxBuffer,0,sizeof(rxBuffer));
 80005fe:	2240      	movs	r2, #64	@ 0x40
 8000600:	2100      	movs	r1, #0
 8000602:	483b      	ldr	r0, [pc, #236]	@ (80006f0 <main+0x118>)
 8000604:	f005 ff4e 	bl	80064a4 <memset>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,sizeof(rxBuffer)-1);
 8000608:	223f      	movs	r2, #63	@ 0x3f
 800060a:	4939      	ldr	r1, [pc, #228]	@ (80006f0 <main+0x118>)
 800060c:	4839      	ldr	r0, [pc, #228]	@ (80006f4 <main+0x11c>)
 800060e:	f004 fbd9 	bl	8004dc4 <HAL_UART_Receive_IT>

  // 启动提示
  char initMsg[] = "Collector Board: Standby.\r\n";
 8000612:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <main+0x120>)
 8000614:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2,(uint8_t*)initMsg, strlen(initMsg), HAL_MAX_DELAY);
 8000626:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd0 	bl	80001d0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800063c:	482f      	ldr	r0, [pc, #188]	@ (80006fc <main+0x124>)
 800063e:	f004 fb37 	bl	8004cb0 <HAL_UART_Transmit>

  // 默认关LED (PA0=IR, PA1=RED)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f002 ffab 	bl	80035a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000656:	f002 ffa5 	bl	80035a4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(isWorking)
 800065a:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <main+0x128>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d03e      	beq.n	80006e2 <main+0x10a>
	    {
	      // 周期性采集
	      uint16_t raw  = ReadADC();
 8000664:	f000 f95e 	bl	8000924 <ReadADC>
 8000668:	4603      	mov	r3, r0
 800066a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
	      uint16_t proc = PreprocessData(raw, preMode);
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <main+0x12c>)
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f971 	bl	8000960 <PreprocessData>
 800067e:	4603      	mov	r3, r0
 8000680:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c

	      char txBuf[64];
	      sprintf(txBuf,"DATA,%u,%u\r\n", raw, proc);
 8000684:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8000688:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800068c:	4638      	mov	r0, r7
 800068e:	491e      	ldr	r1, [pc, #120]	@ (8000708 <main+0x130>)
 8000690:	f005 feaa 	bl	80063e8 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*)txBuf, strlen(txBuf), HAL_MAX_DELAY);
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4639      	mov	r1, r7
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <main+0x11c>)
 80006a8:	f004 fb02 	bl	8004cb0 <HAL_UART_Transmit>

	      char dbg[64];
	      sprintf(dbg,"Send Data: raw=%u, pre=%u\r\n",raw,proc);
 80006ac:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 80006b0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80006b4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80006b8:	4914      	ldr	r1, [pc, #80]	@ (800070c <main+0x134>)
 80006ba:	f005 fe95 	bl	80063e8 <siprintf>
	      HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 80006be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd84 	bl	80001d0 <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <main+0x124>)
 80006d6:	f004 faeb 	bl	8004cb0 <HAL_UART_Transmit>

	      HAL_Delay(100);
 80006da:	2064      	movs	r0, #100	@ 0x64
 80006dc:	f000 fd3c 	bl	8001158 <HAL_Delay>
 80006e0:	e7bb      	b.n	800065a <main+0x82>
	    }
	    else
	    {
	      HAL_Delay(100);
 80006e2:	2064      	movs	r0, #100	@ 0x64
 80006e4:	f000 fd38 	bl	8001158 <HAL_Delay>
	    if(isWorking)
 80006e8:	e7b7      	b.n	800065a <main+0x82>
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078
 80006f0:	200001f0 	.word	0x200001f0
 80006f4:	200000dc 	.word	0x200000dc
 80006f8:	080076dc 	.word	0x080076dc
 80006fc:	20000164 	.word	0x20000164
 8000700:	200001ec 	.word	0x200001ec
 8000704:	200001ee 	.word	0x200001ee
 8000708:	080076b0 	.word	0x080076b0
 800070c:	080076c0 	.word	0x080076c0

08000710 <ProcessUartCommand>:
  /* USER CODE END 3 */
}

/* 命令解析：CMD:START,<IR/RED>,<preMode>,<advMode> / CMD:STOP */
void ProcessUartCommand(char* cmd)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b0b4      	sub	sp, #208	@ 0xd0
 8000714:	af02      	add	r7, sp, #8
 8000716:	6078      	str	r0, [r7, #4]
  if(strncmp(cmd,"CMD:START",9)==0)
 8000718:	2209      	movs	r2, #9
 800071a:	4971      	ldr	r1, [pc, #452]	@ (80008e0 <ProcessUartCommand+0x1d0>)
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 feaf 	bl	8006480 <strncmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8083 	bne.w	8000830 <ProcessUartCommand+0x120>
  {
    char wStr[8]={0};
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000730:	2300      	movs	r3, #0
 8000732:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    int p=0,a=0;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    sscanf(cmd, "CMD:START,%[^,],%d,%d", wStr,&p,&a);
 8000742:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8000746:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 800074a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	460b      	mov	r3, r1
 8000752:	4964      	ldr	r1, [pc, #400]	@ (80008e4 <ProcessUartCommand+0x1d4>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f005 fe67 	bl	8006428 <siscanf>

    // 设置GPIO
    if(strcmp(wStr,"IR")==0){
 800075a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800075e:	4962      	ldr	r1, [pc, #392]	@ (80008e8 <ProcessUartCommand+0x1d8>)
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd3d 	bl	80001e0 <strcmp>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10f      	bne.n	800078c <ProcessUartCommand+0x7c>
      workMode=0;
 800076c:	4b5f      	ldr	r3, [pc, #380]	@ (80008ec <ProcessUartCommand+0x1dc>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f002 ff13 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2102      	movs	r1, #2
 8000782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000786:	f002 ff0d 	bl	80035a4 <HAL_GPIO_WritePin>
 800078a:	e00e      	b.n	80007aa <ProcessUartCommand+0x9a>
    } else {
      workMode=1;
 800078c:	4b57      	ldr	r3, [pc, #348]	@ (80008ec <ProcessUartCommand+0x1dc>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f002 ff03 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2102      	movs	r1, #2
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f002 fefd 	bl	80035a4 <HAL_GPIO_WritePin>
    }

    preMode=(uint8_t)p; // 0~3
 80007aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b4f      	ldr	r3, [pc, #316]	@ (80008f0 <ProcessUartCommand+0x1e0>)
 80007b2:	701a      	strb	r2, [r3, #0]
    advMode=(uint8_t)a; // 暂时不使用
 80007b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b4e      	ldr	r3, [pc, #312]	@ (80008f4 <ProcessUartCommand+0x1e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
    isWorking=1;
 80007be:	4b4e      	ldr	r3, [pc, #312]	@ (80008f8 <ProcessUartCommand+0x1e8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]

    // 返回ACK:START到处理板
    char ack[] = "ACK:START\r\n";
 80007c4:	4a4d      	ldr	r2, [pc, #308]	@ (80008fc <ProcessUartCommand+0x1ec>)
 80007c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80007ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80007cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1,(uint8_t*)ack,strlen(ack),HAL_MAX_DELAY);
 80007d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fcfb 	bl	80001d0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e6:	4846      	ldr	r0, [pc, #280]	@ (8000900 <ProcessUartCommand+0x1f0>)
 80007e8:	f004 fa62 	bl	8004cb0 <HAL_UART_Transmit>

    // **在采集板串口(USART2)打印**
    char dbg[128];
    sprintf(dbg,"now running: workMode=%s, preMode=%d, advMode=%d\r\n",
            (workMode==0?"IR":"RED"), preMode, advMode);
 80007ec:	4b3f      	ldr	r3, [pc, #252]	@ (80008ec <ProcessUartCommand+0x1dc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
    sprintf(dbg,"now running: workMode=%s, preMode=%d, advMode=%d\r\n",
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <ProcessUartCommand+0xe8>
 80007f4:	4a3c      	ldr	r2, [pc, #240]	@ (80008e8 <ProcessUartCommand+0x1d8>)
 80007f6:	e000      	b.n	80007fa <ProcessUartCommand+0xea>
 80007f8:	4a42      	ldr	r2, [pc, #264]	@ (8000904 <ProcessUartCommand+0x1f4>)
 80007fa:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <ProcessUartCommand+0x1e0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4619      	mov	r1, r3
 8000800:	4b3c      	ldr	r3, [pc, #240]	@ (80008f4 <ProcessUartCommand+0x1e4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f107 000c 	add.w	r0, r7, #12
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	460b      	mov	r3, r1
 800080c:	493e      	ldr	r1, [pc, #248]	@ (8000908 <ProcessUartCommand+0x1f8>)
 800080e:	f005 fdeb 	bl	80063e8 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)dbg,strlen(dbg),HAL_MAX_DELAY);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcda 	bl	80001d0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 010c 	add.w	r1, r7, #12
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000828:	4838      	ldr	r0, [pc, #224]	@ (800090c <ProcessUartCommand+0x1fc>)
 800082a:	f004 fa41 	bl	8004cb0 <HAL_UART_Transmit>
    char err[]="ERROR:Unknown CMD\r\n";
    HAL_UART_Transmit(&huart1,(uint8_t*)err,strlen(err),HAL_MAX_DELAY);

    HAL_UART_Transmit(&huart2,(uint8_t*)"Unknown CMD.\r\n",14,HAL_MAX_DELAY);
  }
}
 800082e:	e052      	b.n	80008d6 <ProcessUartCommand+0x1c6>
  else if(strncmp(cmd,"CMD:STOP",7)==0)
 8000830:	2207      	movs	r2, #7
 8000832:	4937      	ldr	r1, [pc, #220]	@ (8000910 <ProcessUartCommand+0x200>)
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f005 fe23 	bl	8006480 <strncmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d12d      	bne.n	800089c <ProcessUartCommand+0x18c>
    isWorking=0;
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <ProcessUartCommand+0x1e8>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2101      	movs	r1, #1
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f002 fea9 	bl	80035a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2102      	movs	r1, #2
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f002 fea3 	bl	80035a4 <HAL_GPIO_WritePin>
    char ack[]="ACK:STOP\r\n";
 800085e:	4a2d      	ldr	r2, [pc, #180]	@ (8000914 <ProcessUartCommand+0x204>)
 8000860:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	3302      	adds	r3, #2
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,(uint8_t*)ack,strlen(ack),HAL_MAX_DELAY);
 8000870:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcab 	bl	80001d0 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000886:	481e      	ldr	r0, [pc, #120]	@ (8000900 <ProcessUartCommand+0x1f0>)
 8000888:	f004 fa12 	bl	8004cb0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,(uint8_t*)"now stop\r\n",10,HAL_MAX_DELAY);
 800088c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000890:	220a      	movs	r2, #10
 8000892:	4921      	ldr	r1, [pc, #132]	@ (8000918 <ProcessUartCommand+0x208>)
 8000894:	481d      	ldr	r0, [pc, #116]	@ (800090c <ProcessUartCommand+0x1fc>)
 8000896:	f004 fa0b 	bl	8004cb0 <HAL_UART_Transmit>
}
 800089a:	e01c      	b.n	80008d6 <ProcessUartCommand+0x1c6>
    char err[]="ERROR:Unknown CMD\r\n";
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <ProcessUartCommand+0x20c>)
 800089e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80008a2:	461d      	mov	r5, r3
 80008a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart1,(uint8_t*)err,strlen(err),HAL_MAX_DELAY);
 80008ac:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc8d 	bl	80001d0 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c2:	480f      	ldr	r0, [pc, #60]	@ (8000900 <ProcessUartCommand+0x1f0>)
 80008c4:	f004 f9f4 	bl	8004cb0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,(uint8_t*)"Unknown CMD.\r\n",14,HAL_MAX_DELAY);
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008cc:	220e      	movs	r2, #14
 80008ce:	4914      	ldr	r1, [pc, #80]	@ (8000920 <ProcessUartCommand+0x210>)
 80008d0:	480e      	ldr	r0, [pc, #56]	@ (800090c <ProcessUartCommand+0x1fc>)
 80008d2:	f004 f9ed 	bl	8004cb0 <HAL_UART_Transmit>
}
 80008d6:	bf00      	nop
 80008d8:	37c8      	adds	r7, #200	@ 0xc8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bdb0      	pop	{r4, r5, r7, pc}
 80008de:	bf00      	nop
 80008e0:	080076f8 	.word	0x080076f8
 80008e4:	08007704 	.word	0x08007704
 80008e8:	0800771c 	.word	0x0800771c
 80008ec:	200001ed 	.word	0x200001ed
 80008f0:	200001ee 	.word	0x200001ee
 80008f4:	200001ef 	.word	0x200001ef
 80008f8:	200001ec 	.word	0x200001ec
 80008fc:	08007780 	.word	0x08007780
 8000900:	200000dc 	.word	0x200000dc
 8000904:	08007720 	.word	0x08007720
 8000908:	08007724 	.word	0x08007724
 800090c:	20000164 	.word	0x20000164
 8000910:	08007758 	.word	0x08007758
 8000914:	0800778c 	.word	0x0800778c
 8000918:	08007764 	.word	0x08007764
 800091c:	08007798 	.word	0x08007798
 8000920:	08007770 	.word	0x08007770

08000924 <ReadADC>:

/** 读取ADC */
uint16_t ReadADC(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  uint16_t val=0;
 800092a:	2300      	movs	r3, #0
 800092c:	80fb      	strh	r3, [r7, #6]
  HAL_ADC_Start(&hadc1);
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <ReadADC+0x38>)
 8000930:	f000 ffca 	bl	80018c8 <HAL_ADC_Start>
  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 8000934:	210a      	movs	r1, #10
 8000936:	4809      	ldr	r0, [pc, #36]	@ (800095c <ReadADC+0x38>)
 8000938:	f001 f8b4 	bl	8001aa4 <HAL_ADC_PollForConversion>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d104      	bne.n	800094c <ReadADC+0x28>
  {
    val=HAL_ADC_GetValue(&hadc1);
 8000942:	4806      	ldr	r0, [pc, #24]	@ (800095c <ReadADC+0x38>)
 8000944:	f001 f986 	bl	8001c54 <HAL_ADC_GetValue>
 8000948:	4603      	mov	r3, r0
 800094a:	80fb      	strh	r3, [r7, #6]
  }
  HAL_ADC_Stop(&hadc1);
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <ReadADC+0x38>)
 800094e:	f001 f875 	bl	8001a3c <HAL_ADC_Stop>
  return val;
 8000952:	88fb      	ldrh	r3, [r7, #6]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000078 	.word	0x20000078

08000960 <PreprocessData>:

/** 预处理函数：0=无处理,1=原值,2=raw-10,3=raw+raw/2 */
uint16_t PreprocessData(uint16_t raw, uint8_t mode)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4613      	mov	r3, r2
 800096e:	717b      	strb	r3, [r7, #5]
  switch(mode){
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d81d      	bhi.n	80009b2 <PreprocessData+0x52>
 8000976:	a201      	add	r2, pc, #4	@ (adr r2, 800097c <PreprocessData+0x1c>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	0800098d 	.word	0x0800098d
 8000980:	08000991 	.word	0x08000991
 8000984:	08000995 	.word	0x08000995
 8000988:	080009a5 	.word	0x080009a5
    case 0: return raw;
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	e011      	b.n	80009b4 <PreprocessData+0x54>
    case 1: return raw;
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	e00f      	b.n	80009b4 <PreprocessData+0x54>
    case 2: return (raw>10)?(raw-10):0;
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	2b0a      	cmp	r3, #10
 8000998:	bf38      	it	cc
 800099a:	230a      	movcc	r3, #10
 800099c:	b29b      	uxth	r3, r3
 800099e:	3b0a      	subs	r3, #10
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	e007      	b.n	80009b4 <PreprocessData+0x54>
    case 3: return raw + raw/2;
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	e000      	b.n	80009b4 <PreprocessData+0x54>
    default: return raw;
 80009b2:	88fb      	ldrh	r3, [r7, #6]
  }
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b096      	sub	sp, #88	@ 0x58
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2244      	movs	r2, #68	@ 0x44
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fd68 	bl	80064a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009e6:	f002 fe03 	bl	80035f0 <HAL_PWREx_ControlVoltageScaling>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f0:	f000 f932 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009f4:	2310      	movs	r3, #16
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a00:	2360      	movs	r3, #96	@ 0x60
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fe45 	bl	800369c <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a18:	f000 f91e 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fa0d 	bl	8003e54 <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a40:	f000 f90a 	bl	8000c58 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	@ 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a70:	4a2f      	ldr	r2, [pc, #188]	@ (8000b30 <MX_ADC1_Init+0xe4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a74:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ace:	4817      	ldr	r0, [pc, #92]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000ad0:	f000 fdaa 	bl	8001628 <HAL_ADC_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ada:	f000 f8bd 	bl	8000c58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4810      	ldr	r0, [pc, #64]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000aea:	f002 f971 	bl	8002dd0 <HAL_ADCEx_MultiModeConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af4:	f000 f8b0 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_ADC1_Init+0xe8>)
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afc:	2306      	movs	r3, #6
 8000afe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b04:	237f      	movs	r3, #127	@ 0x7f
 8000b06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_ADC1_Init+0xe0>)
 8000b16:	f001 fae3 	bl	80020e0 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b20:	f000 f89a 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	@ 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000078 	.word	0x20000078
 8000b30:	50040000 	.word	0x50040000
 8000b34:	2a000400 	.word	0x2a000400

08000b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	@ (8000b94 <MX_USART1_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b7c:	f004 f84a 	bl	8004c14 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f867 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000dc 	.word	0x200000dc
 8000b94:	40013800 	.word	0x40013800

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f004 f81a 	bl	8004c14 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f837 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000164 	.word	0x20000164
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_GPIO_Init+0x5c>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <MX_GPIO_Init+0x5c>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_GPIO_Init+0x5c>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ground_RED_LED_Pin|Ground_IR_LED_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2103      	movs	r1, #3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f002 fcba 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ground_RED_LED_Pin Ground_IR_LED_Pin */
  GPIO_InitStruct.Pin = Ground_RED_LED_Pin|Ground_IR_LED_Pin;
 8000c30:	2303      	movs	r3, #3
 8000c32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c48:	f002 fb02 	bl	8003250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ac      	sub	sp, #176	@ 0xb0
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2288      	movs	r2, #136	@ 0x88
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f005 fbe9 	bl	80064a4 <memset>
  if(hadc->Instance==ADC1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <HAL_ADC_MspInit+0xd8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d14f      	bne.n	8000d7c <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ce0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ce2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fac5 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d18:	f7ff ff9e 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Analog_Output_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d52:	230b      	movs	r3, #11
 8000d54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_Output_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f002 fa72 	bl	8003250 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2012      	movs	r0, #18
 8000d72:	f002 f9b8 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d76:	2012      	movs	r0, #18
 8000d78:	f002 f9d1 	bl	800311e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	37b0      	adds	r7, #176	@ 0xb0
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	50040000 	.word	0x50040000
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2288      	movs	r2, #136	@ 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 fb79 	bl	80064a4 <memset>
  if(huart->Instance==USART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee4 <HAL_UART_MspInit+0x158>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d145      	bne.n	8000e48 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fa67 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ff40 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ddc:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de4:	4b40      	ldr	r3, [pc, #256]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e22:	2307      	movs	r3, #7
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f002 fa0d 	bl	8003250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2025      	movs	r0, #37	@ 0x25
 8000e3c:	f002 f953 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e40:	2025      	movs	r0, #37	@ 0x25
 8000e42:	f002 f96c 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e46:	e048      	b.n	8000eda <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a27      	ldr	r2, [pc, #156]	@ (8000eec <HAL_UART_MspInit+0x160>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d143      	bne.n	8000eda <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fa1c 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000e6a:	f7ff fef5 	bl	8000c58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_UART_MspInit+0x15c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec6:	f002 f9c3 	bl	8003250 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2026      	movs	r0, #38	@ 0x26
 8000ed0:	f002 f909 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed4:	2026      	movs	r0, #38	@ 0x26
 8000ed6:	f002 f922 	bl	800311e <HAL_NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	37b8      	adds	r7, #184	@ 0xb8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40004400 	.word	0x40004400

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f8e7 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <ADC1_2_IRQHandler+0x10>)
 8000f56:	f000 fe8b 	bl	8001c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000078 	.word	0x20000078

08000f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <USART1_IRQHandler+0x10>)
 8000f6a:	f003 ff77 	bl	8004e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000dc 	.word	0x200000dc

08000f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <USART2_IRQHandler+0x10>)
 8000f7e:	f003 ff6d 	bl	8004e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000164 	.word	0x20000164

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f005 fa7a 	bl	80064b4 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20018000 	.word	0x20018000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000230 	.word	0x20000230
 8000ff4:	20000380 	.word	0x20000380

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	@ (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	@ (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f005 fa39 	bl	80064c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff fac3 	bl	80005d8 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001060:	08007960 	.word	0x08007960
  ldr r2, =_sbss
 8001064:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001068:	20000380 	.word	0x20000380

0800106c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC3_IRQHandler>

0800106e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f002 f829 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f80e 	bl	80010a0 <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e001      	b.n	8001094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001090:	f7ff fde8 	bl	8000c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001094:	79fb      	ldrb	r3, [r7, #7]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d023      	beq.n	80010fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_InitTick+0x70>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_InitTick+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f835 	bl	800313a <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d809      	bhi.n	80010f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f001 ffff 	bl	80030e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_InitTick+0x74>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e007      	b.n	8001100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e004      	b.n	8001100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e001      	b.n	8001100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000234 	.word	0x20000234

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000234 	.word	0x20000234

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3360      	adds	r3, #96	@ 0x60
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <LL_ADC_SetOffset+0x44>)
 800122a:	4013      	ands	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	4313      	orrs	r3, r2
 8001238:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	03fff000 	.word	0x03fff000

08001250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3360      	adds	r3, #96	@ 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3360      	adds	r3, #96	@ 0x60
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012d8:	b480      	push	{r7}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3330      	adds	r3, #48	@ 0x30
 80012e8:	461a      	mov	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	4413      	add	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	211f      	movs	r1, #31
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0e9b      	lsrs	r3, r3, #26
 8001310:	f003 011f 	and.w	r1, r3, #31
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001356:	b480      	push	{r7}
 8001358:	b087      	sub	sp, #28
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3314      	adds	r3, #20
 8001366:	461a      	mov	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	0e5b      	lsrs	r3, r3, #25
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	0d1b      	lsrs	r3, r3, #20
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2107      	movs	r1, #7
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0d1b      	lsrs	r3, r3, #20
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	431a      	orrs	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0318 	and.w	r3, r3, #24
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	400b      	ands	r3, r1
 80013d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013da:	431a      	orrs	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	0007ffff 	.word	0x0007ffff

080013f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 031f 	and.w	r3, r3, #31
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800143c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6093      	str	r3, [r2, #8]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001464:	d101      	bne.n	800146a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800148c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014b4:	d101      	bne.n	80014ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001500:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001504:	f043 0202 	orr.w	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <LL_ADC_IsEnabled+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_ADC_IsEnabled+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d101      	bne.n	8001556 <LL_ADC_IsDisableOngoing+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_ADC_IsDisableOngoing+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a0:	f043 0210 	orr.w	r2, r3, #16
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d101      	bne.n	80015cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b08      	cmp	r3, #8
 8001614:	d101      	bne.n	800161a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e130      	b.n	80018a4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fb2b 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fef1 	bl	8001450 <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fed7 	bl	800142c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff0c 	bl	80014a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d115      	bne.n	80016ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fef0 	bl	8001478 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001698:	4b84      	ldr	r3, [pc, #528]	@ (80018ac <HAL_ADC_Init+0x284>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	4a84      	ldr	r2, [pc, #528]	@ (80018b0 <HAL_ADC_Init+0x288>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff feee 	bl	80014a0 <LL_ADC_IsInternalRegulatorEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff62 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80016f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80c9 	bne.w	8001892 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80c5 	bne.w	8001892 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fefb 	bl	8001518 <LL_ADC_IsEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d115      	bne.n	8001754 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001728:	4862      	ldr	r0, [pc, #392]	@ (80018b4 <HAL_ADC_Init+0x28c>)
 800172a:	f7ff fef5 	bl	8001518 <LL_ADC_IsEnabled>
 800172e:	4604      	mov	r4, r0
 8001730:	4861      	ldr	r0, [pc, #388]	@ (80018b8 <HAL_ADC_Init+0x290>)
 8001732:	f7ff fef1 	bl	8001518 <LL_ADC_IsEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	431c      	orrs	r4, r3
 800173a:	4860      	ldr	r0, [pc, #384]	@ (80018bc <HAL_ADC_Init+0x294>)
 800173c:	f7ff feec 	bl	8001518 <LL_ADC_IsEnabled>
 8001740:	4603      	mov	r3, r0
 8001742:	4323      	orrs	r3, r4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	485c      	ldr	r0, [pc, #368]	@ (80018c0 <HAL_ADC_Init+0x298>)
 8001750:	f7ff fd26 	bl	80011a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001764:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800176a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_ADC_Init+0x29c>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff1c 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 80017ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d13d      	bne.n	800184e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d13a      	bne.n	800184e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017dc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017e4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017f4:	f023 0302 	bic.w	r3, r3, #2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	430b      	orrs	r3, r1
 8001800:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001808:	2b01      	cmp	r3, #1
 800180a:	d118      	bne.n	800183e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001816:	f023 0304 	bic.w	r3, r3, #4
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800182e:	430a      	orrs	r2, r1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	e007      	b.n	800184e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10c      	bne.n	8001870 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185c:	f023 010f 	bic.w	r1, r3, #15
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	631a      	str	r2, [r3, #48]	@ 0x30
 800186e:	e007      	b.n	8001880 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020f 	bic.w	r2, r2, #15
 800187e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001890:	e007      	b.n	80018a2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001896:	f043 0210 	orr.w	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3724      	adds	r7, #36	@ 0x24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	053e2d63 	.word	0x053e2d63
 80018b4:	50040000 	.word	0x50040000
 80018b8:	50040100 	.word	0x50040100
 80018bc:	50040200 	.word	0x50040200
 80018c0:	50040300 	.word	0x50040300
 80018c4:	fff0c007 	.word	0xfff0c007

080018c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d0:	4857      	ldr	r0, [pc, #348]	@ (8001a30 <HAL_ADC_Start+0x168>)
 80018d2:	f7ff fd8f 	bl	80013f4 <LL_ADC_GetMultimode>
 80018d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe69 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 809c 	bne.w	8001a22 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_Start+0x30>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e097      	b.n	8001a28 <HAL_ADC_Start+0x160>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 f89b 	bl	8002a3c <ADC_Enable>
 8001906:	4603      	mov	r3, r0
 8001908:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8083 	bne.w	8001a18 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001916:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a42      	ldr	r2, [pc, #264]	@ (8001a34 <HAL_ADC_Start+0x16c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d002      	beq.n	8001936 <HAL_ADC_Start+0x6e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e000      	b.n	8001938 <HAL_ADC_Start+0x70>
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_ADC_Start+0x170>)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800195e:	d106      	bne.n	800196e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	f023 0206 	bic.w	r2, r3, #6
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	659a      	str	r2, [r3, #88]	@ 0x58
 800196c:	e002      	b.n	8001974 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	221c      	movs	r2, #28
 800197a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2a      	ldr	r2, [pc, #168]	@ (8001a34 <HAL_ADC_Start+0x16c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d002      	beq.n	8001994 <HAL_ADC_Start+0xcc>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	e000      	b.n	8001996 <HAL_ADC_Start+0xce>
 8001994:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <HAL_ADC_Start+0x170>)
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4293      	cmp	r3, r2
 800199c:	d008      	beq.n	80019b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d002      	beq.n	80019b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d114      	bne.n	80019da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fdc6 	bl	8001564 <LL_ADC_REG_StartConversion>
 80019d8:	e025      	b.n	8001a26 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_ADC_Start+0x16c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d002      	beq.n	80019f6 <HAL_ADC_Start+0x12e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e000      	b.n	80019f8 <HAL_ADC_Start+0x130>
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <HAL_ADC_Start+0x170>)
 80019f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00f      	beq.n	8001a26 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a16:	e006      	b.n	8001a26 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001a20:	e001      	b.n	8001a26 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
 8001a24:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	50040300 	.word	0x50040300
 8001a34:	50040100 	.word	0x50040100
 8001a38:	50040000 	.word	0x50040000

08001a3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Stop+0x16>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e023      	b.n	8001a9a <HAL_ADC_Stop+0x5e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 ff31 	bl	80028c4 <ADC_ConversionStop>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d111      	bne.n	8001a90 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 f86b 	bl	8002b48 <ADC_Disable>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aae:	4866      	ldr	r0, [pc, #408]	@ (8001c48 <HAL_ADC_PollForConversion+0x1a4>)
 8001ab0:	f7ff fca0 	bl	80013f4 <LL_ADC_GetMultimode>
 8001ab4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d102      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e02a      	b.n	8001b1a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d111      	bne.n	8001afa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0a4      	b.n	8001c3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001af4:	2304      	movs	r3, #4
 8001af6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001af8:	e00f      	b.n	8001b1a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001afa:	4853      	ldr	r0, [pc, #332]	@ (8001c48 <HAL_ADC_PollForConversion+0x1a4>)
 8001afc:	f7ff fc88 	bl	8001410 <LL_ADC_GetMultiDMATransfer>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e093      	b.n	8001c3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b16:	2304      	movs	r3, #4
 8001b18:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b1a:	f7ff fb11 	bl	8001140 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b20:	e021      	b.n	8001b66 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b28:	d01d      	beq.n	8001b66 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b2a:	f7ff fb09 	bl	8001140 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <HAL_ADC_PollForConversion+0x9c>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d112      	bne.n	8001b66 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10b      	bne.n	8001b66 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b52:	f043 0204 	orr.w	r2, r3, #4
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e06b      	b.n	8001c3e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0d6      	beq.n	8001b22 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb94 	bl	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01c      	beq.n	8001bca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e5b      	ldrb	r3, [r3, #25]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d118      	bne.n	8001bca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d111      	bne.n	8001bca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001baa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1f      	ldr	r2, [pc, #124]	@ (8001c4c <HAL_ADC_PollForConversion+0x1a8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d002      	beq.n	8001bda <HAL_ADC_PollForConversion+0x136>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_PollForConversion+0x138>
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_ADC_PollForConversion+0x1ac>)
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d008      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b09      	cmp	r3, #9
 8001bf4:	d104      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e00c      	b.n	8001c1a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_ADC_PollForConversion+0x1a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d002      	beq.n	8001c10 <HAL_ADC_PollForConversion+0x16c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e000      	b.n	8001c12 <HAL_ADC_PollForConversion+0x16e>
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_ADC_PollForConversion+0x1ac>)
 8001c12:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d104      	bne.n	8001c2a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e008      	b.n	8001c3c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d103      	bne.n	8001c3c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	220c      	movs	r2, #12
 8001c3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	50040300 	.word	0x50040300
 8001c4c:	50040100 	.word	0x50040100
 8001c50:	50040000 	.word	0x50040000

08001c54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c8c:	4882      	ldr	r0, [pc, #520]	@ (8001e98 <HAL_ADC_IRQHandler+0x228>)
 8001c8e:	f7ff fbb1 	bl	80013f4 <LL_ADC_GetMultimode>
 8001c92:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d017      	beq.n	8001cce <HAL_ADC_IRQHandler+0x5e>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 f87b 	bl	8002dbc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0x72>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8083 	beq.w	8001df4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07d      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff facc 	bl	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d062      	beq.n	8001de6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5d      	ldr	r2, [pc, #372]	@ (8001e9c <HAL_ADC_IRQHandler+0x22c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d002      	beq.n	8001d30 <HAL_ADC_IRQHandler+0xc0>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_IRQHandler+0xc2>
 8001d30:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea0 <HAL_ADC_IRQHandler+0x230>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d008      	beq.n	8001d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d104      	bne.n	8001d56 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	e00c      	b.n	8001d70 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a50      	ldr	r2, [pc, #320]	@ (8001e9c <HAL_ADC_IRQHandler+0x22c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d002      	beq.n	8001d66 <HAL_ADC_IRQHandler+0xf6>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_IRQHandler+0xf8>
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <HAL_ADC_IRQHandler+0x230>)
 8001d68:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d135      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d12e      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc11 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11a      	bne.n	8001dce <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020c 	bic.w	r2, r2, #12
 8001da6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d112      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dcc:	e00b      	b.n	8001de6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f95c 	bl	80020a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	220c      	movs	r2, #12
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x198>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10b      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 809f 	beq.w	8001f52 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8099 	beq.w	8001f52 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fa77 	bl	8001330 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fa32 	bl	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e4e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <HAL_ADC_IRQHandler+0x22c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d002      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1f0>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_IRQHandler+0x1f2>
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_ADC_IRQHandler+0x230>)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d008      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b07      	cmp	r3, #7
 8001e7a:	d104      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	e013      	b.n	8001eae <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_ADC_IRQHandler+0x22c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x234>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x236>
 8001e96:	bf00      	nop
 8001e98:	50040300 	.word	0x50040300
 8001e9c:	50040100 	.word	0x50040100
 8001ea0:	50040000 	.word	0x50040000
 8001ea4:	4b7d      	ldr	r3, [pc, #500]	@ (800209c <HAL_ADC_IRQHandler+0x42c>)
 8001ea6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d047      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_ADC_IRQHandler+0x25e>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03f      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13a      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed8:	2b40      	cmp	r3, #64	@ 0x40
 8001eda:	d133      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d12e      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fb89 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d11a      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d112      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f2a:	e00b      	b.n	8001f44 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f043 0210 	orr.w	r2, r3, #16
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 ff11 	bl	8002d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2260      	movs	r2, #96	@ 0x60
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d011      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x310>
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8a0 	bl	80020b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x340>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fef7 	bl	8002d94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x370>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fee9 	bl	8002da8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d036      	beq.n	8002058 <HAL_ADC_IRQHandler+0x3e8>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d031      	beq.n	8002058 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002000:	e014      	b.n	800202c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002008:	4825      	ldr	r0, [pc, #148]	@ (80020a0 <HAL_ADC_IRQHandler+0x430>)
 800200a:	f7ff fa01 	bl	8001410 <LL_ADC_GetMultiDMATransfer>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002014:	2301      	movs	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
 8002018:	e008      	b.n	800202c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f043 0202 	orr.w	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f83e 	bl	80020cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2210      	movs	r2, #16
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	2b00      	cmp	r3, #0
 8002060:	d018      	beq.n	8002094 <HAL_ADC_IRQHandler+0x424>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	f043 0208 	orr.w	r2, r3, #8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800208c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fe76 	bl	8002d80 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	50040000 	.word	0x50040000
 80020a0:	50040300 	.word	0x50040300

080020a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0b6      	sub	sp, #216	@ 0xd8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x22>
 80020fe:	2302      	movs	r3, #2
 8002100:	e3c9      	b.n	8002896 <HAL_ADC_ConfigChannel+0x7b6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fa50 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 83aa 	bne.w	8002870 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d824      	bhi.n	8002176 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	3b02      	subs	r3, #2
 8002132:	2b03      	cmp	r3, #3
 8002134:	d81b      	bhi.n	800216e <HAL_ADC_ConfigChannel+0x8e>
 8002136:	a201      	add	r2, pc, #4	@ (adr r2, 800213c <HAL_ADC_ConfigChannel+0x5c>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	08002155 	.word	0x08002155
 8002144:	0800215d 	.word	0x0800215d
 8002148:	08002165 	.word	0x08002165
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800214c:	230c      	movs	r3, #12
 800214e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002152:	e010      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002154:	2312      	movs	r3, #18
 8002156:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800215a:	e00c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800215c:	2318      	movs	r3, #24
 800215e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002162:	e008      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800216e:	2306      	movs	r3, #6
 8002170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002174:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002184:	f7ff f8a8 	bl	80012d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fa11 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8002192:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fa31 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 81a4 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 819f 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff f8c6 	bl	8001356 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00a      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021fc:	f7ff f804 	bl	8001208 <LL_ADC_SetOffset>
 8002200:	e179      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f821 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x14e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f816 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	e01e      	b.n	800226c <HAL_ADC_ConfigChannel+0x18c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f80b 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800224c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e004      	b.n	800226a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1a4>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	e018      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1d6>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800229c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80022a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80022a8:	2320      	movs	r3, #32
 80022aa:	e004      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80022ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe ffda 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ffbe 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x214>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe ffb3 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	e01e      	b.n	8002332 <HAL_ADC_ConfigChannel+0x252>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ffa8 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002312:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800231a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_ConfigChannel+0x26a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	e018      	b.n	800237c <HAL_ADC_ConfigChannel+0x29c>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800235e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002362:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002366:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe ff77 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe ff5b 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x2da>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff50 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e01e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x318>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe ff45 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80023d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x330>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	e014      	b.n	800243a <HAL_ADC_ConfigChannel+0x35a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800241e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002430:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2102      	movs	r1, #2
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe ff18 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2103      	movs	r1, #3
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fefc 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x398>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2103      	movs	r1, #3
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fef1 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e017      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x3c8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2103      	movs	r1, #3
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fee6 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002492:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800249e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x3e0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x404>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80024ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80024d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2103      	movs	r1, #3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fec3 	bl	800127c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f80c 	bl	8001518 <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8140 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	f7fe ff49 	bl	80013ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a8f      	ldr	r2, [pc, #572]	@ (800275c <HAL_ADC_ConfigChannel+0x67c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 8131 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HAL_ADC_ConfigChannel+0x46e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e019      	b.n	8002582 <HAL_ADC_ConfigChannel+0x4a2>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800255c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800256a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b09      	cmp	r3, #9
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002582:	2b00      	cmp	r3, #0
 8002584:	d079      	beq.n	800267a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x4c2>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	3301      	adds	r3, #1
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a0:	e015      	b.n	80025ce <HAL_ADC_ConfigChannel+0x4ee>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80025be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x50e>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	e017      	b.n	800261e <HAL_ADC_ConfigChannel+0x53e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002606:	2320      	movs	r3, #32
 8002608:	e003      	b.n	8002612 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800260a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	ea42 0103 	orr.w	r1, r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x564>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	e018      	b.n	8002676 <HAL_ADC_ConfigChannel+0x596>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	430b      	orrs	r3, r1
 8002678:	e081      	b.n	800277e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x5b6>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	069b      	lsls	r3, r3, #26
 8002690:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002694:	e015      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x5e2>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	069b      	lsls	r3, r3, #26
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x602>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	e017      	b.n	8002712 <HAL_ADC_ConfigChannel+0x632>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	61bb      	str	r3, [r7, #24]
  return result;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	ea42 0103 	orr.w	r1, r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_ADC_ConfigChannel+0x65e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	051b      	lsls	r3, r3, #20
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800273c:	e01e      	b.n	800277c <HAL_ADC_ConfigChannel+0x69c>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
  return result;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e006      	b.n	8002768 <HAL_ADC_ConfigChannel+0x688>
 800275a:	bf00      	nop
 800275c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	051b      	lsls	r3, r3, #20
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe fde7 	bl	8001356 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b44      	ldr	r3, [pc, #272]	@ (80028a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d07a      	beq.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002794:	4843      	ldr	r0, [pc, #268]	@ (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002796:	f7fe fd29 	bl	80011ec <LL_ADC_GetCommonPathInternalCh>
 800279a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a41      	ldr	r2, [pc, #260]	@ (80028a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d12c      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d126      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a3c      	ldr	r2, [pc, #240]	@ (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x6e8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3b      	ldr	r2, [pc, #236]	@ (80028b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d15d      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d0:	4619      	mov	r1, r3
 80027d2:	4834      	ldr	r0, [pc, #208]	@ (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80027d4:	f7fe fcf7 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a36      	ldr	r2, [pc, #216]	@ (80028b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	e040      	b.n	8002884 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2d      	ldr	r2, [pc, #180]	@ (80028bc <HAL_ADC_ConfigChannel+0x7dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d118      	bne.n	800283e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d112      	bne.n	800283e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	@ (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x74c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d12d      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002830:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002834:	4619      	mov	r1, r3
 8002836:	481b      	ldr	r0, [pc, #108]	@ (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002838:	f7fe fcc5 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800283c:	e024      	b.n	8002888 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1f      	ldr	r2, [pc, #124]	@ (80028c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d120      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800284c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <HAL_ADC_ConfigChannel+0x7cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d115      	bne.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002866:	4619      	mov	r1, r3
 8002868:	480e      	ldr	r0, [pc, #56]	@ (80028a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800286a:	f7fe fcac 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
 800286e:	e00c      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002882:	e002      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002888:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002892:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002896:	4618      	mov	r0, r3
 8002898:	37d8      	adds	r7, #216	@ 0xd8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	80080000 	.word	0x80080000
 80028a4:	50040300 	.word	0x50040300
 80028a8:	c7520000 	.word	0xc7520000
 80028ac:	50040000 	.word	0x50040000
 80028b0:	50040200 	.word	0x50040200
 80028b4:	20000000 	.word	0x20000000
 80028b8:	053e2d63 	.word	0x053e2d63
 80028bc:	cb840000 	.word	0xcb840000
 80028c0:	80000001 	.word	0x80000001

080028c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fe6a 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80028e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fe8b 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 80028ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8098 	beq.w	8002a2c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d02a      	beq.n	8002960 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7e5b      	ldrb	r3, [r3, #25]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d126      	bne.n	8002960 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7e1b      	ldrb	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d122      	bne.n	8002960 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800291e:	e014      	b.n	800294a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <ADC_ConversionStop+0x174>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d90d      	bls.n	8002944 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e074      	b.n	8002a2e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3301      	adds	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	d1e3      	bne.n	8002920 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d014      	beq.n	8002990 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fe22 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fddf 	bl	800153e <LL_ADC_IsDisableOngoing>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fdfe 	bl	800158c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d014      	beq.n	80029c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fe31 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fdc7 	bl	800153e <LL_ADC_IsDisableOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fe0d 	bl	80015da <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d005      	beq.n	80029d2 <ADC_ConversionStop+0x10e>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d105      	bne.n	80029d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029cc:	230c      	movs	r3, #12
 80029ce:	617b      	str	r3, [r7, #20]
        break;
 80029d0:	e005      	b.n	80029de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029d2:	2308      	movs	r3, #8
 80029d4:	617b      	str	r3, [r7, #20]
        break;
 80029d6:	e002      	b.n	80029de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029d8:	2304      	movs	r3, #4
 80029da:	617b      	str	r3, [r7, #20]
        break;
 80029dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029de:	f7fe fbaf 	bl	8001140 <HAL_GetTick>
 80029e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029e4:	e01b      	b.n	8002a1e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029e6:	f7fe fbab 	bl	8001140 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d914      	bls.n	8002a1e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1dc      	bne.n	80029e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	a33fffff 	.word	0xa33fffff

08002a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd63 	bl	8001518 <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d169      	bne.n	8002b2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <ADC_Enable+0xfc>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e055      	b.n	8002b2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fd1e 	bl	80014c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a8c:	482b      	ldr	r0, [pc, #172]	@ (8002b3c <ADC_Enable+0x100>)
 8002a8e:	f7fe fbad 	bl	80011ec <LL_ADC_GetCommonPathInternalCh>
 8002a92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <ADC_Enable+0x104>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	4a28      	ldr	r2, [pc, #160]	@ (8002b44 <ADC_Enable+0x108>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ab6:	e002      	b.n	8002abe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fb3c 	bl	8001140 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aca:	e028      	b.n	8002b1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fd21 	bl	8001518 <LL_ADC_IsEnabled>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fcf1 	bl	80014c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ae6:	f7fe fb2b 	bl	8001140 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d914      	bls.n	8002b1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d00d      	beq.n	8002b1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	f043 0210 	orr.w	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d1cf      	bne.n	8002acc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	8000003f 	.word	0x8000003f
 8002b3c:	50040300 	.word	0x50040300
 8002b40:	20000000 	.word	0x20000000
 8002b44:	053e2d63 	.word	0x053e2d63

08002b48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fcf2 	bl	800153e <LL_ADC_IsDisableOngoing>
 8002b5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fcd9 	bl	8001518 <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d047      	beq.n	8002bfc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d144      	bne.n	8002bfc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030d 	and.w	r3, r3, #13
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fcb3 	bl	80014f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b92:	f7fe fad5 	bl	8001140 <HAL_GetTick>
 8002b96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b98:	e029      	b.n	8002bee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e023      	b.n	8002bfe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bb6:	f7fe fac3 	bl	8001140 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d914      	bls.n	8002bee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e007      	b.n	8002bfe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1dc      	bne.n	8002bb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LL_ADC_IsEnabled>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_IsEnabled+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_IsEnabled+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_StartCalibration>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002c3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_IsCalibrationOnGoing>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e04d      	b.n	8002d64 <HAL_ADCEx_Calibration_Start+0xb8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff39 	bl	8002b48 <ADC_Disable>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d136      	bne.n	8002d4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ce8:	f023 0302 	bic.w	r3, r3, #2
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff96 	bl	8002c2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d00:	e014      	b.n	8002d2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002d0e:	d30d      	bcc.n	8002d2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f023 0312 	bic.w	r3, r3, #18
 8002d18:	f043 0210 	orr.w	r2, r3, #16
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e01b      	b.n	8002d64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff94 	bl	8002c5e <LL_ADC_IsCalibrationOnGoing>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e2      	bne.n	8002d02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f023 0303 	bic.w	r3, r3, #3
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d4c:	e005      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b09f      	sub	sp, #124	@ 0x7c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e093      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002df6:	2300      	movs	r3, #0
 8002df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a47      	ldr	r2, [pc, #284]	@ (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e08:	4b46      	ldr	r3, [pc, #280]	@ (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e072      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff27 	bl	8002c86 <LL_ADC_REG_IsConversionOngoing>
 8002e38:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff21 	bl	8002c86 <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d154      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d151      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e50:	4b35      	ldr	r3, [pc, #212]	@ (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e52:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02c      	beq.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	4829      	ldr	r0, [pc, #164]	@ (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e7a:	f7ff fec4 	bl	8002c06 <LL_ADC_IsEnabled>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4828      	ldr	r0, [pc, #160]	@ (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e82:	f7ff fec0 	bl	8002c06 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	431c      	orrs	r4, r3
 8002e8a:	4828      	ldr	r0, [pc, #160]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e8c:	f7ff febb 	bl	8002c06 <LL_ADC_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4323      	orrs	r3, r4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d137      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ea0:	f023 030f 	bic.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	6811      	ldr	r1, [r2, #0]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb4:	e028      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec2:	4817      	ldr	r0, [pc, #92]	@ (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ec4:	f7ff fe9f 	bl	8002c06 <LL_ADC_IsEnabled>
 8002ec8:	4604      	mov	r4, r0
 8002eca:	4816      	ldr	r0, [pc, #88]	@ (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ecc:	f7ff fe9b 	bl	8002c06 <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	431c      	orrs	r4, r3
 8002ed4:	4815      	ldr	r0, [pc, #84]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ed6:	f7ff fe96 	bl	8002c06 <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4323      	orrs	r3, r4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d112      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ef0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef2:	e009      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f06:	e000      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	377c      	adds	r7, #124	@ 0x7c
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	50040000 	.word	0x50040000
 8002f24:	50040100 	.word	0x50040100
 8002f28:	50040300 	.word	0x50040300
 8002f2c:	50040200 	.word	0x50040200

08002f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	@ (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db0b      	blt.n	8002fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4907      	ldr	r1, [pc, #28]	@ (8002fcc <__NVIC_EnableIRQ+0x38>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	@ (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	@ (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
         );
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	@ 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff29 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f8:	f7ff ff3e 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff ff8e 	bl	8003024 <NVIC_EncodePriority>
 8003108:	4602      	mov	r2, r0
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff31 	bl	8002f94 <__NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffa2 	bl	800308c <SysTick_Config>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d008      	beq.n	800317c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2204      	movs	r2, #4
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e022      	b.n	80031c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 020e 	bic.w	r2, r2, #14
 800318a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	f003 021c 	and.w	r2, r3, #28
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d005      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e029      	b.n	8003246 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 020e 	bic.w	r2, r2, #14
 8003200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f003 021c 	and.w	r2, r3, #28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
    }
  }
  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325e:	e17f      	b.n	8003560 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8171 	beq.w	800355a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d005      	beq.n	8003290 <HAL_GPIO_Init+0x40>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0201 	and.w	r2, r3, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d118      	bne.n	8003330 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003304:	2201      	movs	r2, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0201 	and.w	r2, r3, #1
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d017      	beq.n	800336c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d123      	bne.n	80033c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	08da      	lsrs	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3208      	adds	r2, #8
 8003380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	6939      	ldr	r1, [r7, #16]
 80033bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80ac 	beq.w	800355a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003402:	4b5f      	ldr	r3, [pc, #380]	@ (8003580 <HAL_GPIO_Init+0x330>)
 8003404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003406:	4a5e      	ldr	r2, [pc, #376]	@ (8003580 <HAL_GPIO_Init+0x330>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6613      	str	r3, [r2, #96]	@ 0x60
 800340e:	4b5c      	ldr	r3, [pc, #368]	@ (8003580 <HAL_GPIO_Init+0x330>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800341a:	4a5a      	ldr	r2, [pc, #360]	@ (8003584 <HAL_GPIO_Init+0x334>)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003444:	d025      	beq.n	8003492 <HAL_GPIO_Init+0x242>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4f      	ldr	r2, [pc, #316]	@ (8003588 <HAL_GPIO_Init+0x338>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <HAL_GPIO_Init+0x23e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4e      	ldr	r2, [pc, #312]	@ (800358c <HAL_GPIO_Init+0x33c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_GPIO_Init+0x23a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4d      	ldr	r2, [pc, #308]	@ (8003590 <HAL_GPIO_Init+0x340>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_Init+0x236>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4c      	ldr	r2, [pc, #304]	@ (8003594 <HAL_GPIO_Init+0x344>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_GPIO_Init+0x232>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4b      	ldr	r2, [pc, #300]	@ (8003598 <HAL_GPIO_Init+0x348>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <HAL_GPIO_Init+0x22e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <HAL_GPIO_Init+0x34c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_GPIO_Init+0x22a>
 8003476:	2306      	movs	r3, #6
 8003478:	e00c      	b.n	8003494 <HAL_GPIO_Init+0x244>
 800347a:	2307      	movs	r3, #7
 800347c:	e00a      	b.n	8003494 <HAL_GPIO_Init+0x244>
 800347e:	2305      	movs	r3, #5
 8003480:	e008      	b.n	8003494 <HAL_GPIO_Init+0x244>
 8003482:	2304      	movs	r3, #4
 8003484:	e006      	b.n	8003494 <HAL_GPIO_Init+0x244>
 8003486:	2303      	movs	r3, #3
 8003488:	e004      	b.n	8003494 <HAL_GPIO_Init+0x244>
 800348a:	2302      	movs	r3, #2
 800348c:	e002      	b.n	8003494 <HAL_GPIO_Init+0x244>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_GPIO_Init+0x244>
 8003492:	2300      	movs	r3, #0
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	f002 0203 	and.w	r2, r2, #3
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	4093      	lsls	r3, r2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034a4:	4937      	ldr	r1, [pc, #220]	@ (8003584 <HAL_GPIO_Init+0x334>)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	3302      	adds	r3, #2
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b2:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034d6:	4a32      	ldr	r2, [pc, #200]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034dc:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003500:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003506:	4b26      	ldr	r3, [pc, #152]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800352a:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003554:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <HAL_GPIO_Init+0x350>)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f ae78 	bne.w	8003260 <HAL_GPIO_Init+0x10>
  }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40010000 	.word	0x40010000
 8003588:	48000400 	.word	0x48000400
 800358c:	48000800 	.word	0x48000800
 8003590:	48000c00 	.word	0x48000c00
 8003594:	48001000 	.word	0x48001000
 8003598:	48001400 	.word	0x48001400
 800359c:	48001800 	.word	0x48001800
 80035a0:	40010400 	.word	0x40010400

080035a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
 80035b0:	4613      	mov	r3, r2
 80035b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b4:	787b      	ldrb	r3, [r7, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <HAL_PWREx_GetVoltageRange+0x18>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40007000 	.word	0x40007000

080035f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fe:	d130      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003600:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360c:	d038      	beq.n	8003680 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003616:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003618:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800361e:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2232      	movs	r2, #50	@ 0x32
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0c9b      	lsrs	r3, r3, #18
 8003630:	3301      	adds	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003634:	e002      	b.n	800363c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3b01      	subs	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363c:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003648:	d102      	bne.n	8003650 <HAL_PWREx_ControlVoltageScaling+0x60>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f2      	bne.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365c:	d110      	bne.n	8003680 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00f      	b.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003662:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d007      	beq.n	8003680 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003678:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800367e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40007000 	.word	0x40007000
 8003694:	20000000 	.word	0x20000000
 8003698:	431bde83 	.word	0x431bde83

0800369c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e3ca      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	4b97      	ldr	r3, [pc, #604]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b8:	4b94      	ldr	r3, [pc, #592]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80e4 	beq.w	8003898 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_RCC_OscConfig+0x4a>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b0c      	cmp	r3, #12
 80036da:	f040 808b 	bne.w	80037f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f040 8087 	bne.w	80037f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e6:	4b89      	ldr	r3, [pc, #548]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e3a2      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	4b82      	ldr	r3, [pc, #520]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_RCC_OscConfig+0x7c>
 800370e:	4b7f      	ldr	r3, [pc, #508]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003716:	e005      	b.n	8003724 <HAL_RCC_OscConfig+0x88>
 8003718:	4b7c      	ldr	r3, [pc, #496]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003724:	4293      	cmp	r3, r2
 8003726:	d223      	bcs.n	8003770 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fd55 	bl	80041dc <RCC_SetFlashLatencyFromMSIRange>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e383      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373c:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a72      	ldr	r2, [pc, #456]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b70      	ldr	r3, [pc, #448]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	496d      	ldr	r1, [pc, #436]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375a:	4b6c      	ldr	r3, [pc, #432]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	4968      	ldr	r1, [pc, #416]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	e025      	b.n	80037bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003770:	4b66      	ldr	r3, [pc, #408]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a65      	ldr	r2, [pc, #404]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003776:	f043 0308 	orr.w	r3, r3, #8
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b63      	ldr	r3, [pc, #396]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4960      	ldr	r1, [pc, #384]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378e:	4b5f      	ldr	r3, [pc, #380]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	495b      	ldr	r1, [pc, #364]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fd15 	bl	80041dc <RCC_SetFlashLatencyFromMSIRange>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e343      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037bc:	f000 fc4a 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b52      	ldr	r3, [pc, #328]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	4950      	ldr	r1, [pc, #320]	@ (8003910 <HAL_RCC_OscConfig+0x274>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003914 <HAL_RCC_OscConfig+0x278>)
 80037da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc5d 	bl	80010a0 <HAL_InitTick>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d052      	beq.n	8003896 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	e327      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d032      	beq.n	8003862 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037fc:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a42      	ldr	r2, [pc, #264]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003808:	f7fd fc9a 	bl	8001140 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003810:	f7fd fc96 	bl	8001140 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e310      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003822:	4b3a      	ldr	r3, [pc, #232]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382e:	4b37      	ldr	r3, [pc, #220]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a36      	ldr	r2, [pc, #216]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b34      	ldr	r3, [pc, #208]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4931      	ldr	r1, [pc, #196]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384c:	4b2f      	ldr	r3, [pc, #188]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	492c      	ldr	r1, [pc, #176]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e01a      	b.n	8003898 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003862:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a29      	ldr	r2, [pc, #164]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800386e:	f7fd fc67 	bl	8001140 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003876:	f7fd fc63 	bl	8001140 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e2dd      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x1da>
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003896:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d074      	beq.n	800398e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x21a>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d10e      	bne.n	80038ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d10b      	bne.n	80038ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d064      	beq.n	800398c <HAL_RCC_OscConfig+0x2f0>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d160      	bne.n	800398c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e2ba      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x24a>
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0b      	ldr	r2, [pc, #44]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e026      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ee:	d115      	bne.n	800391c <HAL_RCC_OscConfig+0x280>
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a02      	ldr	r2, [pc, #8]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e014      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	080077b8 	.word	0x080077b8
 8003914:	20000000 	.word	0x20000000
 8003918:	20000004 	.word	0x20000004
 800391c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a9f      	ldr	r2, [pc, #636]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b9d      	ldr	r3, [pc, #628]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a9c      	ldr	r2, [pc, #624]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 800392e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fc00 	bl	8001140 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fd fbfc 	bl	8001140 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e276      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003956:	4b92      	ldr	r3, [pc, #584]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x2a8>
 8003962:	e014      	b.n	800398e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fbec 	bl	8001140 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7fd fbe8 	bl	8001140 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	@ 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e262      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x2d0>
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d060      	beq.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d005      	beq.n	80039ac <HAL_RCC_OscConfig+0x310>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d119      	bne.n	80039da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d116      	bne.n	80039da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_OscConfig+0x328>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e23f      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	4973      	ldr	r1, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d8:	e040      	b.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d023      	beq.n	8003a2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e2:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fba7 	bl	8001140 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fba3 	bl	8001140 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e21d      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a08:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b62      	ldr	r3, [pc, #392]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	495f      	ldr	r1, [pc, #380]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	e018      	b.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fb83 	bl	8001140 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3e:	f7fd fb7f 	bl	8001140 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1f9      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a50:	4b53      	ldr	r3, [pc, #332]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a76:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fb5e 	bl	8001140 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd fb5a 	bl	8001140 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1d4      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCC_OscConfig+0x3ec>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fd fb41 	bl	8001140 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fd fb3d 	bl	8001140 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1b7      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad4:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ef      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a6 	beq.w	8003c3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003af4:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ba4 <HAL_RCC_OscConfig+0x508>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d118      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b28:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba4 <HAL_RCC_OscConfig+0x508>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <HAL_RCC_OscConfig+0x508>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b34:	f7fd fb04 	bl	8001140 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fb00 	bl	8001140 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e17a      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ba4 <HAL_RCC_OscConfig+0x508>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4d8>
 8003b62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b72:	e029      	b.n	8003bc8 <HAL_RCC_OscConfig+0x52c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d115      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x50c>
 8003b7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a07      	ldr	r2, [pc, #28]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	4a03      	ldr	r2, [pc, #12]	@ (8003ba0 <HAL_RCC_OscConfig+0x504>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x52c>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bae:	4a9b      	ldr	r2, [pc, #620]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb8:	4b98      	ldr	r3, [pc, #608]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	4a97      	ldr	r2, [pc, #604]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fab6 	bl	8001140 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fab2 	bl	8001140 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e12a      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bee:	4b8b      	ldr	r3, [pc, #556]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ed      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x53c>
 8003bfc:	e015      	b.n	8003c2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fa9f 	bl	8001140 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd fa9b 	bl	8001140 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e113      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ed      	bne.n	8003c06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2a:	7ffb      	ldrb	r3, [r7, #31]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	4b7a      	ldr	r3, [pc, #488]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	4a79      	ldr	r2, [pc, #484]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80fe 	beq.w	8003e42 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	f040 80d0 	bne.w	8003df0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c50:	4b72      	ldr	r3, [pc, #456]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d130      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d127      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d11f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c90:	2a07      	cmp	r2, #7
 8003c92:	bf14      	ite	ne
 8003c94:	2201      	movne	r2, #1
 8003c96:	2200      	moveq	r2, #0
 8003c98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d109      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d06e      	beq.n	8003da4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d069      	beq.n	8003da0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ccc:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cd8:	4b50      	ldr	r3, [pc, #320]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0ad      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf4:	f7fd fa24 	bl	8001140 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd fa20 	bl	8001140 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e09a      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0e:	4b43      	ldr	r3, [pc, #268]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1a:	4b40      	ldr	r3, [pc, #256]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	4b40      	ldr	r3, [pc, #256]	@ (8003e20 <HAL_RCC_OscConfig+0x784>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d34:	0212      	lsls	r2, r2, #8
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d3c:	0852      	lsrs	r2, r2, #1
 8003d3e:	3a01      	subs	r2, #1
 8003d40:	0552      	lsls	r2, r2, #21
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d48:	0852      	lsrs	r2, r2, #1
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	0652      	lsls	r2, r2, #25
 8003d4e:	4311      	orrs	r1, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d54:	0912      	lsrs	r2, r2, #4
 8003d56:	0452      	lsls	r2, r2, #17
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	4930      	ldr	r1, [pc, #192]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d60:	4b2e      	ldr	r3, [pc, #184]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d78:	f7fd f9e2 	bl	8001140 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd f9de 	bl	8001140 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e058      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9e:	e050      	b.n	8003e42 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e04f      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d148      	bne.n	8003e42 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dbc:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc8:	f7fd f9ba 	bl	8001140 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd f9b6 	bl	8001140 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e030      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x734>
 8003dee:	e028      	b.n	8003e42 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d023      	beq.n	8003e3e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <HAL_RCC_OscConfig+0x780>)
 8003dfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fd f99d 	bl	8001140 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e08:	e00c      	b.n	8003e24 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd f999 	bl	8001140 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d905      	bls.n	8003e24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e013      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <HAL_RCC_OscConfig+0x7b0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ec      	bne.n	8003e0a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_OscConfig+0x7b0>)
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	4905      	ldr	r1, [pc, #20]	@ (8003e4c <HAL_RCC_OscConfig+0x7b0>)
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_OscConfig+0x7b4>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
 8003e3c:	e001      	b.n	8003e42 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	feeefffc 	.word	0xfeeefffc

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0e7      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b75      	ldr	r3, [pc, #468]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d910      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b72      	ldr	r3, [pc, #456]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 0207 	bic.w	r2, r3, #7
 8003e7e:	4970      	ldr	r1, [pc, #448]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b6e      	ldr	r3, [pc, #440]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cf      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b66      	ldr	r3, [pc, #408]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d908      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b63      	ldr	r3, [pc, #396]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4960      	ldr	r1, [pc, #384]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04c      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	4b5a      	ldr	r3, [pc, #360]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d121      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0a6      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef2:	4b54      	ldr	r3, [pc, #336]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e09a      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e08e      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e086      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b46      	ldr	r3, [pc, #280]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4943      	ldr	r1, [pc, #268]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd f900 	bl	8001140 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd f8fc 	bl	8001140 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e06e      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	4b31      	ldr	r3, [pc, #196]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d208      	bcs.n	8003f9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b2e      	ldr	r3, [pc, #184]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	492b      	ldr	r1, [pc, #172]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9a:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d210      	bcs.n	8003fca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa8:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 0207 	bic.w	r2, r3, #7
 8003fb0:	4923      	ldr	r1, [pc, #140]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb8:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e036      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4918      	ldr	r1, [pc, #96]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff4:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4910      	ldr	r1, [pc, #64]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004008:	f000 f824 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	490b      	ldr	r1, [pc, #44]	@ (8004048 <HAL_RCC_ClockConfig+0x1f4>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
 8004024:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_ClockConfig+0x1fc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fd f837 	bl	80010a0 <HAL_InitTick>
 8004032:	4603      	mov	r3, r0
 8004034:	72fb      	strb	r3, [r7, #11]

  return status;
 8004036:	7afb      	ldrb	r3, [r7, #11]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
 8004048:	080077b8 	.word	0x080077b8
 800404c:	20000000 	.word	0x20000000
 8004050:	20000004 	.word	0x20000004

08004054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	@ 0x24
 8004058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004062:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406c:	4b3b      	ldr	r3, [pc, #236]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x34>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d121      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d11e      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004088:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004094:	4b31      	ldr	r3, [pc, #196]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e005      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a4:	4b2d      	ldr	r3, [pc, #180]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040cc:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e004      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040d8:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x114>)
 80040da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d134      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0xa6>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d003      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0xac>
 80040f8:	e005      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x110>)
 80040fc:	617b      	str	r3, [r7, #20]
      break;
 80040fe:	e005      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x114>)
 8004102:	617b      	str	r3, [r7, #20]
      break;
 8004104:	e002      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	617b      	str	r3, [r7, #20]
      break;
 800410a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800410c:	4b13      	ldr	r3, [pc, #76]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	3301      	adds	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800411a:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	fb03 f202 	mul.w	r2, r3, r2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	0e5b      	lsrs	r3, r3, #25
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	3301      	adds	r3, #1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800414c:	69bb      	ldr	r3, [r7, #24]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	@ 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	080077d0 	.word	0x080077d0
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	@ (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000000 	.word	0x20000000

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004188:	f7ff fff0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4904      	ldr	r1, [pc, #16]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080077c8 	.word	0x080077c8

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041b4:	f7ff ffda 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0adb      	lsrs	r3, r3, #11
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4904      	ldr	r1, [pc, #16]	@ (80041d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	080077c8 	.word	0x080077c8

080041dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041f4:	f7ff f9ee 	bl	80035d4 <HAL_PWREx_GetVoltageRange>
 80041f8:	6178      	str	r0, [r7, #20]
 80041fa:	e014      	b.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	4a24      	ldr	r2, [pc, #144]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	4b22      	ldr	r3, [pc, #136]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004214:	f7ff f9de 	bl	80035d4 <HAL_PWREx_GetVoltageRange>
 8004218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800422c:	d10b      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	@ 0x80
 8004232:	d919      	bls.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2ba0      	cmp	r3, #160	@ 0xa0
 8004238:	d902      	bls.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800423a:	2302      	movs	r3, #2
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e013      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004240:	2301      	movs	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e010      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b80      	cmp	r3, #128	@ 0x80
 800424a:	d902      	bls.n	8004252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800424c:	2303      	movs	r3, #3
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e00a      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d102      	bne.n	800425e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004258:	2302      	movs	r3, #2
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e004      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b70      	cmp	r3, #112	@ 0x70
 8004262:	d101      	bne.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004264:	2301      	movs	r3, #1
 8004266:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004268:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 0207 	bic.w	r2, r3, #7
 8004270:	4909      	ldr	r1, [pc, #36]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004278:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	40022000 	.word	0x40022000

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042a4:	2300      	movs	r3, #0
 80042a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d041      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042c0:	d02a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042c6:	d824      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042d2:	d81e      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042dc:	d010      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042de:	e018      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e0:	4b86      	ldr	r3, [pc, #536]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a85      	ldr	r2, [pc, #532]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ec:	e015      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fabb 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042fe:	e00c      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3320      	adds	r3, #32
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fba6 	bl	8004a58 <RCCEx_PLLSAI2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004310:	e003      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	74fb      	strb	r3, [r7, #19]
      break;
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004320:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800432e:	4973      	ldr	r1, [pc, #460]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004336:	e001      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d041      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004350:	d02a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004352:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004356:	d824      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800435e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004362:	d81e      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800436c:	d010      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800436e:	e018      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004370:	4b62      	ldr	r3, [pc, #392]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a61      	ldr	r2, [pc, #388]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800437c:	e015      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fa73 	bl	8004870 <RCCEx_PLLSAI1_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800438e:	e00c      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3320      	adds	r3, #32
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fb5e 	bl	8004a58 <RCCEx_PLLSAI2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a0:	e003      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	74fb      	strb	r3, [r7, #19]
      break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b0:	4b52      	ldr	r3, [pc, #328]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043be:	494f      	ldr	r1, [pc, #316]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a0 	beq.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f4:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f8:	4a40      	ldr	r2, [pc, #256]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004400:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440c:	2301      	movs	r3, #1
 800440e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004410:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3a      	ldr	r2, [pc, #232]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800441a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441c:	f7fc fe90 	bl	8001140 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004422:	e009      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fc fe8c 	bl	8001140 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d902      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	74fb      	strb	r3, [r7, #19]
        break;
 8004436:	e005      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004438:	4b31      	ldr	r3, [pc, #196]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ef      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d15c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800444a:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004454:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01f      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	429a      	cmp	r2, r3
 8004466:	d019      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004468:	4b24      	ldr	r3, [pc, #144]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004474:	4b21      	ldr	r3, [pc, #132]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	4a20      	ldr	r2, [pc, #128]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004494:	4a19      	ldr	r2, [pc, #100]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fc fe4b 	bl	8001140 <HAL_GetTick>
 80044aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ac:	e00b      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fc fe47 	bl	8001140 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d902      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	74fb      	strb	r3, [r7, #19]
            break;
 80044c4:	e006      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ec      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ea:	4904      	ldr	r1, [pc, #16]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044f2:	e009      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	74bb      	strb	r3, [r7, #18]
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004508:	7c7b      	ldrb	r3, [r7, #17]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4b9e      	ldr	r3, [pc, #632]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004512:	4a9d      	ldr	r2, [pc, #628]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004526:	4b98      	ldr	r3, [pc, #608]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452c:	f023 0203 	bic.w	r2, r3, #3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	4994      	ldr	r1, [pc, #592]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004548:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454e:	f023 020c 	bic.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	498c      	ldr	r1, [pc, #560]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800456a:	4b87      	ldr	r3, [pc, #540]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	4983      	ldr	r1, [pc, #524]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800458c:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	497b      	ldr	r1, [pc, #492]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ae:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045bc:	4972      	ldr	r1, [pc, #456]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045de:	496a      	ldr	r1, [pc, #424]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045f2:	4b65      	ldr	r3, [pc, #404]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	4961      	ldr	r1, [pc, #388]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004614:	4b5c      	ldr	r3, [pc, #368]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	4959      	ldr	r1, [pc, #356]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004636:	4b54      	ldr	r3, [pc, #336]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	4950      	ldr	r1, [pc, #320]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004658:	4b4b      	ldr	r3, [pc, #300]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	4948      	ldr	r1, [pc, #288]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467a:	4b43      	ldr	r3, [pc, #268]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004688:	493f      	ldr	r1, [pc, #252]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d028      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469c:	4b3a      	ldr	r3, [pc, #232]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	4937      	ldr	r1, [pc, #220]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ba:	d106      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046bc:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c6:	60d3      	str	r3, [r2, #12]
 80046c8:	e011      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d2:	d10c      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f8c8 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d028      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004708:	491f      	ldr	r1, [pc, #124]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004718:	d106      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471a:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004724:	60d3      	str	r3, [r2, #12]
 8004726:	e011      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f899 	bl	8004870 <RCCEx_PLLSAI1_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02b      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004766:	4908      	ldr	r1, [pc, #32]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004776:	d109      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a02      	ldr	r2, [pc, #8]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004782:	60d3      	str	r3, [r2, #12]
 8004784:	e014      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f867 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02f      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ca:	4928      	ldr	r1, [pc, #160]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047da:	d10d      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f844 	bl	8004870 <RCCEx_PLLSAI1_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d014      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	74bb      	strb	r3, [r7, #18]
 80047f6:	e011      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3320      	adds	r3, #32
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f925 	bl	8004a58 <RCCEx_PLLSAI2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004828:	4b10      	ldr	r3, [pc, #64]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004836:	490d      	ldr	r1, [pc, #52]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004850:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485a:	4904      	ldr	r1, [pc, #16]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004862:	7cbb      	ldrb	r3, [r7, #18]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000

08004870 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800487e:	4b75      	ldr	r3, [pc, #468]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800488a:	4b72      	ldr	r3, [pc, #456]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0203 	and.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d10d      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
       ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
       ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d047      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e044      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d018      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x86>
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d825      	bhi.n	8004914 <RCCEx_PLLSAI1_Config+0xa4>
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <RCCEx_PLLSAI1_Config+0x62>
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d009      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x74>
 80048d0:	e020      	b.n	8004914 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048d2:	4b60      	ldr	r3, [pc, #384]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11d      	bne.n	800491a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e01a      	b.n	800491a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f4:	e013      	b.n	800491e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048f6:	4b57      	ldr	r3, [pc, #348]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004902:	4b54      	ldr	r3, [pc, #336]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004912:	e006      	b.n	8004922 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e004      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004922:	bf00      	nop
    }

    if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800492a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	430b      	orrs	r3, r1
 8004940:	4944      	ldr	r1, [pc, #272]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d17d      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800494c:	4b41      	ldr	r3, [pc, #260]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a40      	ldr	r2, [pc, #256]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fc fbf2 	bl	8001140 <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004960:	f7fc fbee 	bl	8001140 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
        break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004974:	4b37      	ldr	r3, [pc, #220]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ef      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d160      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d111      	bne.n	80049b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800498c:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6892      	ldr	r2, [r2, #8]
 800499c:	0211      	lsls	r1, r2, #8
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68d2      	ldr	r2, [r2, #12]
 80049a2:	0912      	lsrs	r2, r2, #4
 80049a4:	0452      	lsls	r2, r2, #17
 80049a6:	430a      	orrs	r2, r1
 80049a8:	492a      	ldr	r1, [pc, #168]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	610b      	str	r3, [r1, #16]
 80049ae:	e027      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d112      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b6:	4b27      	ldr	r3, [pc, #156]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6892      	ldr	r2, [r2, #8]
 80049c6:	0211      	lsls	r1, r2, #8
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6912      	ldr	r2, [r2, #16]
 80049cc:	0852      	lsrs	r2, r2, #1
 80049ce:	3a01      	subs	r2, #1
 80049d0:	0552      	lsls	r2, r2, #21
 80049d2:	430a      	orrs	r2, r1
 80049d4:	491f      	ldr	r1, [pc, #124]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
 80049da:	e011      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6892      	ldr	r2, [r2, #8]
 80049ec:	0211      	lsls	r1, r2, #8
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6952      	ldr	r2, [r2, #20]
 80049f2:	0852      	lsrs	r2, r2, #1
 80049f4:	3a01      	subs	r2, #1
 80049f6:	0652      	lsls	r2, r2, #25
 80049f8:	430a      	orrs	r2, r1
 80049fa:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a00:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fc fb98 	bl	8001140 <HAL_GetTick>
 8004a10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a12:	e009      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a14:	f7fc fb94 	bl	8001140 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d902      	bls.n	8004a28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	73fb      	strb	r3, [r7, #15]
          break;
 8004a26:	e005      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a28:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ef      	beq.n	8004a14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	4904      	ldr	r1, [pc, #16]	@ (8004a54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000

08004a58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a72:	4b67      	ldr	r3, [pc, #412]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d10d      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
       ||
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a8a:	4b61      	ldr	r3, [pc, #388]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
       ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d047      	beq.n	8004b2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e044      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d018      	beq.n	8004ade <RCCEx_PLLSAI2_Config+0x86>
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d825      	bhi.n	8004afc <RCCEx_PLLSAI2_Config+0xa4>
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d002      	beq.n	8004aba <RCCEx_PLLSAI2_Config+0x62>
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d009      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x74>
 8004ab8:	e020      	b.n	8004afc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aba:	4b55      	ldr	r3, [pc, #340]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11d      	bne.n	8004b02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aca:	e01a      	b.n	8004b02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004acc:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d116      	bne.n	8004b06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004adc:	e013      	b.n	8004b06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ade:	4b4c      	ldr	r3, [pc, #304]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aea:	4b49      	ldr	r3, [pc, #292]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004afa:	e006      	b.n	8004b0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      break;
 8004b00:	e004      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b12:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	430b      	orrs	r3, r1
 8004b28:	4939      	ldr	r1, [pc, #228]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d167      	bne.n	8004c04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b34:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b40:	f7fc fafe 	bl	8001140 <HAL_GetTick>
 8004b44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b46:	e009      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b48:	f7fc fafa 	bl	8001140 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d902      	bls.n	8004b5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	73fb      	strb	r3, [r7, #15]
        break;
 8004b5a:	e005      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ef      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d14a      	bne.n	8004c04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d111      	bne.n	8004b98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b74:	4b26      	ldr	r3, [pc, #152]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6892      	ldr	r2, [r2, #8]
 8004b84:	0211      	lsls	r1, r2, #8
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68d2      	ldr	r2, [r2, #12]
 8004b8a:	0912      	lsrs	r2, r2, #4
 8004b8c:	0452      	lsls	r2, r2, #17
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	491f      	ldr	r1, [pc, #124]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	614b      	str	r3, [r1, #20]
 8004b96:	e011      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b98:	4b1d      	ldr	r3, [pc, #116]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ba0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6912      	ldr	r2, [r2, #16]
 8004bae:	0852      	lsrs	r2, r2, #1
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0652      	lsls	r2, r2, #25
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bbc:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fc faba 	bl	8001140 <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bce:	e009      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd0:	f7fc fab6 	bl	8001140 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	73fb      	strb	r3, [r7, #15]
          break;
 8004be2:	e005      	b.n	8004bf0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	4904      	ldr	r1, [pc, #16]	@ (8004c10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e040      	b.n	8004ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc f8a8 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	@ 0x24
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fedc 	bl	8005a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fc21 	bl	80054a8 <UART_SetConfig>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01b      	b.n	8004ca8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 ff5b 	bl	8005b5c <UART_CheckIdleState>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d177      	bne.n	8004db8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Transmit+0x24>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e070      	b.n	8004dba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2221      	movs	r2, #33	@ 0x21
 8004ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fa2b 	bl	8001140 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d108      	bne.n	8004d18 <HAL_UART_Transmit+0x68>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e003      	b.n	8004d20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d20:	e02f      	b.n	8004d82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	@ 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 ffbd 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e03b      	b.n	8004dba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d54:	b292      	uxth	r2, r2
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e007      	b.n	8004d70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1c9      	bne.n	8004d22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	@ 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 ff87 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e005      	b.n	8004dba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	@ 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d137      	bne.n	8004e4c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_UART_Receive_IT+0x24>
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e030      	b.n	8004e4e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a18      	ldr	r2, [pc, #96]	@ (8004e58 <HAL_UART_Receive_IT+0x94>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01f      	beq.n	8004e3c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d018      	beq.n	8004e3c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 ffa0 	bl	8005d88 <UART_Start_Receive_IT>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3728      	adds	r7, #40	@ 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40008000 	.word	0x40008000

08004e5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00f      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 82ca 	beq.w	800544e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
      }
      return;
 8004ec2:	e2c4      	b.n	800544e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8117 	beq.w	80050fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ede:	4b85      	ldr	r3, [pc, #532]	@ (80050f4 <HAL_UART_IRQHandler+0x298>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 810a 	beq.w	80050fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d011      	beq.n	8004f18 <HAL_UART_IRQHandler+0xbc>
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d011      	beq.n	8004f48 <HAL_UART_IRQHandler+0xec>
 8004f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2202      	movs	r2, #2
 8004f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_UART_IRQHandler+0x11c>
 8004f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2204      	movs	r2, #4
 8004f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6e:	f043 0202 	orr.w	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d017      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x18a>
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8230 	beq.w	8005452 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005020:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005036:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04f      	beq.n	80050de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ff68 	bl	8005f14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b40      	cmp	r3, #64	@ 0x40
 8005050:	d141      	bne.n	80050d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800506c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800507e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800508a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1d9      	bne.n	8005052 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d013      	beq.n	80050ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050aa:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <HAL_UART_IRQHandler+0x29c>)
 80050ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe f88b 	bl	80031ce <HAL_DMA_Abort_IT>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d017      	beq.n	80050ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050c8:	4610      	mov	r0, r2
 80050ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	e00f      	b.n	80050ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9d4 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	e00b      	b.n	80050ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9d0 	bl	800547c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	e007      	b.n	80050ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9cc 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80050ec:	e1b1      	b.n	8005452 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ee:	bf00      	nop
    return;
 80050f0:	e1af      	b.n	8005452 <HAL_UART_IRQHandler+0x5f6>
 80050f2:	bf00      	nop
 80050f4:	04000120 	.word	0x04000120
 80050f8:	08005fdd 	.word	0x08005fdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 816a 	bne.w	80053da <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8163 	beq.w	80053da <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 815c 	beq.w	80053da <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2210      	movs	r2, #16
 8005128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	f040 80d4 	bne.w	80052e2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005146:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80ad 	beq.w	80052aa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800515a:	429a      	cmp	r2, r3
 800515c:	f080 80a5 	bcs.w	80052aa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 8086 	bne.w	8005288 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1da      	bne.n	800517c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e1      	bne.n	80051c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005228:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800522c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005258:	f023 0310 	bic.w	r3, r3, #16
 800525c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800526c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e4      	bne.n	8005248 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd ff65 	bl	8003152 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800529a:	b29b      	uxth	r3, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8f4 	bl	8005490 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80052a8:	e0d5      	b.n	8005456 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052b4:	429a      	cmp	r2, r3
 80052b6:	f040 80ce 	bne.w	8005456 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	f040 80c5 	bne.w	8005456 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8d8 	bl	8005490 <HAL_UARTEx_RxEventCallback>
      return;
 80052e0:	e0b9      	b.n	8005456 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80ab 	beq.w	800545a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a6 	beq.w	800545a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005330:	647b      	str	r3, [r7, #68]	@ 0x44
 8005332:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e4      	bne.n	800530e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	623b      	str	r3, [r7, #32]
   return(result);
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005368:	633a      	str	r2, [r7, #48]	@ 0x30
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800536e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e3      	bne.n	8005344 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	60fb      	str	r3, [r7, #12]
   return(result);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0310 	bic.w	r3, r3, #16
 80053a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69b9      	ldr	r1, [r7, #24]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	617b      	str	r3, [r7, #20]
   return(result);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e4      	bne.n	8005390 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f85c 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053d8:	e03f      	b.n	800545a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00e      	beq.n	8005404 <HAL_UART_IRQHandler+0x5a8>
 80053e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 ffe9 	bl	80063d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005402:	e02d      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00e      	beq.n	800542e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01c      	beq.n	800545e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    }
    return;
 800542c:	e017      	b.n	800545e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <HAL_UART_IRQHandler+0x604>
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fdde 	bl	8006008 <UART_EndTransmit_IT>
    return;
 800544c:	e008      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
      return;
 800544e:	bf00      	nop
 8005450:	e006      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
    return;
 8005452:	bf00      	nop
 8005454:	e004      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
      return;
 8005456:	bf00      	nop
 8005458:	e002      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
      return;
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_UART_IRQHandler+0x604>
    return;
 800545e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005460:	37e8      	adds	r7, #232	@ 0xe8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop

08005468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ac:	b08a      	sub	sp, #40	@ 0x28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4ba4      	ldr	r3, [pc, #656]	@ (8005768 <UART_SetConfig+0x2c0>)
 80054d8:	4013      	ands	r3, r2
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a99      	ldr	r2, [pc, #612]	@ (800576c <UART_SetConfig+0x2c4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005510:	4313      	orrs	r3, r2
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a90      	ldr	r2, [pc, #576]	@ (8005770 <UART_SetConfig+0x2c8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d126      	bne.n	8005580 <UART_SetConfig+0xd8>
 8005532:	4b90      	ldr	r3, [pc, #576]	@ (8005774 <UART_SetConfig+0x2cc>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d81b      	bhi.n	8005578 <UART_SetConfig+0xd0>
 8005540:	a201      	add	r2, pc, #4	@ (adr r2, 8005548 <UART_SetConfig+0xa0>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	08005559 	.word	0x08005559
 800554c:	08005569 	.word	0x08005569
 8005550:	08005561 	.word	0x08005561
 8005554:	08005571 	.word	0x08005571
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555e:	e116      	b.n	800578e <UART_SetConfig+0x2e6>
 8005560:	2302      	movs	r3, #2
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005566:	e112      	b.n	800578e <UART_SetConfig+0x2e6>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556e:	e10e      	b.n	800578e <UART_SetConfig+0x2e6>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005576:	e10a      	b.n	800578e <UART_SetConfig+0x2e6>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557e:	e106      	b.n	800578e <UART_SetConfig+0x2e6>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a7c      	ldr	r2, [pc, #496]	@ (8005778 <UART_SetConfig+0x2d0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d138      	bne.n	80055fc <UART_SetConfig+0x154>
 800558a:	4b7a      	ldr	r3, [pc, #488]	@ (8005774 <UART_SetConfig+0x2cc>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005590:	f003 030c 	and.w	r3, r3, #12
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d82d      	bhi.n	80055f4 <UART_SetConfig+0x14c>
 8005598:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <UART_SetConfig+0xf8>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055f5 	.word	0x080055f5
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	080055f5 	.word	0x080055f5
 80055b8:	080055f5 	.word	0x080055f5
 80055bc:	080055f5 	.word	0x080055f5
 80055c0:	080055dd 	.word	0x080055dd
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055ed 	.word	0x080055ed
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055da:	e0d8      	b.n	800578e <UART_SetConfig+0x2e6>
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e2:	e0d4      	b.n	800578e <UART_SetConfig+0x2e6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ea:	e0d0      	b.n	800578e <UART_SetConfig+0x2e6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e0cc      	b.n	800578e <UART_SetConfig+0x2e6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fa:	e0c8      	b.n	800578e <UART_SetConfig+0x2e6>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a5e      	ldr	r2, [pc, #376]	@ (800577c <UART_SetConfig+0x2d4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d125      	bne.n	8005652 <UART_SetConfig+0x1aa>
 8005606:	4b5b      	ldr	r3, [pc, #364]	@ (8005774 <UART_SetConfig+0x2cc>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d016      	beq.n	8005642 <UART_SetConfig+0x19a>
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d818      	bhi.n	800564a <UART_SetConfig+0x1a2>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d00a      	beq.n	8005632 <UART_SetConfig+0x18a>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d814      	bhi.n	800564a <UART_SetConfig+0x1a2>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <UART_SetConfig+0x182>
 8005624:	2b10      	cmp	r3, #16
 8005626:	d008      	beq.n	800563a <UART_SetConfig+0x192>
 8005628:	e00f      	b.n	800564a <UART_SetConfig+0x1a2>
 800562a:	2300      	movs	r3, #0
 800562c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005630:	e0ad      	b.n	800578e <UART_SetConfig+0x2e6>
 8005632:	2302      	movs	r3, #2
 8005634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005638:	e0a9      	b.n	800578e <UART_SetConfig+0x2e6>
 800563a:	2304      	movs	r3, #4
 800563c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005640:	e0a5      	b.n	800578e <UART_SetConfig+0x2e6>
 8005642:	2308      	movs	r3, #8
 8005644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005648:	e0a1      	b.n	800578e <UART_SetConfig+0x2e6>
 800564a:	2310      	movs	r3, #16
 800564c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005650:	e09d      	b.n	800578e <UART_SetConfig+0x2e6>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a4a      	ldr	r2, [pc, #296]	@ (8005780 <UART_SetConfig+0x2d8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d125      	bne.n	80056a8 <UART_SetConfig+0x200>
 800565c:	4b45      	ldr	r3, [pc, #276]	@ (8005774 <UART_SetConfig+0x2cc>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005662:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005666:	2bc0      	cmp	r3, #192	@ 0xc0
 8005668:	d016      	beq.n	8005698 <UART_SetConfig+0x1f0>
 800566a:	2bc0      	cmp	r3, #192	@ 0xc0
 800566c:	d818      	bhi.n	80056a0 <UART_SetConfig+0x1f8>
 800566e:	2b80      	cmp	r3, #128	@ 0x80
 8005670:	d00a      	beq.n	8005688 <UART_SetConfig+0x1e0>
 8005672:	2b80      	cmp	r3, #128	@ 0x80
 8005674:	d814      	bhi.n	80056a0 <UART_SetConfig+0x1f8>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <UART_SetConfig+0x1d8>
 800567a:	2b40      	cmp	r3, #64	@ 0x40
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x1e8>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x1f8>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e082      	b.n	800578e <UART_SetConfig+0x2e6>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568e:	e07e      	b.n	800578e <UART_SetConfig+0x2e6>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005696:	e07a      	b.n	800578e <UART_SetConfig+0x2e6>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569e:	e076      	b.n	800578e <UART_SetConfig+0x2e6>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a6:	e072      	b.n	800578e <UART_SetConfig+0x2e6>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a35      	ldr	r2, [pc, #212]	@ (8005784 <UART_SetConfig+0x2dc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d12a      	bne.n	8005708 <UART_SetConfig+0x260>
 80056b2:	4b30      	ldr	r3, [pc, #192]	@ (8005774 <UART_SetConfig+0x2cc>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c0:	d01a      	beq.n	80056f8 <UART_SetConfig+0x250>
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c6:	d81b      	bhi.n	8005700 <UART_SetConfig+0x258>
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056cc:	d00c      	beq.n	80056e8 <UART_SetConfig+0x240>
 80056ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d2:	d815      	bhi.n	8005700 <UART_SetConfig+0x258>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <UART_SetConfig+0x238>
 80056d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056dc:	d008      	beq.n	80056f0 <UART_SetConfig+0x248>
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x258>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e6:	e052      	b.n	800578e <UART_SetConfig+0x2e6>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ee:	e04e      	b.n	800578e <UART_SetConfig+0x2e6>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f6:	e04a      	b.n	800578e <UART_SetConfig+0x2e6>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fe:	e046      	b.n	800578e <UART_SetConfig+0x2e6>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005706:	e042      	b.n	800578e <UART_SetConfig+0x2e6>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	@ (800576c <UART_SetConfig+0x2c4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d13a      	bne.n	8005788 <UART_SetConfig+0x2e0>
 8005712:	4b18      	ldr	r3, [pc, #96]	@ (8005774 <UART_SetConfig+0x2cc>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800571c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005720:	d01a      	beq.n	8005758 <UART_SetConfig+0x2b0>
 8005722:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005726:	d81b      	bhi.n	8005760 <UART_SetConfig+0x2b8>
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572c:	d00c      	beq.n	8005748 <UART_SetConfig+0x2a0>
 800572e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005732:	d815      	bhi.n	8005760 <UART_SetConfig+0x2b8>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <UART_SetConfig+0x298>
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573c:	d008      	beq.n	8005750 <UART_SetConfig+0x2a8>
 800573e:	e00f      	b.n	8005760 <UART_SetConfig+0x2b8>
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005746:	e022      	b.n	800578e <UART_SetConfig+0x2e6>
 8005748:	2302      	movs	r3, #2
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574e:	e01e      	b.n	800578e <UART_SetConfig+0x2e6>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005756:	e01a      	b.n	800578e <UART_SetConfig+0x2e6>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e016      	b.n	800578e <UART_SetConfig+0x2e6>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e012      	b.n	800578e <UART_SetConfig+0x2e6>
 8005768:	efff69f3 	.word	0xefff69f3
 800576c:	40008000 	.word	0x40008000
 8005770:	40013800 	.word	0x40013800
 8005774:	40021000 	.word	0x40021000
 8005778:	40004400 	.word	0x40004400
 800577c:	40004800 	.word	0x40004800
 8005780:	40004c00 	.word	0x40004c00
 8005784:	40005000 	.word	0x40005000
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a9f      	ldr	r2, [pc, #636]	@ (8005a10 <UART_SetConfig+0x568>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d17a      	bne.n	800588e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800579c:	2b08      	cmp	r3, #8
 800579e:	d824      	bhi.n	80057ea <UART_SetConfig+0x342>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <UART_SetConfig+0x300>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057eb 	.word	0x080057eb
 80057b8:	080057db 	.word	0x080057db
 80057bc:	080057eb 	.word	0x080057eb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	080057e3 	.word	0x080057e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe fcda 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
        break;
 80057d2:	e010      	b.n	80057f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005a14 <UART_SetConfig+0x56c>)
 80057d6:	61fb      	str	r3, [r7, #28]
        break;
 80057d8:	e00d      	b.n	80057f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fe fc3b 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80057de:	61f8      	str	r0, [r7, #28]
        break;
 80057e0:	e009      	b.n	80057f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e6:	61fb      	str	r3, [r7, #28]
        break;
 80057e8:	e005      	b.n	80057f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80fb 	beq.w	80059f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	429a      	cmp	r2, r3
 800580c:	d305      	bcc.n	800581a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	429a      	cmp	r2, r3
 8005818:	d903      	bls.n	8005822 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005820:	e0e8      	b.n	80059f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2200      	movs	r2, #0
 8005826:	461c      	mov	r4, r3
 8005828:	4615      	mov	r5, r2
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	022b      	lsls	r3, r5, #8
 8005834:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005838:	0222      	lsls	r2, r4, #8
 800583a:	68f9      	ldr	r1, [r7, #12]
 800583c:	6849      	ldr	r1, [r1, #4]
 800583e:	0849      	lsrs	r1, r1, #1
 8005840:	2000      	movs	r0, #0
 8005842:	4688      	mov	r8, r1
 8005844:	4681      	mov	r9, r0
 8005846:	eb12 0a08 	adds.w	sl, r2, r8
 800584a:	eb43 0b09 	adc.w	fp, r3, r9
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800585c:	4650      	mov	r0, sl
 800585e:	4659      	mov	r1, fp
 8005860:	f7fa fd1e 	bl	80002a0 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005872:	d308      	bcc.n	8005886 <UART_SetConfig+0x3de>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800587a:	d204      	bcs.n	8005886 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	60da      	str	r2, [r3, #12]
 8005884:	e0b6      	b.n	80059f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800588c:	e0b2      	b.n	80059f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005896:	d15e      	bne.n	8005956 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800589c:	2b08      	cmp	r3, #8
 800589e:	d828      	bhi.n	80058f2 <UART_SetConfig+0x44a>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <UART_SetConfig+0x400>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058f3 	.word	0x080058f3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7fe fc5a 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 80058d0:	61f8      	str	r0, [r7, #28]
        break;
 80058d2:	e014      	b.n	80058fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fe fc6c 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 80058d8:	61f8      	str	r0, [r7, #28]
        break;
 80058da:	e010      	b.n	80058fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005a14 <UART_SetConfig+0x56c>)
 80058de:	61fb      	str	r3, [r7, #28]
        break;
 80058e0:	e00d      	b.n	80058fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe fbb7 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80058e6:	61f8      	str	r0, [r7, #28]
        break;
 80058e8:	e009      	b.n	80058fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	61fb      	str	r3, [r7, #28]
        break;
 80058f0:	e005      	b.n	80058fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d077      	beq.n	80059f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	005a      	lsls	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	441a      	add	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d916      	bls.n	800594e <UART_SetConfig+0x4a6>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005926:	d212      	bcs.n	800594e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f023 030f 	bic.w	r3, r3, #15
 8005930:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	b29b      	uxth	r3, r3
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	b29a      	uxth	r2, r3
 800593e:	8afb      	ldrh	r3, [r7, #22]
 8005940:	4313      	orrs	r3, r2
 8005942:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	8afa      	ldrh	r2, [r7, #22]
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	e052      	b.n	80059f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005954:	e04e      	b.n	80059f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800595a:	2b08      	cmp	r3, #8
 800595c:	d827      	bhi.n	80059ae <UART_SetConfig+0x506>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x4bc>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	08005989 	.word	0x08005989
 8005968:	08005991 	.word	0x08005991
 800596c:	08005999 	.word	0x08005999
 8005970:	080059af 	.word	0x080059af
 8005974:	0800599f 	.word	0x0800599f
 8005978:	080059af 	.word	0x080059af
 800597c:	080059af 	.word	0x080059af
 8005980:	080059af 	.word	0x080059af
 8005984:	080059a7 	.word	0x080059a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7fe fbfc 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 800598c:	61f8      	str	r0, [r7, #28]
        break;
 800598e:	e014      	b.n	80059ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7fe fc0e 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8005994:	61f8      	str	r0, [r7, #28]
        break;
 8005996:	e010      	b.n	80059ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005998:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <UART_SetConfig+0x56c>)
 800599a:	61fb      	str	r3, [r7, #28]
        break;
 800599c:	e00d      	b.n	80059ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599e:	f7fe fb59 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80059a2:	61f8      	str	r0, [r7, #28]
        break;
 80059a4:	e009      	b.n	80059ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059aa:	61fb      	str	r3, [r7, #28]
        break;
 80059ac:	e005      	b.n	80059ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059b8:	bf00      	nop
    }

    if (pclk != 0U)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d019      	beq.n	80059f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	085a      	lsrs	r2, r3, #1
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	441a      	add	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d909      	bls.n	80059ee <UART_SetConfig+0x546>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d205      	bcs.n	80059ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	e002      	b.n	80059f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3728      	adds	r7, #40	@ 0x28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40008000 	.word	0x40008000
 8005a14:	00f42400 	.word	0x00f42400

08005a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b16:	d10a      	bne.n	8005b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  }
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b098      	sub	sp, #96	@ 0x60
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b6c:	f7fb fae8 	bl	8001140 <HAL_GetTick>
 8005b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d12e      	bne.n	8005bde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f88c 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d021      	beq.n	8005bde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e062      	b.n	8005ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d149      	bne.n	8005c80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f856 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03c      	beq.n	8005c80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	623b      	str	r3, [r7, #32]
   return(result);
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c58:	61fa      	str	r2, [r7, #28]
 8005c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	617b      	str	r3, [r7, #20]
   return(result);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e011      	b.n	8005ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3758      	adds	r7, #88	@ 0x58
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbc:	e04f      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cc4:	d04b      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	f7fb fa3b 	bl	8001140 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e04e      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d037      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b80      	cmp	r3, #128	@ 0x80
 8005cf2:	d034      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b40      	cmp	r3, #64	@ 0x40
 8005cf8:	d031      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d110      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f8ff 	bl	8005f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e029      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d38:	d111      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f8e5 	bl	8005f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e00f      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d0a0      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b097      	sub	sp, #92	@ 0x5c
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dba:	d10e      	bne.n	8005dda <UART_Start_Receive_IT+0x52>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <UART_Start_Receive_IT+0x48>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005dca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dce:	e02d      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dd8:	e028      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <UART_Start_Receive_IT+0x76>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <UART_Start_Receive_IT+0x6c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	22ff      	movs	r2, #255	@ 0xff
 8005dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005df2:	e01b      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	227f      	movs	r2, #127	@ 0x7f
 8005df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dfc:	e016      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e06:	d10d      	bne.n	8005e24 <UART_Start_Receive_IT+0x9c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <UART_Start_Receive_IT+0x92>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	227f      	movs	r2, #127	@ 0x7f
 8005e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e18:	e008      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	223f      	movs	r2, #63	@ 0x3f
 8005e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e22:	e003      	b.n	8005e2c <UART_Start_Receive_IT+0xa4>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2222      	movs	r2, #34	@ 0x22
 8005e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e78:	d107      	bne.n	8005e8a <UART_Start_Receive_IT+0x102>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <UART_Start_Receive_IT+0x184>)
 8005e86:	669a      	str	r2, [r3, #104]	@ 0x68
 8005e88:	e002      	b.n	8005e90 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	@ (8005f10 <UART_Start_Receive_IT+0x188>)
 8005e8e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <UART_Start_Receive_IT+0x110>
 8005eca:	e018      	b.n	8005efe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f043 0320 	orr.w	r3, r3, #32
 8005ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	69f9      	ldr	r1, [r7, #28]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e6      	bne.n	8005ecc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	375c      	adds	r7, #92	@ 0x5c
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	08006219 	.word	0x08006219
 8005f10:	0800605d 	.word	0x0800605d

08005f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b095      	sub	sp, #84	@ 0x54
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e6      	bne.n	8005f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d118      	bne.n	8005fbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0310 	bic.w	r3, r3, #16
 8005f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fd0:	bf00      	nop
 8005fd2:	3754      	adds	r7, #84	@ 0x54
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fa3e 	bl	800547c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	60bb      	str	r3, [r7, #8]
   return(result);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fa0a 	bl	8005468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006054:	bf00      	nop
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b09c      	sub	sp, #112	@ 0x70
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800606a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006074:	2b22      	cmp	r3, #34	@ 0x22
 8006076:	f040 80be 	bne.w	80061f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006080:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006084:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006088:	b2d9      	uxtb	r1, r3
 800608a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800608e:	b2da      	uxtb	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006094:	400a      	ands	r2, r1
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 80a3 	bne.w	800620a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	667b      	str	r3, [r7, #100]	@ 0x64
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006116:	647a      	str	r2, [r7, #68]	@ 0x44
 8006118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800611c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a34      	ldr	r2, [pc, #208]	@ (8006214 <UART_RxISR_8BIT+0x1b8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d01f      	beq.n	8006188 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d018      	beq.n	8006188 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	623b      	str	r3, [r7, #32]
   return(result);
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800616a:	663b      	str	r3, [r7, #96]	@ 0x60
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
 8006176:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800617a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e6      	bne.n	8006156 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800618c:	2b01      	cmp	r3, #1
 800618e:	d12e      	bne.n	80061ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0310 	bic.w	r3, r3, #16
 80061aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69b9      	ldr	r1, [r7, #24]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	617b      	str	r3, [r7, #20]
   return(result);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d103      	bne.n	80061de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2210      	movs	r2, #16
 80061dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff f952 	bl	8005490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ec:	e00d      	b.n	800620a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fa f9ce 	bl	8000590 <HAL_UART_RxCpltCallback>
}
 80061f4:	e009      	b.n	800620a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	8b1b      	ldrh	r3, [r3, #24]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	b292      	uxth	r2, r2
 8006208:	831a      	strh	r2, [r3, #24]
}
 800620a:	bf00      	nop
 800620c:	3770      	adds	r7, #112	@ 0x70
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40008000 	.word	0x40008000

08006218 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b09c      	sub	sp, #112	@ 0x70
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006226:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006230:	2b22      	cmp	r3, #34	@ 0x22
 8006232:	f040 80be 	bne.w	80063b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800623c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006246:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800624a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800624e:	4013      	ands	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006254:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 80a3 	bne.w	80063c6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800628e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006294:	667b      	str	r3, [r7, #100]	@ 0x64
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800629e:	657b      	str	r3, [r7, #84]	@ 0x54
 80062a0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80062ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e6      	bne.n	8006280 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80062d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a34      	ldr	r2, [pc, #208]	@ (80063d0 <UART_RxISR_16BIT+0x1b8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d01f      	beq.n	8006344 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006332:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006348:	2b01      	cmp	r3, #1
 800634a:	d12e      	bne.n	80063aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	613b      	str	r3, [r7, #16]
   return(result);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b10      	cmp	r3, #16
 8006390:	d103      	bne.n	800639a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2210      	movs	r2, #16
 8006398:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff f874 	bl	8005490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063a8:	e00d      	b.n	80063c6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fa f8f0 	bl	8000590 <HAL_UART_RxCpltCallback>
}
 80063b0:	e009      	b.n	80063c6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	8b1b      	ldrh	r3, [r3, #24]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0208 	orr.w	r2, r2, #8
 80063c2:	b292      	uxth	r2, r2
 80063c4:	831a      	strh	r2, [r3, #24]
}
 80063c6:	bf00      	nop
 80063c8:	3770      	adds	r7, #112	@ 0x70
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40008000 	.word	0x40008000

080063d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <siprintf>:
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b500      	push	{lr}
 80063ec:	b09c      	sub	sp, #112	@ 0x70
 80063ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80063f0:	9002      	str	r0, [sp, #8]
 80063f2:	9006      	str	r0, [sp, #24]
 80063f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063f8:	4809      	ldr	r0, [pc, #36]	@ (8006420 <siprintf+0x38>)
 80063fa:	9107      	str	r1, [sp, #28]
 80063fc:	9104      	str	r1, [sp, #16]
 80063fe:	4909      	ldr	r1, [pc, #36]	@ (8006424 <siprintf+0x3c>)
 8006400:	f853 2b04 	ldr.w	r2, [r3], #4
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	a902      	add	r1, sp, #8
 800640c:	f000 f924 	bl	8006658 <_svfiprintf_r>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	b01c      	add	sp, #112	@ 0x70
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b003      	add	sp, #12
 800641e:	4770      	bx	lr
 8006420:	2000000c 	.word	0x2000000c
 8006424:	ffff0208 	.word	0xffff0208

08006428 <siscanf>:
 8006428:	b40e      	push	{r1, r2, r3}
 800642a:	b530      	push	{r4, r5, lr}
 800642c:	b09c      	sub	sp, #112	@ 0x70
 800642e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006430:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006434:	f854 5b04 	ldr.w	r5, [r4], #4
 8006438:	f8ad 2014 	strh.w	r2, [sp, #20]
 800643c:	9002      	str	r0, [sp, #8]
 800643e:	9006      	str	r0, [sp, #24]
 8006440:	f7f9 fec6 	bl	80001d0 <strlen>
 8006444:	4b0b      	ldr	r3, [pc, #44]	@ (8006474 <siscanf+0x4c>)
 8006446:	9003      	str	r0, [sp, #12]
 8006448:	9007      	str	r0, [sp, #28]
 800644a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800644c:	480a      	ldr	r0, [pc, #40]	@ (8006478 <siscanf+0x50>)
 800644e:	9401      	str	r4, [sp, #4]
 8006450:	2300      	movs	r3, #0
 8006452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006454:	9314      	str	r3, [sp, #80]	@ 0x50
 8006456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800645a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800645e:	462a      	mov	r2, r5
 8006460:	4623      	mov	r3, r4
 8006462:	a902      	add	r1, sp, #8
 8006464:	6800      	ldr	r0, [r0, #0]
 8006466:	f000 fa4b 	bl	8006900 <__ssvfiscanf_r>
 800646a:	b01c      	add	sp, #112	@ 0x70
 800646c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006470:	b003      	add	sp, #12
 8006472:	4770      	bx	lr
 8006474:	0800647d 	.word	0x0800647d
 8006478:	2000000c 	.word	0x2000000c

0800647c <__seofread>:
 800647c:	2000      	movs	r0, #0
 800647e:	4770      	bx	lr

08006480 <strncmp>:
 8006480:	b510      	push	{r4, lr}
 8006482:	b16a      	cbz	r2, 80064a0 <strncmp+0x20>
 8006484:	3901      	subs	r1, #1
 8006486:	1884      	adds	r4, r0, r2
 8006488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800648c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006490:	429a      	cmp	r2, r3
 8006492:	d103      	bne.n	800649c <strncmp+0x1c>
 8006494:	42a0      	cmp	r0, r4
 8006496:	d001      	beq.n	800649c <strncmp+0x1c>
 8006498:	2a00      	cmp	r2, #0
 800649a:	d1f5      	bne.n	8006488 <strncmp+0x8>
 800649c:	1ad0      	subs	r0, r2, r3
 800649e:	bd10      	pop	{r4, pc}
 80064a0:	4610      	mov	r0, r2
 80064a2:	e7fc      	b.n	800649e <strncmp+0x1e>

080064a4 <memset>:
 80064a4:	4402      	add	r2, r0
 80064a6:	4603      	mov	r3, r0
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d100      	bne.n	80064ae <memset+0xa>
 80064ac:	4770      	bx	lr
 80064ae:	f803 1b01 	strb.w	r1, [r3], #1
 80064b2:	e7f9      	b.n	80064a8 <memset+0x4>

080064b4 <__errno>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	@ (80064bc <__errno+0x8>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <__libc_init_array>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4d0d      	ldr	r5, [pc, #52]	@ (80064f8 <__libc_init_array+0x38>)
 80064c4:	4c0d      	ldr	r4, [pc, #52]	@ (80064fc <__libc_init_array+0x3c>)
 80064c6:	1b64      	subs	r4, r4, r5
 80064c8:	10a4      	asrs	r4, r4, #2
 80064ca:	2600      	movs	r6, #0
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	d109      	bne.n	80064e4 <__libc_init_array+0x24>
 80064d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006500 <__libc_init_array+0x40>)
 80064d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006504 <__libc_init_array+0x44>)
 80064d4:	f001 f8e0 	bl	8007698 <_init>
 80064d8:	1b64      	subs	r4, r4, r5
 80064da:	10a4      	asrs	r4, r4, #2
 80064dc:	2600      	movs	r6, #0
 80064de:	42a6      	cmp	r6, r4
 80064e0:	d105      	bne.n	80064ee <__libc_init_array+0x2e>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e8:	4798      	blx	r3
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7ee      	b.n	80064cc <__libc_init_array+0xc>
 80064ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f2:	4798      	blx	r3
 80064f4:	3601      	adds	r6, #1
 80064f6:	e7f2      	b.n	80064de <__libc_init_array+0x1e>
 80064f8:	08007958 	.word	0x08007958
 80064fc:	08007958 	.word	0x08007958
 8006500:	08007958 	.word	0x08007958
 8006504:	0800795c 	.word	0x0800795c

08006508 <__retarget_lock_acquire_recursive>:
 8006508:	4770      	bx	lr

0800650a <__retarget_lock_release_recursive>:
 800650a:	4770      	bx	lr

0800650c <_free_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4605      	mov	r5, r0
 8006510:	2900      	cmp	r1, #0
 8006512:	d041      	beq.n	8006598 <_free_r+0x8c>
 8006514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006518:	1f0c      	subs	r4, r1, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	bfb8      	it	lt
 800651e:	18e4      	addlt	r4, r4, r3
 8006520:	f000 ff1a 	bl	8007358 <__malloc_lock>
 8006524:	4a1d      	ldr	r2, [pc, #116]	@ (800659c <_free_r+0x90>)
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	b933      	cbnz	r3, 8006538 <_free_r+0x2c>
 800652a:	6063      	str	r3, [r4, #4]
 800652c:	6014      	str	r4, [r2, #0]
 800652e:	4628      	mov	r0, r5
 8006530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006534:	f000 bf16 	b.w	8007364 <__malloc_unlock>
 8006538:	42a3      	cmp	r3, r4
 800653a:	d908      	bls.n	800654e <_free_r+0x42>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	1821      	adds	r1, r4, r0
 8006540:	428b      	cmp	r3, r1
 8006542:	bf01      	itttt	eq
 8006544:	6819      	ldreq	r1, [r3, #0]
 8006546:	685b      	ldreq	r3, [r3, #4]
 8006548:	1809      	addeq	r1, r1, r0
 800654a:	6021      	streq	r1, [r4, #0]
 800654c:	e7ed      	b.n	800652a <_free_r+0x1e>
 800654e:	461a      	mov	r2, r3
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	b10b      	cbz	r3, 8006558 <_free_r+0x4c>
 8006554:	42a3      	cmp	r3, r4
 8006556:	d9fa      	bls.n	800654e <_free_r+0x42>
 8006558:	6811      	ldr	r1, [r2, #0]
 800655a:	1850      	adds	r0, r2, r1
 800655c:	42a0      	cmp	r0, r4
 800655e:	d10b      	bne.n	8006578 <_free_r+0x6c>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	4401      	add	r1, r0
 8006564:	1850      	adds	r0, r2, r1
 8006566:	4283      	cmp	r3, r0
 8006568:	6011      	str	r1, [r2, #0]
 800656a:	d1e0      	bne.n	800652e <_free_r+0x22>
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6053      	str	r3, [r2, #4]
 8006572:	4408      	add	r0, r1
 8006574:	6010      	str	r0, [r2, #0]
 8006576:	e7da      	b.n	800652e <_free_r+0x22>
 8006578:	d902      	bls.n	8006580 <_free_r+0x74>
 800657a:	230c      	movs	r3, #12
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	e7d6      	b.n	800652e <_free_r+0x22>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	1821      	adds	r1, r4, r0
 8006584:	428b      	cmp	r3, r1
 8006586:	bf04      	itt	eq
 8006588:	6819      	ldreq	r1, [r3, #0]
 800658a:	685b      	ldreq	r3, [r3, #4]
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	bf04      	itt	eq
 8006590:	1809      	addeq	r1, r1, r0
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	6054      	str	r4, [r2, #4]
 8006596:	e7ca      	b.n	800652e <_free_r+0x22>
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	2000037c 	.word	0x2000037c

080065a0 <__ssputs_r>:
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	688e      	ldr	r6, [r1, #8]
 80065a6:	461f      	mov	r7, r3
 80065a8:	42be      	cmp	r6, r7
 80065aa:	680b      	ldr	r3, [r1, #0]
 80065ac:	4682      	mov	sl, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	4690      	mov	r8, r2
 80065b2:	d82d      	bhi.n	8006610 <__ssputs_r+0x70>
 80065b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065bc:	d026      	beq.n	800660c <__ssputs_r+0x6c>
 80065be:	6965      	ldr	r5, [r4, #20]
 80065c0:	6909      	ldr	r1, [r1, #16]
 80065c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c6:	eba3 0901 	sub.w	r9, r3, r1
 80065ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065ce:	1c7b      	adds	r3, r7, #1
 80065d0:	444b      	add	r3, r9
 80065d2:	106d      	asrs	r5, r5, #1
 80065d4:	429d      	cmp	r5, r3
 80065d6:	bf38      	it	cc
 80065d8:	461d      	movcc	r5, r3
 80065da:	0553      	lsls	r3, r2, #21
 80065dc:	d527      	bpl.n	800662e <__ssputs_r+0x8e>
 80065de:	4629      	mov	r1, r5
 80065e0:	f000 fb24 	bl	8006c2c <_malloc_r>
 80065e4:	4606      	mov	r6, r0
 80065e6:	b360      	cbz	r0, 8006642 <__ssputs_r+0xa2>
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	464a      	mov	r2, r9
 80065ec:	f001 f83e 	bl	800766c <memcpy>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	6126      	str	r6, [r4, #16]
 80065fe:	6165      	str	r5, [r4, #20]
 8006600:	444e      	add	r6, r9
 8006602:	eba5 0509 	sub.w	r5, r5, r9
 8006606:	6026      	str	r6, [r4, #0]
 8006608:	60a5      	str	r5, [r4, #8]
 800660a:	463e      	mov	r6, r7
 800660c:	42be      	cmp	r6, r7
 800660e:	d900      	bls.n	8006612 <__ssputs_r+0x72>
 8006610:	463e      	mov	r6, r7
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	4632      	mov	r2, r6
 8006616:	4641      	mov	r1, r8
 8006618:	f000 fffe 	bl	8007618 <memmove>
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	1b9b      	subs	r3, r3, r6
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	4433      	add	r3, r6
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	2000      	movs	r0, #0
 800662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662e:	462a      	mov	r2, r5
 8006630:	f000 fed8 	bl	80073e4 <_realloc_r>
 8006634:	4606      	mov	r6, r0
 8006636:	2800      	cmp	r0, #0
 8006638:	d1e0      	bne.n	80065fc <__ssputs_r+0x5c>
 800663a:	6921      	ldr	r1, [r4, #16]
 800663c:	4650      	mov	r0, sl
 800663e:	f7ff ff65 	bl	800650c <_free_r>
 8006642:	230c      	movs	r3, #12
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006654:	e7e9      	b.n	800662a <__ssputs_r+0x8a>
	...

08006658 <_svfiprintf_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	4698      	mov	r8, r3
 800665e:	898b      	ldrh	r3, [r1, #12]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	b09d      	sub	sp, #116	@ 0x74
 8006664:	4607      	mov	r7, r0
 8006666:	460d      	mov	r5, r1
 8006668:	4614      	mov	r4, r2
 800666a:	d510      	bpl.n	800668e <_svfiprintf_r+0x36>
 800666c:	690b      	ldr	r3, [r1, #16]
 800666e:	b973      	cbnz	r3, 800668e <_svfiprintf_r+0x36>
 8006670:	2140      	movs	r1, #64	@ 0x40
 8006672:	f000 fadb 	bl	8006c2c <_malloc_r>
 8006676:	6028      	str	r0, [r5, #0]
 8006678:	6128      	str	r0, [r5, #16]
 800667a:	b930      	cbnz	r0, 800668a <_svfiprintf_r+0x32>
 800667c:	230c      	movs	r3, #12
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006684:	b01d      	add	sp, #116	@ 0x74
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668a:	2340      	movs	r3, #64	@ 0x40
 800668c:	616b      	str	r3, [r5, #20]
 800668e:	2300      	movs	r3, #0
 8006690:	9309      	str	r3, [sp, #36]	@ 0x24
 8006692:	2320      	movs	r3, #32
 8006694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006698:	f8cd 800c 	str.w	r8, [sp, #12]
 800669c:	2330      	movs	r3, #48	@ 0x30
 800669e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800683c <_svfiprintf_r+0x1e4>
 80066a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066a6:	f04f 0901 	mov.w	r9, #1
 80066aa:	4623      	mov	r3, r4
 80066ac:	469a      	mov	sl, r3
 80066ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b2:	b10a      	cbz	r2, 80066b8 <_svfiprintf_r+0x60>
 80066b4:	2a25      	cmp	r2, #37	@ 0x25
 80066b6:	d1f9      	bne.n	80066ac <_svfiprintf_r+0x54>
 80066b8:	ebba 0b04 	subs.w	fp, sl, r4
 80066bc:	d00b      	beq.n	80066d6 <_svfiprintf_r+0x7e>
 80066be:	465b      	mov	r3, fp
 80066c0:	4622      	mov	r2, r4
 80066c2:	4629      	mov	r1, r5
 80066c4:	4638      	mov	r0, r7
 80066c6:	f7ff ff6b 	bl	80065a0 <__ssputs_r>
 80066ca:	3001      	adds	r0, #1
 80066cc:	f000 80a7 	beq.w	800681e <_svfiprintf_r+0x1c6>
 80066d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066d2:	445a      	add	r2, fp
 80066d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066d6:	f89a 3000 	ldrb.w	r3, [sl]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 809f 	beq.w	800681e <_svfiprintf_r+0x1c6>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ea:	f10a 0a01 	add.w	sl, sl, #1
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	9307      	str	r3, [sp, #28]
 80066f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80066f8:	4654      	mov	r4, sl
 80066fa:	2205      	movs	r2, #5
 80066fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006700:	484e      	ldr	r0, [pc, #312]	@ (800683c <_svfiprintf_r+0x1e4>)
 8006702:	f7f9 fd7d 	bl	8000200 <memchr>
 8006706:	9a04      	ldr	r2, [sp, #16]
 8006708:	b9d8      	cbnz	r0, 8006742 <_svfiprintf_r+0xea>
 800670a:	06d0      	lsls	r0, r2, #27
 800670c:	bf44      	itt	mi
 800670e:	2320      	movmi	r3, #32
 8006710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006714:	0711      	lsls	r1, r2, #28
 8006716:	bf44      	itt	mi
 8006718:	232b      	movmi	r3, #43	@ 0x2b
 800671a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800671e:	f89a 3000 	ldrb.w	r3, [sl]
 8006722:	2b2a      	cmp	r3, #42	@ 0x2a
 8006724:	d015      	beq.n	8006752 <_svfiprintf_r+0xfa>
 8006726:	9a07      	ldr	r2, [sp, #28]
 8006728:	4654      	mov	r4, sl
 800672a:	2000      	movs	r0, #0
 800672c:	f04f 0c0a 	mov.w	ip, #10
 8006730:	4621      	mov	r1, r4
 8006732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006736:	3b30      	subs	r3, #48	@ 0x30
 8006738:	2b09      	cmp	r3, #9
 800673a:	d94b      	bls.n	80067d4 <_svfiprintf_r+0x17c>
 800673c:	b1b0      	cbz	r0, 800676c <_svfiprintf_r+0x114>
 800673e:	9207      	str	r2, [sp, #28]
 8006740:	e014      	b.n	800676c <_svfiprintf_r+0x114>
 8006742:	eba0 0308 	sub.w	r3, r0, r8
 8006746:	fa09 f303 	lsl.w	r3, r9, r3
 800674a:	4313      	orrs	r3, r2
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	46a2      	mov	sl, r4
 8006750:	e7d2      	b.n	80066f8 <_svfiprintf_r+0xa0>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	1d19      	adds	r1, r3, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	9103      	str	r1, [sp, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfbb      	ittet	lt
 800675e:	425b      	neglt	r3, r3
 8006760:	f042 0202 	orrlt.w	r2, r2, #2
 8006764:	9307      	strge	r3, [sp, #28]
 8006766:	9307      	strlt	r3, [sp, #28]
 8006768:	bfb8      	it	lt
 800676a:	9204      	strlt	r2, [sp, #16]
 800676c:	7823      	ldrb	r3, [r4, #0]
 800676e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006770:	d10a      	bne.n	8006788 <_svfiprintf_r+0x130>
 8006772:	7863      	ldrb	r3, [r4, #1]
 8006774:	2b2a      	cmp	r3, #42	@ 0x2a
 8006776:	d132      	bne.n	80067de <_svfiprintf_r+0x186>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	1d1a      	adds	r2, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	9203      	str	r2, [sp, #12]
 8006780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006784:	3402      	adds	r4, #2
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800684c <_svfiprintf_r+0x1f4>
 800678c:	7821      	ldrb	r1, [r4, #0]
 800678e:	2203      	movs	r2, #3
 8006790:	4650      	mov	r0, sl
 8006792:	f7f9 fd35 	bl	8000200 <memchr>
 8006796:	b138      	cbz	r0, 80067a8 <_svfiprintf_r+0x150>
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	eba0 000a 	sub.w	r0, r0, sl
 800679e:	2240      	movs	r2, #64	@ 0x40
 80067a0:	4082      	lsls	r2, r0
 80067a2:	4313      	orrs	r3, r2
 80067a4:	3401      	adds	r4, #1
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ac:	4824      	ldr	r0, [pc, #144]	@ (8006840 <_svfiprintf_r+0x1e8>)
 80067ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067b2:	2206      	movs	r2, #6
 80067b4:	f7f9 fd24 	bl	8000200 <memchr>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d036      	beq.n	800682a <_svfiprintf_r+0x1d2>
 80067bc:	4b21      	ldr	r3, [pc, #132]	@ (8006844 <_svfiprintf_r+0x1ec>)
 80067be:	bb1b      	cbnz	r3, 8006808 <_svfiprintf_r+0x1b0>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	3307      	adds	r3, #7
 80067c4:	f023 0307 	bic.w	r3, r3, #7
 80067c8:	3308      	adds	r3, #8
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ce:	4433      	add	r3, r6
 80067d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d2:	e76a      	b.n	80066aa <_svfiprintf_r+0x52>
 80067d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067d8:	460c      	mov	r4, r1
 80067da:	2001      	movs	r0, #1
 80067dc:	e7a8      	b.n	8006730 <_svfiprintf_r+0xd8>
 80067de:	2300      	movs	r3, #0
 80067e0:	3401      	adds	r4, #1
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	4619      	mov	r1, r3
 80067e6:	f04f 0c0a 	mov.w	ip, #10
 80067ea:	4620      	mov	r0, r4
 80067ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f0:	3a30      	subs	r2, #48	@ 0x30
 80067f2:	2a09      	cmp	r2, #9
 80067f4:	d903      	bls.n	80067fe <_svfiprintf_r+0x1a6>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0c6      	beq.n	8006788 <_svfiprintf_r+0x130>
 80067fa:	9105      	str	r1, [sp, #20]
 80067fc:	e7c4      	b.n	8006788 <_svfiprintf_r+0x130>
 80067fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006802:	4604      	mov	r4, r0
 8006804:	2301      	movs	r3, #1
 8006806:	e7f0      	b.n	80067ea <_svfiprintf_r+0x192>
 8006808:	ab03      	add	r3, sp, #12
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	462a      	mov	r2, r5
 800680e:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <_svfiprintf_r+0x1f0>)
 8006810:	a904      	add	r1, sp, #16
 8006812:	4638      	mov	r0, r7
 8006814:	f3af 8000 	nop.w
 8006818:	1c42      	adds	r2, r0, #1
 800681a:	4606      	mov	r6, r0
 800681c:	d1d6      	bne.n	80067cc <_svfiprintf_r+0x174>
 800681e:	89ab      	ldrh	r3, [r5, #12]
 8006820:	065b      	lsls	r3, r3, #25
 8006822:	f53f af2d 	bmi.w	8006680 <_svfiprintf_r+0x28>
 8006826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006828:	e72c      	b.n	8006684 <_svfiprintf_r+0x2c>
 800682a:	ab03      	add	r3, sp, #12
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	462a      	mov	r2, r5
 8006830:	4b05      	ldr	r3, [pc, #20]	@ (8006848 <_svfiprintf_r+0x1f0>)
 8006832:	a904      	add	r1, sp, #16
 8006834:	4638      	mov	r0, r7
 8006836:	f000 fae7 	bl	8006e08 <_printf_i>
 800683a:	e7ed      	b.n	8006818 <_svfiprintf_r+0x1c0>
 800683c:	08007800 	.word	0x08007800
 8006840:	0800780a 	.word	0x0800780a
 8006844:	00000000 	.word	0x00000000
 8006848:	080065a1 	.word	0x080065a1
 800684c:	08007806 	.word	0x08007806

08006850 <_sungetc_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	1c4b      	adds	r3, r1, #1
 8006854:	4614      	mov	r4, r2
 8006856:	d103      	bne.n	8006860 <_sungetc_r+0x10>
 8006858:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800685c:	4628      	mov	r0, r5
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	8993      	ldrh	r3, [r2, #12]
 8006862:	f023 0320 	bic.w	r3, r3, #32
 8006866:	8193      	strh	r3, [r2, #12]
 8006868:	6853      	ldr	r3, [r2, #4]
 800686a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800686c:	b2cd      	uxtb	r5, r1
 800686e:	b18a      	cbz	r2, 8006894 <_sungetc_r+0x44>
 8006870:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006872:	429a      	cmp	r2, r3
 8006874:	dd08      	ble.n	8006888 <_sungetc_r+0x38>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	1e5a      	subs	r2, r3, #1
 800687a:	6022      	str	r2, [r4, #0]
 800687c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	3301      	adds	r3, #1
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	e7e9      	b.n	800685c <_sungetc_r+0xc>
 8006888:	4621      	mov	r1, r4
 800688a:	f000 fd71 	bl	8007370 <__submore>
 800688e:	2800      	cmp	r0, #0
 8006890:	d0f1      	beq.n	8006876 <_sungetc_r+0x26>
 8006892:	e7e1      	b.n	8006858 <_sungetc_r+0x8>
 8006894:	6921      	ldr	r1, [r4, #16]
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	b141      	cbz	r1, 80068ac <_sungetc_r+0x5c>
 800689a:	4291      	cmp	r1, r2
 800689c:	d206      	bcs.n	80068ac <_sungetc_r+0x5c>
 800689e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80068a2:	42a9      	cmp	r1, r5
 80068a4:	d102      	bne.n	80068ac <_sungetc_r+0x5c>
 80068a6:	3a01      	subs	r2, #1
 80068a8:	6022      	str	r2, [r4, #0]
 80068aa:	e7ea      	b.n	8006882 <_sungetc_r+0x32>
 80068ac:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80068b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068b6:	2303      	movs	r3, #3
 80068b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80068ba:	4623      	mov	r3, r4
 80068bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	2301      	movs	r3, #1
 80068c4:	e7de      	b.n	8006884 <_sungetc_r+0x34>

080068c6 <__ssrefill_r>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80068cc:	b169      	cbz	r1, 80068ea <__ssrefill_r+0x24>
 80068ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d001      	beq.n	80068da <__ssrefill_r+0x14>
 80068d6:	f7ff fe19 	bl	800650c <_free_r>
 80068da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	2000      	movs	r0, #0
 80068e0:	6360      	str	r0, [r4, #52]	@ 0x34
 80068e2:	b113      	cbz	r3, 80068ea <__ssrefill_r+0x24>
 80068e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	2300      	movs	r3, #0
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f043 0320 	orr.w	r3, r3, #32
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068fe:	e7f3      	b.n	80068e8 <__ssrefill_r+0x22>

08006900 <__ssvfiscanf_r>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	460c      	mov	r4, r1
 8006906:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800690a:	2100      	movs	r1, #0
 800690c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006910:	49a5      	ldr	r1, [pc, #660]	@ (8006ba8 <__ssvfiscanf_r+0x2a8>)
 8006912:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006914:	f10d 0804 	add.w	r8, sp, #4
 8006918:	49a4      	ldr	r1, [pc, #656]	@ (8006bac <__ssvfiscanf_r+0x2ac>)
 800691a:	4fa5      	ldr	r7, [pc, #660]	@ (8006bb0 <__ssvfiscanf_r+0x2b0>)
 800691c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006920:	4606      	mov	r6, r0
 8006922:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	7813      	ldrb	r3, [r2, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8158 	beq.w	8006bde <__ssvfiscanf_r+0x2de>
 800692e:	5cf9      	ldrb	r1, [r7, r3]
 8006930:	f011 0108 	ands.w	r1, r1, #8
 8006934:	f102 0501 	add.w	r5, r2, #1
 8006938:	d019      	beq.n	800696e <__ssvfiscanf_r+0x6e>
 800693a:	6863      	ldr	r3, [r4, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd0f      	ble.n	8006960 <__ssvfiscanf_r+0x60>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	5cba      	ldrb	r2, [r7, r2]
 8006946:	0712      	lsls	r2, r2, #28
 8006948:	d401      	bmi.n	800694e <__ssvfiscanf_r+0x4e>
 800694a:	462a      	mov	r2, r5
 800694c:	e7eb      	b.n	8006926 <__ssvfiscanf_r+0x26>
 800694e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006950:	3201      	adds	r2, #1
 8006952:	9245      	str	r2, [sp, #276]	@ 0x114
 8006954:	6862      	ldr	r2, [r4, #4]
 8006956:	3301      	adds	r3, #1
 8006958:	3a01      	subs	r2, #1
 800695a:	6062      	str	r2, [r4, #4]
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	e7ec      	b.n	800693a <__ssvfiscanf_r+0x3a>
 8006960:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006962:	4621      	mov	r1, r4
 8006964:	4630      	mov	r0, r6
 8006966:	4798      	blx	r3
 8006968:	2800      	cmp	r0, #0
 800696a:	d0e9      	beq.n	8006940 <__ssvfiscanf_r+0x40>
 800696c:	e7ed      	b.n	800694a <__ssvfiscanf_r+0x4a>
 800696e:	2b25      	cmp	r3, #37	@ 0x25
 8006970:	d012      	beq.n	8006998 <__ssvfiscanf_r+0x98>
 8006972:	4699      	mov	r9, r3
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f340 8093 	ble.w	8006aa2 <__ssvfiscanf_r+0x1a2>
 800697c:	6822      	ldr	r2, [r4, #0]
 800697e:	7813      	ldrb	r3, [r2, #0]
 8006980:	454b      	cmp	r3, r9
 8006982:	f040 812c 	bne.w	8006bde <__ssvfiscanf_r+0x2de>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	3b01      	subs	r3, #1
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800698e:	3201      	adds	r2, #1
 8006990:	3301      	adds	r3, #1
 8006992:	6022      	str	r2, [r4, #0]
 8006994:	9345      	str	r3, [sp, #276]	@ 0x114
 8006996:	e7d8      	b.n	800694a <__ssvfiscanf_r+0x4a>
 8006998:	9141      	str	r1, [sp, #260]	@ 0x104
 800699a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800699c:	7853      	ldrb	r3, [r2, #1]
 800699e:	2b2a      	cmp	r3, #42	@ 0x2a
 80069a0:	bf02      	ittt	eq
 80069a2:	2310      	moveq	r3, #16
 80069a4:	1c95      	addeq	r5, r2, #2
 80069a6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80069a8:	220a      	movs	r2, #10
 80069aa:	46a9      	mov	r9, r5
 80069ac:	f819 1b01 	ldrb.w	r1, [r9], #1
 80069b0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d91e      	bls.n	80069f6 <__ssvfiscanf_r+0xf6>
 80069b8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006bb4 <__ssvfiscanf_r+0x2b4>
 80069bc:	2203      	movs	r2, #3
 80069be:	4650      	mov	r0, sl
 80069c0:	f7f9 fc1e 	bl	8000200 <memchr>
 80069c4:	b138      	cbz	r0, 80069d6 <__ssvfiscanf_r+0xd6>
 80069c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069c8:	eba0 000a 	sub.w	r0, r0, sl
 80069cc:	2301      	movs	r3, #1
 80069ce:	4083      	lsls	r3, r0
 80069d0:	4313      	orrs	r3, r2
 80069d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80069d4:	464d      	mov	r5, r9
 80069d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069da:	2b78      	cmp	r3, #120	@ 0x78
 80069dc:	d806      	bhi.n	80069ec <__ssvfiscanf_r+0xec>
 80069de:	2b57      	cmp	r3, #87	@ 0x57
 80069e0:	d810      	bhi.n	8006a04 <__ssvfiscanf_r+0x104>
 80069e2:	2b25      	cmp	r3, #37	@ 0x25
 80069e4:	d0c5      	beq.n	8006972 <__ssvfiscanf_r+0x72>
 80069e6:	d857      	bhi.n	8006a98 <__ssvfiscanf_r+0x198>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d065      	beq.n	8006ab8 <__ssvfiscanf_r+0x1b8>
 80069ec:	2303      	movs	r3, #3
 80069ee:	9347      	str	r3, [sp, #284]	@ 0x11c
 80069f0:	230a      	movs	r3, #10
 80069f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80069f4:	e078      	b.n	8006ae8 <__ssvfiscanf_r+0x1e8>
 80069f6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80069f8:	fb02 1103 	mla	r1, r2, r3, r1
 80069fc:	3930      	subs	r1, #48	@ 0x30
 80069fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006a00:	464d      	mov	r5, r9
 8006a02:	e7d2      	b.n	80069aa <__ssvfiscanf_r+0xaa>
 8006a04:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006a08:	2a20      	cmp	r2, #32
 8006a0a:	d8ef      	bhi.n	80069ec <__ssvfiscanf_r+0xec>
 8006a0c:	a101      	add	r1, pc, #4	@ (adr r1, 8006a14 <__ssvfiscanf_r+0x114>)
 8006a0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006ac7 	.word	0x08006ac7
 8006a18:	080069ed 	.word	0x080069ed
 8006a1c:	080069ed 	.word	0x080069ed
 8006a20:	08006b21 	.word	0x08006b21
 8006a24:	080069ed 	.word	0x080069ed
 8006a28:	080069ed 	.word	0x080069ed
 8006a2c:	080069ed 	.word	0x080069ed
 8006a30:	080069ed 	.word	0x080069ed
 8006a34:	080069ed 	.word	0x080069ed
 8006a38:	080069ed 	.word	0x080069ed
 8006a3c:	080069ed 	.word	0x080069ed
 8006a40:	08006b37 	.word	0x08006b37
 8006a44:	08006b1d 	.word	0x08006b1d
 8006a48:	08006a9f 	.word	0x08006a9f
 8006a4c:	08006a9f 	.word	0x08006a9f
 8006a50:	08006a9f 	.word	0x08006a9f
 8006a54:	080069ed 	.word	0x080069ed
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	080069ed 	.word	0x080069ed
 8006a60:	080069ed 	.word	0x080069ed
 8006a64:	080069ed 	.word	0x080069ed
 8006a68:	080069ed 	.word	0x080069ed
 8006a6c:	08006b47 	.word	0x08006b47
 8006a70:	08006ae1 	.word	0x08006ae1
 8006a74:	08006abf 	.word	0x08006abf
 8006a78:	080069ed 	.word	0x080069ed
 8006a7c:	080069ed 	.word	0x080069ed
 8006a80:	08006b43 	.word	0x08006b43
 8006a84:	080069ed 	.word	0x080069ed
 8006a88:	08006b1d 	.word	0x08006b1d
 8006a8c:	080069ed 	.word	0x080069ed
 8006a90:	080069ed 	.word	0x080069ed
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	3b45      	subs	r3, #69	@ 0x45
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d8a6      	bhi.n	80069ec <__ssvfiscanf_r+0xec>
 8006a9e:	2305      	movs	r3, #5
 8006aa0:	e021      	b.n	8006ae6 <__ssvfiscanf_r+0x1e6>
 8006aa2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4798      	blx	r3
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f43f af66 	beq.w	800697c <__ssvfiscanf_r+0x7c>
 8006ab0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f040 808b 	bne.w	8006bce <__ssvfiscanf_r+0x2ce>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006abc:	e08b      	b.n	8006bd6 <__ssvfiscanf_r+0x2d6>
 8006abe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ac0:	f042 0220 	orr.w	r2, r2, #32
 8006ac4:	9241      	str	r2, [sp, #260]	@ 0x104
 8006ac6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	9241      	str	r2, [sp, #260]	@ 0x104
 8006ace:	2210      	movs	r2, #16
 8006ad0:	2b6e      	cmp	r3, #110	@ 0x6e
 8006ad2:	9242      	str	r2, [sp, #264]	@ 0x108
 8006ad4:	d902      	bls.n	8006adc <__ssvfiscanf_r+0x1dc>
 8006ad6:	e005      	b.n	8006ae4 <__ssvfiscanf_r+0x1e4>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9342      	str	r3, [sp, #264]	@ 0x108
 8006adc:	2303      	movs	r3, #3
 8006ade:	e002      	b.n	8006ae6 <__ssvfiscanf_r+0x1e6>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006ae8:	6863      	ldr	r3, [r4, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dd39      	ble.n	8006b62 <__ssvfiscanf_r+0x262>
 8006aee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006af0:	0659      	lsls	r1, r3, #25
 8006af2:	d404      	bmi.n	8006afe <__ssvfiscanf_r+0x1fe>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	781a      	ldrb	r2, [r3, #0]
 8006af8:	5cba      	ldrb	r2, [r7, r2]
 8006afa:	0712      	lsls	r2, r2, #28
 8006afc:	d438      	bmi.n	8006b70 <__ssvfiscanf_r+0x270>
 8006afe:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	dc47      	bgt.n	8006b94 <__ssvfiscanf_r+0x294>
 8006b04:	466b      	mov	r3, sp
 8006b06:	4622      	mov	r2, r4
 8006b08:	a941      	add	r1, sp, #260	@ 0x104
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f000 fa9c 	bl	8007048 <_scanf_chars>
 8006b10:	2801      	cmp	r0, #1
 8006b12:	d064      	beq.n	8006bde <__ssvfiscanf_r+0x2de>
 8006b14:	2802      	cmp	r0, #2
 8006b16:	f47f af18 	bne.w	800694a <__ssvfiscanf_r+0x4a>
 8006b1a:	e7c9      	b.n	8006ab0 <__ssvfiscanf_r+0x1b0>
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	e7d7      	b.n	8006ad0 <__ssvfiscanf_r+0x1d0>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4640      	mov	r0, r8
 8006b24:	f000 fbde 	bl	80072e4 <__sccl>
 8006b28:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006b30:	4605      	mov	r5, r0
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7d7      	b.n	8006ae6 <__ssvfiscanf_r+0x1e6>
 8006b36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3c:	9341      	str	r3, [sp, #260]	@ 0x104
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e7d1      	b.n	8006ae6 <__ssvfiscanf_r+0x1e6>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e7cf      	b.n	8006ae6 <__ssvfiscanf_r+0x1e6>
 8006b46:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006b48:	06c3      	lsls	r3, r0, #27
 8006b4a:	f53f aefe 	bmi.w	800694a <__ssvfiscanf_r+0x4a>
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006b52:	1d19      	adds	r1, r3, #4
 8006b54:	9100      	str	r1, [sp, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	07c0      	lsls	r0, r0, #31
 8006b5a:	bf4c      	ite	mi
 8006b5c:	801a      	strhmi	r2, [r3, #0]
 8006b5e:	601a      	strpl	r2, [r3, #0]
 8006b60:	e6f3      	b.n	800694a <__ssvfiscanf_r+0x4a>
 8006b62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006b64:	4621      	mov	r1, r4
 8006b66:	4630      	mov	r0, r6
 8006b68:	4798      	blx	r3
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0bf      	beq.n	8006aee <__ssvfiscanf_r+0x1ee>
 8006b6e:	e79f      	b.n	8006ab0 <__ssvfiscanf_r+0x1b0>
 8006b70:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006b72:	3201      	adds	r2, #1
 8006b74:	9245      	str	r2, [sp, #276]	@ 0x114
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	3a01      	subs	r2, #1
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	6062      	str	r2, [r4, #4]
 8006b7e:	dd02      	ble.n	8006b86 <__ssvfiscanf_r+0x286>
 8006b80:	3301      	adds	r3, #1
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e7b6      	b.n	8006af4 <__ssvfiscanf_r+0x1f4>
 8006b86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4798      	blx	r3
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0b0      	beq.n	8006af4 <__ssvfiscanf_r+0x1f4>
 8006b92:	e78d      	b.n	8006ab0 <__ssvfiscanf_r+0x1b0>
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	dc0f      	bgt.n	8006bb8 <__ssvfiscanf_r+0x2b8>
 8006b98:	466b      	mov	r3, sp
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	a941      	add	r1, sp, #260	@ 0x104
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 faac 	bl	80070fc <_scanf_i>
 8006ba4:	e7b4      	b.n	8006b10 <__ssvfiscanf_r+0x210>
 8006ba6:	bf00      	nop
 8006ba8:	08006851 	.word	0x08006851
 8006bac:	080068c7 	.word	0x080068c7
 8006bb0:	0800784f 	.word	0x0800784f
 8006bb4:	08007806 	.word	0x08007806
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <__ssvfiscanf_r+0x2e4>)
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f43f aec5 	beq.w	800694a <__ssvfiscanf_r+0x4a>
 8006bc0:	466b      	mov	r3, sp
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	a941      	add	r1, sp, #260	@ 0x104
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f3af 8000 	nop.w
 8006bcc:	e7a0      	b.n	8006b10 <__ssvfiscanf_r+0x210>
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	065b      	lsls	r3, r3, #25
 8006bd2:	f53f af71 	bmi.w	8006ab8 <__ssvfiscanf_r+0x1b8>
 8006bd6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006be0:	e7f9      	b.n	8006bd6 <__ssvfiscanf_r+0x2d6>
 8006be2:	bf00      	nop
 8006be4:	00000000 	.word	0x00000000

08006be8 <sbrk_aligned>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4e0f      	ldr	r6, [pc, #60]	@ (8006c28 <sbrk_aligned+0x40>)
 8006bec:	460c      	mov	r4, r1
 8006bee:	6831      	ldr	r1, [r6, #0]
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	b911      	cbnz	r1, 8006bfa <sbrk_aligned+0x12>
 8006bf4:	f000 fd2a 	bl	800764c <_sbrk_r>
 8006bf8:	6030      	str	r0, [r6, #0]
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 fd25 	bl	800764c <_sbrk_r>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d103      	bne.n	8006c0e <sbrk_aligned+0x26>
 8006c06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	1cc4      	adds	r4, r0, #3
 8006c10:	f024 0403 	bic.w	r4, r4, #3
 8006c14:	42a0      	cmp	r0, r4
 8006c16:	d0f8      	beq.n	8006c0a <sbrk_aligned+0x22>
 8006c18:	1a21      	subs	r1, r4, r0
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 fd16 	bl	800764c <_sbrk_r>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d1f2      	bne.n	8006c0a <sbrk_aligned+0x22>
 8006c24:	e7ef      	b.n	8006c06 <sbrk_aligned+0x1e>
 8006c26:	bf00      	nop
 8006c28:	20000378 	.word	0x20000378

08006c2c <_malloc_r>:
 8006c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c30:	1ccd      	adds	r5, r1, #3
 8006c32:	f025 0503 	bic.w	r5, r5, #3
 8006c36:	3508      	adds	r5, #8
 8006c38:	2d0c      	cmp	r5, #12
 8006c3a:	bf38      	it	cc
 8006c3c:	250c      	movcc	r5, #12
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	4606      	mov	r6, r0
 8006c42:	db01      	blt.n	8006c48 <_malloc_r+0x1c>
 8006c44:	42a9      	cmp	r1, r5
 8006c46:	d904      	bls.n	8006c52 <_malloc_r+0x26>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d28 <_malloc_r+0xfc>
 8006c56:	f000 fb7f 	bl	8007358 <__malloc_lock>
 8006c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c5e:	461c      	mov	r4, r3
 8006c60:	bb44      	cbnz	r4, 8006cb4 <_malloc_r+0x88>
 8006c62:	4629      	mov	r1, r5
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff ffbf 	bl	8006be8 <sbrk_aligned>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	d158      	bne.n	8006d22 <_malloc_r+0xf6>
 8006c70:	f8d8 4000 	ldr.w	r4, [r8]
 8006c74:	4627      	mov	r7, r4
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	d143      	bne.n	8006d02 <_malloc_r+0xd6>
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	d04b      	beq.n	8006d16 <_malloc_r+0xea>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	4639      	mov	r1, r7
 8006c82:	4630      	mov	r0, r6
 8006c84:	eb04 0903 	add.w	r9, r4, r3
 8006c88:	f000 fce0 	bl	800764c <_sbrk_r>
 8006c8c:	4581      	cmp	r9, r0
 8006c8e:	d142      	bne.n	8006d16 <_malloc_r+0xea>
 8006c90:	6821      	ldr	r1, [r4, #0]
 8006c92:	1a6d      	subs	r5, r5, r1
 8006c94:	4629      	mov	r1, r5
 8006c96:	4630      	mov	r0, r6
 8006c98:	f7ff ffa6 	bl	8006be8 <sbrk_aligned>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d03a      	beq.n	8006d16 <_malloc_r+0xea>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	442b      	add	r3, r5
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	bb62      	cbnz	r2, 8006d08 <_malloc_r+0xdc>
 8006cae:	f8c8 7000 	str.w	r7, [r8]
 8006cb2:	e00f      	b.n	8006cd4 <_malloc_r+0xa8>
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	1b52      	subs	r2, r2, r5
 8006cb8:	d420      	bmi.n	8006cfc <_malloc_r+0xd0>
 8006cba:	2a0b      	cmp	r2, #11
 8006cbc:	d917      	bls.n	8006cee <_malloc_r+0xc2>
 8006cbe:	1961      	adds	r1, r4, r5
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	6025      	str	r5, [r4, #0]
 8006cc4:	bf18      	it	ne
 8006cc6:	6059      	strne	r1, [r3, #4]
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	bf08      	it	eq
 8006ccc:	f8c8 1000 	streq.w	r1, [r8]
 8006cd0:	5162      	str	r2, [r4, r5]
 8006cd2:	604b      	str	r3, [r1, #4]
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 fb45 	bl	8007364 <__malloc_unlock>
 8006cda:	f104 000b 	add.w	r0, r4, #11
 8006cde:	1d23      	adds	r3, r4, #4
 8006ce0:	f020 0007 	bic.w	r0, r0, #7
 8006ce4:	1ac2      	subs	r2, r0, r3
 8006ce6:	bf1c      	itt	ne
 8006ce8:	1a1b      	subne	r3, r3, r0
 8006cea:	50a3      	strne	r3, [r4, r2]
 8006cec:	e7af      	b.n	8006c4e <_malloc_r+0x22>
 8006cee:	6862      	ldr	r2, [r4, #4]
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	bf0c      	ite	eq
 8006cf4:	f8c8 2000 	streq.w	r2, [r8]
 8006cf8:	605a      	strne	r2, [r3, #4]
 8006cfa:	e7eb      	b.n	8006cd4 <_malloc_r+0xa8>
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	6864      	ldr	r4, [r4, #4]
 8006d00:	e7ae      	b.n	8006c60 <_malloc_r+0x34>
 8006d02:	463c      	mov	r4, r7
 8006d04:	687f      	ldr	r7, [r7, #4]
 8006d06:	e7b6      	b.n	8006c76 <_malloc_r+0x4a>
 8006d08:	461a      	mov	r2, r3
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d1fb      	bne.n	8006d08 <_malloc_r+0xdc>
 8006d10:	2300      	movs	r3, #0
 8006d12:	6053      	str	r3, [r2, #4]
 8006d14:	e7de      	b.n	8006cd4 <_malloc_r+0xa8>
 8006d16:	230c      	movs	r3, #12
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f000 fb22 	bl	8007364 <__malloc_unlock>
 8006d20:	e794      	b.n	8006c4c <_malloc_r+0x20>
 8006d22:	6005      	str	r5, [r0, #0]
 8006d24:	e7d6      	b.n	8006cd4 <_malloc_r+0xa8>
 8006d26:	bf00      	nop
 8006d28:	2000037c 	.word	0x2000037c

08006d2c <_printf_common>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4616      	mov	r6, r2
 8006d32:	4698      	mov	r8, r3
 8006d34:	688a      	ldr	r2, [r1, #8]
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bfb8      	it	lt
 8006d40:	4613      	movlt	r3, r2
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d48:	4607      	mov	r7, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b10a      	cbz	r2, 8006d52 <_printf_common+0x26>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	0699      	lsls	r1, r3, #26
 8006d56:	bf42      	ittt	mi
 8006d58:	6833      	ldrmi	r3, [r6, #0]
 8006d5a:	3302      	addmi	r3, #2
 8006d5c:	6033      	strmi	r3, [r6, #0]
 8006d5e:	6825      	ldr	r5, [r4, #0]
 8006d60:	f015 0506 	ands.w	r5, r5, #6
 8006d64:	d106      	bne.n	8006d74 <_printf_common+0x48>
 8006d66:	f104 0a19 	add.w	sl, r4, #25
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	6832      	ldr	r2, [r6, #0]
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc26      	bgt.n	8006dc2 <_printf_common+0x96>
 8006d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	3b00      	subs	r3, #0
 8006d7c:	bf18      	it	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	0692      	lsls	r2, r2, #26
 8006d82:	d42b      	bmi.n	8006ddc <_printf_common+0xb0>
 8006d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d88:	4641      	mov	r1, r8
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c8      	blx	r9
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d01e      	beq.n	8006dd0 <_printf_common+0xa4>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	f003 0306 	and.w	r3, r3, #6
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf02      	ittt	eq
 8006d9e:	68e5      	ldreq	r5, [r4, #12]
 8006da0:	6833      	ldreq	r3, [r6, #0]
 8006da2:	1aed      	subeq	r5, r5, r3
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	bf0c      	ite	eq
 8006da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dac:	2500      	movne	r5, #0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bfc4      	itt	gt
 8006db2:	1a9b      	subgt	r3, r3, r2
 8006db4:	18ed      	addgt	r5, r5, r3
 8006db6:	2600      	movs	r6, #0
 8006db8:	341a      	adds	r4, #26
 8006dba:	42b5      	cmp	r5, r6
 8006dbc:	d11a      	bne.n	8006df4 <_printf_common+0xc8>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e008      	b.n	8006dd4 <_printf_common+0xa8>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4638      	mov	r0, r7
 8006dca:	47c8      	blx	r9
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_printf_common+0xac>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	3501      	adds	r5, #1
 8006dda:	e7c6      	b.n	8006d6a <_printf_common+0x3e>
 8006ddc:	18e1      	adds	r1, r4, r3
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	2030      	movs	r0, #48	@ 0x30
 8006de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006de6:	4422      	add	r2, r4
 8006de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006df0:	3302      	adds	r3, #2
 8006df2:	e7c7      	b.n	8006d84 <_printf_common+0x58>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4641      	mov	r1, r8
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c8      	blx	r9
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa4>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d9      	b.n	8006dba <_printf_common+0x8e>
	...

08006e08 <_printf_i>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	7e0f      	ldrb	r7, [r1, #24]
 8006e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e10:	2f78      	cmp	r7, #120	@ 0x78
 8006e12:	4691      	mov	r9, r2
 8006e14:	4680      	mov	r8, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e1e:	d807      	bhi.n	8006e30 <_printf_i+0x28>
 8006e20:	2f62      	cmp	r7, #98	@ 0x62
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x32>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f000 80d2 	beq.w	8006fce <_printf_i+0x1c6>
 8006e2a:	2f58      	cmp	r7, #88	@ 0x58
 8006e2c:	f000 80b9 	beq.w	8006fa2 <_printf_i+0x19a>
 8006e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e38:	e03a      	b.n	8006eb0 <_printf_i+0xa8>
 8006e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e3e:	2b15      	cmp	r3, #21
 8006e40:	d8f6      	bhi.n	8006e30 <_printf_i+0x28>
 8006e42:	a101      	add	r1, pc, #4	@ (adr r1, 8006e48 <_printf_i+0x40>)
 8006e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006e31 	.word	0x08006e31
 8006e54:	08006e31 	.word	0x08006e31
 8006e58:	08006e31 	.word	0x08006e31
 8006e5c:	08006e31 	.word	0x08006e31
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e31 	.word	0x08006e31
 8006e68:	08006e31 	.word	0x08006e31
 8006e6c:	08006e31 	.word	0x08006e31
 8006e70:	08006e31 	.word	0x08006e31
 8006e74:	08006fb5 	.word	0x08006fb5
 8006e78:	08006edf 	.word	0x08006edf
 8006e7c:	08006f6f 	.word	0x08006f6f
 8006e80:	08006e31 	.word	0x08006e31
 8006e84:	08006e31 	.word	0x08006e31
 8006e88:	08006fd7 	.word	0x08006fd7
 8006e8c:	08006e31 	.word	0x08006e31
 8006e90:	08006edf 	.word	0x08006edf
 8006e94:	08006e31 	.word	0x08006e31
 8006e98:	08006e31 	.word	0x08006e31
 8006e9c:	08006f77 	.word	0x08006f77
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6032      	str	r2, [r6, #0]
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e09d      	b.n	8006ff0 <_printf_i+0x1e8>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1d19      	adds	r1, r3, #4
 8006eba:	6031      	str	r1, [r6, #0]
 8006ebc:	0606      	lsls	r6, r0, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xbc>
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	e003      	b.n	8006ecc <_printf_i+0xc4>
 8006ec4:	0645      	lsls	r5, r0, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xb8>
 8006ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	da03      	bge.n	8006ed8 <_printf_i+0xd0>
 8006ed0:	232d      	movs	r3, #45	@ 0x2d
 8006ed2:	426d      	negs	r5, r5
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	4859      	ldr	r0, [pc, #356]	@ (8007040 <_printf_i+0x238>)
 8006eda:	230a      	movs	r3, #10
 8006edc:	e011      	b.n	8006f02 <_printf_i+0xfa>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	0608      	lsls	r0, r1, #24
 8006ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ee8:	d402      	bmi.n	8006ef0 <_printf_i+0xe8>
 8006eea:	0649      	lsls	r1, r1, #25
 8006eec:	bf48      	it	mi
 8006eee:	b2ad      	uxthmi	r5, r5
 8006ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ef2:	4853      	ldr	r0, [pc, #332]	@ (8007040 <_printf_i+0x238>)
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	bf14      	ite	ne
 8006ef8:	230a      	movne	r3, #10
 8006efa:	2308      	moveq	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f02:	6866      	ldr	r6, [r4, #4]
 8006f04:	60a6      	str	r6, [r4, #8]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	bfa2      	ittt	ge
 8006f0a:	6821      	ldrge	r1, [r4, #0]
 8006f0c:	f021 0104 	bicge.w	r1, r1, #4
 8006f10:	6021      	strge	r1, [r4, #0]
 8006f12:	b90d      	cbnz	r5, 8006f18 <_printf_i+0x110>
 8006f14:	2e00      	cmp	r6, #0
 8006f16:	d04b      	beq.n	8006fb0 <_printf_i+0x1a8>
 8006f18:	4616      	mov	r6, r2
 8006f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f22:	5dc7      	ldrb	r7, [r0, r7]
 8006f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f28:	462f      	mov	r7, r5
 8006f2a:	42bb      	cmp	r3, r7
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	d9f4      	bls.n	8006f1a <_printf_i+0x112>
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d10b      	bne.n	8006f4c <_printf_i+0x144>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	07df      	lsls	r7, r3, #31
 8006f38:	d508      	bpl.n	8006f4c <_printf_i+0x144>
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6861      	ldr	r1, [r4, #4]
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	bfde      	ittt	le
 8006f42:	2330      	movle	r3, #48	@ 0x30
 8006f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f4c:	1b92      	subs	r2, r2, r6
 8006f4e:	6122      	str	r2, [r4, #16]
 8006f50:	f8cd a000 	str.w	sl, [sp]
 8006f54:	464b      	mov	r3, r9
 8006f56:	aa03      	add	r2, sp, #12
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f7ff fee6 	bl	8006d2c <_printf_common>
 8006f60:	3001      	adds	r0, #1
 8006f62:	d14a      	bne.n	8006ffa <_printf_i+0x1f2>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f68:	b004      	add	sp, #16
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f043 0320 	orr.w	r3, r3, #32
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	4833      	ldr	r0, [pc, #204]	@ (8007044 <_printf_i+0x23c>)
 8006f78:	2778      	movs	r7, #120	@ 0x78
 8006f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	6831      	ldr	r1, [r6, #0]
 8006f82:	061f      	lsls	r7, r3, #24
 8006f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f88:	d402      	bmi.n	8006f90 <_printf_i+0x188>
 8006f8a:	065f      	lsls	r7, r3, #25
 8006f8c:	bf48      	it	mi
 8006f8e:	b2ad      	uxthmi	r5, r5
 8006f90:	6031      	str	r1, [r6, #0]
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	bf44      	itt	mi
 8006f96:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9a:	6023      	strmi	r3, [r4, #0]
 8006f9c:	b11d      	cbz	r5, 8006fa6 <_printf_i+0x19e>
 8006f9e:	2310      	movs	r3, #16
 8006fa0:	e7ac      	b.n	8006efc <_printf_i+0xf4>
 8006fa2:	4827      	ldr	r0, [pc, #156]	@ (8007040 <_printf_i+0x238>)
 8006fa4:	e7e9      	b.n	8006f7a <_printf_i+0x172>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f023 0320 	bic.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	e7f6      	b.n	8006f9e <_printf_i+0x196>
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	e7bd      	b.n	8006f30 <_printf_i+0x128>
 8006fb4:	6833      	ldr	r3, [r6, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	6961      	ldr	r1, [r4, #20]
 8006fba:	1d18      	adds	r0, r3, #4
 8006fbc:	6030      	str	r0, [r6, #0]
 8006fbe:	062e      	lsls	r6, r5, #24
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0x1c0>
 8006fc4:	6019      	str	r1, [r3, #0]
 8006fc6:	e002      	b.n	8006fce <_printf_i+0x1c6>
 8006fc8:	0668      	lsls	r0, r5, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0x1bc>
 8006fcc:	8019      	strh	r1, [r3, #0]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	4616      	mov	r6, r2
 8006fd4:	e7bc      	b.n	8006f50 <_printf_i+0x148>
 8006fd6:	6833      	ldr	r3, [r6, #0]
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	6032      	str	r2, [r6, #0]
 8006fdc:	681e      	ldr	r6, [r3, #0]
 8006fde:	6862      	ldr	r2, [r4, #4]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7f9 f90c 	bl	8000200 <memchr>
 8006fe8:	b108      	cbz	r0, 8006fee <_printf_i+0x1e6>
 8006fea:	1b80      	subs	r0, r0, r6
 8006fec:	6060      	str	r0, [r4, #4]
 8006fee:	6863      	ldr	r3, [r4, #4]
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff8:	e7aa      	b.n	8006f50 <_printf_i+0x148>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4649      	mov	r1, r9
 8007000:	4640      	mov	r0, r8
 8007002:	47d0      	blx	sl
 8007004:	3001      	adds	r0, #1
 8007006:	d0ad      	beq.n	8006f64 <_printf_i+0x15c>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	079b      	lsls	r3, r3, #30
 800700c:	d413      	bmi.n	8007036 <_printf_i+0x22e>
 800700e:	68e0      	ldr	r0, [r4, #12]
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	4298      	cmp	r0, r3
 8007014:	bfb8      	it	lt
 8007016:	4618      	movlt	r0, r3
 8007018:	e7a6      	b.n	8006f68 <_printf_i+0x160>
 800701a:	2301      	movs	r3, #1
 800701c:	4632      	mov	r2, r6
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d09d      	beq.n	8006f64 <_printf_i+0x15c>
 8007028:	3501      	adds	r5, #1
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	1a5b      	subs	r3, r3, r1
 8007030:	42ab      	cmp	r3, r5
 8007032:	dcf2      	bgt.n	800701a <_printf_i+0x212>
 8007034:	e7eb      	b.n	800700e <_printf_i+0x206>
 8007036:	2500      	movs	r5, #0
 8007038:	f104 0619 	add.w	r6, r4, #25
 800703c:	e7f5      	b.n	800702a <_printf_i+0x222>
 800703e:	bf00      	nop
 8007040:	08007811 	.word	0x08007811
 8007044:	08007822 	.word	0x08007822

08007048 <_scanf_chars>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4615      	mov	r5, r2
 800704e:	688a      	ldr	r2, [r1, #8]
 8007050:	4680      	mov	r8, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b932      	cbnz	r2, 8007064 <_scanf_chars+0x1c>
 8007056:	698a      	ldr	r2, [r1, #24]
 8007058:	2a00      	cmp	r2, #0
 800705a:	bf14      	ite	ne
 800705c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8007060:	2201      	moveq	r2, #1
 8007062:	608a      	str	r2, [r1, #8]
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80070f8 <_scanf_chars+0xb0>
 800706a:	06d1      	lsls	r1, r2, #27
 800706c:	bf5f      	itttt	pl
 800706e:	681a      	ldrpl	r2, [r3, #0]
 8007070:	1d11      	addpl	r1, r2, #4
 8007072:	6019      	strpl	r1, [r3, #0]
 8007074:	6816      	ldrpl	r6, [r2, #0]
 8007076:	2700      	movs	r7, #0
 8007078:	69a0      	ldr	r0, [r4, #24]
 800707a:	b188      	cbz	r0, 80070a0 <_scanf_chars+0x58>
 800707c:	2801      	cmp	r0, #1
 800707e:	d107      	bne.n	8007090 <_scanf_chars+0x48>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	6963      	ldr	r3, [r4, #20]
 8007086:	5c9b      	ldrb	r3, [r3, r2]
 8007088:	b953      	cbnz	r3, 80070a0 <_scanf_chars+0x58>
 800708a:	2f00      	cmp	r7, #0
 800708c:	d031      	beq.n	80070f2 <_scanf_chars+0xaa>
 800708e:	e022      	b.n	80070d6 <_scanf_chars+0x8e>
 8007090:	2802      	cmp	r0, #2
 8007092:	d120      	bne.n	80070d6 <_scanf_chars+0x8e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f819 3003 	ldrb.w	r3, [r9, r3]
 800709c:	071b      	lsls	r3, r3, #28
 800709e:	d41a      	bmi.n	80070d6 <_scanf_chars+0x8e>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	06da      	lsls	r2, r3, #27
 80070a4:	bf5e      	ittt	pl
 80070a6:	682b      	ldrpl	r3, [r5, #0]
 80070a8:	781b      	ldrbpl	r3, [r3, #0]
 80070aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80070ae:	682a      	ldr	r2, [r5, #0]
 80070b0:	686b      	ldr	r3, [r5, #4]
 80070b2:	3201      	adds	r2, #1
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	68a2      	ldr	r2, [r4, #8]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	3a01      	subs	r2, #1
 80070bc:	606b      	str	r3, [r5, #4]
 80070be:	3701      	adds	r7, #1
 80070c0:	60a2      	str	r2, [r4, #8]
 80070c2:	b142      	cbz	r2, 80070d6 <_scanf_chars+0x8e>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dcd7      	bgt.n	8007078 <_scanf_chars+0x30>
 80070c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80070cc:	4629      	mov	r1, r5
 80070ce:	4640      	mov	r0, r8
 80070d0:	4798      	blx	r3
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0d0      	beq.n	8007078 <_scanf_chars+0x30>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	f013 0310 	ands.w	r3, r3, #16
 80070dc:	d105      	bne.n	80070ea <_scanf_chars+0xa2>
 80070de:	68e2      	ldr	r2, [r4, #12]
 80070e0:	3201      	adds	r2, #1
 80070e2:	60e2      	str	r2, [r4, #12]
 80070e4:	69a2      	ldr	r2, [r4, #24]
 80070e6:	b102      	cbz	r2, 80070ea <_scanf_chars+0xa2>
 80070e8:	7033      	strb	r3, [r6, #0]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	443b      	add	r3, r7
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	2000      	movs	r0, #0
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	bf00      	nop
 80070f8:	0800784f 	.word	0x0800784f

080070fc <_scanf_i>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4698      	mov	r8, r3
 8007102:	4b74      	ldr	r3, [pc, #464]	@ (80072d4 <_scanf_i+0x1d8>)
 8007104:	460c      	mov	r4, r1
 8007106:	4682      	mov	sl, r0
 8007108:	4616      	mov	r6, r2
 800710a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800710e:	b087      	sub	sp, #28
 8007110:	ab03      	add	r3, sp, #12
 8007112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007116:	4b70      	ldr	r3, [pc, #448]	@ (80072d8 <_scanf_i+0x1dc>)
 8007118:	69a1      	ldr	r1, [r4, #24]
 800711a:	4a70      	ldr	r2, [pc, #448]	@ (80072dc <_scanf_i+0x1e0>)
 800711c:	2903      	cmp	r1, #3
 800711e:	bf08      	it	eq
 8007120:	461a      	moveq	r2, r3
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	9201      	str	r2, [sp, #4]
 8007126:	1e5a      	subs	r2, r3, #1
 8007128:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800712c:	bf88      	it	hi
 800712e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007132:	4627      	mov	r7, r4
 8007134:	bf82      	ittt	hi
 8007136:	eb03 0905 	addhi.w	r9, r3, r5
 800713a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800713e:	60a3      	strhi	r3, [r4, #8]
 8007140:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007144:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007148:	bf98      	it	ls
 800714a:	f04f 0900 	movls.w	r9, #0
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	463d      	mov	r5, r7
 8007152:	f04f 0b00 	mov.w	fp, #0
 8007156:	6831      	ldr	r1, [r6, #0]
 8007158:	ab03      	add	r3, sp, #12
 800715a:	7809      	ldrb	r1, [r1, #0]
 800715c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007160:	2202      	movs	r2, #2
 8007162:	f7f9 f84d 	bl	8000200 <memchr>
 8007166:	b328      	cbz	r0, 80071b4 <_scanf_i+0xb8>
 8007168:	f1bb 0f01 	cmp.w	fp, #1
 800716c:	d159      	bne.n	8007222 <_scanf_i+0x126>
 800716e:	6862      	ldr	r2, [r4, #4]
 8007170:	b92a      	cbnz	r2, 800717e <_scanf_i+0x82>
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	2108      	movs	r1, #8
 8007176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800717a:	6061      	str	r1, [r4, #4]
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	68a2      	ldr	r2, [r4, #8]
 8007188:	1e51      	subs	r1, r2, #1
 800718a:	60a1      	str	r1, [r4, #8]
 800718c:	b192      	cbz	r2, 80071b4 <_scanf_i+0xb8>
 800718e:	6832      	ldr	r2, [r6, #0]
 8007190:	1c51      	adds	r1, r2, #1
 8007192:	6031      	str	r1, [r6, #0]
 8007194:	7812      	ldrb	r2, [r2, #0]
 8007196:	f805 2b01 	strb.w	r2, [r5], #1
 800719a:	6872      	ldr	r2, [r6, #4]
 800719c:	3a01      	subs	r2, #1
 800719e:	2a00      	cmp	r2, #0
 80071a0:	6072      	str	r2, [r6, #4]
 80071a2:	dc07      	bgt.n	80071b4 <_scanf_i+0xb8>
 80071a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80071a8:	4631      	mov	r1, r6
 80071aa:	4650      	mov	r0, sl
 80071ac:	4790      	blx	r2
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f040 8085 	bne.w	80072be <_scanf_i+0x1c2>
 80071b4:	f10b 0b01 	add.w	fp, fp, #1
 80071b8:	f1bb 0f03 	cmp.w	fp, #3
 80071bc:	d1cb      	bne.n	8007156 <_scanf_i+0x5a>
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	b90b      	cbnz	r3, 80071c6 <_scanf_i+0xca>
 80071c2:	230a      	movs	r3, #10
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	6863      	ldr	r3, [r4, #4]
 80071c8:	4945      	ldr	r1, [pc, #276]	@ (80072e0 <_scanf_i+0x1e4>)
 80071ca:	6960      	ldr	r0, [r4, #20]
 80071cc:	1ac9      	subs	r1, r1, r3
 80071ce:	f000 f889 	bl	80072e4 <__sccl>
 80071d2:	f04f 0b00 	mov.w	fp, #0
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d03d      	beq.n	800725a <_scanf_i+0x15e>
 80071de:	6831      	ldr	r1, [r6, #0]
 80071e0:	6960      	ldr	r0, [r4, #20]
 80071e2:	f891 c000 	ldrb.w	ip, [r1]
 80071e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d035      	beq.n	800725a <_scanf_i+0x15e>
 80071ee:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80071f2:	d124      	bne.n	800723e <_scanf_i+0x142>
 80071f4:	0510      	lsls	r0, r2, #20
 80071f6:	d522      	bpl.n	800723e <_scanf_i+0x142>
 80071f8:	f10b 0b01 	add.w	fp, fp, #1
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	d003      	beq.n	800720a <_scanf_i+0x10e>
 8007202:	3301      	adds	r3, #1
 8007204:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8007208:	60a3      	str	r3, [r4, #8]
 800720a:	6873      	ldr	r3, [r6, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	6073      	str	r3, [r6, #4]
 8007212:	dd1b      	ble.n	800724c <_scanf_i+0x150>
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	3b01      	subs	r3, #1
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	e7d9      	b.n	80071d6 <_scanf_i+0xda>
 8007222:	f1bb 0f02 	cmp.w	fp, #2
 8007226:	d1ae      	bne.n	8007186 <_scanf_i+0x8a>
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800722e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007232:	d1bf      	bne.n	80071b4 <_scanf_i+0xb8>
 8007234:	2110      	movs	r1, #16
 8007236:	6061      	str	r1, [r4, #4]
 8007238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800723c:	e7a2      	b.n	8007184 <_scanf_i+0x88>
 800723e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	780b      	ldrb	r3, [r1, #0]
 8007246:	f805 3b01 	strb.w	r3, [r5], #1
 800724a:	e7de      	b.n	800720a <_scanf_i+0x10e>
 800724c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007250:	4631      	mov	r1, r6
 8007252:	4650      	mov	r0, sl
 8007254:	4798      	blx	r3
 8007256:	2800      	cmp	r0, #0
 8007258:	d0df      	beq.n	800721a <_scanf_i+0x11e>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	05d9      	lsls	r1, r3, #23
 800725e:	d50d      	bpl.n	800727c <_scanf_i+0x180>
 8007260:	42bd      	cmp	r5, r7
 8007262:	d909      	bls.n	8007278 <_scanf_i+0x17c>
 8007264:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007268:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800726c:	4632      	mov	r2, r6
 800726e:	4650      	mov	r0, sl
 8007270:	4798      	blx	r3
 8007272:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8007276:	464d      	mov	r5, r9
 8007278:	42bd      	cmp	r5, r7
 800727a:	d028      	beq.n	80072ce <_scanf_i+0x1d2>
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	f012 0210 	ands.w	r2, r2, #16
 8007282:	d113      	bne.n	80072ac <_scanf_i+0x1b0>
 8007284:	702a      	strb	r2, [r5, #0]
 8007286:	6863      	ldr	r3, [r4, #4]
 8007288:	9e01      	ldr	r6, [sp, #4]
 800728a:	4639      	mov	r1, r7
 800728c:	4650      	mov	r0, sl
 800728e:	47b0      	blx	r6
 8007290:	f8d8 3000 	ldr.w	r3, [r8]
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	1d1a      	adds	r2, r3, #4
 8007298:	f8c8 2000 	str.w	r2, [r8]
 800729c:	f011 0f20 	tst.w	r1, #32
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	d00f      	beq.n	80072c4 <_scanf_i+0x1c8>
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60e3      	str	r3, [r4, #12]
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	1bed      	subs	r5, r5, r7
 80072b0:	445d      	add	r5, fp
 80072b2:	442b      	add	r3, r5
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	2000      	movs	r0, #0
 80072b8:	b007      	add	sp, #28
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	f04f 0b00 	mov.w	fp, #0
 80072c2:	e7ca      	b.n	800725a <_scanf_i+0x15e>
 80072c4:	07ca      	lsls	r2, r1, #31
 80072c6:	bf4c      	ite	mi
 80072c8:	8018      	strhmi	r0, [r3, #0]
 80072ca:	6018      	strpl	r0, [r3, #0]
 80072cc:	e7eb      	b.n	80072a6 <_scanf_i+0x1aa>
 80072ce:	2001      	movs	r0, #1
 80072d0:	e7f2      	b.n	80072b8 <_scanf_i+0x1bc>
 80072d2:	bf00      	nop
 80072d4:	080077ac 	.word	0x080077ac
 80072d8:	08007535 	.word	0x08007535
 80072dc:	08007615 	.word	0x08007615
 80072e0:	08007843 	.word	0x08007843

080072e4 <__sccl>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	780b      	ldrb	r3, [r1, #0]
 80072e8:	4604      	mov	r4, r0
 80072ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80072ec:	bf0b      	itete	eq
 80072ee:	784b      	ldrbeq	r3, [r1, #1]
 80072f0:	1c4a      	addne	r2, r1, #1
 80072f2:	1c8a      	addeq	r2, r1, #2
 80072f4:	2100      	movne	r1, #0
 80072f6:	bf08      	it	eq
 80072f8:	2101      	moveq	r1, #1
 80072fa:	3801      	subs	r0, #1
 80072fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007300:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007304:	42a8      	cmp	r0, r5
 8007306:	d1fb      	bne.n	8007300 <__sccl+0x1c>
 8007308:	b90b      	cbnz	r3, 800730e <__sccl+0x2a>
 800730a:	1e50      	subs	r0, r2, #1
 800730c:	bd70      	pop	{r4, r5, r6, pc}
 800730e:	f081 0101 	eor.w	r1, r1, #1
 8007312:	54e1      	strb	r1, [r4, r3]
 8007314:	4610      	mov	r0, r2
 8007316:	4602      	mov	r2, r0
 8007318:	f812 5b01 	ldrb.w	r5, [r2], #1
 800731c:	2d2d      	cmp	r5, #45	@ 0x2d
 800731e:	d005      	beq.n	800732c <__sccl+0x48>
 8007320:	2d5d      	cmp	r5, #93	@ 0x5d
 8007322:	d016      	beq.n	8007352 <__sccl+0x6e>
 8007324:	2d00      	cmp	r5, #0
 8007326:	d0f1      	beq.n	800730c <__sccl+0x28>
 8007328:	462b      	mov	r3, r5
 800732a:	e7f2      	b.n	8007312 <__sccl+0x2e>
 800732c:	7846      	ldrb	r6, [r0, #1]
 800732e:	2e5d      	cmp	r6, #93	@ 0x5d
 8007330:	d0fa      	beq.n	8007328 <__sccl+0x44>
 8007332:	42b3      	cmp	r3, r6
 8007334:	dcf8      	bgt.n	8007328 <__sccl+0x44>
 8007336:	3002      	adds	r0, #2
 8007338:	461a      	mov	r2, r3
 800733a:	3201      	adds	r2, #1
 800733c:	4296      	cmp	r6, r2
 800733e:	54a1      	strb	r1, [r4, r2]
 8007340:	dcfb      	bgt.n	800733a <__sccl+0x56>
 8007342:	1af2      	subs	r2, r6, r3
 8007344:	3a01      	subs	r2, #1
 8007346:	1c5d      	adds	r5, r3, #1
 8007348:	42b3      	cmp	r3, r6
 800734a:	bfa8      	it	ge
 800734c:	2200      	movge	r2, #0
 800734e:	18ab      	adds	r3, r5, r2
 8007350:	e7e1      	b.n	8007316 <__sccl+0x32>
 8007352:	4610      	mov	r0, r2
 8007354:	e7da      	b.n	800730c <__sccl+0x28>
	...

08007358 <__malloc_lock>:
 8007358:	4801      	ldr	r0, [pc, #4]	@ (8007360 <__malloc_lock+0x8>)
 800735a:	f7ff b8d5 	b.w	8006508 <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	20000374 	.word	0x20000374

08007364 <__malloc_unlock>:
 8007364:	4801      	ldr	r0, [pc, #4]	@ (800736c <__malloc_unlock+0x8>)
 8007366:	f7ff b8d0 	b.w	800650a <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	20000374 	.word	0x20000374

08007370 <__submore>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	460c      	mov	r4, r1
 8007376:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800737c:	4299      	cmp	r1, r3
 800737e:	d11d      	bne.n	80073bc <__submore+0x4c>
 8007380:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007384:	f7ff fc52 	bl	8006c2c <_malloc_r>
 8007388:	b918      	cbnz	r0, 8007392 <__submore+0x22>
 800738a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007396:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007398:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800739c:	6360      	str	r0, [r4, #52]	@ 0x34
 800739e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80073a2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80073a6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80073aa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80073ae:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80073b2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7e8      	b.n	800738e <__submore+0x1e>
 80073bc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80073be:	0077      	lsls	r7, r6, #1
 80073c0:	463a      	mov	r2, r7
 80073c2:	f000 f80f 	bl	80073e4 <_realloc_r>
 80073c6:	4605      	mov	r5, r0
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0de      	beq.n	800738a <__submore+0x1a>
 80073cc:	eb00 0806 	add.w	r8, r0, r6
 80073d0:	4601      	mov	r1, r0
 80073d2:	4632      	mov	r2, r6
 80073d4:	4640      	mov	r0, r8
 80073d6:	f000 f949 	bl	800766c <memcpy>
 80073da:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80073de:	f8c4 8000 	str.w	r8, [r4]
 80073e2:	e7e9      	b.n	80073b8 <__submore+0x48>

080073e4 <_realloc_r>:
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	4680      	mov	r8, r0
 80073ea:	4615      	mov	r5, r2
 80073ec:	460c      	mov	r4, r1
 80073ee:	b921      	cbnz	r1, 80073fa <_realloc_r+0x16>
 80073f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f4:	4611      	mov	r1, r2
 80073f6:	f7ff bc19 	b.w	8006c2c <_malloc_r>
 80073fa:	b92a      	cbnz	r2, 8007408 <_realloc_r+0x24>
 80073fc:	f7ff f886 	bl	800650c <_free_r>
 8007400:	2400      	movs	r4, #0
 8007402:	4620      	mov	r0, r4
 8007404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007408:	f000 f93e 	bl	8007688 <_malloc_usable_size_r>
 800740c:	4285      	cmp	r5, r0
 800740e:	4606      	mov	r6, r0
 8007410:	d802      	bhi.n	8007418 <_realloc_r+0x34>
 8007412:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007416:	d8f4      	bhi.n	8007402 <_realloc_r+0x1e>
 8007418:	4629      	mov	r1, r5
 800741a:	4640      	mov	r0, r8
 800741c:	f7ff fc06 	bl	8006c2c <_malloc_r>
 8007420:	4607      	mov	r7, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	d0ec      	beq.n	8007400 <_realloc_r+0x1c>
 8007426:	42b5      	cmp	r5, r6
 8007428:	462a      	mov	r2, r5
 800742a:	4621      	mov	r1, r4
 800742c:	bf28      	it	cs
 800742e:	4632      	movcs	r2, r6
 8007430:	f000 f91c 	bl	800766c <memcpy>
 8007434:	4621      	mov	r1, r4
 8007436:	4640      	mov	r0, r8
 8007438:	f7ff f868 	bl	800650c <_free_r>
 800743c:	463c      	mov	r4, r7
 800743e:	e7e0      	b.n	8007402 <_realloc_r+0x1e>

08007440 <_strtol_l.constprop.0>:
 8007440:	2b24      	cmp	r3, #36	@ 0x24
 8007442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007446:	4686      	mov	lr, r0
 8007448:	4690      	mov	r8, r2
 800744a:	d801      	bhi.n	8007450 <_strtol_l.constprop.0+0x10>
 800744c:	2b01      	cmp	r3, #1
 800744e:	d106      	bne.n	800745e <_strtol_l.constprop.0+0x1e>
 8007450:	f7ff f830 	bl	80064b4 <__errno>
 8007454:	2316      	movs	r3, #22
 8007456:	6003      	str	r3, [r0, #0]
 8007458:	2000      	movs	r0, #0
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	4834      	ldr	r0, [pc, #208]	@ (8007530 <_strtol_l.constprop.0+0xf0>)
 8007460:	460d      	mov	r5, r1
 8007462:	462a      	mov	r2, r5
 8007464:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007468:	5d06      	ldrb	r6, [r0, r4]
 800746a:	f016 0608 	ands.w	r6, r6, #8
 800746e:	d1f8      	bne.n	8007462 <_strtol_l.constprop.0+0x22>
 8007470:	2c2d      	cmp	r4, #45	@ 0x2d
 8007472:	d12d      	bne.n	80074d0 <_strtol_l.constprop.0+0x90>
 8007474:	782c      	ldrb	r4, [r5, #0]
 8007476:	2601      	movs	r6, #1
 8007478:	1c95      	adds	r5, r2, #2
 800747a:	f033 0210 	bics.w	r2, r3, #16
 800747e:	d109      	bne.n	8007494 <_strtol_l.constprop.0+0x54>
 8007480:	2c30      	cmp	r4, #48	@ 0x30
 8007482:	d12a      	bne.n	80074da <_strtol_l.constprop.0+0x9a>
 8007484:	782a      	ldrb	r2, [r5, #0]
 8007486:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800748a:	2a58      	cmp	r2, #88	@ 0x58
 800748c:	d125      	bne.n	80074da <_strtol_l.constprop.0+0x9a>
 800748e:	786c      	ldrb	r4, [r5, #1]
 8007490:	2310      	movs	r3, #16
 8007492:	3502      	adds	r5, #2
 8007494:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007498:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800749c:	2200      	movs	r2, #0
 800749e:	fbbc f9f3 	udiv	r9, ip, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80074a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074ac:	2f09      	cmp	r7, #9
 80074ae:	d81b      	bhi.n	80074e8 <_strtol_l.constprop.0+0xa8>
 80074b0:	463c      	mov	r4, r7
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	dd27      	ble.n	8007506 <_strtol_l.constprop.0+0xc6>
 80074b6:	1c57      	adds	r7, r2, #1
 80074b8:	d007      	beq.n	80074ca <_strtol_l.constprop.0+0x8a>
 80074ba:	4581      	cmp	r9, r0
 80074bc:	d320      	bcc.n	8007500 <_strtol_l.constprop.0+0xc0>
 80074be:	d101      	bne.n	80074c4 <_strtol_l.constprop.0+0x84>
 80074c0:	45a2      	cmp	sl, r4
 80074c2:	db1d      	blt.n	8007500 <_strtol_l.constprop.0+0xc0>
 80074c4:	fb00 4003 	mla	r0, r0, r3, r4
 80074c8:	2201      	movs	r2, #1
 80074ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ce:	e7eb      	b.n	80074a8 <_strtol_l.constprop.0+0x68>
 80074d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80074d2:	bf04      	itt	eq
 80074d4:	782c      	ldrbeq	r4, [r5, #0]
 80074d6:	1c95      	addeq	r5, r2, #2
 80074d8:	e7cf      	b.n	800747a <_strtol_l.constprop.0+0x3a>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1da      	bne.n	8007494 <_strtol_l.constprop.0+0x54>
 80074de:	2c30      	cmp	r4, #48	@ 0x30
 80074e0:	bf0c      	ite	eq
 80074e2:	2308      	moveq	r3, #8
 80074e4:	230a      	movne	r3, #10
 80074e6:	e7d5      	b.n	8007494 <_strtol_l.constprop.0+0x54>
 80074e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80074ec:	2f19      	cmp	r7, #25
 80074ee:	d801      	bhi.n	80074f4 <_strtol_l.constprop.0+0xb4>
 80074f0:	3c37      	subs	r4, #55	@ 0x37
 80074f2:	e7de      	b.n	80074b2 <_strtol_l.constprop.0+0x72>
 80074f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80074f8:	2f19      	cmp	r7, #25
 80074fa:	d804      	bhi.n	8007506 <_strtol_l.constprop.0+0xc6>
 80074fc:	3c57      	subs	r4, #87	@ 0x57
 80074fe:	e7d8      	b.n	80074b2 <_strtol_l.constprop.0+0x72>
 8007500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007504:	e7e1      	b.n	80074ca <_strtol_l.constprop.0+0x8a>
 8007506:	1c53      	adds	r3, r2, #1
 8007508:	d108      	bne.n	800751c <_strtol_l.constprop.0+0xdc>
 800750a:	2322      	movs	r3, #34	@ 0x22
 800750c:	f8ce 3000 	str.w	r3, [lr]
 8007510:	4660      	mov	r0, ip
 8007512:	f1b8 0f00 	cmp.w	r8, #0
 8007516:	d0a0      	beq.n	800745a <_strtol_l.constprop.0+0x1a>
 8007518:	1e69      	subs	r1, r5, #1
 800751a:	e006      	b.n	800752a <_strtol_l.constprop.0+0xea>
 800751c:	b106      	cbz	r6, 8007520 <_strtol_l.constprop.0+0xe0>
 800751e:	4240      	negs	r0, r0
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	d099      	beq.n	800745a <_strtol_l.constprop.0+0x1a>
 8007526:	2a00      	cmp	r2, #0
 8007528:	d1f6      	bne.n	8007518 <_strtol_l.constprop.0+0xd8>
 800752a:	f8c8 1000 	str.w	r1, [r8]
 800752e:	e794      	b.n	800745a <_strtol_l.constprop.0+0x1a>
 8007530:	0800784f 	.word	0x0800784f

08007534 <_strtol_r>:
 8007534:	f7ff bf84 	b.w	8007440 <_strtol_l.constprop.0>

08007538 <_strtoul_l.constprop.0>:
 8007538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800753c:	4e34      	ldr	r6, [pc, #208]	@ (8007610 <_strtoul_l.constprop.0+0xd8>)
 800753e:	4686      	mov	lr, r0
 8007540:	460d      	mov	r5, r1
 8007542:	4628      	mov	r0, r5
 8007544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007548:	5d37      	ldrb	r7, [r6, r4]
 800754a:	f017 0708 	ands.w	r7, r7, #8
 800754e:	d1f8      	bne.n	8007542 <_strtoul_l.constprop.0+0xa>
 8007550:	2c2d      	cmp	r4, #45	@ 0x2d
 8007552:	d12f      	bne.n	80075b4 <_strtoul_l.constprop.0+0x7c>
 8007554:	782c      	ldrb	r4, [r5, #0]
 8007556:	2701      	movs	r7, #1
 8007558:	1c85      	adds	r5, r0, #2
 800755a:	f033 0010 	bics.w	r0, r3, #16
 800755e:	d109      	bne.n	8007574 <_strtoul_l.constprop.0+0x3c>
 8007560:	2c30      	cmp	r4, #48	@ 0x30
 8007562:	d12c      	bne.n	80075be <_strtoul_l.constprop.0+0x86>
 8007564:	7828      	ldrb	r0, [r5, #0]
 8007566:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800756a:	2858      	cmp	r0, #88	@ 0x58
 800756c:	d127      	bne.n	80075be <_strtoul_l.constprop.0+0x86>
 800756e:	786c      	ldrb	r4, [r5, #1]
 8007570:	2310      	movs	r3, #16
 8007572:	3502      	adds	r5, #2
 8007574:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007578:	2600      	movs	r6, #0
 800757a:	fbb8 f8f3 	udiv	r8, r8, r3
 800757e:	fb03 f908 	mul.w	r9, r3, r8
 8007582:	ea6f 0909 	mvn.w	r9, r9
 8007586:	4630      	mov	r0, r6
 8007588:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800758c:	f1bc 0f09 	cmp.w	ip, #9
 8007590:	d81c      	bhi.n	80075cc <_strtoul_l.constprop.0+0x94>
 8007592:	4664      	mov	r4, ip
 8007594:	42a3      	cmp	r3, r4
 8007596:	dd2a      	ble.n	80075ee <_strtoul_l.constprop.0+0xb6>
 8007598:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800759c:	d007      	beq.n	80075ae <_strtoul_l.constprop.0+0x76>
 800759e:	4580      	cmp	r8, r0
 80075a0:	d322      	bcc.n	80075e8 <_strtoul_l.constprop.0+0xb0>
 80075a2:	d101      	bne.n	80075a8 <_strtoul_l.constprop.0+0x70>
 80075a4:	45a1      	cmp	r9, r4
 80075a6:	db1f      	blt.n	80075e8 <_strtoul_l.constprop.0+0xb0>
 80075a8:	fb00 4003 	mla	r0, r0, r3, r4
 80075ac:	2601      	movs	r6, #1
 80075ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b2:	e7e9      	b.n	8007588 <_strtoul_l.constprop.0+0x50>
 80075b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80075b6:	bf04      	itt	eq
 80075b8:	782c      	ldrbeq	r4, [r5, #0]
 80075ba:	1c85      	addeq	r5, r0, #2
 80075bc:	e7cd      	b.n	800755a <_strtoul_l.constprop.0+0x22>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1d8      	bne.n	8007574 <_strtoul_l.constprop.0+0x3c>
 80075c2:	2c30      	cmp	r4, #48	@ 0x30
 80075c4:	bf0c      	ite	eq
 80075c6:	2308      	moveq	r3, #8
 80075c8:	230a      	movne	r3, #10
 80075ca:	e7d3      	b.n	8007574 <_strtoul_l.constprop.0+0x3c>
 80075cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80075d0:	f1bc 0f19 	cmp.w	ip, #25
 80075d4:	d801      	bhi.n	80075da <_strtoul_l.constprop.0+0xa2>
 80075d6:	3c37      	subs	r4, #55	@ 0x37
 80075d8:	e7dc      	b.n	8007594 <_strtoul_l.constprop.0+0x5c>
 80075da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80075de:	f1bc 0f19 	cmp.w	ip, #25
 80075e2:	d804      	bhi.n	80075ee <_strtoul_l.constprop.0+0xb6>
 80075e4:	3c57      	subs	r4, #87	@ 0x57
 80075e6:	e7d5      	b.n	8007594 <_strtoul_l.constprop.0+0x5c>
 80075e8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80075ec:	e7df      	b.n	80075ae <_strtoul_l.constprop.0+0x76>
 80075ee:	1c73      	adds	r3, r6, #1
 80075f0:	d106      	bne.n	8007600 <_strtoul_l.constprop.0+0xc8>
 80075f2:	2322      	movs	r3, #34	@ 0x22
 80075f4:	f8ce 3000 	str.w	r3, [lr]
 80075f8:	4630      	mov	r0, r6
 80075fa:	b932      	cbnz	r2, 800760a <_strtoul_l.constprop.0+0xd2>
 80075fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007600:	b107      	cbz	r7, 8007604 <_strtoul_l.constprop.0+0xcc>
 8007602:	4240      	negs	r0, r0
 8007604:	2a00      	cmp	r2, #0
 8007606:	d0f9      	beq.n	80075fc <_strtoul_l.constprop.0+0xc4>
 8007608:	b106      	cbz	r6, 800760c <_strtoul_l.constprop.0+0xd4>
 800760a:	1e69      	subs	r1, r5, #1
 800760c:	6011      	str	r1, [r2, #0]
 800760e:	e7f5      	b.n	80075fc <_strtoul_l.constprop.0+0xc4>
 8007610:	0800784f 	.word	0x0800784f

08007614 <_strtoul_r>:
 8007614:	f7ff bf90 	b.w	8007538 <_strtoul_l.constprop.0>

08007618 <memmove>:
 8007618:	4288      	cmp	r0, r1
 800761a:	b510      	push	{r4, lr}
 800761c:	eb01 0402 	add.w	r4, r1, r2
 8007620:	d902      	bls.n	8007628 <memmove+0x10>
 8007622:	4284      	cmp	r4, r0
 8007624:	4623      	mov	r3, r4
 8007626:	d807      	bhi.n	8007638 <memmove+0x20>
 8007628:	1e43      	subs	r3, r0, #1
 800762a:	42a1      	cmp	r1, r4
 800762c:	d008      	beq.n	8007640 <memmove+0x28>
 800762e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007636:	e7f8      	b.n	800762a <memmove+0x12>
 8007638:	4402      	add	r2, r0
 800763a:	4601      	mov	r1, r0
 800763c:	428a      	cmp	r2, r1
 800763e:	d100      	bne.n	8007642 <memmove+0x2a>
 8007640:	bd10      	pop	{r4, pc}
 8007642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800764a:	e7f7      	b.n	800763c <memmove+0x24>

0800764c <_sbrk_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d06      	ldr	r5, [pc, #24]	@ (8007668 <_sbrk_r+0x1c>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	f7f9 fc98 	bl	8000f8c <_sbrk>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_sbrk_r+0x1a>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_sbrk_r+0x1a>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000370 	.word	0x20000370

0800766c <memcpy>:
 800766c:	440a      	add	r2, r1
 800766e:	4291      	cmp	r1, r2
 8007670:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007674:	d100      	bne.n	8007678 <memcpy+0xc>
 8007676:	4770      	bx	lr
 8007678:	b510      	push	{r4, lr}
 800767a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800767e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007682:	4291      	cmp	r1, r2
 8007684:	d1f9      	bne.n	800767a <memcpy+0xe>
 8007686:	bd10      	pop	{r4, pc}

08007688 <_malloc_usable_size_r>:
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f18      	subs	r0, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbc      	itt	lt
 8007692:	580b      	ldrlt	r3, [r1, r0]
 8007694:	18c0      	addlt	r0, r0, r3
 8007696:	4770      	bx	lr

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
