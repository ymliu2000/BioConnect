
CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006564  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080066f4  080066f4  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006858  08006858  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006858  08006858  00007858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006860  08006860  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006864  08006864  00007864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006868  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000005c  080068c4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080068c4  00008488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001092c  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244b  00000000  00000000  000189b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0001ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac3  00000000  00000000  0001bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b9f  00000000  00000000  0001c6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffa8  00000000  00000000  00044262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb057  00000000  00000000  0005420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  0014f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00153220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066dc 	.word	0x080066dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080066dc 	.word	0x080066dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
void StopSensor(void);
uint16_t ReadSensorData(void);

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // 接收处理板命令
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <HAL_UART_RxCpltCallback+0x3c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d110      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x34>
    {
        rxBuffer1[63] = '\0';
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        ProcessCommand(rxBuffer1);
 800058a:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 800058c:	f000 f814 	bl	80005b8 <ProcessCommand>

        memset(rxBuffer1, 0, sizeof(rxBuffer1));
 8000590:	2240      	movs	r2, #64	@ 0x40
 8000592:	2100      	movs	r1, #0
 8000594:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 8000596:	f005 fc21 	bl	8005ddc <memset>
        HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer1, sizeof(rxBuffer1) - 1);
 800059a:	223f      	movs	r2, #63	@ 0x3f
 800059c:	4904      	ldr	r1, [pc, #16]	@ (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_UART_RxCpltCallback+0x44>)
 80005a0:	f004 f8d8 	bl	8004754 <HAL_UART_Receive_IT>
    }
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40013800 	.word	0x40013800
 80005b0:	20000274 	.word	0x20000274
 80005b4:	20000078 	.word	0x20000078

080005b8 <ProcessCommand>:

void ProcessCommand(char* cmd)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0a8      	sub	sp, #160	@ 0xa0
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    char debugMsg[128];
    if (strncmp(cmd, "CMD:START", 9) == 0)
 80005c0:	2209      	movs	r2, #9
 80005c2:	4940      	ldr	r1, [pc, #256]	@ (80006c4 <ProcessCommand+0x10c>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f005 fbf7 	bl	8005db8 <strncmp>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d12a      	bne.n	8000626 <ProcessCommand+0x6e>
    {
        StartSensor();
 80005d0:	f000 f88a 	bl	80006e8 <StartSensor>
        sprintf(debugMsg, "Received START command. Sensor started.\r\n");
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	493b      	ldr	r1, [pc, #236]	@ (80006c8 <ProcessCommand+0x110>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fbcc 	bl	8005d78 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 0120 	add.w	r1, r7, #32
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	4835      	ldr	r0, [pc, #212]	@ (80006cc <ProcessCommand+0x114>)
 80005f8:	f004 f822 	bl	8004640 <HAL_UART_Transmit>

        char ack[] = "ACK:START\r\n";
 80005fc:	4a34      	ldr	r2, [pc, #208]	@ (80006d0 <ProcessCommand+0x118>)
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	ca07      	ldmia	r2, {r0, r1, r2}
 8000604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart3, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fddf 	bl	80001d0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f107 0114 	add.w	r1, r7, #20
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061e:	482d      	ldr	r0, [pc, #180]	@ (80006d4 <ProcessCommand+0x11c>)
 8000620:	f004 f80e 	bl	8004640 <HAL_UART_Transmit>
    else
    {
        sprintf(debugMsg, "Unknown command received: %s\r\n", cmd);
        HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
    }
}
 8000624:	e04a      	b.n	80006bc <ProcessCommand+0x104>
    else if (strncmp(cmd, "CMD:STOP", 8) == 0)
 8000626:	2208      	movs	r2, #8
 8000628:	492b      	ldr	r1, [pc, #172]	@ (80006d8 <ProcessCommand+0x120>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f005 fbc4 	bl	8005db8 <strncmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d12d      	bne.n	8000692 <ProcessCommand+0xda>
        StopSensor();
 8000636:	f000 f867 	bl	8000708 <StopSensor>
        sprintf(debugMsg, "Received STOP command. Sensor stopped.\r\n");
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4927      	ldr	r1, [pc, #156]	@ (80006dc <ProcessCommand+0x124>)
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fb99 	bl	8005d78 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fdc0 	bl	80001d0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	f107 0120 	add.w	r1, r7, #32
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	481b      	ldr	r0, [pc, #108]	@ (80006cc <ProcessCommand+0x114>)
 800065e:	f003 ffef 	bl	8004640 <HAL_UART_Transmit>
        char ack[] = "ACK:STOP\r\n";
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <ProcessCommand+0x128>)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)ack, strlen(ack), HAL_MAX_DELAY);
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0108 	add.w	r1, r7, #8
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800068a:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <ProcessCommand+0x11c>)
 800068c:	f003 ffd8 	bl	8004640 <HAL_UART_Transmit>
}
 8000690:	e014      	b.n	80006bc <ProcessCommand+0x104>
        sprintf(debugMsg, "Unknown command received: %s\r\n", cmd);
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4912      	ldr	r1, [pc, #72]	@ (80006e4 <ProcessCommand+0x12c>)
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fb6c 	bl	8005d78 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), HAL_MAX_DELAY);
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0120 	add.w	r1, r7, #32
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <ProcessCommand+0x114>)
 80006b8:	f003 ffc2 	bl	8004640 <HAL_UART_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	37a0      	adds	r7, #160	@ 0xa0
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	080066f4 	.word	0x080066f4
 80006c8:	08006700 	.word	0x08006700
 80006cc:	20000100 	.word	0x20000100
 80006d0:	08006784 	.word	0x08006784
 80006d4:	20000188 	.word	0x20000188
 80006d8:	0800672c 	.word	0x0800672c
 80006dc:	08006738 	.word	0x08006738
 80006e0:	08006790 	.word	0x08006790
 80006e4:	08006764 	.word	0x08006764

080006e8 <StartSensor>:

void StartSensor(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // 启动RED LED
 80006ec:	2201      	movs	r2, #1
 80006ee:	2102      	movs	r1, #2
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f002 fc04 	bl	8002f00 <HAL_GPIO_WritePin>
    is_working = 1;
 80006f8:	4b02      	ldr	r3, [pc, #8]	@ (8000704 <StartSensor+0x1c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000334 	.word	0x20000334

08000708 <StopSensor>:

void StopSensor(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // 停止RED LED
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000714:	f002 fbf4 	bl	8002f00 <HAL_GPIO_WritePin>
    is_working = 0;
 8000718:	4b02      	ldr	r3, [pc, #8]	@ (8000724 <StopSensor+0x1c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000334 	.word	0x20000334

08000728 <ReadSensorData>:

uint16_t ReadSensorData(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <ReadSensorData+0x2c>)
 800072e:	f001 f82b 	bl	8001788 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000732:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000736:	4807      	ldr	r0, [pc, #28]	@ (8000754 <ReadSensorData+0x2c>)
 8000738:	f001 f8e0 	bl	80018fc <HAL_ADC_PollForConversion>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ReadSensorData+0x26>
    {
        return HAL_ADC_GetValue(&hadc1);
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <ReadSensorData+0x2c>)
 8000744:	f001 f9b2 	bl	8001aac <HAL_ADC_GetValue>
 8000748:	4603      	mov	r3, r0
 800074a:	b29b      	uxth	r3, r3
 800074c:	e000      	b.n	8000750 <ReadSensorData+0x28>
    }
    return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000210 	.word	0x20000210

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b098      	sub	sp, #96	@ 0x60
 800075c:	af00      	add	r7, sp, #0
    HAL_Init();
 800075e:	f000 fc34 	bl	8000fca <HAL_Init>
    SystemClock_Config();
 8000762:	f000 f86f 	bl	8000844 <SystemClock_Config>

    MX_GPIO_Init();
 8000766:	f000 f923 	bl	80009b0 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800076a:	f000 f951 	bl	8000a10 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800076e:	f000 f979 	bl	8000a64 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8000772:	f000 f9a7 	bl	8000ac4 <MX_USART3_UART_Init>
    MX_ADC1_Init();
 8000776:	f000 f8b7 	bl	80008e8 <MX_ADC1_Init>

    memset(rxBuffer1, 0, sizeof(rxBuffer1));
 800077a:	2240      	movs	r2, #64	@ 0x40
 800077c:	2100      	movs	r1, #0
 800077e:	4829      	ldr	r0, [pc, #164]	@ (8000824 <main+0xcc>)
 8000780:	f005 fb2c 	bl	8005ddc <memset>
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer1, sizeof(rxBuffer1) - 1);
 8000784:	223f      	movs	r2, #63	@ 0x3f
 8000786:	4927      	ldr	r1, [pc, #156]	@ (8000824 <main+0xcc>)
 8000788:	4827      	ldr	r0, [pc, #156]	@ (8000828 <main+0xd0>)
 800078a:	f003 ffe3 	bl	8004754 <HAL_UART_Receive_IT>

    char initMsg[] = "Collector Board Ready.\r\n";
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <main+0xd4>)
 8000790:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079e:	c403      	stmia	r4!, {r0, r1}
 80007a0:	7022      	strb	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)initMsg, strlen(initMsg), HAL_MAX_DELAY);
 80007a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd12 	bl	80001d0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b8:	481d      	ldr	r0, [pc, #116]	@ (8000830 <main+0xd8>)
 80007ba:	f003 ff41 	bl	8004640 <HAL_UART_Transmit>

    while (1)
    {
        if (is_working)
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <main+0xdc>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0fb      	beq.n	80007be <main+0x66>
        {
            uint16_t sensorData = ReadSensorData();
 80007c6:	f7ff ffaf 	bl	8000728 <ReadSensorData>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

            char dataMsg[64];
            sprintf(dataMsg, "DATA:%u\r\n", sensorData);
 80007d0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4918      	ldr	r1, [pc, #96]	@ (8000838 <main+0xe0>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 facd 	bl	8005d78 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)dataMsg, strlen(dataMsg), HAL_MAX_DELAY);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	1d39      	adds	r1, r7, #4
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <main+0xd0>)
 80007f2:	f003 ff25 	bl	8004640 <HAL_UART_Transmit>

            sprintf(txBuffer2, "Sent DATA to PB: %u\r\n", sensorData);
 80007f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80007fa:	461a      	mov	r2, r3
 80007fc:	490f      	ldr	r1, [pc, #60]	@ (800083c <main+0xe4>)
 80007fe:	4810      	ldr	r0, [pc, #64]	@ (8000840 <main+0xe8>)
 8000800:	f005 faba 	bl	8005d78 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer2, strlen(txBuffer2), HAL_MAX_DELAY);
 8000804:	480e      	ldr	r0, [pc, #56]	@ (8000840 <main+0xe8>)
 8000806:	f7ff fce3 	bl	80001d0 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000812:	490b      	ldr	r1, [pc, #44]	@ (8000840 <main+0xe8>)
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <main+0xd8>)
 8000816:	f003 ff13 	bl	8004640 <HAL_UART_Transmit>

            HAL_Delay(100); // 模拟采样频率
 800081a:	2064      	movs	r0, #100	@ 0x64
 800081c:	f000 fc4a 	bl	80010b4 <HAL_Delay>
        if (is_working)
 8000820:	e7cd      	b.n	80007be <main+0x66>
 8000822:	bf00      	nop
 8000824:	20000274 	.word	0x20000274
 8000828:	20000078 	.word	0x20000078
 800082c:	080067c0 	.word	0x080067c0
 8000830:	20000100 	.word	0x20000100
 8000834:	20000334 	.word	0x20000334
 8000838:	0800679c 	.word	0x0800679c
 800083c:	080067a8 	.word	0x080067a8
 8000840:	200002b4 	.word	0x200002b4

08000844 <SystemClock_Config>:
        }
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	@ 0x58
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2244      	movs	r2, #68	@ 0x44
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 fac2 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000866:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800086a:	f002 fb89 	bl	8002f80 <HAL_PWREx_ControlVoltageScaling>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x34>
    Error_Handler();
 8000874:	f000 f950 	bl	8000b18 <Error_Handler>
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000878:	2310      	movs	r3, #16
 800087a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800088c:	2301      	movs	r3, #1
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000894:	2328      	movs	r3, #40	@ 0x28
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000898:	2307      	movs	r3, #7
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fbbf 	bl	800302c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x74>
    Error_Handler();
 80008b4:	f000 f930 	bl	8000b18 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80008cc:	463b      	mov	r3, r7
 80008ce:	2104      	movs	r1, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ff87 	bl	80037e4 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x9c>
    Error_Handler();
 80008dc:	f000 f91c 	bl	8000b18 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	@ 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_ADC1_Init>:

/* ADC1 Initialization */
static void MX_ADC1_Init(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
  hadc1.Instance = ADC1;
 80008fe:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000900:	4a29      	ldr	r2, [pc, #164]	@ (80009a8 <MX_ADC1_Init+0xc0>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800091e:	2204      	movs	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000930:	2201      	movs	r2, #1
 8000932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800095e:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 8000960:	f000 fdc2 	bl	80014e8 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x86>
    Error_Handler();
 800096a:	f000 f8d5 	bl	8000b18 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_10;
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000972:	2306      	movs	r3, #6
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800097a:	237f      	movs	r3, #127	@ 0x7f
 800097c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097e:	2304      	movs	r3, #4
 8000980:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <MX_ADC1_Init+0xbc>)
 800098c:	f001 fad4 	bl	8001f38 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xb2>
    Error_Handler();
 8000996:	f000 f8bf 	bl	8000b18 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000210 	.word	0x20000210
 80009a8:	50040000 	.word	0x50040000
 80009ac:	2a000400 	.word	0x2a000400

080009b0 <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_GPIO_Init+0x5c>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0x5c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_GPIO_Init+0x5c>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // RED LED
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f002 fa8c 	bl	8002f00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f002 f8d4 	bl	8002bac <HAL_GPIO_Init>
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MX_USART1_UART_Init>:

/* USART1 Initialization */
static void MX_USART1_UART_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_USART1_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a48:	f003 fdac 	bl	80045a4 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8000a52:	f000 f861 	bl	8000b18 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	40013800 	.word	0x40013800

08000a64 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <MX_USART2_UART_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART2_UART_Init+0x58>)
 8000aa8:	f003 fd7c 	bl	80045a4 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000ab2:	f000 f831 	bl	8000b18 <Error_Handler>
    }
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000100 	.word	0x20000100
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <MX_USART3_UART_Init>:

/* USART3 Initialization */
static void MX_USART3_UART_Init(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <MX_USART3_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_USART3_UART_Init+0x4c>)
 8000afc:	f003 fd52 	bl	80045a4 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8000b06:	f000 f807 	bl	8000b18 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000188 	.word	0x20000188
 8000b14:	40004800 	.word	0x40004800

08000b18 <Error_Handler>:

void Error_Handler(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq(); // 禁用中断，防止错误扩散
  while (1) {
    // 错误指示：闪烁板载 LED (PA5)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b20:	2120      	movs	r1, #32
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f002 fa03 	bl	8002f30 <HAL_GPIO_TogglePin>
    HAL_Delay(500); // 500 毫秒闪烁
 8000b2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2e:	f000 fac1 	bl	80010b4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b32:	bf00      	nop
 8000b34:	e7f4      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0ac      	sub	sp, #176	@ 0xb0
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2288      	movs	r2, #136	@ 0x88
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 f91b 	bl	8005ddc <memset>
  if(hadc->Instance==ADC1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a2b      	ldr	r2, [pc, #172]	@ (8000c58 <HAL_ADC_MspInit+0xd8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d14f      	bne.n	8000c50 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bb4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bb6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f823 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000bec:	f7ff ff94 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000bf6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_ADC_MspInit+0xdc>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Analog_Output_Pin;
 8000c20:	2320      	movs	r3, #32
 8000c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c26:	230b      	movs	r3, #11
 8000c28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_Output_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 ffb6 	bl	8002bac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2012      	movs	r0, #18
 8000c46:	f001 fefc 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	f001 ff15 	bl	8002a7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c50:	bf00      	nop
 8000c52:	37b0      	adds	r7, #176	@ 0xb0
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	50040000 	.word	0x50040000
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0b0      	sub	sp, #192	@ 0xc0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	2288      	movs	r2, #136	@ 0x88
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f005 f8ab 	bl	8005ddc <memset>
  if(huart->Instance==USART1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8000e38 <HAL_UART_MspInit+0x1d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d145      	bne.n	8000d1c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c94:	2300      	movs	r3, #0
 8000c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 ffc5 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca8:	f7ff ff36 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cac:	4b63      	ldr	r3, [pc, #396]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb0:	4a62      	ldr	r2, [pc, #392]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb8:	4b60      	ldr	r3, [pc, #384]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc0:	623b      	str	r3, [r7, #32]
 8000cc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d06:	f001 ff51 	bl	8002bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2025      	movs	r0, #37	@ 0x25
 8000d10:	f001 fe97 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d14:	2025      	movs	r0, #37	@ 0x25
 8000d16:	f001 feb0 	bl	8002a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1a:	e089      	b.n	8000e30 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a47      	ldr	r2, [pc, #284]	@ (8000e40 <HAL_UART_MspInit+0x1e0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d13c      	bne.n	8000da0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 ff7a 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000d3e:	f7ff feeb 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	4b3e      	ldr	r3, [pc, #248]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	4a3d      	ldr	r2, [pc, #244]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a37      	ldr	r2, [pc, #220]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b35      	ldr	r3, [pc, #212]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d72:	230c      	movs	r3, #12
 8000d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f001 ff07 	bl	8002bac <HAL_GPIO_Init>
}
 8000d9e:	e047      	b.n	8000e30 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <HAL_UART_MspInit+0x1e4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d142      	bne.n	8000e30 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000daa:	2304      	movs	r3, #4
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 ff38 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8000dc2:	f7ff fea9 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dca:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a16      	ldr	r2, [pc, #88]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_UART_MspInit+0x1dc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000df6:	2330      	movs	r3, #48	@ 0x30
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <HAL_UART_MspInit+0x1e8>)
 8000e1c:	f001 fec6 	bl	8002bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2027      	movs	r0, #39	@ 0x27
 8000e26:	f001 fe0c 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e2a:	2027      	movs	r0, #39	@ 0x27
 8000e2c:	f001 fe25 	bl	8002a7a <HAL_NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	37c0      	adds	r7, #192	@ 0xc0
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40004800 	.word	0x40004800
 8000e48:	48000800 	.word	0x48000800

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f8e7 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <ADC1_2_IRQHandler+0x10>)
 8000eb2:	f000 fe09 	bl	8001ac8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000210 	.word	0x20000210

08000ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <USART1_IRQHandler+0x10>)
 8000ec6:	f003 fc91 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000078 	.word	0x20000078

08000ed4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USART3_IRQHandler+0x10>)
 8000eda:	f003 fc87 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000188 	.word	0x20000188

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f004 ff68 	bl	8005dec <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20018000 	.word	0x20018000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000338 	.word	0x20000338
 8000f50:	20000488 	.word	0x20000488

08000f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f004 ff27 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fbd5 	bl	8000758 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fbc:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8000fc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fc4:	20000488 	.word	0x20000488

08000fc8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC3_IRQHandler>

08000fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 fd29 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f80e 	bl	8000ffc <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fec:	f7ff fda4 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <HAL_InitTick+0x6c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d023      	beq.n	8001058 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_InitTick+0x70>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_InitTick+0x6c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fd35 	bl	8002a96 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10f      	bne.n	8001052 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d809      	bhi.n	800104c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001040:	f001 fcff 	bl	8002a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_InitTick+0x74>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e007      	b.n	800105c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e004      	b.n	800105c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e001      	b.n	800105c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000000 	.word	0x20000000
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	2000033c 	.word	0x2000033c

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000033c 	.word	0x2000033c

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3360      	adds	r3, #96	@ 0x60
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <LL_ADC_SetOffset+0x44>)
 8001186:	4013      	ands	r3, r2
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	4313      	orrs	r3, r2
 8001194:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	03fff000 	.word	0x03fff000

080011ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3360      	adds	r3, #96	@ 0x60
 80011ba:	461a      	mov	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3360      	adds	r3, #96	@ 0x60
 80011e8:	461a      	mov	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001202:	bf00      	nop
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3330      	adds	r3, #48	@ 0x30
 8001244:	461a      	mov	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	4413      	add	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	211f      	movs	r1, #31
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	0e9b      	lsrs	r3, r3, #26
 800126c:	f003 011f 	and.w	r1, r3, #31
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	431a      	orrs	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3314      	adds	r3, #20
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	0e5b      	lsrs	r3, r3, #25
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	2107      	movs	r1, #7
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0d1b      	lsrs	r3, r3, #20
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	431a      	orrs	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0318 	and.w	r3, r3, #24
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <LL_ADC_SetChannelSingleDiff+0x44>)
 800132c:	40d9      	lsrs	r1, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	400b      	ands	r3, r1
 8001332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001336:	431a      	orrs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	0007ffff 	.word	0x0007ffff

08001350 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 031f 	and.w	r3, r3, #31
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001398:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6093      	str	r3, [r2, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013c0:	d101      	bne.n	80013c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001410:	d101      	bne.n	8001416 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001434:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <LL_ADC_IsEnabled+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_ADC_IsEnabled+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001482:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001486:	f043 0204 	orr.w	r2, r3, #4
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d101      	bne.n	80014d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e130      	b.n	8001764 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fb35 	bl	8000b80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff3f 	bl	80013ac <LL_ADC_IsDeepPowerDownEnabled>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff25 	bl	8001388 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff5a 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d115      	bne.n	800157a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff3e 	bl	80013d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001558:	4b84      	ldr	r3, [pc, #528]	@ (800176c <HAL_ADC_Init+0x284>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	4a84      	ldr	r2, [pc, #528]	@ (8001770 <HAL_ADC_Init+0x288>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	3301      	adds	r3, #1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800156c:	e002      	b.n	8001574 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3b01      	subs	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f9      	bne.n	800156e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff3c 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	f043 0210 	orr.w	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff75 	bl	800149a <LL_ADC_REG_IsConversionOngoing>
 80015b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 80c9 	bne.w	8001752 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 80c5 	bne.w	8001752 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015d0:	f043 0202 	orr.w	r2, r3, #2
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff35 	bl	800144c <LL_ADC_IsEnabled>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d115      	bne.n	8001614 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e8:	4862      	ldr	r0, [pc, #392]	@ (8001774 <HAL_ADC_Init+0x28c>)
 80015ea:	f7ff ff2f 	bl	800144c <LL_ADC_IsEnabled>
 80015ee:	4604      	mov	r4, r0
 80015f0:	4861      	ldr	r0, [pc, #388]	@ (8001778 <HAL_ADC_Init+0x290>)
 80015f2:	f7ff ff2b 	bl	800144c <LL_ADC_IsEnabled>
 80015f6:	4603      	mov	r3, r0
 80015f8:	431c      	orrs	r4, r3
 80015fa:	4860      	ldr	r0, [pc, #384]	@ (800177c <HAL_ADC_Init+0x294>)
 80015fc:	f7ff ff26 	bl	800144c <LL_ADC_IsEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	4323      	orrs	r3, r4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4619      	mov	r1, r3
 800160e:	485c      	ldr	r0, [pc, #368]	@ (8001780 <HAL_ADC_Init+0x298>)
 8001610:	f7ff fd74 	bl	80010fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e5b      	ldrb	r3, [r3, #25]
 8001618:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800161e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001624:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800162a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d106      	bne.n	8001650 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	3b01      	subs	r3, #1
 8001648:	045b      	lsls	r3, r3, #17
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <HAL_ADC_Init+0x29c>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	430b      	orrs	r3, r1
 800167e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff1b 	bl	80014c0 <LL_ADC_INJ_IsConversionOngoing>
 800168a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d13d      	bne.n	800170e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d13a      	bne.n	800170e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800169c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016b4:	f023 0302 	bic.w	r3, r3, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	69b9      	ldr	r1, [r7, #24]
 80016be:	430b      	orrs	r3, r1
 80016c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d118      	bne.n	80016fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016ee:	430a      	orrs	r2, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10c      	bne.n	8001730 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	f023 010f 	bic.w	r1, r3, #15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	e007      	b.n	8001740 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020f 	bic.w	r2, r2, #15
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	f023 0303 	bic.w	r3, r3, #3
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	f043 0210 	orr.w	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001762:	7ffb      	ldrb	r3, [r7, #31]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3724      	adds	r7, #36	@ 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	053e2d63 	.word	0x053e2d63
 8001774:	50040000 	.word	0x50040000
 8001778:	50040100 	.word	0x50040100
 800177c:	50040200 	.word	0x50040200
 8001780:	50040300 	.word	0x50040300
 8001784:	fff0c007 	.word	0xfff0c007

08001788 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001790:	4857      	ldr	r0, [pc, #348]	@ (80018f0 <HAL_ADC_Start+0x168>)
 8001792:	f7ff fddd 	bl	8001350 <LL_ADC_GetMultimode>
 8001796:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe7c 	bl	800149a <LL_ADC_REG_IsConversionOngoing>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 809c 	bne.w	80018e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_Start+0x30>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e097      	b.n	80018e8 <HAL_ADC_Start+0x160>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 ffab 	bl	800271c <ADC_Enable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 8083 	bne.w	80018d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a42      	ldr	r2, [pc, #264]	@ (80018f4 <HAL_ADC_Start+0x16c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d002      	beq.n	80017f6 <HAL_ADC_Start+0x6e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e000      	b.n	80017f8 <HAL_ADC_Start+0x70>
 80017f6:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <HAL_ADC_Start+0x170>)
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d002      	beq.n	8001806 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800181e:	d106      	bne.n	800182e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f023 0206 	bic.w	r2, r3, #6
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	@ 0x58
 800182c:	e002      	b.n	8001834 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	221c      	movs	r2, #28
 800183a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_ADC_Start+0x16c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d002      	beq.n	8001854 <HAL_ADC_Start+0xcc>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e000      	b.n	8001856 <HAL_ADC_Start+0xce>
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_ADC_Start+0x170>)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	4293      	cmp	r3, r2
 800185c:	d008      	beq.n	8001870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d002      	beq.n	8001870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d114      	bne.n	800189a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001886:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fded 	bl	8001472 <LL_ADC_REG_StartConversion>
 8001898:	e025      	b.n	80018e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_ADC_Start+0x16c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d002      	beq.n	80018b6 <HAL_ADC_Start+0x12e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Start+0x130>
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_ADC_Start+0x170>)
 80018b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00f      	beq.n	80018e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80018d6:	e006      	b.n	80018e6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80018e0:	e001      	b.n	80018e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	50040300 	.word	0x50040300
 80018f4:	50040100 	.word	0x50040100
 80018f8:	50040000 	.word	0x50040000

080018fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001906:	4866      	ldr	r0, [pc, #408]	@ (8001aa0 <HAL_ADC_PollForConversion+0x1a4>)
 8001908:	f7ff fd22 	bl	8001350 <LL_ADC_GetMultimode>
 800190c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d102      	bne.n	800191c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001916:	2308      	movs	r3, #8
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e02a      	b.n	8001972 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b05      	cmp	r3, #5
 8001926:	d002      	beq.n	800192e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b09      	cmp	r3, #9
 800192c:	d111      	bne.n	8001952 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0a4      	b.n	8001a96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800194c:	2304      	movs	r3, #4
 800194e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001950:	e00f      	b.n	8001972 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001952:	4853      	ldr	r0, [pc, #332]	@ (8001aa0 <HAL_ADC_PollForConversion+0x1a4>)
 8001954:	f7ff fd0a 	bl	800136c <LL_ADC_GetMultiDMATransfer>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	f043 0220 	orr.w	r2, r3, #32
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e093      	b.n	8001a96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800196e:	2304      	movs	r3, #4
 8001970:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001972:	f7ff fb93 	bl	800109c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001978:	e021      	b.n	80019be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001980:	d01d      	beq.n	80019be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001982:	f7ff fb8b 	bl	800109c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d302      	bcc.n	8001998 <HAL_ADC_PollForConversion+0x9c>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d112      	bne.n	80019be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10b      	bne.n	80019be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e06b      	b.n	8001a96 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0d6      	beq.n	800197a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fc16 	bl	800120e <LL_ADC_REG_IsTriggerSourceSWStart>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e5b      	ldrb	r3, [r3, #25]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d118      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d111      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_ADC_PollForConversion+0x1a8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d002      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x136>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e000      	b.n	8001a34 <HAL_ADC_PollForConversion+0x138>
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_ADC_PollForConversion+0x1ac>)
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d008      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b09      	cmp	r3, #9
 8001a4c:	d104      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	e00c      	b.n	8001a72 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_ADC_PollForConversion+0x1a8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d002      	beq.n	8001a68 <HAL_ADC_PollForConversion+0x16c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_PollForConversion+0x16e>
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_ADC_PollForConversion+0x1ac>)
 8001a6a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d104      	bne.n	8001a82 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e008      	b.n	8001a94 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	220c      	movs	r2, #12
 8001a92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	50040300 	.word	0x50040300
 8001aa4:	50040100 	.word	0x50040100
 8001aa8:	50040000 	.word	0x50040000

08001aac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae4:	4882      	ldr	r0, [pc, #520]	@ (8001cf0 <HAL_ADC_IRQHandler+0x228>)
 8001ae6:	f7ff fc33 	bl	8001350 <LL_ADC_GetMultimode>
 8001aea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d017      	beq.n	8001b26 <HAL_ADC_IRQHandler+0x5e>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fead 	bl	8002878 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x72>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8083 	beq.w	8001c4c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d07d      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb4e 	bl	800120e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d062      	beq.n	8001c3e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_ADC_IRQHandler+0x22c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d002      	beq.n	8001b88 <HAL_ADC_IRQHandler+0xc0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e000      	b.n	8001b8a <HAL_ADC_IRQHandler+0xc2>
 8001b88:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf8 <HAL_ADC_IRQHandler+0x230>)
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d002      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d104      	bne.n	8001bae <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	e00c      	b.n	8001bc8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a50      	ldr	r2, [pc, #320]	@ (8001cf4 <HAL_ADC_IRQHandler+0x22c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d002      	beq.n	8001bbe <HAL_ADC_IRQHandler+0xf6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e000      	b.n	8001bc0 <HAL_ADC_IRQHandler+0xf8>
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <HAL_ADC_IRQHandler+0x230>)
 8001bc0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d135      	bne.n	8001c3e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d12e      	bne.n	8001c3e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fc58 	bl	800149a <LL_ADC_REG_IsConversionOngoing>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11a      	bne.n	8001c26 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 020c 	bic.w	r2, r2, #12
 8001bfe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d112      	bne.n	8001c3e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c24:	e00b      	b.n	8001c3e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f95c 	bl	8001efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x198>
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 809f 	beq.w	8001daa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8099 	beq.w	8001daa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff faf9 	bl	800128c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c9a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fab4 	bl	800120e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ca6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_ADC_IRQHandler+0x22c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d002      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x1f0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e000      	b.n	8001cba <HAL_ADC_IRQHandler+0x1f2>
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_ADC_IRQHandler+0x230>)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d008      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b07      	cmp	r3, #7
 8001cd2:	d104      	bne.n	8001cde <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	e013      	b.n	8001d06 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_ADC_IRQHandler+0x22c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x234>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_IRQHandler+0x236>
 8001cee:	bf00      	nop
 8001cf0:	50040300 	.word	0x50040300
 8001cf4:	50040100 	.word	0x50040100
 8001cf8:	50040000 	.word	0x50040000
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef4 <HAL_ADC_IRQHandler+0x42c>)
 8001cfe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d047      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x25e>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03f      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13a      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	d133      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d12e      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fbbc 	bl	80014c0 <LL_ADC_INJ_IsConversionOngoing>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11a      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d112      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d82:	e00b      	b.n	8001d9c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d88:	f043 0210 	orr.w	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fd43 	bl	8002828 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2260      	movs	r2, #96	@ 0x60
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d011      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x310>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8a0 	bl	8001f10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d012      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x340>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fd29 	bl	8002850 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d012      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x370>
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fd1b 	bl	8002864 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d036      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x3e8>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d031      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001e54:	2301      	movs	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e58:	e014      	b.n	8001e84 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e60:	4825      	ldr	r0, [pc, #148]	@ (8001ef8 <HAL_ADC_IRQHandler+0x430>)
 8001e62:	f7ff fa83 	bl	800136c <LL_ADC_GetMultiDMATransfer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e70:	e008      	b.n	8001e84 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10e      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f83e 	bl	8001f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d018      	beq.n	8001eec <HAL_ADC_IRQHandler+0x424>
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	f043 0208 	orr.w	r2, r3, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fca8 	bl	800283c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	@ 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	50040000 	.word	0x50040000
 8001ef8:	50040300 	.word	0x50040300

08001efc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0b6      	sub	sp, #216	@ 0xd8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x22>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e3c9      	b.n	80026ee <HAL_ADC_ConfigChannel+0x7b6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa97 	bl	800149a <LL_ADC_REG_IsConversionOngoing>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 83aa 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d824      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	3b02      	subs	r3, #2
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d81b      	bhi.n	8001fc6 <HAL_ADC_ConfigChannel+0x8e>
 8001f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <HAL_ADC_ConfigChannel+0x5c>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fad 	.word	0x08001fad
 8001f9c:	08001fb5 	.word	0x08001fb5
 8001fa0:	08001fbd 	.word	0x08001fbd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001faa:	e010      	b.n	8001fce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fac:	2312      	movs	r3, #18
 8001fae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fb2:	e00c      	b.n	8001fce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001fb4:	2318      	movs	r3, #24
 8001fb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fba:	e008      	b.n	8001fce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001fcc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001fdc:	f7ff f92a 	bl	8001234 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fa58 	bl	800149a <LL_ADC_REG_IsConversionOngoing>
 8001fea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fa64 	bl	80014c0 <LL_ADC_INJ_IsConversionOngoing>
 8001ff8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 81a4 	bne.w	800234e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 819f 	bne.w	800234e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff f948 	bl	80012b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00a      	beq.n	800205a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6919      	ldr	r1, [r3, #16]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002054:	f7ff f886 	bl	8001164 <LL_ADC_SetOffset>
 8002058:	e179      	b.n	800234e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f8a3 	bl	80011ac <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x14e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f898 	bl	80011ac <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	0e9b      	lsrs	r3, r3, #26
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	e01e      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x18c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f88d 	bl	80011ac <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e004      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80020b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1a4>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	e018      	b.n	800210e <HAL_ADC_ConfigChannel+0x1d6>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80020f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80020f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e004      	b.n	800210e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002104:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800210e:	429a      	cmp	r2, r3
 8002110:	d106      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f85c 	bl	80011d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff f840 	bl	80011ac <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x214>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f835 	bl	80011ac <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 021f 	and.w	r2, r3, #31
 800214a:	e01e      	b.n	800218a <HAL_ADC_ConfigChannel+0x252>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f82a 	bl	80011ac <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800216a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800216e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e004      	b.n	8002188 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800217e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x26a>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	e018      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x29c>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80021b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80021be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e004      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80021ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d106      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fff9 	bl	80011d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ffdd 	bl	80011ac <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x2da>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ffd2 	bl	80011ac <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	e01e      	b.n	8002250 <HAL_ADC_ConfigChannel+0x318>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2102      	movs	r1, #2
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe ffc7 	bl	80011ac <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e004      	b.n	800224e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x330>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	e014      	b.n	8002292 <HAL_ADC_ConfigChannel+0x35a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800227c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e004      	b.n	8002292 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002292:	429a      	cmp	r2, r3
 8002294:	d106      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff9a 	bl	80011d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2103      	movs	r1, #3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe ff7e 	bl	80011ac <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x398>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2103      	movs	r1, #3
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe ff73 	bl	80011ac <LL_ADC_GetOffsetChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	f003 021f 	and.w	r2, r3, #31
 80022ce:	e017      	b.n	8002300 <HAL_ADC_ConfigChannel+0x3c8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2103      	movs	r1, #3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff68 	bl	80011ac <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e003      	b.n	80022fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80022f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x3e0>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	e011      	b.n	800233c <HAL_ADC_ConfigChannel+0x404>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002328:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800232a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e003      	b.n	800233c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	2103      	movs	r1, #3
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ff45 	bl	80011d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f87a 	bl	800144c <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8140 	bne.w	80025e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	461a      	mov	r2, r3
 800236e:	f7fe ffcb 	bl	8001308 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4a8f      	ldr	r2, [pc, #572]	@ (80025b4 <HAL_ADC_ConfigChannel+0x67c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	f040 8131 	bne.w	80025e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x46e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	3301      	adds	r3, #1
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2b09      	cmp	r3, #9
 800239c:	bf94      	ite	ls
 800239e:	2301      	movls	r3, #1
 80023a0:	2300      	movhi	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e019      	b.n	80023da <HAL_ADC_ConfigChannel+0x4a2>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e003      	b.n	80023ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d079      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d107      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x4c2>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f8:	e015      	b.n	8002426 <HAL_ADC_ConfigChannel+0x4ee>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800240a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800240c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	069b      	lsls	r3, r3, #26
 8002422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x50e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	3301      	adds	r3, #1
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	e017      	b.n	8002476 <HAL_ADC_ConfigChannel+0x53e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002456:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	ea42 0103 	orr.w	r1, r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x564>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	051b      	lsls	r3, r3, #20
 800249a:	e018      	b.n	80024ce <HAL_ADC_ConfigChannel+0x596>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80024b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	430b      	orrs	r3, r1
 80024d0:	e081      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x5b6>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ec:	e015      	b.n	800251a <HAL_ADC_ConfigChannel+0x5e2>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e003      	b.n	8002512 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	069b      	lsls	r3, r3, #26
 8002516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_ADC_ConfigChannel+0x602>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	e017      	b.n	800256a <HAL_ADC_ConfigChannel+0x632>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61bb      	str	r3, [r7, #24]
  return result;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	ea42 0103 	orr.w	r1, r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x65e>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	3301      	adds	r3, #1
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	3b1e      	subs	r3, #30
 800258e:	051b      	lsls	r3, r3, #20
 8002590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002594:	e01e      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x69c>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	60fb      	str	r3, [r7, #12]
  return result;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e006      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x688>
 80025b2:	bf00      	nop
 80025b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	051b      	lsls	r3, r3, #20
 80025d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fe69 	bl	80012b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b44      	ldr	r3, [pc, #272]	@ (80026f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d07a      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ec:	4843      	ldr	r0, [pc, #268]	@ (80026fc <HAL_ADC_ConfigChannel+0x7c4>)
 80025ee:	f7fe fdab 	bl	8001148 <LL_ADC_GetCommonPathInternalCh>
 80025f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a41      	ldr	r2, [pc, #260]	@ (8002700 <HAL_ADC_ConfigChannel+0x7c8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d12c      	bne.n	800265a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d126      	bne.n	800265a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3c      	ldr	r2, [pc, #240]	@ (8002704 <HAL_ADC_ConfigChannel+0x7cc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x6e8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_ADC_ConfigChannel+0x7d0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d15d      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002624:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002628:	4619      	mov	r1, r3
 800262a:	4834      	ldr	r0, [pc, #208]	@ (80026fc <HAL_ADC_ConfigChannel+0x7c4>)
 800262c:	f7fe fd79 	bl	8001122 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_ADC_ConfigChannel+0x7d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	4a36      	ldr	r2, [pc, #216]	@ (8002710 <HAL_ADC_ConfigChannel+0x7d8>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800264a:	e002      	b.n	8002652 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3b01      	subs	r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002658:	e040      	b.n	80026dc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <HAL_ADC_ConfigChannel+0x7dc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d118      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <HAL_ADC_ConfigChannel+0x7cc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x74c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <HAL_ADC_ConfigChannel+0x7d0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d12d      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268c:	4619      	mov	r1, r3
 800268e:	481b      	ldr	r0, [pc, #108]	@ (80026fc <HAL_ADC_ConfigChannel+0x7c4>)
 8002690:	f7fe fd47 	bl	8001122 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002694:	e024      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <HAL_ADC_ConfigChannel+0x7e0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d120      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11a      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a14      	ldr	r2, [pc, #80]	@ (8002704 <HAL_ADC_ConfigChannel+0x7cc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d115      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026be:	4619      	mov	r1, r3
 80026c0:	480e      	ldr	r0, [pc, #56]	@ (80026fc <HAL_ADC_ConfigChannel+0x7c4>)
 80026c2:	f7fe fd2e 	bl	8001122 <LL_ADC_SetCommonPathInternalCh>
 80026c6:	e00c      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026da:	e002      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026dc:	bf00      	nop
 80026de:	e000      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	37d8      	adds	r7, #216	@ 0xd8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	80080000 	.word	0x80080000
 80026fc:	50040300 	.word	0x50040300
 8002700:	c7520000 	.word	0xc7520000
 8002704:	50040000 	.word	0x50040000
 8002708:	50040200 	.word	0x50040200
 800270c:	20000000 	.word	0x20000000
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	cb840000 	.word	0xcb840000
 8002718:	80000001 	.word	0x80000001

0800271c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fe8d 	bl	800144c <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d169      	bne.n	800280c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <ADC_Enable+0xfc>)
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e055      	b.n	800280e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fe5c 	bl	8001424 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800276c:	482b      	ldr	r0, [pc, #172]	@ (800281c <ADC_Enable+0x100>)
 800276e:	f7fe fceb 	bl	8001148 <LL_ADC_GetCommonPathInternalCh>
 8002772:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <ADC_Enable+0x104>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <ADC_Enable+0x108>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002796:	e002      	b.n	800279e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3b01      	subs	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027a4:	f7fe fc7a 	bl	800109c <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027aa:	e028      	b.n	80027fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fe4b 	bl	800144c <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fe2f 	bl	8001424 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027c6:	f7fe fc69 	bl	800109c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d914      	bls.n	80027fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00d      	beq.n	80027fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d1cf      	bne.n	80027ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	8000003f 	.word	0x8000003f
 800281c:	50040300 	.word	0x50040300
 8002820:	20000000 	.word	0x20000000
 8002824:	053e2d63 	.word	0x053e2d63

08002828 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	@ (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff29 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff3e 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff31 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffa2 	bl	80029e8 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d008      	beq.n	8002ad8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e022      	b.n	8002b1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 020e 	bic.w	r2, r2, #14
 8002ae6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	f003 021c 	and.w	r2, r3, #28
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d005      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e029      	b.n	8002ba2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 020e 	bic.w	r2, r2, #14
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f003 021c 	and.w	r2, r3, #28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
    }
  }
  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bba:	e17f      	b.n	8002ebc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8171 	beq.w	8002eb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d005      	beq.n	8002bec <HAL_GPIO_Init+0x40>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d130      	bne.n	8002c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c22:	2201      	movs	r2, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0201 	and.w	r2, r3, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d118      	bne.n	8002c8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c60:	2201      	movs	r2, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	f003 0201 	and.w	r2, r3, #1
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d017      	beq.n	8002cc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	6939      	ldr	r1, [r7, #16]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80ac 	beq.w	8002eb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_GPIO_Init+0x330>)
 8002d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d62:	4a5e      	ldr	r2, [pc, #376]	@ (8002edc <HAL_GPIO_Init+0x330>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002edc <HAL_GPIO_Init+0x330>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d76:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee0 <HAL_GPIO_Init+0x334>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x242>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee4 <HAL_GPIO_Init+0x338>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x23e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee8 <HAL_GPIO_Init+0x33c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x23a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4d      	ldr	r2, [pc, #308]	@ (8002eec <HAL_GPIO_Init+0x340>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x236>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef0 <HAL_GPIO_Init+0x344>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x232>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef4 <HAL_GPIO_Init+0x348>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x22e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_GPIO_Init+0x34c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x22a>
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	e00c      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002dd6:	2307      	movs	r3, #7
 8002dd8:	e00a      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002dda:	2305      	movs	r3, #5
 8002ddc:	e008      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002de2:	2303      	movs	r3, #3
 8002de4:	e004      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e002      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_GPIO_Init+0x244>
 8002dee:	2300      	movs	r3, #0
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	f002 0203 	and.w	r2, r2, #3
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	4093      	lsls	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e00:	4937      	ldr	r1, [pc, #220]	@ (8002ee0 <HAL_GPIO_Init+0x334>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e32:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e5c:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e62:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e86:	4a1d      	ldr	r2, [pc, #116]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eb0:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <HAL_GPIO_Init+0x350>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f47f ae78 	bne.w	8002bbc <HAL_GPIO_Init+0x10>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	48000400 	.word	0x48000400
 8002ee8:	48000800 	.word	0x48000800
 8002eec:	48000c00 	.word	0x48000c00
 8002ef0:	48001000 	.word	0x48001000
 8002ef4:	48001400 	.word	0x48001400
 8002ef8:	48001800 	.word	0x48001800
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43d9      	mvns	r1, r3
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	400b      	ands	r3, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40007000 	.word	0x40007000

08002f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8e:	d130      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f90:	4b23      	ldr	r3, [pc, #140]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f9c:	d038      	beq.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f9e:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2232      	movs	r2, #50	@ 0x32
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9b      	lsrs	r3, r3, #18
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc4:	e002      	b.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd8:	d102      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f2      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fec:	d110      	bne.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e00f      	b.n	8003012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffe:	d007      	beq.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003000:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003008:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40007000 	.word	0x40007000
 8003024:	20000000 	.word	0x20000000
 8003028:	431bde83 	.word	0x431bde83

0800302c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e3ca      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	4b97      	ldr	r3, [pc, #604]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003048:	4b94      	ldr	r3, [pc, #592]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80e4 	beq.w	8003228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_RCC_OscConfig+0x4a>
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	f040 808b 	bne.w	8003184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b01      	cmp	r3, #1
 8003072:	f040 8087 	bne.w	8003184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003076:	4b89      	ldr	r3, [pc, #548]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e3a2      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	4b82      	ldr	r3, [pc, #520]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <HAL_RCC_OscConfig+0x7c>
 800309e:	4b7f      	ldr	r3, [pc, #508]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a6:	e005      	b.n	80030b4 <HAL_RCC_OscConfig+0x88>
 80030a8:	4b7c      	ldr	r3, [pc, #496]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d223      	bcs.n	8003100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fd55 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e383      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030cc:	4b73      	ldr	r3, [pc, #460]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a72      	ldr	r2, [pc, #456]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b70      	ldr	r3, [pc, #448]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	496d      	ldr	r1, [pc, #436]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ea:	4b6c      	ldr	r3, [pc, #432]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	4968      	ldr	r1, [pc, #416]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
 80030fe:	e025      	b.n	800314c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003106:	f043 0308 	orr.w	r3, r3, #8
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b63      	ldr	r3, [pc, #396]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4960      	ldr	r1, [pc, #384]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311e:	4b5f      	ldr	r3, [pc, #380]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	495b      	ldr	r1, [pc, #364]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd15 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e343      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800314c:	f000 fc4a 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b52      	ldr	r3, [pc, #328]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	4950      	ldr	r1, [pc, #320]	@ (80032a0 <HAL_RCC_OscConfig+0x274>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	4a4e      	ldr	r2, [pc, #312]	@ (80032a4 <HAL_RCC_OscConfig+0x278>)
 800316a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800316c:	4b4e      	ldr	r3, [pc, #312]	@ (80032a8 <HAL_RCC_OscConfig+0x27c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd ff43 	bl	8000ffc <HAL_InitTick>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d052      	beq.n	8003226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	e327      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d032      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800318c:	4b43      	ldr	r3, [pc, #268]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a42      	ldr	r2, [pc, #264]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003198:	f7fd ff80 	bl	800109c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a0:	f7fd ff7c 	bl	800109c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e310      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b2:	4b3a      	ldr	r3, [pc, #232]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031be:	4b37      	ldr	r3, [pc, #220]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a36      	ldr	r2, [pc, #216]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4931      	ldr	r1, [pc, #196]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031dc:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	492c      	ldr	r1, [pc, #176]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	e01a      	b.n	8003228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031f2:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a29      	ldr	r2, [pc, #164]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031fe:	f7fd ff4d 	bl	800109c <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003206:	f7fd ff49 	bl	800109c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e2dd      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003218:	4b20      	ldr	r3, [pc, #128]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f0      	bne.n	8003206 <HAL_RCC_OscConfig+0x1da>
 8003224:	e000      	b.n	8003228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d074      	beq.n	800331e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b08      	cmp	r3, #8
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x21a>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d10e      	bne.n	800325e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d10b      	bne.n	800325e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d064      	beq.n	800331c <HAL_RCC_OscConfig+0x2f0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d160      	bne.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e2ba      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x24a>
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800326e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	e026      	b.n	80032c4 <HAL_RCC_OscConfig+0x298>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800327e:	d115      	bne.n	80032ac <HAL_RCC_OscConfig+0x280>
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a05      	ldr	r2, [pc, #20]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b03      	ldr	r3, [pc, #12]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a02      	ldr	r2, [pc, #8]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x298>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	080067dc 	.word	0x080067dc
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004
 80032ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd fee6 	bl	800109c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fd fee2 	bl	800109c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e276      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e6:	4b92      	ldr	r3, [pc, #584]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2a8>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fd fed2 	bl	800109c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd fece 	bl	800109c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	@ 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e262      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x2d0>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d060      	beq.n	80033ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x310>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d119      	bne.n	800336a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d116      	bne.n	800336a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333c:	4b7c      	ldr	r3, [pc, #496]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_OscConfig+0x328>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e23f      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	4973      	ldr	r1, [pc, #460]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	e040      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d023      	beq.n	80033ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003372:	4b6f      	ldr	r3, [pc, #444]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6e      	ldr	r2, [pc, #440]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd fe8d 	bl	800109c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003386:	f7fd fe89 	bl	800109c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e21d      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003398:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	495f      	ldr	r1, [pc, #380]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5c      	ldr	r2, [pc, #368]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80033c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fe69 	bl	800109c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fd fe65 	bl	800109c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1f9      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e0:	4b53      	ldr	r3, [pc, #332]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d03c      	beq.n	8003472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003406:	4a4a      	ldr	r2, [pc, #296]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd fe44 	bl	800109c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fd fe40 	bl	800109c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1d4      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342a:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCC_OscConfig+0x3ec>
 8003438:	e01b      	b.n	8003472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343a:	4b3d      	ldr	r3, [pc, #244]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003440:	4a3b      	ldr	r2, [pc, #236]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fd fe27 	bl	800109c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003452:	f7fd fe23 	bl	800109c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1b7      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003464:	4b32      	ldr	r3, [pc, #200]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ef      	bne.n	8003452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80a6 	beq.w	80035cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003484:	4b2a      	ldr	r3, [pc, #168]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b27      	ldr	r3, [pc, #156]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	4a26      	ldr	r2, [pc, #152]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	@ 0x58
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <HAL_RCC_OscConfig+0x508>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d118      	bne.n	80034ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCC_OscConfig+0x508>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <HAL_RCC_OscConfig+0x508>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c4:	f7fd fdea 	bl	800109c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fd fde6 	bl	800109c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e17a      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_RCC_OscConfig+0x508>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_OscConfig+0x4d8>
 80034f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003502:	e029      	b.n	8003558 <HAL_RCC_OscConfig+0x52c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d115      	bne.n	8003538 <HAL_RCC_OscConfig+0x50c>
 800350c:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	4a07      	ldr	r2, [pc, #28]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	4a03      	ldr	r2, [pc, #12]	@ (8003530 <HAL_RCC_OscConfig+0x504>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x52c>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	4b9c      	ldr	r3, [pc, #624]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	4a9b      	ldr	r2, [pc, #620]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003548:	4b98      	ldr	r3, [pc, #608]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	4a97      	ldr	r2, [pc, #604]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d016      	beq.n	800358e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fd9c 	bl	800109c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fd fd98 	bl	800109c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e12a      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	4b8b      	ldr	r3, [pc, #556]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ed      	beq.n	8003568 <HAL_RCC_OscConfig+0x53c>
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fd85 	bl	800109c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd fd81 	bl	800109c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e113      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ac:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ed      	bne.n	8003596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b7a      	ldr	r3, [pc, #488]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	4a79      	ldr	r2, [pc, #484]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80fe 	beq.w	80037d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	2b02      	cmp	r3, #2
 80035dc:	f040 80d0 	bne.w	8003780 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035e0:	4b72      	ldr	r3, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d130      	bne.n	8003656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	3b01      	subs	r3, #1
 8003600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d127      	bne.n	8003656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003610:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d11f      	bne.n	8003656 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003620:	2a07      	cmp	r2, #7
 8003622:	bf14      	ite	ne
 8003624:	2201      	movne	r2, #1
 8003626:	2200      	moveq	r2, #0
 8003628:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	3b01      	subs	r3, #1
 800363c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d109      	bne.n	8003656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d06e      	beq.n	8003734 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d069      	beq.n	8003730 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800365c:	4b53      	ldr	r3, [pc, #332]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0ad      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003678:	4b4c      	ldr	r3, [pc, #304]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4b      	ldr	r2, [pc, #300]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003684:	f7fd fd0a 	bl	800109c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fd06 	bl	800109c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e09a      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369e:	4b43      	ldr	r3, [pc, #268]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036aa:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	4b40      	ldr	r3, [pc, #256]	@ (80037b0 <HAL_RCC_OscConfig+0x784>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036ba:	3a01      	subs	r2, #1
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036c4:	0212      	lsls	r2, r2, #8
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036cc:	0852      	lsrs	r2, r2, #1
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0552      	lsls	r2, r2, #21
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0652      	lsls	r2, r2, #25
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036e4:	0912      	lsrs	r2, r2, #4
 80036e6:	0452      	lsls	r2, r2, #17
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4930      	ldr	r1, [pc, #192]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f0:	4b2e      	ldr	r3, [pc, #184]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2d      	ldr	r2, [pc, #180]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a2a      	ldr	r2, [pc, #168]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003708:	f7fd fcc8 	bl	800109c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fcc4 	bl	800109c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e058      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372e:	e050      	b.n	80037d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e04f      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003734:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d148      	bne.n	80037d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a19      	ldr	r2, [pc, #100]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003758:	f7fd fca0 	bl	800109c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd fc9c 	bl	800109c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e030      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x734>
 800377e:	e028      	b.n	80037d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d023      	beq.n	80037ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <HAL_RCC_OscConfig+0x780>)
 800378c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fd fc83 	bl	800109c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003798:	e00c      	b.n	80037b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7fd fc7f 	bl	800109c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d905      	bls.n	80037b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e013      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <HAL_RCC_OscConfig+0x7b0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1ec      	bne.n	800379a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_RCC_OscConfig+0x7b0>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4905      	ldr	r1, [pc, #20]	@ (80037dc <HAL_RCC_OscConfig+0x7b0>)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_OscConfig+0x7b4>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e001      	b.n	80037d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	feeefffc 	.word	0xfeeefffc

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0e7      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b72      	ldr	r3, [pc, #456]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	4970      	ldr	r1, [pc, #448]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b6e      	ldr	r3, [pc, #440]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cf      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003840:	429a      	cmp	r2, r3
 8003842:	d908      	bls.n	8003856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b63      	ldr	r3, [pc, #396]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4960      	ldr	r1, [pc, #384]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04c      	beq.n	80038fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0a6      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e09a      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e08e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e086      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b46      	ldr	r3, [pc, #280]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4943      	ldr	r1, [pc, #268]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd fbe6 	bl	800109c <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fd fbe2 	bl	800109c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e06e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b3a      	ldr	r3, [pc, #232]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003914:	429a      	cmp	r2, r3
 8003916:	d208      	bcs.n	800392a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b2e      	ldr	r3, [pc, #184]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	492b      	ldr	r1, [pc, #172]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392a:	4b29      	ldr	r3, [pc, #164]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d210      	bcs.n	800395a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4923      	ldr	r1, [pc, #140]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e036      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003966:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4918      	ldr	r1, [pc, #96]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003984:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4910      	ldr	r1, [pc, #64]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003998:	f000 f824 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	490b      	ldr	r1, [pc, #44]	@ (80039d8 <HAL_RCC_ClockConfig+0x1f4>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b8:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_ClockConfig+0x1fc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fb1d 	bl	8000ffc <HAL_InitTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c6:	7afb      	ldrb	r3, [r7, #11]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	080067dc 	.word	0x080067dc
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a18:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a24:	4b31      	ldr	r3, [pc, #196]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a40:	4a2b      	ldr	r2, [pc, #172]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e004      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d134      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xac>
 8003a88:	e005      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8c:	617b      	str	r3, [r7, #20]
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	0e5b      	lsrs	r3, r3, #25
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003adc:	69bb      	ldr	r3, [r7, #24]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	@ 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	080067f4 	.word	0x080067f4
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200

08003afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	@ (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	080067ec 	.word	0x080067ec

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b44:	f7ff ffda 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0adb      	lsrs	r3, r3, #11
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	@ (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	080067ec 	.word	0x080067ec

08003b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b84:	f7ff f9ee 	bl	8002f64 <HAL_PWREx_GetVoltageRange>
 8003b88:	6178      	str	r0, [r7, #20]
 8003b8a:	e014      	b.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	4a24      	ldr	r2, [pc, #144]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b98:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba4:	f7ff f9de 	bl	8002f64 <HAL_PWREx_GetVoltageRange>
 8003ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003baa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	4a1d      	ldr	r2, [pc, #116]	@ (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbc:	d10b      	bne.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b80      	cmp	r3, #128	@ 0x80
 8003bc2:	d919      	bls.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bc8:	d902      	bls.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bca:	2302      	movs	r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e013      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e010      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	d902      	bls.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bdc:	2303      	movs	r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e00a      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d102      	bne.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be8:	2302      	movs	r3, #2
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e004      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b70      	cmp	r3, #112	@ 0x70
 8003bf2:	d101      	bne.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	4909      	ldr	r1, [pc, #36]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40022000 	.word	0x40022000

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d041      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c50:	d02a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c56:	d824      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c62:	d81e      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6c:	d010      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c70:	4b86      	ldr	r3, [pc, #536]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a85      	ldr	r2, [pc, #532]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fabb 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3320      	adds	r3, #32
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fba6 	bl	80043e8 <RCCEx_PLLSAI2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb0:	4b76      	ldr	r3, [pc, #472]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cbe:	4973      	ldr	r1, [pc, #460]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cc6:	e001      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d041      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce0:	d02a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ce2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce6:	d824      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf2:	d81e      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cfe:	e018      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d00:	4b62      	ldr	r3, [pc, #392]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a61      	ldr	r2, [pc, #388]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d0c:	e015      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fa73 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d1e:	e00c      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3320      	adds	r3, #32
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb5e 	bl	80043e8 <RCCEx_PLLSAI2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	74fb      	strb	r3, [r7, #19]
      break;
 8003d36:	e000      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d40:	4b52      	ldr	r3, [pc, #328]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4e:	494f      	ldr	r1, [pc, #316]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d56:	e001      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a0 	beq.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	4a40      	ldr	r2, [pc, #256]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d90:	4b3e      	ldr	r3, [pc, #248]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da0:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a3a      	ldr	r2, [pc, #232]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003daa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dac:	f7fd f976 	bl	800109c <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db2:	e009      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fd f972 	bl	800109c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d902      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc8:	4b31      	ldr	r3, [pc, #196]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d15c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dda:	4b2c      	ldr	r3, [pc, #176]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01f      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d019      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df8:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e04:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e14:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd f931 	bl	800109c <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd f92d 	bl	800109c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d902      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	74fb      	strb	r3, [r7, #19]
            break;
 8003e54:	e006      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ec      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e7a:	4904      	ldr	r1, [pc, #16]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e82:	e009      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	74bb      	strb	r3, [r7, #18]
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e98:	7c7b      	ldrb	r3, [r7, #17]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b9e      	ldr	r3, [pc, #632]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea2:	4a9d      	ldr	r2, [pc, #628]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb6:	4b98      	ldr	r3, [pc, #608]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 0203 	bic.w	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	4994      	ldr	r1, [pc, #592]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 020c 	bic.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	498c      	ldr	r1, [pc, #560]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003efa:	4b87      	ldr	r3, [pc, #540]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	4983      	ldr	r1, [pc, #524]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	497b      	ldr	r1, [pc, #492]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f3e:	4b76      	ldr	r3, [pc, #472]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4c:	4972      	ldr	r1, [pc, #456]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f60:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	496a      	ldr	r1, [pc, #424]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f82:	4b65      	ldr	r3, [pc, #404]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	4961      	ldr	r1, [pc, #388]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb2:	4959      	ldr	r1, [pc, #356]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc6:	4b54      	ldr	r3, [pc, #336]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd4:	4950      	ldr	r1, [pc, #320]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	4948      	ldr	r1, [pc, #288]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800400a:	4b43      	ldr	r3, [pc, #268]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004018:	493f      	ldr	r1, [pc, #252]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d028      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403a:	4937      	ldr	r1, [pc, #220]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800404a:	d106      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404c:	4b32      	ldr	r3, [pc, #200]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004056:	60d3      	str	r3, [r2, #12]
 8004058:	e011      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004062:	d10c      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	2101      	movs	r1, #1
 800406a:	4618      	mov	r0, r3
 800406c:	f000 f8c8 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d028      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800408a:	4b23      	ldr	r3, [pc, #140]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004090:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	491f      	ldr	r1, [pc, #124]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a8:	d106      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b4:	60d3      	str	r3, [r2, #12]
 80040b6:	e011      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f899 	bl	8004200 <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02b      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f6:	4908      	ldr	r1, [pc, #32]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004106:	d109      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a02      	ldr	r2, [pc, #8]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
 8004114:	e014      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004124:	d10c      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f867 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02f      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800415a:	4928      	ldr	r1, [pc, #160]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800416a:	d10d      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f844 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	74bb      	strb	r3, [r7, #18]
 8004186:	e011      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004190:	d10c      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3320      	adds	r3, #32
 8004196:	2102      	movs	r1, #2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f925 	bl	80043e8 <RCCEx_PLLSAI2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b8:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c6:	490d      	ldr	r1, [pc, #52]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041da:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ea:	4904      	ldr	r1, [pc, #16]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000

08004200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800420e:	4b75      	ldr	r3, [pc, #468]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800421a:	4b72      	ldr	r3, [pc, #456]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d10d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
       ||
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004232:	4b6c      	ldr	r3, [pc, #432]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
       ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d047      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e044      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d018      	beq.n	8004286 <RCCEx_PLLSAI1_Config+0x86>
 8004254:	2b03      	cmp	r3, #3
 8004256:	d825      	bhi.n	80042a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004258:	2b01      	cmp	r3, #1
 800425a:	d002      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x62>
 800425c:	2b02      	cmp	r3, #2
 800425e:	d009      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x74>
 8004260:	e020      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004262:	4b60      	ldr	r3, [pc, #384]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11d      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004272:	e01a      	b.n	80042aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004274:	4b5b      	ldr	r3, [pc, #364]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d116      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004284:	e013      	b.n	80042ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004292:	4b54      	ldr	r3, [pc, #336]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a2:	e006      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	e004      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ba:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	430b      	orrs	r3, r1
 80042d0:	4944      	ldr	r1, [pc, #272]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d17d      	bne.n	80043d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042dc:	4b41      	ldr	r3, [pc, #260]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a40      	ldr	r2, [pc, #256]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fc fed8 	bl	800109c <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ee:	e009      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f0:	f7fc fed4 	bl	800109c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	73fb      	strb	r3, [r7, #15]
        break;
 8004302:	e005      	b.n	8004310 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004304:	4b37      	ldr	r3, [pc, #220]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ef      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d160      	bne.n	80043d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d111      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800431c:	4b31      	ldr	r3, [pc, #196]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6892      	ldr	r2, [r2, #8]
 800432c:	0211      	lsls	r1, r2, #8
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68d2      	ldr	r2, [r2, #12]
 8004332:	0912      	lsrs	r2, r2, #4
 8004334:	0452      	lsls	r2, r2, #17
 8004336:	430a      	orrs	r2, r1
 8004338:	492a      	ldr	r1, [pc, #168]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
 800433e:	e027      	b.n	8004390 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d112      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004346:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800434e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	0211      	lsls	r1, r2, #8
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6912      	ldr	r2, [r2, #16]
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0552      	lsls	r2, r2, #21
 8004362:	430a      	orrs	r2, r1
 8004364:	491f      	ldr	r1, [pc, #124]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
 800436a:	e011      	b.n	8004390 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	0211      	lsls	r1, r2, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6952      	ldr	r2, [r2, #20]
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0652      	lsls	r2, r2, #25
 8004388:	430a      	orrs	r2, r1
 800438a:	4916      	ldr	r1, [pc, #88]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800439a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fc fe7e 	bl	800109c <HAL_GetTick>
 80043a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a2:	e009      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a4:	f7fc fe7a 	bl	800109c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d902      	bls.n	80043b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	73fb      	strb	r3, [r7, #15]
          break;
 80043b6:	e005      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ef      	beq.n	80043a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043ca:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	4904      	ldr	r1, [pc, #16]	@ (80043e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000

080043e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043f6:	4b6a      	ldr	r3, [pc, #424]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004402:	4b67      	ldr	r3, [pc, #412]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0203 	and.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d10d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
       ||
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800441a:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
       ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d047      	beq.n	80044be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e044      	b.n	80044be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d018      	beq.n	800446e <RCCEx_PLLSAI2_Config+0x86>
 800443c:	2b03      	cmp	r3, #3
 800443e:	d825      	bhi.n	800448c <RCCEx_PLLSAI2_Config+0xa4>
 8004440:	2b01      	cmp	r3, #1
 8004442:	d002      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x62>
 8004444:	2b02      	cmp	r3, #2
 8004446:	d009      	beq.n	800445c <RCCEx_PLLSAI2_Config+0x74>
 8004448:	e020      	b.n	800448c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800444a:	4b55      	ldr	r3, [pc, #340]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11d      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445a:	e01a      	b.n	8004492 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800445c:	4b50      	ldr	r3, [pc, #320]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446c:	e013      	b.n	8004496 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800446e:	4b4c      	ldr	r3, [pc, #304]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800447a:	4b49      	ldr	r3, [pc, #292]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800448a:	e006      	b.n	800449a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      break;
 8004490:	e004      	b.n	800449c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800449a:	bf00      	nop
    }

    if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044a2:	4b3f      	ldr	r3, [pc, #252]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	430b      	orrs	r3, r1
 80044b8:	4939      	ldr	r1, [pc, #228]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d167      	bne.n	8004594 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044c4:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a35      	ldr	r2, [pc, #212]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fc fde4 	bl	800109c <HAL_GetTick>
 80044d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d6:	e009      	b.n	80044ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d8:	f7fc fde0 	bl	800109c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ea:	e005      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ec:	4b2c      	ldr	r3, [pc, #176]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ef      	bne.n	80044d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d14a      	bne.n	8004594 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d111      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004504:	4b26      	ldr	r3, [pc, #152]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800450c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6892      	ldr	r2, [r2, #8]
 8004514:	0211      	lsls	r1, r2, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	0912      	lsrs	r2, r2, #4
 800451c:	0452      	lsls	r2, r2, #17
 800451e:	430a      	orrs	r2, r1
 8004520:	491f      	ldr	r1, [pc, #124]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	614b      	str	r3, [r1, #20]
 8004526:	e011      	b.n	800454c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004528:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004530:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6892      	ldr	r2, [r2, #8]
 8004538:	0211      	lsls	r1, r2, #8
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6912      	ldr	r2, [r2, #16]
 800453e:	0852      	lsrs	r2, r2, #1
 8004540:	3a01      	subs	r2, #1
 8004542:	0652      	lsls	r2, r2, #25
 8004544:	430a      	orrs	r2, r1
 8004546:	4916      	ldr	r1, [pc, #88]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	4313      	orrs	r3, r2
 800454a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800454c:	4b14      	ldr	r3, [pc, #80]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a13      	ldr	r2, [pc, #76]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004556:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fc fda0 	bl	800109c <HAL_GetTick>
 800455c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800455e:	e009      	b.n	8004574 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004560:	f7fc fd9c 	bl	800109c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	73fb      	strb	r3, [r7, #15]
          break;
 8004572:	e005      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004574:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4904      	ldr	r1, [pc, #16]	@ (80045a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000

080045a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e040      	b.n	8004638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fb4a 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	@ 0x24
 80045d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fedc 	bl	80053a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fc21 	bl	8004e38 <UART_SetConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e01b      	b.n	8004638 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800460e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800461e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 ff5b 	bl	80054ec <UART_CheckIdleState>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	@ 0x28
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004654:	2b20      	cmp	r3, #32
 8004656:	d177      	bne.n	8004748 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_UART_Transmit+0x24>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e070      	b.n	800474a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2221      	movs	r2, #33	@ 0x21
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc fd11 	bl	800109c <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x68>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b0:	e02f      	b.n	8004712 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	@ 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 ffbd 	bl	800563c <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e03b      	b.n	800474a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e4:	b292      	uxth	r2, r2
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e007      	b.n	8004700 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1c9      	bne.n	80046b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2140      	movs	r1, #64	@ 0x40
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 ff87 	bl	800563c <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e005      	b.n	800474a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	@ 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004768:	2b20      	cmp	r3, #32
 800476a:	d137      	bne.n	80047dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Receive_IT+0x24>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e030      	b.n	80047de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HAL_UART_Receive_IT+0x94>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01f      	beq.n	80047cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d018      	beq.n	80047cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 ffa0 	bl	8005718 <UART_Start_Receive_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	e000      	b.n	80047de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3728      	adds	r7, #40	@ 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40008000 	.word	0x40008000

080047ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ba      	sub	sp, #232	@ 0xe8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004816:	f640 030f 	movw	r3, #2063	@ 0x80f
 800481a:	4013      	ands	r3, r2
 800481c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 82ca 	beq.w	8004dde <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      }
      return;
 8004852:	e2c4      	b.n	8004dde <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8117 	beq.w	8004a8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800486a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800486e:	4b85      	ldr	r3, [pc, #532]	@ (8004a84 <HAL_UART_IRQHandler+0x298>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 810a 	beq.w	8004a8c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0xbc>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_UART_IRQHandler+0xec>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2202      	movs	r2, #2
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0x11c>
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <HAL_UART_IRQHandler+0x18a>
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8230 	beq.w	8004de2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 ff68 	bl	80058a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	4a13      	ldr	r2, [pc, #76]	@ (8004a88 <HAL_UART_IRQHandler+0x29c>)
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f871 	bl	8002b2a <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00f      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9d4 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00b      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9d0 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e007      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9cc 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a7c:	e1b1      	b.n	8004de2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7e:	bf00      	nop
    return;
 8004a80:	e1af      	b.n	8004de2 <HAL_UART_IRQHandler+0x5f6>
 8004a82:	bf00      	nop
 8004a84:	04000120 	.word	0x04000120
 8004a88:	0800596d 	.word	0x0800596d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 816a 	bne.w	8004d6a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8163 	beq.w	8004d6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 815c 	beq.w	8004d6a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	f040 80d4 	bne.w	8004c72 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80ad 	beq.w	8004c3a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 80a5 	bcs.w	8004c3a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004af6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8086 	bne.w	8004c18 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1da      	bne.n	8004b0c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e1      	bne.n	8004b56 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e4      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd ff4b 	bl	8002aae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8f4 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c38:	e0d5      	b.n	8004de6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c44:	429a      	cmp	r2, r3
 8004c46:	f040 80ce 	bne.w	8004de6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	f040 80c5 	bne.w	8004de6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8d8 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
      return;
 8004c70:	e0b9      	b.n	8004de6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80ab 	beq.w	8004dea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a6 	beq.w	8004dea <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e4      	bne.n	8004c9e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e4      	bne.n	8004d20 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f85c 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d68:	e03f      	b.n	8004dea <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <HAL_UART_IRQHandler+0x5a8>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 ffe9 	bl	8005d64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d92:	e02d      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
    }
    return;
 8004dbc:	e017      	b.n	8004dee <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <HAL_UART_IRQHandler+0x604>
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fdde 	bl	8005998 <UART_EndTransmit_IT>
    return;
 8004ddc:	e008      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004dde:	bf00      	nop
 8004de0:	e006      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
    return;
 8004de2:	bf00      	nop
 8004de4:	e004      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
    return;
 8004dee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004df0:	37e8      	adds	r7, #232	@ 0xe8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e3c:	b08a      	sub	sp, #40	@ 0x28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4ba4      	ldr	r3, [pc, #656]	@ (80050f8 <UART_SetConfig+0x2c0>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a99      	ldr	r2, [pc, #612]	@ (80050fc <UART_SetConfig+0x2c4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a90      	ldr	r2, [pc, #576]	@ (8005100 <UART_SetConfig+0x2c8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d126      	bne.n	8004f10 <UART_SetConfig+0xd8>
 8004ec2:	4b90      	ldr	r3, [pc, #576]	@ (8005104 <UART_SetConfig+0x2cc>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d81b      	bhi.n	8004f08 <UART_SetConfig+0xd0>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <UART_SetConfig+0xa0>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004ee9 	.word	0x08004ee9
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f01 	.word	0x08004f01
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eee:	e116      	b.n	800511e <UART_SetConfig+0x2e6>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef6:	e112      	b.n	800511e <UART_SetConfig+0x2e6>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e10e      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e10a      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e106      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a7c      	ldr	r2, [pc, #496]	@ (8005108 <UART_SetConfig+0x2d0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d138      	bne.n	8004f8c <UART_SetConfig+0x154>
 8004f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005104 <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d82d      	bhi.n	8004f84 <UART_SetConfig+0x14c>
 8004f28:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <UART_SetConfig+0xf8>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004f85 	.word	0x08004f85
 8004f3c:	08004f85 	.word	0x08004f85
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f85 	.word	0x08004f85
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	08004f85 	.word	0x08004f85
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6a:	e0d8      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e0d4      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e0d0      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e0cc      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e0c8      	b.n	800511e <UART_SetConfig+0x2e6>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5e      	ldr	r2, [pc, #376]	@ (800510c <UART_SetConfig+0x2d4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d125      	bne.n	8004fe2 <UART_SetConfig+0x1aa>
 8004f96:	4b5b      	ldr	r3, [pc, #364]	@ (8005104 <UART_SetConfig+0x2cc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fa0:	2b30      	cmp	r3, #48	@ 0x30
 8004fa2:	d016      	beq.n	8004fd2 <UART_SetConfig+0x19a>
 8004fa4:	2b30      	cmp	r3, #48	@ 0x30
 8004fa6:	d818      	bhi.n	8004fda <UART_SetConfig+0x1a2>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d00a      	beq.n	8004fc2 <UART_SetConfig+0x18a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d814      	bhi.n	8004fda <UART_SetConfig+0x1a2>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <UART_SetConfig+0x182>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d008      	beq.n	8004fca <UART_SetConfig+0x192>
 8004fb8:	e00f      	b.n	8004fda <UART_SetConfig+0x1a2>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc0:	e0ad      	b.n	800511e <UART_SetConfig+0x2e6>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc8:	e0a9      	b.n	800511e <UART_SetConfig+0x2e6>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd0:	e0a5      	b.n	800511e <UART_SetConfig+0x2e6>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd8:	e0a1      	b.n	800511e <UART_SetConfig+0x2e6>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe0:	e09d      	b.n	800511e <UART_SetConfig+0x2e6>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8005110 <UART_SetConfig+0x2d8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d125      	bne.n	8005038 <UART_SetConfig+0x200>
 8004fec:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <UART_SetConfig+0x2cc>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ff8:	d016      	beq.n	8005028 <UART_SetConfig+0x1f0>
 8004ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ffc:	d818      	bhi.n	8005030 <UART_SetConfig+0x1f8>
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d00a      	beq.n	8005018 <UART_SetConfig+0x1e0>
 8005002:	2b80      	cmp	r3, #128	@ 0x80
 8005004:	d814      	bhi.n	8005030 <UART_SetConfig+0x1f8>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <UART_SetConfig+0x1d8>
 800500a:	2b40      	cmp	r3, #64	@ 0x40
 800500c:	d008      	beq.n	8005020 <UART_SetConfig+0x1e8>
 800500e:	e00f      	b.n	8005030 <UART_SetConfig+0x1f8>
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e082      	b.n	800511e <UART_SetConfig+0x2e6>
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501e:	e07e      	b.n	800511e <UART_SetConfig+0x2e6>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005026:	e07a      	b.n	800511e <UART_SetConfig+0x2e6>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502e:	e076      	b.n	800511e <UART_SetConfig+0x2e6>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005036:	e072      	b.n	800511e <UART_SetConfig+0x2e6>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a35      	ldr	r2, [pc, #212]	@ (8005114 <UART_SetConfig+0x2dc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d12a      	bne.n	8005098 <UART_SetConfig+0x260>
 8005042:	4b30      	ldr	r3, [pc, #192]	@ (8005104 <UART_SetConfig+0x2cc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005050:	d01a      	beq.n	8005088 <UART_SetConfig+0x250>
 8005052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005056:	d81b      	bhi.n	8005090 <UART_SetConfig+0x258>
 8005058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505c:	d00c      	beq.n	8005078 <UART_SetConfig+0x240>
 800505e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005062:	d815      	bhi.n	8005090 <UART_SetConfig+0x258>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <UART_SetConfig+0x238>
 8005068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506c:	d008      	beq.n	8005080 <UART_SetConfig+0x248>
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x258>
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e052      	b.n	800511e <UART_SetConfig+0x2e6>
 8005078:	2302      	movs	r3, #2
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e04e      	b.n	800511e <UART_SetConfig+0x2e6>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e04a      	b.n	800511e <UART_SetConfig+0x2e6>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e046      	b.n	800511e <UART_SetConfig+0x2e6>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e042      	b.n	800511e <UART_SetConfig+0x2e6>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a17      	ldr	r2, [pc, #92]	@ (80050fc <UART_SetConfig+0x2c4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d13a      	bne.n	8005118 <UART_SetConfig+0x2e0>
 80050a2:	4b18      	ldr	r3, [pc, #96]	@ (8005104 <UART_SetConfig+0x2cc>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050b0:	d01a      	beq.n	80050e8 <UART_SetConfig+0x2b0>
 80050b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050b6:	d81b      	bhi.n	80050f0 <UART_SetConfig+0x2b8>
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050bc:	d00c      	beq.n	80050d8 <UART_SetConfig+0x2a0>
 80050be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c2:	d815      	bhi.n	80050f0 <UART_SetConfig+0x2b8>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <UART_SetConfig+0x298>
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050cc:	d008      	beq.n	80050e0 <UART_SetConfig+0x2a8>
 80050ce:	e00f      	b.n	80050f0 <UART_SetConfig+0x2b8>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e022      	b.n	800511e <UART_SetConfig+0x2e6>
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e01e      	b.n	800511e <UART_SetConfig+0x2e6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e01a      	b.n	800511e <UART_SetConfig+0x2e6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e016      	b.n	800511e <UART_SetConfig+0x2e6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f6:	e012      	b.n	800511e <UART_SetConfig+0x2e6>
 80050f8:	efff69f3 	.word	0xefff69f3
 80050fc:	40008000 	.word	0x40008000
 8005100:	40013800 	.word	0x40013800
 8005104:	40021000 	.word	0x40021000
 8005108:	40004400 	.word	0x40004400
 800510c:	40004800 	.word	0x40004800
 8005110:	40004c00 	.word	0x40004c00
 8005114:	40005000 	.word	0x40005000
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a9f      	ldr	r2, [pc, #636]	@ (80053a0 <UART_SetConfig+0x568>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d17a      	bne.n	800521e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800512c:	2b08      	cmp	r3, #8
 800512e:	d824      	bhi.n	800517a <UART_SetConfig+0x342>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <UART_SetConfig+0x300>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800517b 	.word	0x0800517b
 8005140:	08005165 	.word	0x08005165
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800516b 	.word	0x0800516b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800517b 	.word	0x0800517b
 8005158:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe fcda 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8005160:	61f8      	str	r0, [r7, #28]
        break;
 8005162:	e010      	b.n	8005186 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b8f      	ldr	r3, [pc, #572]	@ (80053a4 <UART_SetConfig+0x56c>)
 8005166:	61fb      	str	r3, [r7, #28]
        break;
 8005168:	e00d      	b.n	8005186 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe fc3b 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800516e:	61f8      	str	r0, [r7, #28]
        break;
 8005170:	e009      	b.n	8005186 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005176:	61fb      	str	r3, [r7, #28]
        break;
 8005178:	e005      	b.n	8005186 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80fb 	beq.w	8005384 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	429a      	cmp	r2, r3
 800519c:	d305      	bcc.n	80051aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051b0:	e0e8      	b.n	8005384 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2200      	movs	r2, #0
 80051b6:	461c      	mov	r4, r3
 80051b8:	4615      	mov	r5, r2
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	022b      	lsls	r3, r5, #8
 80051c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051c8:	0222      	lsls	r2, r4, #8
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6849      	ldr	r1, [r1, #4]
 80051ce:	0849      	lsrs	r1, r1, #1
 80051d0:	2000      	movs	r0, #0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4681      	mov	r9, r0
 80051d6:	eb12 0a08 	adds.w	sl, r2, r8
 80051da:	eb43 0b09 	adc.w	fp, r3, r9
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	4650      	mov	r0, sl
 80051ee:	4659      	mov	r1, fp
 80051f0:	f7fb f846 	bl	8000280 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005202:	d308      	bcc.n	8005216 <UART_SetConfig+0x3de>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800520a:	d204      	bcs.n	8005216 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	e0b6      	b.n	8005384 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800521c:	e0b2      	b.n	8005384 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005226:	d15e      	bne.n	80052e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800522c:	2b08      	cmp	r3, #8
 800522e:	d828      	bhi.n	8005282 <UART_SetConfig+0x44a>
 8005230:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <UART_SetConfig+0x400>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800525d 	.word	0x0800525d
 800523c:	08005265 	.word	0x08005265
 8005240:	0800526d 	.word	0x0800526d
 8005244:	08005283 	.word	0x08005283
 8005248:	08005273 	.word	0x08005273
 800524c:	08005283 	.word	0x08005283
 8005250:	08005283 	.word	0x08005283
 8005254:	08005283 	.word	0x08005283
 8005258:	0800527b 	.word	0x0800527b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800525c:	f7fe fc5a 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8005260:	61f8      	str	r0, [r7, #28]
        break;
 8005262:	e014      	b.n	800528e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7fe fc6c 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8005268:	61f8      	str	r0, [r7, #28]
        break;
 800526a:	e010      	b.n	800528e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800526c:	4b4d      	ldr	r3, [pc, #308]	@ (80053a4 <UART_SetConfig+0x56c>)
 800526e:	61fb      	str	r3, [r7, #28]
        break;
 8005270:	e00d      	b.n	800528e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7fe fbb7 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005276:	61f8      	str	r0, [r7, #28]
        break;
 8005278:	e009      	b.n	800528e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800527e:	61fb      	str	r3, [r7, #28]
        break;
 8005280:	e005      	b.n	800528e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800528c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d077      	beq.n	8005384 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005a      	lsls	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b0f      	cmp	r3, #15
 80052ae:	d916      	bls.n	80052de <UART_SetConfig+0x4a6>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b6:	d212      	bcs.n	80052de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f023 030f 	bic.w	r3, r3, #15
 80052c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	8afa      	ldrh	r2, [r7, #22]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e052      	b.n	8005384 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052e4:	e04e      	b.n	8005384 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d827      	bhi.n	800533e <UART_SetConfig+0x506>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x4bc>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	0800533f 	.word	0x0800533f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800533f 	.word	0x0800533f
 800530c:	0800533f 	.word	0x0800533f
 8005310:	0800533f 	.word	0x0800533f
 8005314:	08005337 	.word	0x08005337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fe fbfc 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 800531c:	61f8      	str	r0, [r7, #28]
        break;
 800531e:	e014      	b.n	800534a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005320:	f7fe fc0e 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8005324:	61f8      	str	r0, [r7, #28]
        break;
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4b1e      	ldr	r3, [pc, #120]	@ (80053a4 <UART_SetConfig+0x56c>)
 800532a:	61fb      	str	r3, [r7, #28]
        break;
 800532c:	e00d      	b.n	800534a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fe fb59 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005332:	61f8      	str	r0, [r7, #28]
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	61fb      	str	r3, [r7, #28]
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005348:	bf00      	nop
    }

    if (pclk != 0U)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d019      	beq.n	8005384 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	085a      	lsrs	r2, r3, #1
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d909      	bls.n	800537e <UART_SetConfig+0x546>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005370:	d205      	bcs.n	800537e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
 800537c:	e002      	b.n	8005384 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005390:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	@ 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40008000 	.word	0x40008000
 80053a4:	00f42400 	.word	0x00f42400

080053a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01a      	beq.n	80054be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a6:	d10a      	bne.n	80054be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b098      	sub	sp, #96	@ 0x60
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054fc:	f7fb fdce 	bl	800109c <HAL_GetTick>
 8005500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d12e      	bne.n	800556e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f88c 	bl	800563c <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d021      	beq.n	800556e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800553e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005548:	647b      	str	r3, [r7, #68]	@ 0x44
 800554a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800554e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e062      	b.n	8005634 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b04      	cmp	r3, #4
 800557a:	d149      	bne.n	8005610 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f856 	bl	800563c <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d03c      	beq.n	8005610 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	623b      	str	r3, [r7, #32]
   return(result);
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e8:	61fa      	str	r2, [r7, #28]
 80055ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	617b      	str	r3, [r7, #20]
   return(result);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e011      	b.n	8005634 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3758      	adds	r7, #88	@ 0x58
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800564c:	e04f      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005654:	d04b      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fb fd21 	bl	800109c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <UART_WaitOnFlagUntilTimeout+0x30>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e04e      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d037      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b80      	cmp	r3, #128	@ 0x80
 8005682:	d034      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	d031      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d110      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2208      	movs	r2, #8
 800569e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f8ff 	bl	80058a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2208      	movs	r2, #8
 80056aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e029      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c8:	d111      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f8e5 	bl	80058a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e00f      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2300      	movne	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	429a      	cmp	r2, r3
 800570a:	d0a0      	beq.n	800564e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005718:	b480      	push	{r7}
 800571a:	b097      	sub	sp, #92	@ 0x5c
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574a:	d10e      	bne.n	800576a <UART_Start_Receive_IT+0x52>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <UART_Start_Receive_IT+0x48>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800575a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800575e:	e02d      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	22ff      	movs	r2, #255	@ 0xff
 8005764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005768:	e028      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <UART_Start_Receive_IT+0x76>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <UART_Start_Receive_IT+0x6c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	22ff      	movs	r2, #255	@ 0xff
 800577e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005782:	e01b      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	227f      	movs	r2, #127	@ 0x7f
 8005788:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800578c:	e016      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005796:	d10d      	bne.n	80057b4 <UART_Start_Receive_IT+0x9c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <UART_Start_Receive_IT+0x92>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	227f      	movs	r2, #127	@ 0x7f
 80057a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057a8:	e008      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	223f      	movs	r2, #63	@ 0x3f
 80057ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057b2:	e003      	b.n	80057bc <UART_Start_Receive_IT+0xa4>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2222      	movs	r2, #34	@ 0x22
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80057ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80057fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005808:	d107      	bne.n	800581a <UART_Start_Receive_IT+0x102>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a21      	ldr	r2, [pc, #132]	@ (800589c <UART_Start_Receive_IT+0x184>)
 8005816:	669a      	str	r2, [r3, #104]	@ 0x68
 8005818:	e002      	b.n	8005820 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a20      	ldr	r2, [pc, #128]	@ (80058a0 <UART_Start_Receive_IT+0x188>)
 800581e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d019      	beq.n	800585c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800583c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
 8005848:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800584c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_Start_Receive_IT+0x110>
 800585a:	e018      	b.n	800588e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	613b      	str	r3, [r7, #16]
   return(result);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f043 0320 	orr.w	r3, r3, #32
 8005870:	653b      	str	r3, [r7, #80]	@ 0x50
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800587a:	623b      	str	r3, [r7, #32]
 800587c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	61bb      	str	r3, [r7, #24]
   return(result);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e6      	bne.n	800585c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	375c      	adds	r7, #92	@ 0x5c
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	08005ba9 	.word	0x08005ba9
 80058a0:	080059ed 	.word	0x080059ed

080058a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b095      	sub	sp, #84	@ 0x54
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80058cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e6      	bne.n	80058ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005916:	2b01      	cmp	r3, #1
 8005918:	d118      	bne.n	800594c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60bb      	str	r3, [r7, #8]
   return(result);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	613b      	str	r3, [r7, #16]
   return(result);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005960:	bf00      	nop
 8005962:	3754      	adds	r7, #84	@ 0x54
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fa3e 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	613b      	str	r3, [r7, #16]
   return(result);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e6      	bne.n	80059a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fa0a 	bl	8004df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e4:	bf00      	nop
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b09c      	sub	sp, #112	@ 0x70
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a04:	2b22      	cmp	r3, #34	@ 0x22
 8005a06:	f040 80be 	bne.w	8005b86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a18:	b2d9      	uxtb	r1, r3
 8005a1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	400a      	ands	r2, r1
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 80a3 	bne.w	8005b9a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a34      	ldr	r2, [pc, #208]	@ (8005ba4 <UART_RxISR_8BIT+0x1b8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d01f      	beq.n	8005b18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	623b      	str	r3, [r7, #32]
   return(result);
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005afa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d12e      	bne.n	8005b7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	617b      	str	r3, [r7, #20]
   return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d103      	bne.n	8005b6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff f952 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b7c:	e00d      	b.n	8005b9a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fa fcf6 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8005b84:	e009      	b.n	8005b9a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	8b1b      	ldrh	r3, [r3, #24]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0208 	orr.w	r2, r2, #8
 8005b96:	b292      	uxth	r2, r2
 8005b98:	831a      	strh	r2, [r3, #24]
}
 8005b9a:	bf00      	nop
 8005b9c:	3770      	adds	r7, #112	@ 0x70
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40008000 	.word	0x40008000

08005ba8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b09c      	sub	sp, #112	@ 0x70
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc0:	2b22      	cmp	r3, #34	@ 0x22
 8005bc2:	f040 80be 	bne.w	8005d42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005bda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005bde:	4013      	ands	r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005be4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 80a3 	bne.w	8005d56 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c24:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c62:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <UART_RxISR_16BIT+0x1b8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01f      	beq.n	8005cd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d12e      	bne.n	8005d3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0310 	bic.w	r3, r3, #16
 8005cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d103      	bne.n	8005d2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2210      	movs	r2, #16
 8005d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff f874 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d38:	e00d      	b.n	8005d56 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fa fc18 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8005d40:	e009      	b.n	8005d56 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	8b1b      	ldrh	r3, [r3, #24]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0208 	orr.w	r2, r2, #8
 8005d52:	b292      	uxth	r2, r2
 8005d54:	831a      	strh	r2, [r3, #24]
}
 8005d56:	bf00      	nop
 8005d58:	3770      	adds	r7, #112	@ 0x70
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40008000 	.word	0x40008000

08005d64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <siprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b500      	push	{lr}
 8005d7c:	b09c      	sub	sp, #112	@ 0x70
 8005d7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d80:	9002      	str	r0, [sp, #8]
 8005d82:	9006      	str	r0, [sp, #24]
 8005d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d88:	4809      	ldr	r0, [pc, #36]	@ (8005db0 <siprintf+0x38>)
 8005d8a:	9107      	str	r1, [sp, #28]
 8005d8c:	9104      	str	r1, [sp, #16]
 8005d8e:	4909      	ldr	r1, [pc, #36]	@ (8005db4 <siprintf+0x3c>)
 8005d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	a902      	add	r1, sp, #8
 8005d9c:	f000 f8ae 	bl	8005efc <_svfiprintf_r>
 8005da0:	9b02      	ldr	r3, [sp, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	b01c      	add	sp, #112	@ 0x70
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	b003      	add	sp, #12
 8005dae:	4770      	bx	lr
 8005db0:	2000000c 	.word	0x2000000c
 8005db4:	ffff0208 	.word	0xffff0208

08005db8 <strncmp>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	b16a      	cbz	r2, 8005dd8 <strncmp+0x20>
 8005dbc:	3901      	subs	r1, #1
 8005dbe:	1884      	adds	r4, r0, r2
 8005dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d103      	bne.n	8005dd4 <strncmp+0x1c>
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	d001      	beq.n	8005dd4 <strncmp+0x1c>
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d1f5      	bne.n	8005dc0 <strncmp+0x8>
 8005dd4:	1ad0      	subs	r0, r2, r3
 8005dd6:	bd10      	pop	{r4, pc}
 8005dd8:	4610      	mov	r0, r2
 8005dda:	e7fc      	b.n	8005dd6 <strncmp+0x1e>

08005ddc <memset>:
 8005ddc:	4402      	add	r2, r0
 8005dde:	4603      	mov	r3, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <__errno>:
 8005dec:	4b01      	ldr	r3, [pc, #4]	@ (8005df4 <__errno+0x8>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000000c 	.word	0x2000000c

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8005e30 <__libc_init_array+0x38>)
 8005dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8005e34 <__libc_init_array+0x3c>)
 8005dfe:	1b64      	subs	r4, r4, r5
 8005e00:	10a4      	asrs	r4, r4, #2
 8005e02:	2600      	movs	r6, #0
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	4d0b      	ldr	r5, [pc, #44]	@ (8005e38 <__libc_init_array+0x40>)
 8005e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e3c <__libc_init_array+0x44>)
 8005e0c:	f000 fc66 	bl	80066dc <_init>
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	2600      	movs	r6, #0
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08006860 	.word	0x08006860
 8005e34:	08006860 	.word	0x08006860
 8005e38:	08006860 	.word	0x08006860
 8005e3c:	08006864 	.word	0x08006864

08005e40 <__retarget_lock_acquire_recursive>:
 8005e40:	4770      	bx	lr

08005e42 <__retarget_lock_release_recursive>:
 8005e42:	4770      	bx	lr

08005e44 <__ssputs_r>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	688e      	ldr	r6, [r1, #8]
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	42be      	cmp	r6, r7
 8005e4e:	680b      	ldr	r3, [r1, #0]
 8005e50:	4682      	mov	sl, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	4690      	mov	r8, r2
 8005e56:	d82d      	bhi.n	8005eb4 <__ssputs_r+0x70>
 8005e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e60:	d026      	beq.n	8005eb0 <__ssputs_r+0x6c>
 8005e62:	6965      	ldr	r5, [r4, #20]
 8005e64:	6909      	ldr	r1, [r1, #16]
 8005e66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e6a:	eba3 0901 	sub.w	r9, r3, r1
 8005e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e72:	1c7b      	adds	r3, r7, #1
 8005e74:	444b      	add	r3, r9
 8005e76:	106d      	asrs	r5, r5, #1
 8005e78:	429d      	cmp	r5, r3
 8005e7a:	bf38      	it	cc
 8005e7c:	461d      	movcc	r5, r3
 8005e7e:	0553      	lsls	r3, r2, #21
 8005e80:	d527      	bpl.n	8005ed2 <__ssputs_r+0x8e>
 8005e82:	4629      	mov	r1, r5
 8005e84:	f000 f958 	bl	8006138 <_malloc_r>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	b360      	cbz	r0, 8005ee6 <__ssputs_r+0xa2>
 8005e8c:	6921      	ldr	r1, [r4, #16]
 8005e8e:	464a      	mov	r2, r9
 8005e90:	f000 fbc4 	bl	800661c <memcpy>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	6126      	str	r6, [r4, #16]
 8005ea2:	6165      	str	r5, [r4, #20]
 8005ea4:	444e      	add	r6, r9
 8005ea6:	eba5 0509 	sub.w	r5, r5, r9
 8005eaa:	6026      	str	r6, [r4, #0]
 8005eac:	60a5      	str	r5, [r4, #8]
 8005eae:	463e      	mov	r6, r7
 8005eb0:	42be      	cmp	r6, r7
 8005eb2:	d900      	bls.n	8005eb6 <__ssputs_r+0x72>
 8005eb4:	463e      	mov	r6, r7
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4641      	mov	r1, r8
 8005ebc:	f000 fb84 	bl	80065c8 <memmove>
 8005ec0:	68a3      	ldr	r3, [r4, #8]
 8005ec2:	1b9b      	subs	r3, r3, r6
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	4433      	add	r3, r6
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	462a      	mov	r2, r5
 8005ed4:	f000 fb4a 	bl	800656c <_realloc_r>
 8005ed8:	4606      	mov	r6, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d1e0      	bne.n	8005ea0 <__ssputs_r+0x5c>
 8005ede:	6921      	ldr	r1, [r4, #16]
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	f000 fba9 	bl	8006638 <_free_r>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	f8ca 3000 	str.w	r3, [sl]
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ef8:	e7e9      	b.n	8005ece <__ssputs_r+0x8a>
	...

08005efc <_svfiprintf_r>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	4698      	mov	r8, r3
 8005f02:	898b      	ldrh	r3, [r1, #12]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	b09d      	sub	sp, #116	@ 0x74
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	d510      	bpl.n	8005f32 <_svfiprintf_r+0x36>
 8005f10:	690b      	ldr	r3, [r1, #16]
 8005f12:	b973      	cbnz	r3, 8005f32 <_svfiprintf_r+0x36>
 8005f14:	2140      	movs	r1, #64	@ 0x40
 8005f16:	f000 f90f 	bl	8006138 <_malloc_r>
 8005f1a:	6028      	str	r0, [r5, #0]
 8005f1c:	6128      	str	r0, [r5, #16]
 8005f1e:	b930      	cbnz	r0, 8005f2e <_svfiprintf_r+0x32>
 8005f20:	230c      	movs	r3, #12
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f28:	b01d      	add	sp, #116	@ 0x74
 8005f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2e:	2340      	movs	r3, #64	@ 0x40
 8005f30:	616b      	str	r3, [r5, #20]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f36:	2320      	movs	r3, #32
 8005f38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f40:	2330      	movs	r3, #48	@ 0x30
 8005f42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060e0 <_svfiprintf_r+0x1e4>
 8005f46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f4a:	f04f 0901 	mov.w	r9, #1
 8005f4e:	4623      	mov	r3, r4
 8005f50:	469a      	mov	sl, r3
 8005f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f56:	b10a      	cbz	r2, 8005f5c <_svfiprintf_r+0x60>
 8005f58:	2a25      	cmp	r2, #37	@ 0x25
 8005f5a:	d1f9      	bne.n	8005f50 <_svfiprintf_r+0x54>
 8005f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f60:	d00b      	beq.n	8005f7a <_svfiprintf_r+0x7e>
 8005f62:	465b      	mov	r3, fp
 8005f64:	4622      	mov	r2, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f7ff ff6b 	bl	8005e44 <__ssputs_r>
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f000 80a7 	beq.w	80060c2 <_svfiprintf_r+0x1c6>
 8005f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f76:	445a      	add	r2, fp
 8005f78:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 809f 	beq.w	80060c2 <_svfiprintf_r+0x1c6>
 8005f84:	2300      	movs	r3, #0
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f8e:	f10a 0a01 	add.w	sl, sl, #1
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	9307      	str	r3, [sp, #28]
 8005f96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f9c:	4654      	mov	r4, sl
 8005f9e:	2205      	movs	r2, #5
 8005fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa4:	484e      	ldr	r0, [pc, #312]	@ (80060e0 <_svfiprintf_r+0x1e4>)
 8005fa6:	f7fa f91b 	bl	80001e0 <memchr>
 8005faa:	9a04      	ldr	r2, [sp, #16]
 8005fac:	b9d8      	cbnz	r0, 8005fe6 <_svfiprintf_r+0xea>
 8005fae:	06d0      	lsls	r0, r2, #27
 8005fb0:	bf44      	itt	mi
 8005fb2:	2320      	movmi	r3, #32
 8005fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb8:	0711      	lsls	r1, r2, #28
 8005fba:	bf44      	itt	mi
 8005fbc:	232b      	movmi	r3, #43	@ 0x2b
 8005fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc8:	d015      	beq.n	8005ff6 <_svfiprintf_r+0xfa>
 8005fca:	9a07      	ldr	r2, [sp, #28]
 8005fcc:	4654      	mov	r4, sl
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f04f 0c0a 	mov.w	ip, #10
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fda:	3b30      	subs	r3, #48	@ 0x30
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	d94b      	bls.n	8006078 <_svfiprintf_r+0x17c>
 8005fe0:	b1b0      	cbz	r0, 8006010 <_svfiprintf_r+0x114>
 8005fe2:	9207      	str	r2, [sp, #28]
 8005fe4:	e014      	b.n	8006010 <_svfiprintf_r+0x114>
 8005fe6:	eba0 0308 	sub.w	r3, r0, r8
 8005fea:	fa09 f303 	lsl.w	r3, r9, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	46a2      	mov	sl, r4
 8005ff4:	e7d2      	b.n	8005f9c <_svfiprintf_r+0xa0>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	1d19      	adds	r1, r3, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	9103      	str	r1, [sp, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfbb      	ittet	lt
 8006002:	425b      	neglt	r3, r3
 8006004:	f042 0202 	orrlt.w	r2, r2, #2
 8006008:	9307      	strge	r3, [sp, #28]
 800600a:	9307      	strlt	r3, [sp, #28]
 800600c:	bfb8      	it	lt
 800600e:	9204      	strlt	r2, [sp, #16]
 8006010:	7823      	ldrb	r3, [r4, #0]
 8006012:	2b2e      	cmp	r3, #46	@ 0x2e
 8006014:	d10a      	bne.n	800602c <_svfiprintf_r+0x130>
 8006016:	7863      	ldrb	r3, [r4, #1]
 8006018:	2b2a      	cmp	r3, #42	@ 0x2a
 800601a:	d132      	bne.n	8006082 <_svfiprintf_r+0x186>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	9203      	str	r2, [sp, #12]
 8006024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006028:	3402      	adds	r4, #2
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060f0 <_svfiprintf_r+0x1f4>
 8006030:	7821      	ldrb	r1, [r4, #0]
 8006032:	2203      	movs	r2, #3
 8006034:	4650      	mov	r0, sl
 8006036:	f7fa f8d3 	bl	80001e0 <memchr>
 800603a:	b138      	cbz	r0, 800604c <_svfiprintf_r+0x150>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	eba0 000a 	sub.w	r0, r0, sl
 8006042:	2240      	movs	r2, #64	@ 0x40
 8006044:	4082      	lsls	r2, r0
 8006046:	4313      	orrs	r3, r2
 8006048:	3401      	adds	r4, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006050:	4824      	ldr	r0, [pc, #144]	@ (80060e4 <_svfiprintf_r+0x1e8>)
 8006052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006056:	2206      	movs	r2, #6
 8006058:	f7fa f8c2 	bl	80001e0 <memchr>
 800605c:	2800      	cmp	r0, #0
 800605e:	d036      	beq.n	80060ce <_svfiprintf_r+0x1d2>
 8006060:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <_svfiprintf_r+0x1ec>)
 8006062:	bb1b      	cbnz	r3, 80060ac <_svfiprintf_r+0x1b0>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	3307      	adds	r3, #7
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	3308      	adds	r3, #8
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006072:	4433      	add	r3, r6
 8006074:	9309      	str	r3, [sp, #36]	@ 0x24
 8006076:	e76a      	b.n	8005f4e <_svfiprintf_r+0x52>
 8006078:	fb0c 3202 	mla	r2, ip, r2, r3
 800607c:	460c      	mov	r4, r1
 800607e:	2001      	movs	r0, #1
 8006080:	e7a8      	b.n	8005fd4 <_svfiprintf_r+0xd8>
 8006082:	2300      	movs	r3, #0
 8006084:	3401      	adds	r4, #1
 8006086:	9305      	str	r3, [sp, #20]
 8006088:	4619      	mov	r1, r3
 800608a:	f04f 0c0a 	mov.w	ip, #10
 800608e:	4620      	mov	r0, r4
 8006090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006094:	3a30      	subs	r2, #48	@ 0x30
 8006096:	2a09      	cmp	r2, #9
 8006098:	d903      	bls.n	80060a2 <_svfiprintf_r+0x1a6>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0c6      	beq.n	800602c <_svfiprintf_r+0x130>
 800609e:	9105      	str	r1, [sp, #20]
 80060a0:	e7c4      	b.n	800602c <_svfiprintf_r+0x130>
 80060a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a6:	4604      	mov	r4, r0
 80060a8:	2301      	movs	r3, #1
 80060aa:	e7f0      	b.n	800608e <_svfiprintf_r+0x192>
 80060ac:	ab03      	add	r3, sp, #12
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	462a      	mov	r2, r5
 80060b2:	4b0e      	ldr	r3, [pc, #56]	@ (80060ec <_svfiprintf_r+0x1f0>)
 80060b4:	a904      	add	r1, sp, #16
 80060b6:	4638      	mov	r0, r7
 80060b8:	f3af 8000 	nop.w
 80060bc:	1c42      	adds	r2, r0, #1
 80060be:	4606      	mov	r6, r0
 80060c0:	d1d6      	bne.n	8006070 <_svfiprintf_r+0x174>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	065b      	lsls	r3, r3, #25
 80060c6:	f53f af2d 	bmi.w	8005f24 <_svfiprintf_r+0x28>
 80060ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060cc:	e72c      	b.n	8005f28 <_svfiprintf_r+0x2c>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <_svfiprintf_r+0x1f0>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4638      	mov	r0, r7
 80060da:	f000 f91b 	bl	8006314 <_printf_i>
 80060de:	e7ed      	b.n	80060bc <_svfiprintf_r+0x1c0>
 80060e0:	08006824 	.word	0x08006824
 80060e4:	0800682e 	.word	0x0800682e
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005e45 	.word	0x08005e45
 80060f0:	0800682a 	.word	0x0800682a

080060f4 <sbrk_aligned>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006134 <sbrk_aligned+0x40>)
 80060f8:	460c      	mov	r4, r1
 80060fa:	6831      	ldr	r1, [r6, #0]
 80060fc:	4605      	mov	r5, r0
 80060fe:	b911      	cbnz	r1, 8006106 <sbrk_aligned+0x12>
 8006100:	f000 fa7c 	bl	80065fc <_sbrk_r>
 8006104:	6030      	str	r0, [r6, #0]
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f000 fa77 	bl	80065fc <_sbrk_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d103      	bne.n	800611a <sbrk_aligned+0x26>
 8006112:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006116:	4620      	mov	r0, r4
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	1cc4      	adds	r4, r0, #3
 800611c:	f024 0403 	bic.w	r4, r4, #3
 8006120:	42a0      	cmp	r0, r4
 8006122:	d0f8      	beq.n	8006116 <sbrk_aligned+0x22>
 8006124:	1a21      	subs	r1, r4, r0
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fa68 	bl	80065fc <_sbrk_r>
 800612c:	3001      	adds	r0, #1
 800612e:	d1f2      	bne.n	8006116 <sbrk_aligned+0x22>
 8006130:	e7ef      	b.n	8006112 <sbrk_aligned+0x1e>
 8006132:	bf00      	nop
 8006134:	2000047c 	.word	0x2000047c

08006138 <_malloc_r>:
 8006138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613c:	1ccd      	adds	r5, r1, #3
 800613e:	f025 0503 	bic.w	r5, r5, #3
 8006142:	3508      	adds	r5, #8
 8006144:	2d0c      	cmp	r5, #12
 8006146:	bf38      	it	cc
 8006148:	250c      	movcc	r5, #12
 800614a:	2d00      	cmp	r5, #0
 800614c:	4606      	mov	r6, r0
 800614e:	db01      	blt.n	8006154 <_malloc_r+0x1c>
 8006150:	42a9      	cmp	r1, r5
 8006152:	d904      	bls.n	800615e <_malloc_r+0x26>
 8006154:	230c      	movs	r3, #12
 8006156:	6033      	str	r3, [r6, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006234 <_malloc_r+0xfc>
 8006162:	f000 f9f7 	bl	8006554 <__malloc_lock>
 8006166:	f8d8 3000 	ldr.w	r3, [r8]
 800616a:	461c      	mov	r4, r3
 800616c:	bb44      	cbnz	r4, 80061c0 <_malloc_r+0x88>
 800616e:	4629      	mov	r1, r5
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ffbf 	bl	80060f4 <sbrk_aligned>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	4604      	mov	r4, r0
 800617a:	d158      	bne.n	800622e <_malloc_r+0xf6>
 800617c:	f8d8 4000 	ldr.w	r4, [r8]
 8006180:	4627      	mov	r7, r4
 8006182:	2f00      	cmp	r7, #0
 8006184:	d143      	bne.n	800620e <_malloc_r+0xd6>
 8006186:	2c00      	cmp	r4, #0
 8006188:	d04b      	beq.n	8006222 <_malloc_r+0xea>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4639      	mov	r1, r7
 800618e:	4630      	mov	r0, r6
 8006190:	eb04 0903 	add.w	r9, r4, r3
 8006194:	f000 fa32 	bl	80065fc <_sbrk_r>
 8006198:	4581      	cmp	r9, r0
 800619a:	d142      	bne.n	8006222 <_malloc_r+0xea>
 800619c:	6821      	ldr	r1, [r4, #0]
 800619e:	1a6d      	subs	r5, r5, r1
 80061a0:	4629      	mov	r1, r5
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7ff ffa6 	bl	80060f4 <sbrk_aligned>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d03a      	beq.n	8006222 <_malloc_r+0xea>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	442b      	add	r3, r5
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	f8d8 3000 	ldr.w	r3, [r8]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	bb62      	cbnz	r2, 8006214 <_malloc_r+0xdc>
 80061ba:	f8c8 7000 	str.w	r7, [r8]
 80061be:	e00f      	b.n	80061e0 <_malloc_r+0xa8>
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	1b52      	subs	r2, r2, r5
 80061c4:	d420      	bmi.n	8006208 <_malloc_r+0xd0>
 80061c6:	2a0b      	cmp	r2, #11
 80061c8:	d917      	bls.n	80061fa <_malloc_r+0xc2>
 80061ca:	1961      	adds	r1, r4, r5
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	6025      	str	r5, [r4, #0]
 80061d0:	bf18      	it	ne
 80061d2:	6059      	strne	r1, [r3, #4]
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	bf08      	it	eq
 80061d8:	f8c8 1000 	streq.w	r1, [r8]
 80061dc:	5162      	str	r2, [r4, r5]
 80061de:	604b      	str	r3, [r1, #4]
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f9bd 	bl	8006560 <__malloc_unlock>
 80061e6:	f104 000b 	add.w	r0, r4, #11
 80061ea:	1d23      	adds	r3, r4, #4
 80061ec:	f020 0007 	bic.w	r0, r0, #7
 80061f0:	1ac2      	subs	r2, r0, r3
 80061f2:	bf1c      	itt	ne
 80061f4:	1a1b      	subne	r3, r3, r0
 80061f6:	50a3      	strne	r3, [r4, r2]
 80061f8:	e7af      	b.n	800615a <_malloc_r+0x22>
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bf0c      	ite	eq
 8006200:	f8c8 2000 	streq.w	r2, [r8]
 8006204:	605a      	strne	r2, [r3, #4]
 8006206:	e7eb      	b.n	80061e0 <_malloc_r+0xa8>
 8006208:	4623      	mov	r3, r4
 800620a:	6864      	ldr	r4, [r4, #4]
 800620c:	e7ae      	b.n	800616c <_malloc_r+0x34>
 800620e:	463c      	mov	r4, r7
 8006210:	687f      	ldr	r7, [r7, #4]
 8006212:	e7b6      	b.n	8006182 <_malloc_r+0x4a>
 8006214:	461a      	mov	r2, r3
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	42a3      	cmp	r3, r4
 800621a:	d1fb      	bne.n	8006214 <_malloc_r+0xdc>
 800621c:	2300      	movs	r3, #0
 800621e:	6053      	str	r3, [r2, #4]
 8006220:	e7de      	b.n	80061e0 <_malloc_r+0xa8>
 8006222:	230c      	movs	r3, #12
 8006224:	6033      	str	r3, [r6, #0]
 8006226:	4630      	mov	r0, r6
 8006228:	f000 f99a 	bl	8006560 <__malloc_unlock>
 800622c:	e794      	b.n	8006158 <_malloc_r+0x20>
 800622e:	6005      	str	r5, [r0, #0]
 8006230:	e7d6      	b.n	80061e0 <_malloc_r+0xa8>
 8006232:	bf00      	nop
 8006234:	20000480 	.word	0x20000480

08006238 <_printf_common>:
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	4616      	mov	r6, r2
 800623e:	4698      	mov	r8, r3
 8006240:	688a      	ldr	r2, [r1, #8]
 8006242:	690b      	ldr	r3, [r1, #16]
 8006244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006248:	4293      	cmp	r3, r2
 800624a:	bfb8      	it	lt
 800624c:	4613      	movlt	r3, r2
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006254:	4607      	mov	r7, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b10a      	cbz	r2, 800625e <_printf_common+0x26>
 800625a:	3301      	adds	r3, #1
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	0699      	lsls	r1, r3, #26
 8006262:	bf42      	ittt	mi
 8006264:	6833      	ldrmi	r3, [r6, #0]
 8006266:	3302      	addmi	r3, #2
 8006268:	6033      	strmi	r3, [r6, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	f015 0506 	ands.w	r5, r5, #6
 8006270:	d106      	bne.n	8006280 <_printf_common+0x48>
 8006272:	f104 0a19 	add.w	sl, r4, #25
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	6832      	ldr	r2, [r6, #0]
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	42ab      	cmp	r3, r5
 800627e:	dc26      	bgt.n	80062ce <_printf_common+0x96>
 8006280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	3b00      	subs	r3, #0
 8006288:	bf18      	it	ne
 800628a:	2301      	movne	r3, #1
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d42b      	bmi.n	80062e8 <_printf_common+0xb0>
 8006290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006294:	4641      	mov	r1, r8
 8006296:	4638      	mov	r0, r7
 8006298:	47c8      	blx	r9
 800629a:	3001      	adds	r0, #1
 800629c:	d01e      	beq.n	80062dc <_printf_common+0xa4>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	f003 0306 	and.w	r3, r3, #6
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	bf02      	ittt	eq
 80062aa:	68e5      	ldreq	r5, [r4, #12]
 80062ac:	6833      	ldreq	r3, [r6, #0]
 80062ae:	1aed      	subeq	r5, r5, r3
 80062b0:	68a3      	ldr	r3, [r4, #8]
 80062b2:	bf0c      	ite	eq
 80062b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b8:	2500      	movne	r5, #0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bfc4      	itt	gt
 80062be:	1a9b      	subgt	r3, r3, r2
 80062c0:	18ed      	addgt	r5, r5, r3
 80062c2:	2600      	movs	r6, #0
 80062c4:	341a      	adds	r4, #26
 80062c6:	42b5      	cmp	r5, r6
 80062c8:	d11a      	bne.n	8006300 <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e008      	b.n	80062e0 <_printf_common+0xa8>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4652      	mov	r2, sl
 80062d2:	4641      	mov	r1, r8
 80062d4:	4638      	mov	r0, r7
 80062d6:	47c8      	blx	r9
 80062d8:	3001      	adds	r0, #1
 80062da:	d103      	bne.n	80062e4 <_printf_common+0xac>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	3501      	adds	r5, #1
 80062e6:	e7c6      	b.n	8006276 <_printf_common+0x3e>
 80062e8:	18e1      	adds	r1, r4, r3
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	2030      	movs	r0, #48	@ 0x30
 80062ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062f2:	4422      	add	r2, r4
 80062f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062fc:	3302      	adds	r3, #2
 80062fe:	e7c7      	b.n	8006290 <_printf_common+0x58>
 8006300:	2301      	movs	r3, #1
 8006302:	4622      	mov	r2, r4
 8006304:	4641      	mov	r1, r8
 8006306:	4638      	mov	r0, r7
 8006308:	47c8      	blx	r9
 800630a:	3001      	adds	r0, #1
 800630c:	d0e6      	beq.n	80062dc <_printf_common+0xa4>
 800630e:	3601      	adds	r6, #1
 8006310:	e7d9      	b.n	80062c6 <_printf_common+0x8e>
	...

08006314 <_printf_i>:
 8006314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	7e0f      	ldrb	r7, [r1, #24]
 800631a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800631c:	2f78      	cmp	r7, #120	@ 0x78
 800631e:	4691      	mov	r9, r2
 8006320:	4680      	mov	r8, r0
 8006322:	460c      	mov	r4, r1
 8006324:	469a      	mov	sl, r3
 8006326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800632a:	d807      	bhi.n	800633c <_printf_i+0x28>
 800632c:	2f62      	cmp	r7, #98	@ 0x62
 800632e:	d80a      	bhi.n	8006346 <_printf_i+0x32>
 8006330:	2f00      	cmp	r7, #0
 8006332:	f000 80d2 	beq.w	80064da <_printf_i+0x1c6>
 8006336:	2f58      	cmp	r7, #88	@ 0x58
 8006338:	f000 80b9 	beq.w	80064ae <_printf_i+0x19a>
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006344:	e03a      	b.n	80063bc <_printf_i+0xa8>
 8006346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800634a:	2b15      	cmp	r3, #21
 800634c:	d8f6      	bhi.n	800633c <_printf_i+0x28>
 800634e:	a101      	add	r1, pc, #4	@ (adr r1, 8006354 <_printf_i+0x40>)
 8006350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006354:	080063ad 	.word	0x080063ad
 8006358:	080063c1 	.word	0x080063c1
 800635c:	0800633d 	.word	0x0800633d
 8006360:	0800633d 	.word	0x0800633d
 8006364:	0800633d 	.word	0x0800633d
 8006368:	0800633d 	.word	0x0800633d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800633d 	.word	0x0800633d
 8006374:	0800633d 	.word	0x0800633d
 8006378:	0800633d 	.word	0x0800633d
 800637c:	0800633d 	.word	0x0800633d
 8006380:	080064c1 	.word	0x080064c1
 8006384:	080063eb 	.word	0x080063eb
 8006388:	0800647b 	.word	0x0800647b
 800638c:	0800633d 	.word	0x0800633d
 8006390:	0800633d 	.word	0x0800633d
 8006394:	080064e3 	.word	0x080064e3
 8006398:	0800633d 	.word	0x0800633d
 800639c:	080063eb 	.word	0x080063eb
 80063a0:	0800633d 	.word	0x0800633d
 80063a4:	0800633d 	.word	0x0800633d
 80063a8:	08006483 	.word	0x08006483
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6032      	str	r2, [r6, #0]
 80063b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063bc:	2301      	movs	r3, #1
 80063be:	e09d      	b.n	80064fc <_printf_i+0x1e8>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	6031      	str	r1, [r6, #0]
 80063c8:	0606      	lsls	r6, r0, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xbc>
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	e003      	b.n	80063d8 <_printf_i+0xc4>
 80063d0:	0645      	lsls	r5, r0, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xb8>
 80063d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063d8:	2d00      	cmp	r5, #0
 80063da:	da03      	bge.n	80063e4 <_printf_i+0xd0>
 80063dc:	232d      	movs	r3, #45	@ 0x2d
 80063de:	426d      	negs	r5, r5
 80063e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e4:	4859      	ldr	r0, [pc, #356]	@ (800654c <_printf_i+0x238>)
 80063e6:	230a      	movs	r3, #10
 80063e8:	e011      	b.n	800640e <_printf_i+0xfa>
 80063ea:	6821      	ldr	r1, [r4, #0]
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	0608      	lsls	r0, r1, #24
 80063f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063f4:	d402      	bmi.n	80063fc <_printf_i+0xe8>
 80063f6:	0649      	lsls	r1, r1, #25
 80063f8:	bf48      	it	mi
 80063fa:	b2ad      	uxthmi	r5, r5
 80063fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063fe:	4853      	ldr	r0, [pc, #332]	@ (800654c <_printf_i+0x238>)
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	bf14      	ite	ne
 8006404:	230a      	movne	r3, #10
 8006406:	2308      	moveq	r3, #8
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800640e:	6866      	ldr	r6, [r4, #4]
 8006410:	60a6      	str	r6, [r4, #8]
 8006412:	2e00      	cmp	r6, #0
 8006414:	bfa2      	ittt	ge
 8006416:	6821      	ldrge	r1, [r4, #0]
 8006418:	f021 0104 	bicge.w	r1, r1, #4
 800641c:	6021      	strge	r1, [r4, #0]
 800641e:	b90d      	cbnz	r5, 8006424 <_printf_i+0x110>
 8006420:	2e00      	cmp	r6, #0
 8006422:	d04b      	beq.n	80064bc <_printf_i+0x1a8>
 8006424:	4616      	mov	r6, r2
 8006426:	fbb5 f1f3 	udiv	r1, r5, r3
 800642a:	fb03 5711 	mls	r7, r3, r1, r5
 800642e:	5dc7      	ldrb	r7, [r0, r7]
 8006430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006434:	462f      	mov	r7, r5
 8006436:	42bb      	cmp	r3, r7
 8006438:	460d      	mov	r5, r1
 800643a:	d9f4      	bls.n	8006426 <_printf_i+0x112>
 800643c:	2b08      	cmp	r3, #8
 800643e:	d10b      	bne.n	8006458 <_printf_i+0x144>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	07df      	lsls	r7, r3, #31
 8006444:	d508      	bpl.n	8006458 <_printf_i+0x144>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	6861      	ldr	r1, [r4, #4]
 800644a:	4299      	cmp	r1, r3
 800644c:	bfde      	ittt	le
 800644e:	2330      	movle	r3, #48	@ 0x30
 8006450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006454:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006458:	1b92      	subs	r2, r2, r6
 800645a:	6122      	str	r2, [r4, #16]
 800645c:	f8cd a000 	str.w	sl, [sp]
 8006460:	464b      	mov	r3, r9
 8006462:	aa03      	add	r2, sp, #12
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff fee6 	bl	8006238 <_printf_common>
 800646c:	3001      	adds	r0, #1
 800646e:	d14a      	bne.n	8006506 <_printf_i+0x1f2>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006474:	b004      	add	sp, #16
 8006476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f043 0320 	orr.w	r3, r3, #32
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	4833      	ldr	r0, [pc, #204]	@ (8006550 <_printf_i+0x23c>)
 8006484:	2778      	movs	r7, #120	@ 0x78
 8006486:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	6831      	ldr	r1, [r6, #0]
 800648e:	061f      	lsls	r7, r3, #24
 8006490:	f851 5b04 	ldr.w	r5, [r1], #4
 8006494:	d402      	bmi.n	800649c <_printf_i+0x188>
 8006496:	065f      	lsls	r7, r3, #25
 8006498:	bf48      	it	mi
 800649a:	b2ad      	uxthmi	r5, r5
 800649c:	6031      	str	r1, [r6, #0]
 800649e:	07d9      	lsls	r1, r3, #31
 80064a0:	bf44      	itt	mi
 80064a2:	f043 0320 	orrmi.w	r3, r3, #32
 80064a6:	6023      	strmi	r3, [r4, #0]
 80064a8:	b11d      	cbz	r5, 80064b2 <_printf_i+0x19e>
 80064aa:	2310      	movs	r3, #16
 80064ac:	e7ac      	b.n	8006408 <_printf_i+0xf4>
 80064ae:	4827      	ldr	r0, [pc, #156]	@ (800654c <_printf_i+0x238>)
 80064b0:	e7e9      	b.n	8006486 <_printf_i+0x172>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f023 0320 	bic.w	r3, r3, #32
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	e7f6      	b.n	80064aa <_printf_i+0x196>
 80064bc:	4616      	mov	r6, r2
 80064be:	e7bd      	b.n	800643c <_printf_i+0x128>
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	6961      	ldr	r1, [r4, #20]
 80064c6:	1d18      	adds	r0, r3, #4
 80064c8:	6030      	str	r0, [r6, #0]
 80064ca:	062e      	lsls	r6, r5, #24
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0x1c0>
 80064d0:	6019      	str	r1, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0x1c6>
 80064d4:	0668      	lsls	r0, r5, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0x1bc>
 80064d8:	8019      	strh	r1, [r3, #0]
 80064da:	2300      	movs	r3, #0
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	4616      	mov	r6, r2
 80064e0:	e7bc      	b.n	800645c <_printf_i+0x148>
 80064e2:	6833      	ldr	r3, [r6, #0]
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	6032      	str	r2, [r6, #0]
 80064e8:	681e      	ldr	r6, [r3, #0]
 80064ea:	6862      	ldr	r2, [r4, #4]
 80064ec:	2100      	movs	r1, #0
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7f9 fe76 	bl	80001e0 <memchr>
 80064f4:	b108      	cbz	r0, 80064fa <_printf_i+0x1e6>
 80064f6:	1b80      	subs	r0, r0, r6
 80064f8:	6060      	str	r0, [r4, #4]
 80064fa:	6863      	ldr	r3, [r4, #4]
 80064fc:	6123      	str	r3, [r4, #16]
 80064fe:	2300      	movs	r3, #0
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006504:	e7aa      	b.n	800645c <_printf_i+0x148>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	4632      	mov	r2, r6
 800650a:	4649      	mov	r1, r9
 800650c:	4640      	mov	r0, r8
 800650e:	47d0      	blx	sl
 8006510:	3001      	adds	r0, #1
 8006512:	d0ad      	beq.n	8006470 <_printf_i+0x15c>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	079b      	lsls	r3, r3, #30
 8006518:	d413      	bmi.n	8006542 <_printf_i+0x22e>
 800651a:	68e0      	ldr	r0, [r4, #12]
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	4298      	cmp	r0, r3
 8006520:	bfb8      	it	lt
 8006522:	4618      	movlt	r0, r3
 8006524:	e7a6      	b.n	8006474 <_printf_i+0x160>
 8006526:	2301      	movs	r3, #1
 8006528:	4632      	mov	r2, r6
 800652a:	4649      	mov	r1, r9
 800652c:	4640      	mov	r0, r8
 800652e:	47d0      	blx	sl
 8006530:	3001      	adds	r0, #1
 8006532:	d09d      	beq.n	8006470 <_printf_i+0x15c>
 8006534:	3501      	adds	r5, #1
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	9903      	ldr	r1, [sp, #12]
 800653a:	1a5b      	subs	r3, r3, r1
 800653c:	42ab      	cmp	r3, r5
 800653e:	dcf2      	bgt.n	8006526 <_printf_i+0x212>
 8006540:	e7eb      	b.n	800651a <_printf_i+0x206>
 8006542:	2500      	movs	r5, #0
 8006544:	f104 0619 	add.w	r6, r4, #25
 8006548:	e7f5      	b.n	8006536 <_printf_i+0x222>
 800654a:	bf00      	nop
 800654c:	08006835 	.word	0x08006835
 8006550:	08006846 	.word	0x08006846

08006554 <__malloc_lock>:
 8006554:	4801      	ldr	r0, [pc, #4]	@ (800655c <__malloc_lock+0x8>)
 8006556:	f7ff bc73 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	20000478 	.word	0x20000478

08006560 <__malloc_unlock>:
 8006560:	4801      	ldr	r0, [pc, #4]	@ (8006568 <__malloc_unlock+0x8>)
 8006562:	f7ff bc6e 	b.w	8005e42 <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	20000478 	.word	0x20000478

0800656c <_realloc_r>:
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	4680      	mov	r8, r0
 8006572:	4615      	mov	r5, r2
 8006574:	460c      	mov	r4, r1
 8006576:	b921      	cbnz	r1, 8006582 <_realloc_r+0x16>
 8006578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	4611      	mov	r1, r2
 800657e:	f7ff bddb 	b.w	8006138 <_malloc_r>
 8006582:	b92a      	cbnz	r2, 8006590 <_realloc_r+0x24>
 8006584:	f000 f858 	bl	8006638 <_free_r>
 8006588:	2400      	movs	r4, #0
 800658a:	4620      	mov	r0, r4
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	f000 f89c 	bl	80066cc <_malloc_usable_size_r>
 8006594:	4285      	cmp	r5, r0
 8006596:	4606      	mov	r6, r0
 8006598:	d802      	bhi.n	80065a0 <_realloc_r+0x34>
 800659a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800659e:	d8f4      	bhi.n	800658a <_realloc_r+0x1e>
 80065a0:	4629      	mov	r1, r5
 80065a2:	4640      	mov	r0, r8
 80065a4:	f7ff fdc8 	bl	8006138 <_malloc_r>
 80065a8:	4607      	mov	r7, r0
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0ec      	beq.n	8006588 <_realloc_r+0x1c>
 80065ae:	42b5      	cmp	r5, r6
 80065b0:	462a      	mov	r2, r5
 80065b2:	4621      	mov	r1, r4
 80065b4:	bf28      	it	cs
 80065b6:	4632      	movcs	r2, r6
 80065b8:	f000 f830 	bl	800661c <memcpy>
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f000 f83a 	bl	8006638 <_free_r>
 80065c4:	463c      	mov	r4, r7
 80065c6:	e7e0      	b.n	800658a <_realloc_r+0x1e>

080065c8 <memmove>:
 80065c8:	4288      	cmp	r0, r1
 80065ca:	b510      	push	{r4, lr}
 80065cc:	eb01 0402 	add.w	r4, r1, r2
 80065d0:	d902      	bls.n	80065d8 <memmove+0x10>
 80065d2:	4284      	cmp	r4, r0
 80065d4:	4623      	mov	r3, r4
 80065d6:	d807      	bhi.n	80065e8 <memmove+0x20>
 80065d8:	1e43      	subs	r3, r0, #1
 80065da:	42a1      	cmp	r1, r4
 80065dc:	d008      	beq.n	80065f0 <memmove+0x28>
 80065de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065e6:	e7f8      	b.n	80065da <memmove+0x12>
 80065e8:	4402      	add	r2, r0
 80065ea:	4601      	mov	r1, r0
 80065ec:	428a      	cmp	r2, r1
 80065ee:	d100      	bne.n	80065f2 <memmove+0x2a>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065fa:	e7f7      	b.n	80065ec <memmove+0x24>

080065fc <_sbrk_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d06      	ldr	r5, [pc, #24]	@ (8006618 <_sbrk_r+0x1c>)
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fa fc6e 	bl	8000ee8 <_sbrk>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_sbrk_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_sbrk_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20000484 	.word	0x20000484

0800661c <memcpy>:
 800661c:	440a      	add	r2, r1
 800661e:	4291      	cmp	r1, r2
 8006620:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006624:	d100      	bne.n	8006628 <memcpy+0xc>
 8006626:	4770      	bx	lr
 8006628:	b510      	push	{r4, lr}
 800662a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800662e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006632:	4291      	cmp	r1, r2
 8006634:	d1f9      	bne.n	800662a <memcpy+0xe>
 8006636:	bd10      	pop	{r4, pc}

08006638 <_free_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4605      	mov	r5, r0
 800663c:	2900      	cmp	r1, #0
 800663e:	d041      	beq.n	80066c4 <_free_r+0x8c>
 8006640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006644:	1f0c      	subs	r4, r1, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfb8      	it	lt
 800664a:	18e4      	addlt	r4, r4, r3
 800664c:	f7ff ff82 	bl	8006554 <__malloc_lock>
 8006650:	4a1d      	ldr	r2, [pc, #116]	@ (80066c8 <_free_r+0x90>)
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	b933      	cbnz	r3, 8006664 <_free_r+0x2c>
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	6014      	str	r4, [r2, #0]
 800665a:	4628      	mov	r0, r5
 800665c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006660:	f7ff bf7e 	b.w	8006560 <__malloc_unlock>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d908      	bls.n	800667a <_free_r+0x42>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	1821      	adds	r1, r4, r0
 800666c:	428b      	cmp	r3, r1
 800666e:	bf01      	itttt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	1809      	addeq	r1, r1, r0
 8006676:	6021      	streq	r1, [r4, #0]
 8006678:	e7ed      	b.n	8006656 <_free_r+0x1e>
 800667a:	461a      	mov	r2, r3
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	b10b      	cbz	r3, 8006684 <_free_r+0x4c>
 8006680:	42a3      	cmp	r3, r4
 8006682:	d9fa      	bls.n	800667a <_free_r+0x42>
 8006684:	6811      	ldr	r1, [r2, #0]
 8006686:	1850      	adds	r0, r2, r1
 8006688:	42a0      	cmp	r0, r4
 800668a:	d10b      	bne.n	80066a4 <_free_r+0x6c>
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	4401      	add	r1, r0
 8006690:	1850      	adds	r0, r2, r1
 8006692:	4283      	cmp	r3, r0
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	d1e0      	bne.n	800665a <_free_r+0x22>
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	6053      	str	r3, [r2, #4]
 800669e:	4408      	add	r0, r1
 80066a0:	6010      	str	r0, [r2, #0]
 80066a2:	e7da      	b.n	800665a <_free_r+0x22>
 80066a4:	d902      	bls.n	80066ac <_free_r+0x74>
 80066a6:	230c      	movs	r3, #12
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	e7d6      	b.n	800665a <_free_r+0x22>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	1821      	adds	r1, r4, r0
 80066b0:	428b      	cmp	r3, r1
 80066b2:	bf04      	itt	eq
 80066b4:	6819      	ldreq	r1, [r3, #0]
 80066b6:	685b      	ldreq	r3, [r3, #4]
 80066b8:	6063      	str	r3, [r4, #4]
 80066ba:	bf04      	itt	eq
 80066bc:	1809      	addeq	r1, r1, r0
 80066be:	6021      	streq	r1, [r4, #0]
 80066c0:	6054      	str	r4, [r2, #4]
 80066c2:	e7ca      	b.n	800665a <_free_r+0x22>
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20000480 	.word	0x20000480

080066cc <_malloc_usable_size_r>:
 80066cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d0:	1f18      	subs	r0, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfbc      	itt	lt
 80066d6:	580b      	ldrlt	r3, [r1, r0]
 80066d8:	18c0      	addlt	r0, r0, r3
 80066da:	4770      	bx	lr

080066dc <_init>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr

080066e8 <_fini>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr
