
CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080067cc  080067cc  000077cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a4  080068a4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000078a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000068  08006914  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006914  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dc7  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e0  00000000  00000000  00018e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1c  00000000  00000000  0001c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028833  00000000  00000000  0001cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010670  00000000  00000000  00045607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcbd3  00000000  00000000  00055c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015284a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  00152890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00156c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067b4 	.word	0x080067b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080067b4 	.word	0x080067b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f004 f8c5 	bl	8004700 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000170 	.word	0x20000170

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fbe1 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f840 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f934 	bl	80007fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f88e 	bl	80006b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8d0 	bl	800073c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8fe 	bl	800079c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

   /* 终端测试输出 */
  printf("Testing GPIO and ADC Initialization...\r\n");
 80005a0:	4816      	ldr	r0, [pc, #88]	@ (80005fc <main+0x78>)
 80005a2:	f005 faa5 	bl	8005af0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* GPIO TEST: Toggle LED on PA5 */
	     HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80005a6:	2120      	movs	r1, #32
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f002 fd20 	bl	8002ff0 <HAL_GPIO_TogglePin>
	     HAL_Delay(500);                       // Delay 500ms
 80005b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b4:	f000 fc40 	bl	8000e38 <HAL_Delay>
	     printf("LED Toggled...\r\n");
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0x7c>)
 80005ba:	f005 fa99 	bl	8005af0 <puts>

	     /* ADC TEST: Read PPG Sensor Analog Value */
	     HAL_ADC_Start(&hadc1);
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0x80>)
 80005c0:	f000 fff2 	bl	80015a8 <HAL_ADC_Start>
	     if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80005c4:	210a      	movs	r1, #10
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <main+0x80>)
 80005c8:	f001 f8dc 	bl	8001784 <HAL_ADC_PollForConversion>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10b      	bne.n	80005ea <main+0x66>
	       adc_value = HAL_ADC_GetValue(&hadc1); // Get ADC value
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <main+0x80>)
 80005d4:	f001 f9ae 	bl	8001934 <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <main+0x84>)
 80005dc:	6013      	str	r3, [r2, #0]
	       printf("PPG Sensor ADC Value: %lu\r\n", adc_value);
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <main+0x84>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <main+0x88>)
 80005e6:	f005 fa1b 	bl	8005a20 <iprintf>
	     }
	     HAL_ADC_Stop(&hadc1);
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <main+0x80>)
 80005ec:	f001 f896 	bl	800171c <HAL_ADC_Stop>

	     HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f000 fc20 	bl	8000e38 <HAL_Delay>
	     HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80005f8:	e7d5      	b.n	80005a6 <main+0x22>
 80005fa:	bf00      	nop
 80005fc:	080067cc 	.word	0x080067cc
 8000600:	080067f4 	.word	0x080067f4
 8000604:	20000084 	.word	0x20000084
 8000608:	200001f8 	.word	0x200001f8
 800060c:	08006804 	.word	0x08006804

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fa6e 	bl	8005b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f002 fd03 	bl	8003040 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f90c 	bl	800085c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000644:	2310      	movs	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000660:	2318      	movs	r3, #24
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fd39 	bl	80030ec <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000680:	f000 f8ec 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f003 f901 	bl	80038a4 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f8d8 	bl	800085c <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	@ 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

	  hadc1.Instance = ADC1;
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006cc:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <MX_ADC1_Init+0x80>)
 80006ce:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
	  HAL_ADC_Init(&hadc1);
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_ADC1_Init+0x7c>)
 80006fe:	f000 fe03 	bl	8001308 <HAL_ADC_Init>

	  /* Configure ADC Channel */
	  sConfig.Channel = ADC_CHANNEL_5; // PPG Sensor Channel
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_ADC1_Init+0x84>)
 8000704:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_ADC1_Init+0x7c>)
 8000714:	f001 fb54 	bl	8001dc0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_ADC1_Init+0x7c>)
 800071a:	f000 fdf5 	bl	8001308 <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f89a 	bl	800085c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000084 	.word	0x20000084
 8000734:	50040000 	.word	0x50040000
 8000738:	14f00020 	.word	0x14f00020

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <MX_USART1_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART1_UART_Init+0x58>)
 8000780:	f003 ff70 	bl	8004664 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f867 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e8 	.word	0x200000e8
 8000798:	40013800 	.word	0x40013800

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	f003 ff40 	bl	8004664 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f837 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000170 	.word	0x20000170
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_GPIO_Init+0x5c>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000814:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <MX_GPIO_Init+0x5c>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_GPIO_Init+0x5c>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]


/* USER CODE BEGIN MX_GPIO_Init_2 */


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2120      	movs	r1, #32
 800082c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000830:	f002 fbc6 	bl	8002fc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5; // LED Pin
 8000834:	2320      	movs	r3, #32
 8000836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f002 fa0e 	bl	8002c6c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	@ 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	@ 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ac      	sub	sp, #176	@ 0xb0
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2288      	movs	r2, #136	@ 0x88
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 f915 	bl	8005b00 <memset>
  if(hadc->Instance==ADC1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <HAL_ADC_MspInit+0xd8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d14f      	bne.n	8000980 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008f6:	2310      	movs	r3, #16
 80008f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000906:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f003 f9eb 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800091c:	f7ff ff9e 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	4a19      	ldr	r2, [pc, #100]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000926:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800092a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093c:	4a13      	ldr	r2, [pc, #76]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_ADC_MspInit+0xdc>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ground_RED_LED_Pin|Ground_IR_LED_Pin;
 8000950:	2303      	movs	r3, #3
 8000952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000956:	230b      	movs	r3, #11
 8000958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096c:	f002 f97e 	bl	8002c6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2012      	movs	r0, #18
 8000976:	f002 f8c4 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800097a:	2012      	movs	r0, #18
 800097c:	f002 f8dd 	bl	8002b3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000980:	bf00      	nop
 8000982:	37b0      	adds	r7, #176	@ 0xb0
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	50040000 	.word	0x50040000
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0ae      	sub	sp, #184	@ 0xb8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2288      	movs	r2, #136	@ 0x88
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 f8a5 	bl	8005b00 <memset>
  if(huart->Instance==USART1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae8 <HAL_UART_MspInit+0x158>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d145      	bne.n	8000a4c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f98d 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ff40 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009dc:	4b43      	ldr	r3, [pc, #268]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e0:	4a42      	ldr	r2, [pc, #264]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e8:	4b40      	ldr	r3, [pc, #256]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 80009ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b3d      	ldr	r3, [pc, #244]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a3c      	ldr	r2, [pc, #240]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b3a      	ldr	r3, [pc, #232]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a0c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a26:	2307      	movs	r3, #7
 8000a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f002 f919 	bl	8002c6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2025      	movs	r0, #37	@ 0x25
 8000a40:	f002 f85f 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a44:	2025      	movs	r0, #37	@ 0x25
 8000a46:	f002 f878 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4a:	e048      	b.n	8000ade <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a27      	ldr	r2, [pc, #156]	@ (8000af0 <HAL_UART_MspInit+0x160>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d143      	bne.n	8000ade <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 f942 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000a6e:	f7ff fef5 	bl	800085c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aba:	2307      	movs	r3, #7
 8000abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f002 f8cf 	bl	8002c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2026      	movs	r0, #38	@ 0x26
 8000ad4:	f002 f815 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad8:	2026      	movs	r0, #38	@ 0x26
 8000ada:	f002 f82e 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	37b8      	adds	r7, #184	@ 0xb8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40004400 	.word	0x40004400

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f955 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <ADC1_2_IRQHandler+0x10>)
 8000b5a:	f000 fef9 	bl	8001950 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000084 	.word	0x20000084

08000b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <USART1_IRQHandler+0x10>)
 8000b6e:	f003 fe51 	bl	8004814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e8 	.word	0x200000e8

08000b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <USART2_IRQHandler+0x10>)
 8000b82:	f003 fe47 	bl	8004814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000170 	.word	0x20000170

08000b90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fcbb 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
  }
  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 ff38 	bl	8005b10 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20018000 	.word	0x20018000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	200001fc 	.word	0x200001fc
 8000cd4:	20000350 	.word	0x20000350

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f004 fef7 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fc29 	bl	8000584 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d40:	080068ac 	.word	0x080068ac
  ldr r2, =_sbss
 8000d44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d48:	20000350 	.word	0x20000350

08000d4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC3_IRQHandler>

08000d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f001 fec7 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f80e 	bl	8000d80 <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e001      	b.n	8000d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d70:	f7ff fd7a 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d023      	beq.n	8000ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_InitTick+0x70>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fed3 	bl	8002b56 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10f      	bne.n	8000dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d809      	bhi.n	8000dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f001 fe9d 	bl	8002b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_InitTick+0x74>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e004      	b.n	8000de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e001      	b.n	8000de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000200 	.word	0x20000200

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000200 	.word	0x20000200

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffde 	bl	8000e20 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	609a      	str	r2, [r3, #8]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3360      	adds	r3, #96	@ 0x60
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <LL_ADC_SetOffset+0x44>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	4313      	orrs	r3, r2
 8000f18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	03fff000 	.word	0x03fff000

08000f30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3360      	adds	r3, #96	@ 0x60
 8000f3e:	461a      	mov	r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3360      	adds	r3, #96	@ 0x60
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3330      	adds	r3, #48	@ 0x30
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	4413      	add	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	211f      	movs	r1, #31
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0e9b      	lsrs	r3, r3, #26
 8000ff0:	f003 011f 	and.w	r1, r3, #31
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	431a      	orrs	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001036:	b480      	push	{r7}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3314      	adds	r3, #20
 8001046:	461a      	mov	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	0e5b      	lsrs	r3, r3, #25
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	0d1b      	lsrs	r3, r3, #20
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2107      	movs	r1, #7
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	0d1b      	lsrs	r3, r3, #20
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	431a      	orrs	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0318 	and.w	r3, r3, #24
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010b0:	40d9      	lsrs	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	400b      	ands	r3, r1
 80010b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	0007ffff 	.word	0x0007ffff

080010d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 031f 	and.w	r3, r3, #31
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800111c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6093      	str	r3, [r2, #8]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001144:	d101      	bne.n	800114a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800116c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001194:	d101      	bne.n	800119a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <LL_ADC_IsEnabled+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_IsEnabled+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsDisableOngoing+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsDisableOngoing+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001258:	f043 0204 	orr.w	r2, r3, #4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001280:	f043 0210 	orr.w	r2, r3, #16
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d101      	bne.n	80012ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012ce:	f043 0220 	orr.w	r2, r3, #32
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d101      	bne.n	80012fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e130      	b.n	8001584 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fabd 	bl	80008b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fef1 	bl	8001130 <LL_ADC_IsDeepPowerDownEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fed7 	bl	800110c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff0c 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fef0 	bl	8001158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001378:	4b84      	ldr	r3, [pc, #528]	@ (800158c <HAL_ADC_Init+0x284>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	4a84      	ldr	r2, [pc, #528]	@ (8001590 <HAL_ADC_Init+0x288>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	3301      	adds	r3, #1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800138c:	e002      	b.n	8001394 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3b01      	subs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff feee 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10d      	bne.n	80013c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff62 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80013d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 80c9 	bne.w	8001572 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80c5 	bne.w	8001572 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fefb 	bl	80011f8 <LL_ADC_IsEnabled>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d115      	bne.n	8001434 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001408:	4862      	ldr	r0, [pc, #392]	@ (8001594 <HAL_ADC_Init+0x28c>)
 800140a:	f7ff fef5 	bl	80011f8 <LL_ADC_IsEnabled>
 800140e:	4604      	mov	r4, r0
 8001410:	4861      	ldr	r0, [pc, #388]	@ (8001598 <HAL_ADC_Init+0x290>)
 8001412:	f7ff fef1 	bl	80011f8 <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	431c      	orrs	r4, r3
 800141a:	4860      	ldr	r0, [pc, #384]	@ (800159c <HAL_ADC_Init+0x294>)
 800141c:	f7ff feec 	bl	80011f8 <LL_ADC_IsEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	4323      	orrs	r3, r4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	485c      	ldr	r0, [pc, #368]	@ (80015a0 <HAL_ADC_Init+0x298>)
 8001430:	f7ff fd26 	bl	8000e80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7e5b      	ldrb	r3, [r3, #25]
 8001438:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800143e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001444:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800144a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001452:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	3b01      	subs	r3, #1
 8001468:	045b      	lsls	r3, r3, #17
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001484:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <HAL_ADC_Init+0x29c>)
 8001494:	4013      	ands	r3, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	430b      	orrs	r3, r1
 800149e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff1c 	bl	80012e2 <LL_ADC_INJ_IsConversionOngoing>
 80014aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d13d      	bne.n	800152e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d13a      	bne.n	800152e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014bc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014c4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014d4:	f023 0302 	bic.w	r3, r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	69b9      	ldr	r1, [r7, #24]
 80014de:	430b      	orrs	r3, r1
 80014e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d118      	bne.n	800151e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001508:	4311      	orrs	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800150e:	430a      	orrs	r2, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	e007      	b.n	800152e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10c      	bne.n	8001550 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f023 010f 	bic.w	r1, r3, #15
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	631a      	str	r2, [r3, #48]	@ 0x30
 800154e:	e007      	b.n	8001560 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020f 	bic.w	r2, r2, #15
 800155e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001564:	f023 0303 	bic.w	r3, r3, #3
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001570:	e007      	b.n	8001582 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001582:	7ffb      	ldrb	r3, [r7, #31]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3724      	adds	r7, #36	@ 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	053e2d63 	.word	0x053e2d63
 8001594:	50040000 	.word	0x50040000
 8001598:	50040100 	.word	0x50040100
 800159c:	50040200 	.word	0x50040200
 80015a0:	50040300 	.word	0x50040300
 80015a4:	fff0c007 	.word	0xfff0c007

080015a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b0:	4857      	ldr	r0, [pc, #348]	@ (8001710 <HAL_ADC_Start+0x168>)
 80015b2:	f7ff fd8f 	bl	80010d4 <LL_ADC_GetMultimode>
 80015b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe69 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 809c 	bne.w	8001702 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_Start+0x30>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e097      	b.n	8001708 <HAL_ADC_Start+0x160>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f001 f89b 	bl	800271c <ADC_Enable>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f040 8083 	bne.w	80016f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a42      	ldr	r2, [pc, #264]	@ (8001714 <HAL_ADC_Start+0x16c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d002      	beq.n	8001616 <HAL_ADC_Start+0x6e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	e000      	b.n	8001618 <HAL_ADC_Start+0x70>
 8001616:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <HAL_ADC_Start+0x170>)
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	4293      	cmp	r3, r2
 800161e:	d002      	beq.n	8001626 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800162a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800163a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800163e:	d106      	bne.n	800164e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	f023 0206 	bic.w	r2, r3, #6
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	@ 0x58
 800164c:	e002      	b.n	8001654 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	221c      	movs	r2, #28
 800165a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2a      	ldr	r2, [pc, #168]	@ (8001714 <HAL_ADC_Start+0x16c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d002      	beq.n	8001674 <HAL_ADC_Start+0xcc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e000      	b.n	8001676 <HAL_ADC_Start+0xce>
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <HAL_ADC_Start+0x170>)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4293      	cmp	r3, r2
 800167c:	d008      	beq.n	8001690 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d002      	beq.n	8001690 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d114      	bne.n	80016ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fdc6 	bl	8001244 <LL_ADC_REG_StartConversion>
 80016b8:	e025      	b.n	8001706 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_ADC_Start+0x16c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d002      	beq.n	80016d6 <HAL_ADC_Start+0x12e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	e000      	b.n	80016d8 <HAL_ADC_Start+0x130>
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_ADC_Start+0x170>)
 80016d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00f      	beq.n	8001706 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80016f6:	e006      	b.n	8001706 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001700:	e001      	b.n	8001706 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001702:	2302      	movs	r3, #2
 8001704:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001706:	7dfb      	ldrb	r3, [r7, #23]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	50040300 	.word	0x50040300
 8001714:	50040100 	.word	0x50040100
 8001718:	50040000 	.word	0x50040000

0800171c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Stop+0x16>
 800172e:	2302      	movs	r3, #2
 8001730:	e023      	b.n	800177a <HAL_ADC_Stop+0x5e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800173a:	2103      	movs	r1, #3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 ff31 	bl	80025a4 <ADC_ConversionStop>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 f86b 	bl	8002828 <ADC_Disable>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800178e:	4866      	ldr	r0, [pc, #408]	@ (8001928 <HAL_ADC_PollForConversion+0x1a4>)
 8001790:	f7ff fca0 	bl	80010d4 <LL_ADC_GetMultimode>
 8001794:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800179e:	2308      	movs	r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e02a      	b.n	80017fa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d002      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b09      	cmp	r3, #9
 80017b4:	d111      	bne.n	80017da <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0a4      	b.n	800191e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017d4:	2304      	movs	r3, #4
 80017d6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017d8:	e00f      	b.n	80017fa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017da:	4853      	ldr	r0, [pc, #332]	@ (8001928 <HAL_ADC_PollForConversion+0x1a4>)
 80017dc:	f7ff fc88 	bl	80010f0 <LL_ADC_GetMultiDMATransfer>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e093      	b.n	800191e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017f6:	2304      	movs	r3, #4
 80017f8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017fa:	f7ff fb11 	bl	8000e20 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001800:	e021      	b.n	8001846 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001808:	d01d      	beq.n	8001846 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800180a:	f7ff fb09 	bl	8000e20 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <HAL_ADC_PollForConversion+0x9c>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d112      	bne.n	8001846 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10b      	bne.n	8001846 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e06b      	b.n	800191e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0d6      	beq.n	8001802 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fb94 	bl	8000f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7e5b      	ldrb	r3, [r3, #25]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d111      	bne.n	80018aa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1f      	ldr	r2, [pc, #124]	@ (800192c <HAL_ADC_PollForConversion+0x1a8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d002      	beq.n	80018ba <HAL_ADC_PollForConversion+0x136>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e000      	b.n	80018bc <HAL_ADC_PollForConversion+0x138>
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <HAL_ADC_PollForConversion+0x1ac>)
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d008      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	d104      	bne.n	80018e0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	e00c      	b.n	80018fa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	@ (800192c <HAL_ADC_PollForConversion+0x1a8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d002      	beq.n	80018f0 <HAL_ADC_PollForConversion+0x16c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_PollForConversion+0x16e>
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_ADC_PollForConversion+0x1ac>)
 80018f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d104      	bne.n	800190a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e008      	b.n	800191c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	220c      	movs	r2, #12
 800191a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	50040300 	.word	0x50040300
 800192c:	50040100 	.word	0x50040100
 8001930:	50040000 	.word	0x50040000

08001934 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800196c:	4882      	ldr	r0, [pc, #520]	@ (8001b78 <HAL_ADC_IRQHandler+0x228>)
 800196e:	f7ff fbb1 	bl	80010d4 <LL_ADC_GetMultimode>
 8001972:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d017      	beq.n	80019ae <HAL_ADC_IRQHandler+0x5e>
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001998:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 ffc8 	bl	8002936 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x72>
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8083 	beq.w	8001ad4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07d      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff facc 	bl	8000f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d062      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5d      	ldr	r2, [pc, #372]	@ (8001b7c <HAL_ADC_IRQHandler+0x22c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d002      	beq.n	8001a10 <HAL_ADC_IRQHandler+0xc0>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	e000      	b.n	8001a12 <HAL_ADC_IRQHandler+0xc2>
 8001a10:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <HAL_ADC_IRQHandler+0x230>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d008      	beq.n	8001a2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d104      	bne.n	8001a36 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	e00c      	b.n	8001a50 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a50      	ldr	r2, [pc, #320]	@ (8001b7c <HAL_ADC_IRQHandler+0x22c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_IRQHandler+0xf6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_IRQHandler+0xf8>
 8001a46:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <HAL_ADC_IRQHandler+0x230>)
 8001a48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d135      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d12e      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fc11 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11a      	bne.n	8001aae <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 020c 	bic.w	r2, r2, #12
 8001a86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d112      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	655a      	str	r2, [r3, #84]	@ 0x54
 8001aac:	e00b      	b.n	8001ac6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f95c 	bl	8001d84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0x198>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 809f 	beq.w	8001c32 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8099 	beq.w	8001c32 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fa77 	bl	8001010 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fa32 	bl	8000f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_ADC_IRQHandler+0x22c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d002      	beq.n	8001b40 <HAL_ADC_IRQHandler+0x1f0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_IRQHandler+0x1f2>
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_ADC_IRQHandler+0x230>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d008      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d002      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	d104      	bne.n	8001b66 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	e013      	b.n	8001b8e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_ADC_IRQHandler+0x22c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x234>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_ADC_IRQHandler+0x236>
 8001b76:	bf00      	nop
 8001b78:	50040300 	.word	0x50040300
 8001b7c:	50040100 	.word	0x50040100
 8001b80:	50040000 	.word	0x50040000
 8001b84:	4b7d      	ldr	r3, [pc, #500]	@ (8001d7c <HAL_ADC_IRQHandler+0x42c>)
 8001b86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d047      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_ADC_IRQHandler+0x25e>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d03f      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d13a      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b40      	cmp	r3, #64	@ 0x40
 8001bba:	d133      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d12e      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fb89 	bl	80012e2 <LL_ADC_INJ_IsConversionOngoing>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d11a      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001be4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d112      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c0a:	e00b      	b.n	8001c24 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fe5e 	bl	80028e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2260      	movs	r2, #96	@ 0x60
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d011      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x310>
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8a0 	bl	8001d98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2280      	movs	r2, #128	@ 0x80
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d012      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x340>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fe44 	bl	800290e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x370>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fe36 	bl	8002922 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d036      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x3e8>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d031      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce0:	e014      	b.n	8001d0c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ce8:	4825      	ldr	r0, [pc, #148]	@ (8001d80 <HAL_ADC_IRQHandler+0x430>)
 8001cea:	f7ff fa01 	bl	80010f0 <LL_ADC_GetMultiDMATransfer>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf8:	e008      	b.n	8001d0c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f83e 	bl	8001dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d018      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x424>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f043 0208 	orr.w	r2, r3, #8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fdc3 	bl	80028fa <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	50040000 	.word	0x50040000
 8001d80:	50040300 	.word	0x50040300

08001d84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b6      	sub	sp, #216	@ 0xd8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x22>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e3c9      	b.n	8002576 <HAL_ADC_ConfigChannel+0x7b6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fa50 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 83aa 	bne.w	8002550 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d824      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	3b02      	subs	r3, #2
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d81b      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x8e>
 8001e16:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <HAL_ADC_ConfigChannel+0x5c>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e45 	.word	0x08001e45
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e32:	e010      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e34:	2312      	movs	r3, #18
 8001e36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e3a:	e00c      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e3c:	2318      	movs	r3, #24
 8001e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e42:	e008      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e4c:	e003      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e54:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e64:	f7ff f8a8 	bl	8000fb8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fa11 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8001e72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fa31 	bl	80012e2 <LL_ADC_INJ_IsConversionOngoing>
 8001e80:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 81a4 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 819f 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f7ff f8c6 	bl	8001036 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00a      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001edc:	f7ff f804 	bl	8000ee8 <LL_ADC_SetOffset>
 8001ee0:	e179      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f821 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x14e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f816 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e01e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x18c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f80b 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	e004      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1a4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	e018      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1d6>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e004      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe ffda 	bl	8000f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ffbe 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x214>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ffb3 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	f003 021f 	and.w	r2, r3, #31
 8001fd2:	e01e      	b.n	8002012 <HAL_ADC_ConfigChannel+0x252>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ffa8 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e004      	b.n	8002010 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_ConfigChannel+0x26a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e018      	b.n	800205c <HAL_ADC_ConfigChannel+0x29c>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800203e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800204e:	2320      	movs	r3, #32
 8002050:	e004      	b.n	800205c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe ff77 	bl	8000f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe ff5b 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_ADC_ConfigChannel+0x2da>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe ff50 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	e01e      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x318>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2102      	movs	r1, #2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe ff45 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80020b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80020c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x330>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	e014      	b.n	800211a <HAL_ADC_ConfigChannel+0x35a>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80020fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002104:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e004      	b.n	800211a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002110:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ff18 	bl	8000f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fefc 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x398>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fef1 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x3c8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fee6 	bl	8000f30 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002172:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800217e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x3e0>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	e011      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x404>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80021ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80021b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fec3 	bl	8000f5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f80c 	bl	80011f8 <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8140 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f7fe ff49 	bl	800108c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a8f      	ldr	r2, [pc, #572]	@ (800243c <HAL_ADC_ConfigChannel+0x67c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f040 8131 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_ADC_ConfigChannel+0x46e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	bf94      	ite	ls
 8002226:	2301      	movls	r3, #1
 8002228:	2300      	movhi	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e019      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4a2>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800223c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800224a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b09      	cmp	r3, #9
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002262:	2b00      	cmp	r3, #0
 8002264:	d079      	beq.n	800235a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x4c2>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002280:	e015      	b.n	80022ae <HAL_ADC_ConfigChannel+0x4ee>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002292:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800229e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	069b      	lsls	r3, r3, #26
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x50e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	e017      	b.n	80022fe <HAL_ADC_ConfigChannel+0x53e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	ea42 0103 	orr.w	r1, r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x564>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	3301      	adds	r3, #1
 8002316:	f003 021f 	and.w	r2, r3, #31
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x596>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	430b      	orrs	r3, r1
 8002358:	e081      	b.n	800245e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x5b6>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	e015      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x5e2>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x602>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x632>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	61bb      	str	r3, [r7, #24]
  return result;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x65e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	3b1e      	subs	r3, #30
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x69c>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	60fb      	str	r3, [r7, #12]
  return result;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e006      	b.n	8002448 <HAL_ADC_ConfigChannel+0x688>
 800243a:	bf00      	nop
 800243c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fde7 	bl	8001036 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <HAL_ADC_ConfigChannel+0x7c0>)
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d07a      	beq.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002474:	4843      	ldr	r0, [pc, #268]	@ (8002584 <HAL_ADC_ConfigChannel+0x7c4>)
 8002476:	f7fe fd29 	bl	8000ecc <LL_ADC_GetCommonPathInternalCh>
 800247a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a41      	ldr	r2, [pc, #260]	@ (8002588 <HAL_ADC_ConfigChannel+0x7c8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12c      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800248c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d126      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3c      	ldr	r2, [pc, #240]	@ (800258c <HAL_ADC_ConfigChannel+0x7cc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x6e8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_ADC_ConfigChannel+0x7d0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d15d      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b0:	4619      	mov	r1, r3
 80024b2:	4834      	ldr	r0, [pc, #208]	@ (8002584 <HAL_ADC_ConfigChannel+0x7c4>)
 80024b4:	f7fe fcf7 	bl	8000ea6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_ADC_ConfigChannel+0x7d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <HAL_ADC_ConfigChannel+0x7d8>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024d2:	e002      	b.n	80024da <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	e040      	b.n	8002564 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2d      	ldr	r2, [pc, #180]	@ (800259c <HAL_ADC_ConfigChannel+0x7dc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d118      	bne.n	800251e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	@ (800258c <HAL_ADC_ConfigChannel+0x7cc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_ConfigChannel+0x74c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <HAL_ADC_ConfigChannel+0x7d0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d12d      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002514:	4619      	mov	r1, r3
 8002516:	481b      	ldr	r0, [pc, #108]	@ (8002584 <HAL_ADC_ConfigChannel+0x7c4>)
 8002518:	f7fe fcc5 	bl	8000ea6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800251c:	e024      	b.n	8002568 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1f      	ldr	r2, [pc, #124]	@ (80025a0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d120      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800252c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11a      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <HAL_ADC_ConfigChannel+0x7cc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d115      	bne.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002546:	4619      	mov	r1, r3
 8002548:	480e      	ldr	r0, [pc, #56]	@ (8002584 <HAL_ADC_ConfigChannel+0x7c4>)
 800254a:	f7fe fcac 	bl	8000ea6 <LL_ADC_SetCommonPathInternalCh>
 800254e:	e00c      	b.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002562:	e002      	b.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002572:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002576:	4618      	mov	r0, r3
 8002578:	37d8      	adds	r7, #216	@ 0xd8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	80080000 	.word	0x80080000
 8002584:	50040300 	.word	0x50040300
 8002588:	c7520000 	.word	0xc7520000
 800258c:	50040000 	.word	0x50040000
 8002590:	50040200 	.word	0x50040200
 8002594:	20000000 	.word	0x20000000
 8002598:	053e2d63 	.word	0x053e2d63
 800259c:	cb840000 	.word	0xcb840000
 80025a0:	80000001 	.word	0x80000001

080025a4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fe6a 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80025c0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fe8b 	bl	80012e2 <LL_ADC_INJ_IsConversionOngoing>
 80025cc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 8098 	beq.w	800270c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02a      	beq.n	8002640 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7e5b      	ldrb	r3, [r3, #25]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d126      	bne.n	8002640 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7e1b      	ldrb	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d122      	bne.n	8002640 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025fe:	e014      	b.n	800262a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <ADC_ConversionStop+0x174>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d90d      	bls.n	8002624 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f043 0210 	orr.w	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e074      	b.n	800270e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3301      	adds	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	2b40      	cmp	r3, #64	@ 0x40
 8002636:	d1e3      	bne.n	8002600 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2240      	movs	r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d014      	beq.n	8002670 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fe22 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fddf 	bl	800121e <LL_ADC_IsDisableOngoing>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fdfe 	bl	800126c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d014      	beq.n	80026a0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fe31 	bl	80012e2 <LL_ADC_INJ_IsConversionOngoing>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fdc7 	bl	800121e <LL_ADC_IsDisableOngoing>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fe0d 	bl	80012ba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d005      	beq.n	80026b2 <ADC_ConversionStop+0x10e>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d105      	bne.n	80026b8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
        break;
 80026b0:	e005      	b.n	80026be <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026b2:	2308      	movs	r3, #8
 80026b4:	617b      	str	r3, [r7, #20]
        break;
 80026b6:	e002      	b.n	80026be <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026b8:	2304      	movs	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
        break;
 80026bc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026be:	f7fe fbaf 	bl	8000e20 <HAL_GetTick>
 80026c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026c4:	e01b      	b.n	80026fe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026c6:	f7fe fbab 	bl	8000e20 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d914      	bls.n	80026fe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e007      	b.n	800270e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1dc      	bne.n	80026c6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	a33fffff 	.word	0xa33fffff

0800271c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fd63 	bl	80011f8 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d169      	bne.n	800280c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <ADC_Enable+0xfc>)
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e055      	b.n	800280e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fd1e 	bl	80011a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800276c:	482b      	ldr	r0, [pc, #172]	@ (800281c <ADC_Enable+0x100>)
 800276e:	f7fe fbad 	bl	8000ecc <LL_ADC_GetCommonPathInternalCh>
 8002772:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <ADC_Enable+0x104>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <ADC_Enable+0x108>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002796:	e002      	b.n	800279e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3b01      	subs	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027a4:	f7fe fb3c 	bl	8000e20 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027aa:	e028      	b.n	80027fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fd21 	bl	80011f8 <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fcf1 	bl	80011a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027c6:	f7fe fb2b 	bl	8000e20 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d914      	bls.n	80027fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00d      	beq.n	80027fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d1cf      	bne.n	80027ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	8000003f 	.word	0x8000003f
 800281c:	50040300 	.word	0x50040300
 8002820:	20000000 	.word	0x20000000
 8002824:	053e2d63 	.word	0x053e2d63

08002828 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fcf2 	bl	800121e <LL_ADC_IsDisableOngoing>
 800283a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fcd9 	bl	80011f8 <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d047      	beq.n	80028dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d144      	bne.n	80028dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030d 	and.w	r3, r3, #13
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10c      	bne.n	800287a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fcb3 	bl	80011d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2203      	movs	r2, #3
 8002870:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002872:	f7fe fad5 	bl	8000e20 <HAL_GetTick>
 8002876:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002878:	e029      	b.n	80028ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e023      	b.n	80028de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002896:	f7fe fac3 	bl	8000e20 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1dc      	bne.n	8002896 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db0b      	blt.n	80029da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4907      	ldr	r1, [pc, #28]	@ (80029e8 <__NVIC_EnableIRQ+0x38>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	@ (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	@ (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	@ 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	@ 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002acc:	f7ff ff8e 	bl	80029ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff29 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff3e 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff8e 	bl	8002a40 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5d 	bl	80029ec <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff31 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d008      	beq.n	8002b98 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e022      	b.n	8002bde <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbc:	f003 021c 	and.w	r2, r3, #28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d005      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e029      	b.n	8002c62 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020e 	bic.w	r2, r2, #14
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f003 021c 	and.w	r2, r3, #28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    }
  }
  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	e17f      	b.n	8002f7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8171 	beq.w	8002f76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d005      	beq.n	8002cac <HAL_GPIO_Init+0x40>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d130      	bne.n	8002d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0201 	and.w	r2, r3, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d118      	bne.n	8002d4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d20:	2201      	movs	r2, #1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f003 0201 	and.w	r2, r3, #1
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d017      	beq.n	8002d88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d123      	bne.n	8002ddc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	08da      	lsrs	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3208      	adds	r2, #8
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80ac 	beq.w	8002f76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002f9c <HAL_GPIO_Init+0x330>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	4a5e      	ldr	r2, [pc, #376]	@ (8002f9c <HAL_GPIO_Init+0x330>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f9c <HAL_GPIO_Init+0x330>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e36:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa0 <HAL_GPIO_Init+0x334>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_Init+0x242>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa4 <HAL_GPIO_Init+0x338>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_Init+0x23e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa8 <HAL_GPIO_Init+0x33c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x23a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4d      	ldr	r2, [pc, #308]	@ (8002fac <HAL_GPIO_Init+0x340>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x236>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb0 <HAL_GPIO_Init+0x344>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x232>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb4 <HAL_GPIO_Init+0x348>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x22e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb8 <HAL_GPIO_Init+0x34c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x22a>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x244>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_GPIO_Init+0x334>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ece:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ef2:	4a32      	ldr	r2, [pc, #200]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ef8:	4b30      	ldr	r3, [pc, #192]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f1c:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f22:	4b26      	ldr	r3, [pc, #152]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f46:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f70:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f47f ae78 	bne.w	8002c7c <HAL_GPIO_Init+0x10>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	48000800 	.word	0x48000800
 8002fac:	48000c00 	.word	0x48000c00
 8002fb0:	48001000 	.word	0x48001000
 8002fb4:	48001400 	.word	0x48001400
 8002fb8:	48001800 	.word	0x48001800
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	041a      	lsls	r2, r3, #16
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43d9      	mvns	r1, r3
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	400b      	ands	r3, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	619a      	str	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <HAL_PWREx_GetVoltageRange+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800304e:	d130      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800305c:	d038      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003066:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306e:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2232      	movs	r2, #50	@ 0x32
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003084:	e002      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308c:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003098:	d102      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f2      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	d110      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d007      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030c8:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83

080030ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e3ca      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fe:	4b97      	ldr	r3, [pc, #604]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003108:	4b94      	ldr	r3, [pc, #592]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80e4 	beq.w	80032e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_RCC_OscConfig+0x4a>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	f040 808b 	bne.w	8003244 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 8087 	bne.w	8003244 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003136:	4b89      	ldr	r3, [pc, #548]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e3a2      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <HAL_RCC_OscConfig+0x7c>
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003166:	e005      	b.n	8003174 <HAL_RCC_OscConfig+0x88>
 8003168:	4b7c      	ldr	r3, [pc, #496]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003174:	4293      	cmp	r3, r2
 8003176:	d223      	bcs.n	80031c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd55 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e383      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318c:	4b73      	ldr	r3, [pc, #460]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a72      	ldr	r2, [pc, #456]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b70      	ldr	r3, [pc, #448]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	496d      	ldr	r1, [pc, #436]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031aa:	4b6c      	ldr	r3, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4968      	ldr	r1, [pc, #416]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	e025      	b.n	800320c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b63      	ldr	r3, [pc, #396]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4960      	ldr	r1, [pc, #384]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031de:	4b5f      	ldr	r3, [pc, #380]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	495b      	ldr	r1, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fd15 	bl	8003c2c <RCC_SetFlashLatencyFromMSIRange>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e343      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320c:	f000 fc4a 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b52      	ldr	r3, [pc, #328]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4950      	ldr	r1, [pc, #320]	@ (8003360 <HAL_RCC_OscConfig+0x274>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_RCC_OscConfig+0x278>)
 800322a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322c:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <HAL_RCC_OscConfig+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fda5 	bl	8000d80 <HAL_InitTick>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d052      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	e327      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d032      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a42      	ldr	r2, [pc, #264]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003258:	f7fd fde2 	bl	8000e20 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fd fdde 	bl	8000e20 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e310      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003272:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327e:	4b37      	ldr	r3, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4931      	ldr	r1, [pc, #196]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329c:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	492c      	ldr	r1, [pc, #176]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e01a      	b.n	80032e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b2:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032be:	f7fd fdaf 	bl	8000e20 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c6:	f7fd fdab 	bl	8000e20 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e2dd      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d8:	4b20      	ldr	r3, [pc, #128]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x1da>
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d074      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x21a>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d10e      	bne.n	800331e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d064      	beq.n	80033dc <HAL_RCC_OscConfig+0x2f0>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d160      	bne.n	80033dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e2ba      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x24a>
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0b      	ldr	r2, [pc, #44]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e026      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800333e:	d115      	bne.n	800336c <HAL_RCC_OscConfig+0x280>
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a05      	ldr	r2, [pc, #20]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b03      	ldr	r3, [pc, #12]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a02      	ldr	r2, [pc, #8]	@ (800335c <HAL_RCC_OscConfig+0x270>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e014      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	08006820 	.word	0x08006820
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004
 800336c:	4ba0      	ldr	r3, [pc, #640]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a9f      	ldr	r2, [pc, #636]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b9d      	ldr	r3, [pc, #628]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a9c      	ldr	r2, [pc, #624]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd fd48 	bl	8000e20 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fd fd44 	bl	8000e20 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e276      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a6:	4b92      	ldr	r3, [pc, #584]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x2a8>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd fd34 	bl	8000e20 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd fd30 	bl	8000e20 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e262      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ce:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x2d0>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_OscConfig+0x310>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d119      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d116      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fc:	4b7c      	ldr	r3, [pc, #496]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x328>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e23f      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4973      	ldr	r1, [pc, #460]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	e040      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6e      	ldr	r2, [pc, #440]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fcef 	bl	8000e20 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fd fceb 	bl	8000e20 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e21d      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003458:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	495f      	ldr	r1, [pc, #380]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347a:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5c      	ldr	r2, [pc, #368]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fccb 	bl	8000e20 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fcc7 	bl	8000e20 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1f9      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03c      	beq.n	8003532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	4a4a      	ldr	r2, [pc, #296]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fca6 	bl	8000e20 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fd fca2 	bl	8000e20 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1d4      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ea:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
 80034f8:	e01b      	b.n	8003532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b3d      	ldr	r3, [pc, #244]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003500:	4a3b      	ldr	r2, [pc, #236]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fc89 	bl	8000e20 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fd fc85 	bl	8000e20 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1b7      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	@ 0x58
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d118      	bne.n	80035aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003584:	f7fd fc4c 	bl	8000e20 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fd fc48 	bl	8000e20 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e17a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_RCC_OscConfig+0x508>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4d8>
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c2:	e029      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_OscConfig+0x50c>
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035dc:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a03      	ldr	r2, [pc, #12]	@ (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ec:	e014      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	4b9c      	ldr	r3, [pc, #624]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a9b      	ldr	r2, [pc, #620]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003608:	4b98      	ldr	r3, [pc, #608]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a97      	ldr	r2, [pc, #604]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fbfe 	bl	8000e20 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fbfa 	bl	8000e20 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e12a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b8b      	ldr	r3, [pc, #556]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ed      	beq.n	8003628 <HAL_RCC_OscConfig+0x53c>
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fbe7 	bl	8000e20 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fd fbe3 	bl	8000e20 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e113      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	4b7f      	ldr	r3, [pc, #508]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ed      	bne.n	8003656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b7a      	ldr	r3, [pc, #488]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	4a79      	ldr	r2, [pc, #484]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80fe 	beq.w	8003892 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 80d0 	bne.w	8003840 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036a0:	4b72      	ldr	r3, [pc, #456]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d130      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d127      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11f      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036e0:	2a07      	cmp	r2, #7
 80036e2:	bf14      	ite	ne
 80036e4:	2201      	movne	r2, #1
 80036e6:	2200      	moveq	r2, #0
 80036e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d113      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d109      	bne.n	8003716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d06e      	beq.n	80037f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d069      	beq.n	80037f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800371c:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ad      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003744:	f7fd fb6c 	bl	8000e20 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fb68 	bl	8000e20 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e09a      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375e:	4b43      	ldr	r3, [pc, #268]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	4b40      	ldr	r3, [pc, #256]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <HAL_RCC_OscConfig+0x784>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800377a:	3a01      	subs	r2, #1
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003784:	0212      	lsls	r2, r2, #8
 8003786:	4311      	orrs	r1, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	3a01      	subs	r2, #1
 8003790:	0552      	lsls	r2, r2, #21
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003798:	0852      	lsrs	r2, r2, #1
 800379a:	3a01      	subs	r2, #1
 800379c:	0652      	lsls	r2, r2, #25
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037a4:	0912      	lsrs	r2, r2, #4
 80037a6:	0452      	lsls	r2, r2, #17
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4930      	ldr	r1, [pc, #192]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037b0:	4b2e      	ldr	r3, [pc, #184]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2d      	ldr	r2, [pc, #180]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037bc:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c8:	f7fd fb2a 	bl	8000e20 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd fb26 	bl	8000e20 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e058      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	4b22      	ldr	r3, [pc, #136]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ee:	e050      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04f      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d148      	bne.n	8003892 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800380c:	4b17      	ldr	r3, [pc, #92]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003818:	f7fd fb02 	bl	8000e20 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd fafe 	bl	8000e20 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e030      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x734>
 800383e:	e028      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d023      	beq.n	800388e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800384c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fae5 	bl	8000e20 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003858:	e00c      	b.n	8003874 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fd fae1 	bl	8000e20 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d905      	bls.n	8003874 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e013      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
 800386c:	40021000 	.word	0x40021000
 8003870:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ec      	bne.n	800385a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	4905      	ldr	r1, [pc, #20]	@ (800389c <HAL_RCC_OscConfig+0x7b0>)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x7b4>)
 8003888:	4013      	ands	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
 800388c:	e001      	b.n	8003892 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	feeefffc 	.word	0xfeeefffc

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0e7      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b75      	ldr	r3, [pc, #468]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0207 	bic.w	r2, r3, #7
 80038ce:	4970      	ldr	r1, [pc, #448]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cf      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b66      	ldr	r3, [pc, #408]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4960      	ldr	r1, [pc, #384]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04c      	beq.n	80039bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d121      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0a6      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e09a      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e08e      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e086      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b46      	ldr	r3, [pc, #280]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4943      	ldr	r1, [pc, #268]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fa48 	bl	8000e20 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fd fa44 	bl	8000e20 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e06e      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d208      	bcs.n	80039ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	492b      	ldr	r1, [pc, #172]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ea:	4b29      	ldr	r3, [pc, #164]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d210      	bcs.n	8003a1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 0207 	bic.w	r2, r3, #7
 8003a00:	4923      	ldr	r1, [pc, #140]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e036      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4918      	ldr	r1, [pc, #96]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4910      	ldr	r1, [pc, #64]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a58:	f000 f824 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	490b      	ldr	r1, [pc, #44]	@ (8003a98 <HAL_RCC_ClockConfig+0x1f4>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1f8>)
 8003a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd f97f 	bl	8000d80 <HAL_InitTick>
 8003a82:	4603      	mov	r3, r0
 8003a84:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a86:	7afb      	ldrb	r3, [r7, #11]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08006820 	.word	0x08006820
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	@ 0x24
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d121      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d11e      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ad8:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ae4:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003af4:	4b2d      	ldr	r3, [pc, #180]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1c:	4b25      	ldr	r3, [pc, #148]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e004      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d134      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b32:	4b1e      	ldr	r3, [pc, #120]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d003      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0xac>
 8003b48:	e005      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b4c:	617b      	str	r3, [r7, #20]
      break;
 8003b4e:	e005      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b50:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b52:	617b      	str	r3, [r7, #20]
      break;
 8003b54:	e002      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	617b      	str	r3, [r7, #20]
      break;
 8003b5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	3301      	adds	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	fb03 f202 	mul.w	r2, r3, r2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0e5b      	lsrs	r3, r3, #25
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	08006838 	.word	0x08006838
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08006830 	.word	0x08006830

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c04:	f7ff ffda 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08006830 	.word	0x08006830

08003c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c44:	f7ff f9ee 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c48:	6178      	str	r0, [r7, #20]
 8003c4a:	e014      	b.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	4a24      	ldr	r2, [pc, #144]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c64:	f7ff f9de 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c7c:	d10b      	bne.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b80      	cmp	r3, #128	@ 0x80
 8003c82:	d919      	bls.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c88:	d902      	bls.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e013      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c90:	2301      	movs	r3, #1
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e010      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d902      	bls.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e00a      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b80      	cmp	r3, #128	@ 0x80
 8003ca6:	d102      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca8:	2302      	movs	r3, #2
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e004      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d101      	bne.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 0207 	bic.w	r2, r3, #7
 8003cc0:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40022000 	.word	0x40022000

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d041      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d10:	d02a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d16:	d824      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d22:	d81e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d30:	4b86      	ldr	r3, [pc, #536]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a85      	ldr	r2, [pc, #532]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d3c:	e015      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fabb 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3320      	adds	r3, #32
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fba6 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	74fb      	strb	r3, [r7, #19]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d70:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d7e:	4973      	ldr	r1, [pc, #460]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d86:	e001      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003da2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da6:	d824      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003db2:	d81e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc0:	4b62      	ldr	r3, [pc, #392]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a61      	ldr	r2, [pc, #388]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fa73 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3320      	adds	r3, #32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb5e 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e00:	4b52      	ldr	r3, [pc, #328]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e0e:	494f      	ldr	r1, [pc, #316]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a0 	beq.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2e:	4b47      	ldr	r3, [pc, #284]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e48:	4a40      	ldr	r2, [pc, #256]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e50:	4b3e      	ldr	r3, [pc, #248]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e60:	4b3b      	ldr	r3, [pc, #236]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3a      	ldr	r2, [pc, #232]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6c:	f7fc ffd8 	bl	8000e20 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fc ffd4 	bl	8000e20 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	74fb      	strb	r3, [r7, #19]
        break;
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e88:	4b31      	ldr	r3, [pc, #196]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d15c      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d019      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec4:	4b21      	ldr	r3, [pc, #132]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a20      	ldr	r2, [pc, #128]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fc ff93 	bl	8000e20 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efc:	e00b      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fc ff8f 	bl	8000e20 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	74fb      	strb	r3, [r7, #19]
            break;
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ec      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3a:	4904      	ldr	r1, [pc, #16]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f42:	e009      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	74bb      	strb	r3, [r7, #18]
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f58:	7c7b      	ldrb	r3, [r7, #17]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	4a9d      	ldr	r2, [pc, #628]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f76:	4b98      	ldr	r3, [pc, #608]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f023 0203 	bic.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	4994      	ldr	r1, [pc, #592]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f98:	4b8f      	ldr	r3, [pc, #572]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 020c 	bic.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	498c      	ldr	r1, [pc, #560]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fba:	4b87      	ldr	r3, [pc, #540]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	4983      	ldr	r1, [pc, #524]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	497b      	ldr	r1, [pc, #492]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ffe:	4b76      	ldr	r3, [pc, #472]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	4972      	ldr	r1, [pc, #456]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004020:	4b6d      	ldr	r3, [pc, #436]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	496a      	ldr	r1, [pc, #424]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004042:	4b65      	ldr	r3, [pc, #404]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	4961      	ldr	r1, [pc, #388]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004064:	4b5c      	ldr	r3, [pc, #368]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004072:	4959      	ldr	r1, [pc, #356]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	4950      	ldr	r1, [pc, #320]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a8:	4b4b      	ldr	r3, [pc, #300]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	4948      	ldr	r1, [pc, #288]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ca:	4b43      	ldr	r3, [pc, #268]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	493f      	ldr	r1, [pc, #252]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d028      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ec:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fa:	4937      	ldr	r1, [pc, #220]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410a:	d106      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e011      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004122:	d10c      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f8c8 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	491f      	ldr	r1, [pc, #124]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004174:	60d3      	str	r3, [r2, #12]
 8004176:	e011      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f899 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	4908      	ldr	r1, [pc, #32]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c6:	d109      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a02      	ldr	r2, [pc, #8]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041d2:	60d3      	str	r3, [r2, #12]
 80041d4:	e014      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f867 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800421a:	4928      	ldr	r1, [pc, #160]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f844 	bl	80042c0 <RCCEx_PLLSAI1_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d014      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	74bb      	strb	r3, [r7, #18]
 8004246:	e011      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3320      	adds	r3, #32
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f925 	bl	80044a8 <RCCEx_PLLSAI2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004286:	490d      	ldr	r1, [pc, #52]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042aa:	4904      	ldr	r1, [pc, #16]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000

080042c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ce:	4b75      	ldr	r3, [pc, #468]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
       ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042f2:	4b6c      	ldr	r3, [pc, #432]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
       ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d047      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e044      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d018      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x86>
 8004314:	2b03      	cmp	r3, #3
 8004316:	d825      	bhi.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
 8004318:	2b01      	cmp	r3, #1
 800431a:	d002      	beq.n	8004322 <RCCEx_PLLSAI1_Config+0x62>
 800431c:	2b02      	cmp	r3, #2
 800431e:	d009      	beq.n	8004334 <RCCEx_PLLSAI1_Config+0x74>
 8004320:	e020      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004322:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004332:	e01a      	b.n	800436a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004334:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e013      	b.n	800436e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004346:	4b57      	ldr	r3, [pc, #348]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004362:	e006      	b.n	8004372 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e004      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004372:	bf00      	nop
    }

    if(status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	430b      	orrs	r3, r1
 8004390:	4944      	ldr	r1, [pc, #272]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d17d      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fc fd3a 	bl	8000e20 <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b0:	f7fc fd36 	bl	8000e20 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
        break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043c4:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ef      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d160      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	0211      	lsls	r1, r2, #8
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	0912      	lsrs	r2, r2, #4
 80043f4:	0452      	lsls	r2, r2, #17
 80043f6:	430a      	orrs	r2, r1
 80043f8:	492a      	ldr	r1, [pc, #168]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
 80043fe:	e027      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d112      	bne.n	800442c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004406:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800440e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	0211      	lsls	r1, r2, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6912      	ldr	r2, [r2, #16]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	3a01      	subs	r2, #1
 8004420:	0552      	lsls	r2, r2, #21
 8004422:	430a      	orrs	r2, r1
 8004424:	491f      	ldr	r1, [pc, #124]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
 800442a:	e011      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004434:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6952      	ldr	r2, [r2, #20]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	430a      	orrs	r2, r1
 800444a:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004450:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800445a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fc fce0 	bl	8000e20 <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004462:	e009      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004464:	f7fc fcdc 	bl	8000e20 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          break;
 8004476:	e005      	b.n	8004484 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044c2:	4b67      	ldr	r3, [pc, #412]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10d      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
       ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044da:	4b61      	ldr	r3, [pc, #388]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d047      	beq.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e044      	b.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d018      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x86>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d825      	bhi.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d002      	beq.n	800450a <RCCEx_PLLSAI2_Config+0x62>
 8004504:	2b02      	cmp	r3, #2
 8004506:	d009      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x74>
 8004508:	e020      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450a:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11d      	bne.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451a:	e01a      	b.n	8004552 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800451c:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e013      	b.n	8004556 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452e:	4b4c      	ldr	r3, [pc, #304]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800453a:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800454a:	e006      	b.n	800455a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e004      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800455a:	bf00      	nop
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	430b      	orrs	r3, r1
 8004578:	4939      	ldr	r1, [pc, #228]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d167      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004584:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fc46 	bl	8000e20 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004598:	f7fc fc42 	bl	8000e20 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
        break;
 80045aa:	e005      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ef      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d14a      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c4:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	0912      	lsrs	r2, r2, #4
 80045dc:	0452      	lsls	r2, r2, #17
 80045de:	430a      	orrs	r2, r1
 80045e0:	491f      	ldr	r1, [pc, #124]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	614b      	str	r3, [r1, #20]
 80045e6:	e011      	b.n	800460c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6912      	ldr	r2, [r2, #16]
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0652      	lsls	r2, r2, #25
 8004604:	430a      	orrs	r2, r1
 8004606:	4916      	ldr	r1, [pc, #88]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800460c:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc fc02 	bl	8000e20 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004620:	f7fc fbfe 	bl	8000e20 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
          break;
 8004632:	e005      	b.n	8004640 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4904      	ldr	r1, [pc, #16]	@ (8004660 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e040      	b.n	80046f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc f982 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	@ 0x24
 8004690:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fe90 	bl	80053d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fbd5 	bl	8004e60 <UART_SetConfig>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01b      	b.n	80046f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 ff0f 	bl	8005514 <UART_CheckIdleState>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004714:	2b20      	cmp	r3, #32
 8004716:	d177      	bne.n	8004808 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Transmit+0x24>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e070      	b.n	800480a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2221      	movs	r2, #33	@ 0x21
 8004734:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004736:	f7fc fb73 	bl	8000e20 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004754:	d108      	bne.n	8004768 <HAL_UART_Transmit+0x68>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e003      	b.n	8004770 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004770:	e02f      	b.n	80047d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 ff71 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e03b      	b.n	800480a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	881a      	ldrh	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a4:	b292      	uxth	r2, r2
 80047a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	3302      	adds	r3, #2
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e007      	b.n	80047c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1c9      	bne.n	8004772 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2140      	movs	r1, #64	@ 0x40
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 ff3b 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e005      	b.n	800480a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b0ba      	sub	sp, #232	@ 0xe8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800483a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800483e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004842:	4013      	ands	r3, r2
 8004844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d115      	bne.n	800487c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00f      	beq.n	800487c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 82ca 	beq.w	8004e06 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
      }
      return;
 800487a:	e2c4      	b.n	8004e06 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800487c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8117 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004892:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004896:	4b85      	ldr	r3, [pc, #532]	@ (8004aac <HAL_UART_IRQHandler+0x298>)
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 810a 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d011      	beq.n	80048d0 <HAL_UART_IRQHandler+0xbc>
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d011      	beq.n	8004900 <HAL_UART_IRQHandler+0xec>
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d011      	beq.n	8004930 <HAL_UART_IRQHandler+0x11c>
 800490c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004926:	f043 0202 	orr.w	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d017      	beq.n	800496c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2208      	movs	r2, #8
 800495a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004962:	f043 0208 	orr.w	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_UART_IRQHandler+0x18a>
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800498c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8230 	beq.w	8004e0a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d04f      	beq.n	8004a96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fea1 	bl	800573e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b40      	cmp	r3, #64	@ 0x40
 8004a08:	d141      	bne.n	8004a8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d9      	bne.n	8004a0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a62:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <HAL_UART_IRQHandler+0x29c>)
 8004a64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe f8bd 	bl	8002bea <HAL_DMA_Abort_IT>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d017      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e00f      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9d4 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	e00b      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9d0 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e007      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9cc 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004aa4:	e1b1      	b.n	8004e0a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa6:	bf00      	nop
    return;
 8004aa8:	e1af      	b.n	8004e0a <HAL_UART_IRQHandler+0x5f6>
 8004aaa:	bf00      	nop
 8004aac:	04000120 	.word	0x04000120
 8004ab0:	08005807 	.word	0x08005807

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 816a 	bne.w	8004d92 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8163 	beq.w	8004d92 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 815c 	beq.w	8004d92 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	f040 80d4 	bne.w	8004c9a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80ad 	beq.w	8004c62 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b12:	429a      	cmp	r2, r3
 8004b14:	f080 80a5 	bcs.w	8004c62 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 8086 	bne.w	8004c40 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1da      	bne.n	8004b34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ba2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e1      	bne.n	8004b7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004be0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004be4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e3      	bne.n	8004bba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e4      	bne.n	8004c00 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd ff97 	bl	8002b6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8f4 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c60:	e0d5      	b.n	8004e0e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	f040 80ce 	bne.w	8004e0e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	f040 80c5 	bne.w	8004e0e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8d8 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
      return;
 8004c98:	e0b9      	b.n	8004e0e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80ab 	beq.w	8004e12 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80a6 	beq.w	8004e12 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e4      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e3      	bne.n	8004cfc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	617b      	str	r3, [r7, #20]
   return(result);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e4      	bne.n	8004d48 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f85c 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d90:	e03f      	b.n	8004e12 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00e      	beq.n	8004dbc <HAL_UART_IRQHandler+0x5a8>
 8004d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fd66 	bl	8005886 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dba:	e02d      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01c      	beq.n	8004e16 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
    }
    return;
 8004de4:	e017      	b.n	8004e16 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <HAL_UART_IRQHandler+0x604>
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fd17 	bl	8005832 <UART_EndTransmit_IT>
    return;
 8004e04:	e008      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
      return;
 8004e06:	bf00      	nop
 8004e08:	e006      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
    return;
 8004e0a:	bf00      	nop
 8004e0c:	e004      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
      return;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
      return;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <HAL_UART_IRQHandler+0x604>
    return;
 8004e16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e18:	37e8      	adds	r7, #232	@ 0xe8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b08a      	sub	sp, #40	@ 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4ba4      	ldr	r3, [pc, #656]	@ (8005120 <UART_SetConfig+0x2c0>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a99      	ldr	r2, [pc, #612]	@ (8005124 <UART_SetConfig+0x2c4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a90      	ldr	r2, [pc, #576]	@ (8005128 <UART_SetConfig+0x2c8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d126      	bne.n	8004f38 <UART_SetConfig+0xd8>
 8004eea:	4b90      	ldr	r3, [pc, #576]	@ (800512c <UART_SetConfig+0x2cc>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d81b      	bhi.n	8004f30 <UART_SetConfig+0xd0>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <UART_SetConfig+0xa0>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e116      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e112      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e10e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e10a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e106      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <UART_SetConfig+0x2d0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d138      	bne.n	8004fb4 <UART_SetConfig+0x154>
 8004f42:	4b7a      	ldr	r3, [pc, #488]	@ (800512c <UART_SetConfig+0x2cc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	d82d      	bhi.n	8004fac <UART_SetConfig+0x14c>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <UART_SetConfig+0xf8>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	08004fad 	.word	0x08004fad
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004fad 	.word	0x08004fad
 8004f70:	08004fad 	.word	0x08004fad
 8004f74:	08004fad 	.word	0x08004fad
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e0d8      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e0d4      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e0d0      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e0cc      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e0c8      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005134 <UART_SetConfig+0x2d4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d125      	bne.n	800500a <UART_SetConfig+0x1aa>
 8004fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800512c <UART_SetConfig+0x2cc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d016      	beq.n	8004ffa <UART_SetConfig+0x19a>
 8004fcc:	2b30      	cmp	r3, #48	@ 0x30
 8004fce:	d818      	bhi.n	8005002 <UART_SetConfig+0x1a2>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d00a      	beq.n	8004fea <UART_SetConfig+0x18a>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d814      	bhi.n	8005002 <UART_SetConfig+0x1a2>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <UART_SetConfig+0x182>
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d008      	beq.n	8004ff2 <UART_SetConfig+0x192>
 8004fe0:	e00f      	b.n	8005002 <UART_SetConfig+0x1a2>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe8:	e0ad      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004fea:	2302      	movs	r3, #2
 8004fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff0:	e0a9      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff8:	e0a5      	b.n	8005146 <UART_SetConfig+0x2e6>
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005000:	e0a1      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005002:	2310      	movs	r3, #16
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005008:	e09d      	b.n	8005146 <UART_SetConfig+0x2e6>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4a      	ldr	r2, [pc, #296]	@ (8005138 <UART_SetConfig+0x2d8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d125      	bne.n	8005060 <UART_SetConfig+0x200>
 8005014:	4b45      	ldr	r3, [pc, #276]	@ (800512c <UART_SetConfig+0x2cc>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800501e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005020:	d016      	beq.n	8005050 <UART_SetConfig+0x1f0>
 8005022:	2bc0      	cmp	r3, #192	@ 0xc0
 8005024:	d818      	bhi.n	8005058 <UART_SetConfig+0x1f8>
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d00a      	beq.n	8005040 <UART_SetConfig+0x1e0>
 800502a:	2b80      	cmp	r3, #128	@ 0x80
 800502c:	d814      	bhi.n	8005058 <UART_SetConfig+0x1f8>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <UART_SetConfig+0x1d8>
 8005032:	2b40      	cmp	r3, #64	@ 0x40
 8005034:	d008      	beq.n	8005048 <UART_SetConfig+0x1e8>
 8005036:	e00f      	b.n	8005058 <UART_SetConfig+0x1f8>
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503e:	e082      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005040:	2302      	movs	r3, #2
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e07e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005048:	2304      	movs	r3, #4
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e07a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005050:	2308      	movs	r3, #8
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e076      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e072      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a35      	ldr	r2, [pc, #212]	@ (800513c <UART_SetConfig+0x2dc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d12a      	bne.n	80050c0 <UART_SetConfig+0x260>
 800506a:	4b30      	ldr	r3, [pc, #192]	@ (800512c <UART_SetConfig+0x2cc>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005078:	d01a      	beq.n	80050b0 <UART_SetConfig+0x250>
 800507a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507e:	d81b      	bhi.n	80050b8 <UART_SetConfig+0x258>
 8005080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005084:	d00c      	beq.n	80050a0 <UART_SetConfig+0x240>
 8005086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508a:	d815      	bhi.n	80050b8 <UART_SetConfig+0x258>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <UART_SetConfig+0x238>
 8005090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005094:	d008      	beq.n	80050a8 <UART_SetConfig+0x248>
 8005096:	e00f      	b.n	80050b8 <UART_SetConfig+0x258>
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e052      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e04e      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e04a      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e046      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e042      	b.n	8005146 <UART_SetConfig+0x2e6>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <UART_SetConfig+0x2c4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d13a      	bne.n	8005140 <UART_SetConfig+0x2e0>
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <UART_SetConfig+0x2cc>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d8:	d01a      	beq.n	8005110 <UART_SetConfig+0x2b0>
 80050da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050de:	d81b      	bhi.n	8005118 <UART_SetConfig+0x2b8>
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e4:	d00c      	beq.n	8005100 <UART_SetConfig+0x2a0>
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ea:	d815      	bhi.n	8005118 <UART_SetConfig+0x2b8>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <UART_SetConfig+0x298>
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f4:	d008      	beq.n	8005108 <UART_SetConfig+0x2a8>
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x2b8>
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e022      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005106:	e01e      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510e:	e01a      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005116:	e016      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e012      	b.n	8005146 <UART_SetConfig+0x2e6>
 8005120:	efff69f3 	.word	0xefff69f3
 8005124:	40008000 	.word	0x40008000
 8005128:	40013800 	.word	0x40013800
 800512c:	40021000 	.word	0x40021000
 8005130:	40004400 	.word	0x40004400
 8005134:	40004800 	.word	0x40004800
 8005138:	40004c00 	.word	0x40004c00
 800513c:	40005000 	.word	0x40005000
 8005140:	2310      	movs	r3, #16
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a9f      	ldr	r2, [pc, #636]	@ (80053c8 <UART_SetConfig+0x568>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d17a      	bne.n	8005246 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005154:	2b08      	cmp	r3, #8
 8005156:	d824      	bhi.n	80051a2 <UART_SetConfig+0x342>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x300>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005185 	.word	0x08005185
 8005164:	080051a3 	.word	0x080051a3
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051a3 	.word	0x080051a3
 8005170:	08005193 	.word	0x08005193
 8005174:	080051a3 	.word	0x080051a3
 8005178:	080051a3 	.word	0x080051a3
 800517c:	080051a3 	.word	0x080051a3
 8005180:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe fd26 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b8f      	ldr	r3, [pc, #572]	@ (80053cc <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fc87 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80fb 	beq.w	80053ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d305      	bcc.n	80051d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d903      	bls.n	80051da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d8:	e0e8      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2200      	movs	r2, #0
 80051de:	461c      	mov	r4, r3
 80051e0:	4615      	mov	r5, r2
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	022b      	lsls	r3, r5, #8
 80051ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051f0:	0222      	lsls	r2, r4, #8
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6849      	ldr	r1, [r1, #4]
 80051f6:	0849      	lsrs	r1, r1, #1
 80051f8:	2000      	movs	r0, #0
 80051fa:	4688      	mov	r8, r1
 80051fc:	4681      	mov	r9, r0
 80051fe:	eb12 0a08 	adds.w	sl, r2, r8
 8005202:	eb43 0b09 	adc.w	fp, r3, r9
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005214:	4650      	mov	r0, sl
 8005216:	4659      	mov	r1, fp
 8005218:	f7fb f82a 	bl	8000270 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800522a:	d308      	bcc.n	800523e <UART_SetConfig+0x3de>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005232:	d204      	bcs.n	800523e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	e0b6      	b.n	80053ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005244:	e0b2      	b.n	80053ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524e:	d15e      	bne.n	800530e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005250:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005254:	2b08      	cmp	r3, #8
 8005256:	d828      	bhi.n	80052aa <UART_SetConfig+0x44a>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x400>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005285 	.word	0x08005285
 8005264:	0800528d 	.word	0x0800528d
 8005268:	08005295 	.word	0x08005295
 800526c:	080052ab 	.word	0x080052ab
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052ab 	.word	0x080052ab
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052ab 	.word	0x080052ab
 8005280:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fe fca6 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005288:	61f8      	str	r0, [r7, #28]
        break;
 800528a:	e014      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fe fcb8 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8005290:	61f8      	str	r0, [r7, #28]
        break;
 8005292:	e010      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005294:	4b4d      	ldr	r3, [pc, #308]	@ (80053cc <UART_SetConfig+0x56c>)
 8005296:	61fb      	str	r3, [r7, #28]
        break;
 8005298:	e00d      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529a:	f7fe fc03 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 800529e:	61f8      	str	r0, [r7, #28]
        break;
 80052a0:	e009      	b.n	80052b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a6:	61fb      	str	r3, [r7, #28]
        break;
 80052a8:	e005      	b.n	80052b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d077      	beq.n	80053ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	005a      	lsls	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d916      	bls.n	8005306 <UART_SetConfig+0x4a6>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052de:	d212      	bcs.n	8005306 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f023 030f 	bic.w	r3, r3, #15
 80052e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	8afb      	ldrh	r3, [r7, #22]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	8afa      	ldrh	r2, [r7, #22]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	e052      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800530c:	e04e      	b.n	80053ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005312:	2b08      	cmp	r3, #8
 8005314:	d827      	bhi.n	8005366 <UART_SetConfig+0x506>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <UART_SetConfig+0x4bc>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005341 	.word	0x08005341
 8005320:	08005349 	.word	0x08005349
 8005324:	08005351 	.word	0x08005351
 8005328:	08005367 	.word	0x08005367
 800532c:	08005357 	.word	0x08005357
 8005330:	08005367 	.word	0x08005367
 8005334:	08005367 	.word	0x08005367
 8005338:	08005367 	.word	0x08005367
 800533c:	0800535f 	.word	0x0800535f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005340:	f7fe fc48 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005344:	61f8      	str	r0, [r7, #28]
        break;
 8005346:	e014      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe fc5a 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e010      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005350:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <UART_SetConfig+0x56c>)
 8005352:	61fb      	str	r3, [r7, #28]
        break;
 8005354:	e00d      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7fe fba5 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 800535a:	61f8      	str	r0, [r7, #28]
        break;
 800535c:	e009      	b.n	8005372 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005362:	61fb      	str	r3, [r7, #28]
        break;
 8005364:	e005      	b.n	8005372 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005370:	bf00      	nop
    }

    if (pclk != 0U)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d019      	beq.n	80053ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	085a      	lsrs	r2, r3, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d909      	bls.n	80053a6 <UART_SetConfig+0x546>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005398:	d205      	bcs.n	80053a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
 80053a4:	e002      	b.n	80053ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3728      	adds	r7, #40	@ 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	40008000 	.word	0x40008000
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ce:	d10a      	bne.n	80054e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b098      	sub	sp, #96	@ 0x60
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005524:	f7fb fc7c 	bl	8000e20 <HAL_GetTick>
 8005528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d12e      	bne.n	8005596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f88c 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d021      	beq.n	8005596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005566:	653b      	str	r3, [r7, #80]	@ 0x50
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
 8005572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800557e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e062      	b.n	800565c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d149      	bne.n	8005638 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f856 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03c      	beq.n	8005638 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	623b      	str	r3, [r7, #32]
   return(result);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	617b      	str	r3, [r7, #20]
   return(result);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e011      	b.n	800565c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3758      	adds	r7, #88	@ 0x58
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	e04f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800567c:	d04b      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fb fbcf 	bl	8000e20 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <UART_WaitOnFlagUntilTimeout+0x30>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e04e      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d037      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b80      	cmp	r3, #128	@ 0x80
 80056aa:	d034      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d031      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d110      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2208      	movs	r2, #8
 80056c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f838 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2208      	movs	r2, #8
 80056d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e029      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f0:	d111      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f81e 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e00f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	429a      	cmp	r2, r3
 8005732:	d0a0      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b095      	sub	sp, #84	@ 0x54
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005764:	643b      	str	r3, [r7, #64]	@ 0x40
 8005766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	61fb      	str	r3, [r7, #28]
   return(result);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d118      	bne.n	80057e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff fb05 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b088      	sub	sp, #32
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	60bb      	str	r3, [r7, #8]
   return(result);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6979      	ldr	r1, [r7, #20]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	613b      	str	r3, [r7, #16]
   return(result);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fad1 	bl	8004e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587e:	bf00      	nop
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <std>:
 800589c:	2300      	movs	r3, #0
 800589e:	b510      	push	{r4, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	e9c0 3300 	strd	r3, r3, [r0]
 80058a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058aa:	6083      	str	r3, [r0, #8]
 80058ac:	8181      	strh	r1, [r0, #12]
 80058ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80058b0:	81c2      	strh	r2, [r0, #14]
 80058b2:	6183      	str	r3, [r0, #24]
 80058b4:	4619      	mov	r1, r3
 80058b6:	2208      	movs	r2, #8
 80058b8:	305c      	adds	r0, #92	@ 0x5c
 80058ba:	f000 f921 	bl	8005b00 <memset>
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x58>)
 80058c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x5c>)
 80058c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <std+0x60>)
 80058c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x64>)
 80058cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005904 <std+0x68>)
 80058d0:	6224      	str	r4, [r4, #32]
 80058d2:	429c      	cmp	r4, r3
 80058d4:	d006      	beq.n	80058e4 <std+0x48>
 80058d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058da:	4294      	cmp	r4, r2
 80058dc:	d002      	beq.n	80058e4 <std+0x48>
 80058de:	33d0      	adds	r3, #208	@ 0xd0
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d105      	bne.n	80058f0 <std+0x54>
 80058e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ec:	f000 b93a 	b.w	8005b64 <__retarget_lock_init_recursive>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	bf00      	nop
 80058f4:	080063bd 	.word	0x080063bd
 80058f8:	080063df 	.word	0x080063df
 80058fc:	08006417 	.word	0x08006417
 8005900:	0800643b 	.word	0x0800643b
 8005904:	20000204 	.word	0x20000204

08005908 <stdio_exit_handler>:
 8005908:	4a02      	ldr	r2, [pc, #8]	@ (8005914 <stdio_exit_handler+0xc>)
 800590a:	4903      	ldr	r1, [pc, #12]	@ (8005918 <stdio_exit_handler+0x10>)
 800590c:	4803      	ldr	r0, [pc, #12]	@ (800591c <stdio_exit_handler+0x14>)
 800590e:	f000 b869 	b.w	80059e4 <_fwalk_sglue>
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	08006355 	.word	0x08006355
 800591c:	2000001c 	.word	0x2000001c

08005920 <cleanup_stdio>:
 8005920:	6841      	ldr	r1, [r0, #4]
 8005922:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <cleanup_stdio+0x34>)
 8005924:	4299      	cmp	r1, r3
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	d001      	beq.n	8005930 <cleanup_stdio+0x10>
 800592c:	f000 fd12 	bl	8006354 <_fflush_r>
 8005930:	68a1      	ldr	r1, [r4, #8]
 8005932:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <cleanup_stdio+0x38>)
 8005934:	4299      	cmp	r1, r3
 8005936:	d002      	beq.n	800593e <cleanup_stdio+0x1e>
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fd0b 	bl	8006354 <_fflush_r>
 800593e:	68e1      	ldr	r1, [r4, #12]
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <cleanup_stdio+0x3c>)
 8005942:	4299      	cmp	r1, r3
 8005944:	d004      	beq.n	8005950 <cleanup_stdio+0x30>
 8005946:	4620      	mov	r0, r4
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	f000 bd02 	b.w	8006354 <_fflush_r>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	bf00      	nop
 8005954:	20000204 	.word	0x20000204
 8005958:	2000026c 	.word	0x2000026c
 800595c:	200002d4 	.word	0x200002d4

08005960 <global_stdio_init.part.0>:
 8005960:	b510      	push	{r4, lr}
 8005962:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x30>)
 8005964:	4c0b      	ldr	r4, [pc, #44]	@ (8005994 <global_stdio_init.part.0+0x34>)
 8005966:	4a0c      	ldr	r2, [pc, #48]	@ (8005998 <global_stdio_init.part.0+0x38>)
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	4620      	mov	r0, r4
 800596c:	2200      	movs	r2, #0
 800596e:	2104      	movs	r1, #4
 8005970:	f7ff ff94 	bl	800589c <std>
 8005974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005978:	2201      	movs	r2, #1
 800597a:	2109      	movs	r1, #9
 800597c:	f7ff ff8e 	bl	800589c <std>
 8005980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005984:	2202      	movs	r2, #2
 8005986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598a:	2112      	movs	r1, #18
 800598c:	f7ff bf86 	b.w	800589c <std>
 8005990:	2000033c 	.word	0x2000033c
 8005994:	20000204 	.word	0x20000204
 8005998:	08005909 	.word	0x08005909

0800599c <__sfp_lock_acquire>:
 800599c:	4801      	ldr	r0, [pc, #4]	@ (80059a4 <__sfp_lock_acquire+0x8>)
 800599e:	f000 b8e2 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 80059a2:	bf00      	nop
 80059a4:	20000341 	.word	0x20000341

080059a8 <__sfp_lock_release>:
 80059a8:	4801      	ldr	r0, [pc, #4]	@ (80059b0 <__sfp_lock_release+0x8>)
 80059aa:	f000 b8dd 	b.w	8005b68 <__retarget_lock_release_recursive>
 80059ae:	bf00      	nop
 80059b0:	20000341 	.word	0x20000341

080059b4 <__sinit>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4604      	mov	r4, r0
 80059b8:	f7ff fff0 	bl	800599c <__sfp_lock_acquire>
 80059bc:	6a23      	ldr	r3, [r4, #32]
 80059be:	b11b      	cbz	r3, 80059c8 <__sinit+0x14>
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c4:	f7ff bff0 	b.w	80059a8 <__sfp_lock_release>
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <__sinit+0x28>)
 80059ca:	6223      	str	r3, [r4, #32]
 80059cc:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <__sinit+0x2c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f5      	bne.n	80059c0 <__sinit+0xc>
 80059d4:	f7ff ffc4 	bl	8005960 <global_stdio_init.part.0>
 80059d8:	e7f2      	b.n	80059c0 <__sinit+0xc>
 80059da:	bf00      	nop
 80059dc:	08005921 	.word	0x08005921
 80059e0:	2000033c 	.word	0x2000033c

080059e4 <_fwalk_sglue>:
 80059e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e8:	4607      	mov	r7, r0
 80059ea:	4688      	mov	r8, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	2600      	movs	r6, #0
 80059f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f4:	f1b9 0901 	subs.w	r9, r9, #1
 80059f8:	d505      	bpl.n	8005a06 <_fwalk_sglue+0x22>
 80059fa:	6824      	ldr	r4, [r4, #0]
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	d1f7      	bne.n	80059f0 <_fwalk_sglue+0xc>
 8005a00:	4630      	mov	r0, r6
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d907      	bls.n	8005a1c <_fwalk_sglue+0x38>
 8005a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a10:	3301      	adds	r3, #1
 8005a12:	d003      	beq.n	8005a1c <_fwalk_sglue+0x38>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	4306      	orrs	r6, r0
 8005a1c:	3568      	adds	r5, #104	@ 0x68
 8005a1e:	e7e9      	b.n	80059f4 <_fwalk_sglue+0x10>

08005a20 <iprintf>:
 8005a20:	b40f      	push	{r0, r1, r2, r3}
 8005a22:	b507      	push	{r0, r1, r2, lr}
 8005a24:	4906      	ldr	r1, [pc, #24]	@ (8005a40 <iprintf+0x20>)
 8005a26:	ab04      	add	r3, sp, #16
 8005a28:	6808      	ldr	r0, [r1, #0]
 8005a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2e:	6881      	ldr	r1, [r0, #8]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	f000 f8c3 	bl	8005bbc <_vfiprintf_r>
 8005a36:	b003      	add	sp, #12
 8005a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a3c:	b004      	add	sp, #16
 8005a3e:	4770      	bx	lr
 8005a40:	20000018 	.word	0x20000018

08005a44 <_puts_r>:
 8005a44:	6a03      	ldr	r3, [r0, #32]
 8005a46:	b570      	push	{r4, r5, r6, lr}
 8005a48:	6884      	ldr	r4, [r0, #8]
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	460e      	mov	r6, r1
 8005a4e:	b90b      	cbnz	r3, 8005a54 <_puts_r+0x10>
 8005a50:	f7ff ffb0 	bl	80059b4 <__sinit>
 8005a54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a56:	07db      	lsls	r3, r3, #31
 8005a58:	d405      	bmi.n	8005a66 <_puts_r+0x22>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	0598      	lsls	r0, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_puts_r+0x22>
 8005a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a62:	f000 f880 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	0719      	lsls	r1, r3, #28
 8005a6a:	d502      	bpl.n	8005a72 <_puts_r+0x2e>
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d135      	bne.n	8005ade <_puts_r+0x9a>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 fd23 	bl	80064c0 <__swsetup_r>
 8005a7a:	b380      	cbz	r0, 8005ade <_puts_r+0x9a>
 8005a7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005a80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a82:	07da      	lsls	r2, r3, #31
 8005a84:	d405      	bmi.n	8005a92 <_puts_r+0x4e>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	d402      	bmi.n	8005a92 <_puts_r+0x4e>
 8005a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a8e:	f000 f86b 	bl	8005b68 <__retarget_lock_release_recursive>
 8005a92:	4628      	mov	r0, r5
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da04      	bge.n	8005aa4 <_puts_r+0x60>
 8005a9a:	69a2      	ldr	r2, [r4, #24]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	dc17      	bgt.n	8005ad0 <_puts_r+0x8c>
 8005aa0:	290a      	cmp	r1, #10
 8005aa2:	d015      	beq.n	8005ad0 <_puts_r+0x8c>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	7019      	strb	r1, [r3, #0]
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d1ed      	bne.n	8005a96 <_puts_r+0x52>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da11      	bge.n	8005ae2 <_puts_r+0x9e>
 8005abe:	4622      	mov	r2, r4
 8005ac0:	210a      	movs	r1, #10
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 fcbd 	bl	8006442 <__swbuf_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0d7      	beq.n	8005a7c <_puts_r+0x38>
 8005acc:	250a      	movs	r5, #10
 8005ace:	e7d7      	b.n	8005a80 <_puts_r+0x3c>
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 fcb5 	bl	8006442 <__swbuf_r>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d1e7      	bne.n	8005aac <_puts_r+0x68>
 8005adc:	e7ce      	b.n	8005a7c <_puts_r+0x38>
 8005ade:	3e01      	subs	r6, #1
 8005ae0:	e7e4      	b.n	8005aac <_puts_r+0x68>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	220a      	movs	r2, #10
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e7ee      	b.n	8005acc <_puts_r+0x88>
	...

08005af0 <puts>:
 8005af0:	4b02      	ldr	r3, [pc, #8]	@ (8005afc <puts+0xc>)
 8005af2:	4601      	mov	r1, r0
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f7ff bfa5 	b.w	8005a44 <_puts_r>
 8005afa:	bf00      	nop
 8005afc:	20000018 	.word	0x20000018

08005b00 <memset>:
 8005b00:	4402      	add	r2, r0
 8005b02:	4603      	mov	r3, r0
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d100      	bne.n	8005b0a <memset+0xa>
 8005b08:	4770      	bx	lr
 8005b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0e:	e7f9      	b.n	8005b04 <memset+0x4>

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000018 	.word	0x20000018

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 fe40 	bl	80067b4 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	080068a4 	.word	0x080068a4
 8005b58:	080068a4 	.word	0x080068a4
 8005b5c:	080068a4 	.word	0x080068a4
 8005b60:	080068a8 	.word	0x080068a8

08005b64 <__retarget_lock_init_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_acquire_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__retarget_lock_release_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__sfputc_r>:
 8005b6a:	6893      	ldr	r3, [r2, #8]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	b410      	push	{r4}
 8005b72:	6093      	str	r3, [r2, #8]
 8005b74:	da08      	bge.n	8005b88 <__sfputc_r+0x1e>
 8005b76:	6994      	ldr	r4, [r2, #24]
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	db01      	blt.n	8005b80 <__sfputc_r+0x16>
 8005b7c:	290a      	cmp	r1, #10
 8005b7e:	d103      	bne.n	8005b88 <__sfputc_r+0x1e>
 8005b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b84:	f000 bc5d 	b.w	8006442 <__swbuf_r>
 8005b88:	6813      	ldr	r3, [r2, #0]
 8005b8a:	1c58      	adds	r0, r3, #1
 8005b8c:	6010      	str	r0, [r2, #0]
 8005b8e:	7019      	strb	r1, [r3, #0]
 8005b90:	4608      	mov	r0, r1
 8005b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <__sfputs_r>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460f      	mov	r7, r1
 8005b9e:	4614      	mov	r4, r2
 8005ba0:	18d5      	adds	r5, r2, r3
 8005ba2:	42ac      	cmp	r4, r5
 8005ba4:	d101      	bne.n	8005baa <__sfputs_r+0x12>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	e007      	b.n	8005bba <__sfputs_r+0x22>
 8005baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bae:	463a      	mov	r2, r7
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7ff ffda 	bl	8005b6a <__sfputc_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	d1f3      	bne.n	8005ba2 <__sfputs_r+0xa>
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bbc <_vfiprintf_r>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	b09d      	sub	sp, #116	@ 0x74
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	4698      	mov	r8, r3
 8005bc8:	4606      	mov	r6, r0
 8005bca:	b118      	cbz	r0, 8005bd4 <_vfiprintf_r+0x18>
 8005bcc:	6a03      	ldr	r3, [r0, #32]
 8005bce:	b90b      	cbnz	r3, 8005bd4 <_vfiprintf_r+0x18>
 8005bd0:	f7ff fef0 	bl	80059b4 <__sinit>
 8005bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bd6:	07d9      	lsls	r1, r3, #31
 8005bd8:	d405      	bmi.n	8005be6 <_vfiprintf_r+0x2a>
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	059a      	lsls	r2, r3, #22
 8005bde:	d402      	bmi.n	8005be6 <_vfiprintf_r+0x2a>
 8005be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005be2:	f7ff ffc0 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005be6:	89ab      	ldrh	r3, [r5, #12]
 8005be8:	071b      	lsls	r3, r3, #28
 8005bea:	d501      	bpl.n	8005bf0 <_vfiprintf_r+0x34>
 8005bec:	692b      	ldr	r3, [r5, #16]
 8005bee:	b99b      	cbnz	r3, 8005c18 <_vfiprintf_r+0x5c>
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f000 fc64 	bl	80064c0 <__swsetup_r>
 8005bf8:	b170      	cbz	r0, 8005c18 <_vfiprintf_r+0x5c>
 8005bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bfc:	07dc      	lsls	r4, r3, #31
 8005bfe:	d504      	bpl.n	8005c0a <_vfiprintf_r+0x4e>
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c04:	b01d      	add	sp, #116	@ 0x74
 8005c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0a:	89ab      	ldrh	r3, [r5, #12]
 8005c0c:	0598      	lsls	r0, r3, #22
 8005c0e:	d4f7      	bmi.n	8005c00 <_vfiprintf_r+0x44>
 8005c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c12:	f7ff ffa9 	bl	8005b68 <__retarget_lock_release_recursive>
 8005c16:	e7f3      	b.n	8005c00 <_vfiprintf_r+0x44>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c26:	2330      	movs	r3, #48	@ 0x30
 8005c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005dd8 <_vfiprintf_r+0x21c>
 8005c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c30:	f04f 0901 	mov.w	r9, #1
 8005c34:	4623      	mov	r3, r4
 8005c36:	469a      	mov	sl, r3
 8005c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3c:	b10a      	cbz	r2, 8005c42 <_vfiprintf_r+0x86>
 8005c3e:	2a25      	cmp	r2, #37	@ 0x25
 8005c40:	d1f9      	bne.n	8005c36 <_vfiprintf_r+0x7a>
 8005c42:	ebba 0b04 	subs.w	fp, sl, r4
 8005c46:	d00b      	beq.n	8005c60 <_vfiprintf_r+0xa4>
 8005c48:	465b      	mov	r3, fp
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ffa2 	bl	8005b98 <__sfputs_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	f000 80a7 	beq.w	8005da8 <_vfiprintf_r+0x1ec>
 8005c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c5c:	445a      	add	r2, fp
 8005c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c60:	f89a 3000 	ldrb.w	r3, [sl]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 809f 	beq.w	8005da8 <_vfiprintf_r+0x1ec>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c74:	f10a 0a01 	add.w	sl, sl, #1
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c82:	4654      	mov	r4, sl
 8005c84:	2205      	movs	r2, #5
 8005c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8a:	4853      	ldr	r0, [pc, #332]	@ (8005dd8 <_vfiprintf_r+0x21c>)
 8005c8c:	f7fa faa0 	bl	80001d0 <memchr>
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	b9d8      	cbnz	r0, 8005ccc <_vfiprintf_r+0x110>
 8005c94:	06d1      	lsls	r1, r2, #27
 8005c96:	bf44      	itt	mi
 8005c98:	2320      	movmi	r3, #32
 8005c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c9e:	0713      	lsls	r3, r2, #28
 8005ca0:	bf44      	itt	mi
 8005ca2:	232b      	movmi	r3, #43	@ 0x2b
 8005ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cae:	d015      	beq.n	8005cdc <_vfiprintf_r+0x120>
 8005cb0:	9a07      	ldr	r2, [sp, #28]
 8005cb2:	4654      	mov	r4, sl
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f04f 0c0a 	mov.w	ip, #10
 8005cba:	4621      	mov	r1, r4
 8005cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc0:	3b30      	subs	r3, #48	@ 0x30
 8005cc2:	2b09      	cmp	r3, #9
 8005cc4:	d94b      	bls.n	8005d5e <_vfiprintf_r+0x1a2>
 8005cc6:	b1b0      	cbz	r0, 8005cf6 <_vfiprintf_r+0x13a>
 8005cc8:	9207      	str	r2, [sp, #28]
 8005cca:	e014      	b.n	8005cf6 <_vfiprintf_r+0x13a>
 8005ccc:	eba0 0308 	sub.w	r3, r0, r8
 8005cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	46a2      	mov	sl, r4
 8005cda:	e7d2      	b.n	8005c82 <_vfiprintf_r+0xc6>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	1d19      	adds	r1, r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	9103      	str	r1, [sp, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bfbb      	ittet	lt
 8005ce8:	425b      	neglt	r3, r3
 8005cea:	f042 0202 	orrlt.w	r2, r2, #2
 8005cee:	9307      	strge	r3, [sp, #28]
 8005cf0:	9307      	strlt	r3, [sp, #28]
 8005cf2:	bfb8      	it	lt
 8005cf4:	9204      	strlt	r2, [sp, #16]
 8005cf6:	7823      	ldrb	r3, [r4, #0]
 8005cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cfa:	d10a      	bne.n	8005d12 <_vfiprintf_r+0x156>
 8005cfc:	7863      	ldrb	r3, [r4, #1]
 8005cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d00:	d132      	bne.n	8005d68 <_vfiprintf_r+0x1ac>
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	1d1a      	adds	r2, r3, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	9203      	str	r2, [sp, #12]
 8005d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d0e:	3402      	adds	r4, #2
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005de8 <_vfiprintf_r+0x22c>
 8005d16:	7821      	ldrb	r1, [r4, #0]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	f7fa fa58 	bl	80001d0 <memchr>
 8005d20:	b138      	cbz	r0, 8005d32 <_vfiprintf_r+0x176>
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	eba0 000a 	sub.w	r0, r0, sl
 8005d28:	2240      	movs	r2, #64	@ 0x40
 8005d2a:	4082      	lsls	r2, r0
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	3401      	adds	r4, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d36:	4829      	ldr	r0, [pc, #164]	@ (8005ddc <_vfiprintf_r+0x220>)
 8005d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d3c:	2206      	movs	r2, #6
 8005d3e:	f7fa fa47 	bl	80001d0 <memchr>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d03f      	beq.n	8005dc6 <_vfiprintf_r+0x20a>
 8005d46:	4b26      	ldr	r3, [pc, #152]	@ (8005de0 <_vfiprintf_r+0x224>)
 8005d48:	bb1b      	cbnz	r3, 8005d92 <_vfiprintf_r+0x1d6>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	f023 0307 	bic.w	r3, r3, #7
 8005d52:	3308      	adds	r3, #8
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d58:	443b      	add	r3, r7
 8005d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d5c:	e76a      	b.n	8005c34 <_vfiprintf_r+0x78>
 8005d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d62:	460c      	mov	r4, r1
 8005d64:	2001      	movs	r0, #1
 8005d66:	e7a8      	b.n	8005cba <_vfiprintf_r+0xfe>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f04f 0c0a 	mov.w	ip, #10
 8005d74:	4620      	mov	r0, r4
 8005d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7a:	3a30      	subs	r2, #48	@ 0x30
 8005d7c:	2a09      	cmp	r2, #9
 8005d7e:	d903      	bls.n	8005d88 <_vfiprintf_r+0x1cc>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0c6      	beq.n	8005d12 <_vfiprintf_r+0x156>
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	e7c4      	b.n	8005d12 <_vfiprintf_r+0x156>
 8005d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7f0      	b.n	8005d74 <_vfiprintf_r+0x1b8>
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4b12      	ldr	r3, [pc, #72]	@ (8005de4 <_vfiprintf_r+0x228>)
 8005d9a:	a904      	add	r1, sp, #16
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f3af 8000 	nop.w
 8005da2:	4607      	mov	r7, r0
 8005da4:	1c78      	adds	r0, r7, #1
 8005da6:	d1d6      	bne.n	8005d56 <_vfiprintf_r+0x19a>
 8005da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d405      	bmi.n	8005dba <_vfiprintf_r+0x1fe>
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	059a      	lsls	r2, r3, #22
 8005db2:	d402      	bmi.n	8005dba <_vfiprintf_r+0x1fe>
 8005db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005db6:	f7ff fed7 	bl	8005b68 <__retarget_lock_release_recursive>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	065b      	lsls	r3, r3, #25
 8005dbe:	f53f af1f 	bmi.w	8005c00 <_vfiprintf_r+0x44>
 8005dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dc4:	e71e      	b.n	8005c04 <_vfiprintf_r+0x48>
 8005dc6:	ab03      	add	r3, sp, #12
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <_vfiprintf_r+0x228>)
 8005dce:	a904      	add	r1, sp, #16
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 f91b 	bl	800600c <_printf_i>
 8005dd6:	e7e4      	b.n	8005da2 <_vfiprintf_r+0x1e6>
 8005dd8:	08006868 	.word	0x08006868
 8005ddc:	08006872 	.word	0x08006872
 8005de0:	00000000 	.word	0x00000000
 8005de4:	08005b99 	.word	0x08005b99
 8005de8:	0800686e 	.word	0x0800686e

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0f      	ldr	r6, [pc, #60]	@ (8005e2c <sbrk_aligned+0x40>)
 8005df0:	460c      	mov	r4, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	4605      	mov	r5, r0
 8005df6:	b911      	cbnz	r1, 8005dfe <sbrk_aligned+0x12>
 8005df8:	f000 fc70 	bl	80066dc <_sbrk_r>
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 fc6b 	bl	80066dc <_sbrk_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d103      	bne.n	8005e12 <sbrk_aligned+0x26>
 8005e0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e0e:	4620      	mov	r0, r4
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	1cc4      	adds	r4, r0, #3
 8005e14:	f024 0403 	bic.w	r4, r4, #3
 8005e18:	42a0      	cmp	r0, r4
 8005e1a:	d0f8      	beq.n	8005e0e <sbrk_aligned+0x22>
 8005e1c:	1a21      	subs	r1, r4, r0
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 fc5c 	bl	80066dc <_sbrk_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d1f2      	bne.n	8005e0e <sbrk_aligned+0x22>
 8005e28:	e7ef      	b.n	8005e0a <sbrk_aligned+0x1e>
 8005e2a:	bf00      	nop
 8005e2c:	20000344 	.word	0x20000344

08005e30 <_malloc_r>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	1ccd      	adds	r5, r1, #3
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	4606      	mov	r6, r0
 8005e46:	db01      	blt.n	8005e4c <_malloc_r+0x1c>
 8005e48:	42a9      	cmp	r1, r5
 8005e4a:	d904      	bls.n	8005e56 <_malloc_r+0x26>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	6033      	str	r3, [r6, #0]
 8005e50:	2000      	movs	r0, #0
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f2c <_malloc_r+0xfc>
 8005e5a:	f000 faa3 	bl	80063a4 <__malloc_lock>
 8005e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e62:	461c      	mov	r4, r3
 8005e64:	bb44      	cbnz	r4, 8005eb8 <_malloc_r+0x88>
 8005e66:	4629      	mov	r1, r5
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ffbf 	bl	8005dec <sbrk_aligned>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	4604      	mov	r4, r0
 8005e72:	d158      	bne.n	8005f26 <_malloc_r+0xf6>
 8005e74:	f8d8 4000 	ldr.w	r4, [r8]
 8005e78:	4627      	mov	r7, r4
 8005e7a:	2f00      	cmp	r7, #0
 8005e7c:	d143      	bne.n	8005f06 <_malloc_r+0xd6>
 8005e7e:	2c00      	cmp	r4, #0
 8005e80:	d04b      	beq.n	8005f1a <_malloc_r+0xea>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	4639      	mov	r1, r7
 8005e86:	4630      	mov	r0, r6
 8005e88:	eb04 0903 	add.w	r9, r4, r3
 8005e8c:	f000 fc26 	bl	80066dc <_sbrk_r>
 8005e90:	4581      	cmp	r9, r0
 8005e92:	d142      	bne.n	8005f1a <_malloc_r+0xea>
 8005e94:	6821      	ldr	r1, [r4, #0]
 8005e96:	1a6d      	subs	r5, r5, r1
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ffa6 	bl	8005dec <sbrk_aligned>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d03a      	beq.n	8005f1a <_malloc_r+0xea>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	442b      	add	r3, r5
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	bb62      	cbnz	r2, 8005f0c <_malloc_r+0xdc>
 8005eb2:	f8c8 7000 	str.w	r7, [r8]
 8005eb6:	e00f      	b.n	8005ed8 <_malloc_r+0xa8>
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	1b52      	subs	r2, r2, r5
 8005ebc:	d420      	bmi.n	8005f00 <_malloc_r+0xd0>
 8005ebe:	2a0b      	cmp	r2, #11
 8005ec0:	d917      	bls.n	8005ef2 <_malloc_r+0xc2>
 8005ec2:	1961      	adds	r1, r4, r5
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	6025      	str	r5, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	6059      	strne	r1, [r3, #4]
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	bf08      	it	eq
 8005ed0:	f8c8 1000 	streq.w	r1, [r8]
 8005ed4:	5162      	str	r2, [r4, r5]
 8005ed6:	604b      	str	r3, [r1, #4]
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 fa69 	bl	80063b0 <__malloc_unlock>
 8005ede:	f104 000b 	add.w	r0, r4, #11
 8005ee2:	1d23      	adds	r3, r4, #4
 8005ee4:	f020 0007 	bic.w	r0, r0, #7
 8005ee8:	1ac2      	subs	r2, r0, r3
 8005eea:	bf1c      	itt	ne
 8005eec:	1a1b      	subne	r3, r3, r0
 8005eee:	50a3      	strne	r3, [r4, r2]
 8005ef0:	e7af      	b.n	8005e52 <_malloc_r+0x22>
 8005ef2:	6862      	ldr	r2, [r4, #4]
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	bf0c      	ite	eq
 8005ef8:	f8c8 2000 	streq.w	r2, [r8]
 8005efc:	605a      	strne	r2, [r3, #4]
 8005efe:	e7eb      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f00:	4623      	mov	r3, r4
 8005f02:	6864      	ldr	r4, [r4, #4]
 8005f04:	e7ae      	b.n	8005e64 <_malloc_r+0x34>
 8005f06:	463c      	mov	r4, r7
 8005f08:	687f      	ldr	r7, [r7, #4]
 8005f0a:	e7b6      	b.n	8005e7a <_malloc_r+0x4a>
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d1fb      	bne.n	8005f0c <_malloc_r+0xdc>
 8005f14:	2300      	movs	r3, #0
 8005f16:	6053      	str	r3, [r2, #4]
 8005f18:	e7de      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 fa46 	bl	80063b0 <__malloc_unlock>
 8005f24:	e794      	b.n	8005e50 <_malloc_r+0x20>
 8005f26:	6005      	str	r5, [r0, #0]
 8005f28:	e7d6      	b.n	8005ed8 <_malloc_r+0xa8>
 8005f2a:	bf00      	nop
 8005f2c:	20000348 	.word	0x20000348

08005f30 <_printf_common>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	4616      	mov	r6, r2
 8005f36:	4698      	mov	r8, r3
 8005f38:	688a      	ldr	r2, [r1, #8]
 8005f3a:	690b      	ldr	r3, [r1, #16]
 8005f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bfb8      	it	lt
 8005f44:	4613      	movlt	r3, r2
 8005f46:	6033      	str	r3, [r6, #0]
 8005f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	b10a      	cbz	r2, 8005f56 <_printf_common+0x26>
 8005f52:	3301      	adds	r3, #1
 8005f54:	6033      	str	r3, [r6, #0]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	0699      	lsls	r1, r3, #26
 8005f5a:	bf42      	ittt	mi
 8005f5c:	6833      	ldrmi	r3, [r6, #0]
 8005f5e:	3302      	addmi	r3, #2
 8005f60:	6033      	strmi	r3, [r6, #0]
 8005f62:	6825      	ldr	r5, [r4, #0]
 8005f64:	f015 0506 	ands.w	r5, r5, #6
 8005f68:	d106      	bne.n	8005f78 <_printf_common+0x48>
 8005f6a:	f104 0a19 	add.w	sl, r4, #25
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	6832      	ldr	r2, [r6, #0]
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dc26      	bgt.n	8005fc6 <_printf_common+0x96>
 8005f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	3b00      	subs	r3, #0
 8005f80:	bf18      	it	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	0692      	lsls	r2, r2, #26
 8005f86:	d42b      	bmi.n	8005fe0 <_printf_common+0xb0>
 8005f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	4638      	mov	r0, r7
 8005f90:	47c8      	blx	r9
 8005f92:	3001      	adds	r0, #1
 8005f94:	d01e      	beq.n	8005fd4 <_printf_common+0xa4>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	f003 0306 	and.w	r3, r3, #6
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf02      	ittt	eq
 8005fa2:	68e5      	ldreq	r5, [r4, #12]
 8005fa4:	6833      	ldreq	r3, [r6, #0]
 8005fa6:	1aed      	subeq	r5, r5, r3
 8005fa8:	68a3      	ldr	r3, [r4, #8]
 8005faa:	bf0c      	ite	eq
 8005fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb0:	2500      	movne	r5, #0
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bfc4      	itt	gt
 8005fb6:	1a9b      	subgt	r3, r3, r2
 8005fb8:	18ed      	addgt	r5, r5, r3
 8005fba:	2600      	movs	r6, #0
 8005fbc:	341a      	adds	r4, #26
 8005fbe:	42b5      	cmp	r5, r6
 8005fc0:	d11a      	bne.n	8005ff8 <_printf_common+0xc8>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	e008      	b.n	8005fd8 <_printf_common+0xa8>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4641      	mov	r1, r8
 8005fcc:	4638      	mov	r0, r7
 8005fce:	47c8      	blx	r9
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d103      	bne.n	8005fdc <_printf_common+0xac>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fdc:	3501      	adds	r5, #1
 8005fde:	e7c6      	b.n	8005f6e <_printf_common+0x3e>
 8005fe0:	18e1      	adds	r1, r4, r3
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	2030      	movs	r0, #48	@ 0x30
 8005fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fea:	4422      	add	r2, r4
 8005fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	e7c7      	b.n	8005f88 <_printf_common+0x58>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4638      	mov	r0, r7
 8006000:	47c8      	blx	r9
 8006002:	3001      	adds	r0, #1
 8006004:	d0e6      	beq.n	8005fd4 <_printf_common+0xa4>
 8006006:	3601      	adds	r6, #1
 8006008:	e7d9      	b.n	8005fbe <_printf_common+0x8e>
	...

0800600c <_printf_i>:
 800600c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	7e0f      	ldrb	r7, [r1, #24]
 8006012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006014:	2f78      	cmp	r7, #120	@ 0x78
 8006016:	4691      	mov	r9, r2
 8006018:	4680      	mov	r8, r0
 800601a:	460c      	mov	r4, r1
 800601c:	469a      	mov	sl, r3
 800601e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006022:	d807      	bhi.n	8006034 <_printf_i+0x28>
 8006024:	2f62      	cmp	r7, #98	@ 0x62
 8006026:	d80a      	bhi.n	800603e <_printf_i+0x32>
 8006028:	2f00      	cmp	r7, #0
 800602a:	f000 80d2 	beq.w	80061d2 <_printf_i+0x1c6>
 800602e:	2f58      	cmp	r7, #88	@ 0x58
 8006030:	f000 80b9 	beq.w	80061a6 <_printf_i+0x19a>
 8006034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800603c:	e03a      	b.n	80060b4 <_printf_i+0xa8>
 800603e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006042:	2b15      	cmp	r3, #21
 8006044:	d8f6      	bhi.n	8006034 <_printf_i+0x28>
 8006046:	a101      	add	r1, pc, #4	@ (adr r1, 800604c <_printf_i+0x40>)
 8006048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800604c:	080060a5 	.word	0x080060a5
 8006050:	080060b9 	.word	0x080060b9
 8006054:	08006035 	.word	0x08006035
 8006058:	08006035 	.word	0x08006035
 800605c:	08006035 	.word	0x08006035
 8006060:	08006035 	.word	0x08006035
 8006064:	080060b9 	.word	0x080060b9
 8006068:	08006035 	.word	0x08006035
 800606c:	08006035 	.word	0x08006035
 8006070:	08006035 	.word	0x08006035
 8006074:	08006035 	.word	0x08006035
 8006078:	080061b9 	.word	0x080061b9
 800607c:	080060e3 	.word	0x080060e3
 8006080:	08006173 	.word	0x08006173
 8006084:	08006035 	.word	0x08006035
 8006088:	08006035 	.word	0x08006035
 800608c:	080061db 	.word	0x080061db
 8006090:	08006035 	.word	0x08006035
 8006094:	080060e3 	.word	0x080060e3
 8006098:	08006035 	.word	0x08006035
 800609c:	08006035 	.word	0x08006035
 80060a0:	0800617b 	.word	0x0800617b
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6032      	str	r2, [r6, #0]
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060b4:	2301      	movs	r3, #1
 80060b6:	e09d      	b.n	80061f4 <_printf_i+0x1e8>
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	6031      	str	r1, [r6, #0]
 80060c0:	0606      	lsls	r6, r0, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xbc>
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	e003      	b.n	80060d0 <_printf_i+0xc4>
 80060c8:	0645      	lsls	r5, r0, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xb8>
 80060cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	da03      	bge.n	80060dc <_printf_i+0xd0>
 80060d4:	232d      	movs	r3, #45	@ 0x2d
 80060d6:	426d      	negs	r5, r5
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060dc:	4859      	ldr	r0, [pc, #356]	@ (8006244 <_printf_i+0x238>)
 80060de:	230a      	movs	r3, #10
 80060e0:	e011      	b.n	8006106 <_printf_i+0xfa>
 80060e2:	6821      	ldr	r1, [r4, #0]
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	0608      	lsls	r0, r1, #24
 80060e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060ec:	d402      	bmi.n	80060f4 <_printf_i+0xe8>
 80060ee:	0649      	lsls	r1, r1, #25
 80060f0:	bf48      	it	mi
 80060f2:	b2ad      	uxthmi	r5, r5
 80060f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060f6:	4853      	ldr	r0, [pc, #332]	@ (8006244 <_printf_i+0x238>)
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	bf14      	ite	ne
 80060fc:	230a      	movne	r3, #10
 80060fe:	2308      	moveq	r3, #8
 8006100:	2100      	movs	r1, #0
 8006102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006106:	6866      	ldr	r6, [r4, #4]
 8006108:	60a6      	str	r6, [r4, #8]
 800610a:	2e00      	cmp	r6, #0
 800610c:	bfa2      	ittt	ge
 800610e:	6821      	ldrge	r1, [r4, #0]
 8006110:	f021 0104 	bicge.w	r1, r1, #4
 8006114:	6021      	strge	r1, [r4, #0]
 8006116:	b90d      	cbnz	r5, 800611c <_printf_i+0x110>
 8006118:	2e00      	cmp	r6, #0
 800611a:	d04b      	beq.n	80061b4 <_printf_i+0x1a8>
 800611c:	4616      	mov	r6, r2
 800611e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006122:	fb03 5711 	mls	r7, r3, r1, r5
 8006126:	5dc7      	ldrb	r7, [r0, r7]
 8006128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800612c:	462f      	mov	r7, r5
 800612e:	42bb      	cmp	r3, r7
 8006130:	460d      	mov	r5, r1
 8006132:	d9f4      	bls.n	800611e <_printf_i+0x112>
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10b      	bne.n	8006150 <_printf_i+0x144>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07df      	lsls	r7, r3, #31
 800613c:	d508      	bpl.n	8006150 <_printf_i+0x144>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	bfde      	ittt	le
 8006146:	2330      	movle	r3, #48	@ 0x30
 8006148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800614c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006150:	1b92      	subs	r2, r2, r6
 8006152:	6122      	str	r2, [r4, #16]
 8006154:	f8cd a000 	str.w	sl, [sp]
 8006158:	464b      	mov	r3, r9
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff fee6 	bl	8005f30 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14a      	bne.n	80061fe <_printf_i+0x1f2>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800616c:	b004      	add	sp, #16
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	f043 0320 	orr.w	r3, r3, #32
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	4833      	ldr	r0, [pc, #204]	@ (8006248 <_printf_i+0x23c>)
 800617c:	2778      	movs	r7, #120	@ 0x78
 800617e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	6831      	ldr	r1, [r6, #0]
 8006186:	061f      	lsls	r7, r3, #24
 8006188:	f851 5b04 	ldr.w	r5, [r1], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0x188>
 800618e:	065f      	lsls	r7, r3, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	6031      	str	r1, [r6, #0]
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	bf44      	itt	mi
 800619a:	f043 0320 	orrmi.w	r3, r3, #32
 800619e:	6023      	strmi	r3, [r4, #0]
 80061a0:	b11d      	cbz	r5, 80061aa <_printf_i+0x19e>
 80061a2:	2310      	movs	r3, #16
 80061a4:	e7ac      	b.n	8006100 <_printf_i+0xf4>
 80061a6:	4827      	ldr	r0, [pc, #156]	@ (8006244 <_printf_i+0x238>)
 80061a8:	e7e9      	b.n	800617e <_printf_i+0x172>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f023 0320 	bic.w	r3, r3, #32
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	e7f6      	b.n	80061a2 <_printf_i+0x196>
 80061b4:	4616      	mov	r6, r2
 80061b6:	e7bd      	b.n	8006134 <_printf_i+0x128>
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	6961      	ldr	r1, [r4, #20]
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6030      	str	r0, [r6, #0]
 80061c2:	062e      	lsls	r6, r5, #24
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0x1c0>
 80061c8:	6019      	str	r1, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <_printf_i+0x1c6>
 80061cc:	0668      	lsls	r0, r5, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0x1bc>
 80061d0:	8019      	strh	r1, [r3, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	4616      	mov	r6, r2
 80061d8:	e7bc      	b.n	8006154 <_printf_i+0x148>
 80061da:	6833      	ldr	r3, [r6, #0]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	6032      	str	r2, [r6, #0]
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	2100      	movs	r1, #0
 80061e6:	4630      	mov	r0, r6
 80061e8:	f7f9 fff2 	bl	80001d0 <memchr>
 80061ec:	b108      	cbz	r0, 80061f2 <_printf_i+0x1e6>
 80061ee:	1b80      	subs	r0, r0, r6
 80061f0:	6060      	str	r0, [r4, #4]
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	e7aa      	b.n	8006154 <_printf_i+0x148>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	4632      	mov	r2, r6
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d0ad      	beq.n	8006168 <_printf_i+0x15c>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	079b      	lsls	r3, r3, #30
 8006210:	d413      	bmi.n	800623a <_printf_i+0x22e>
 8006212:	68e0      	ldr	r0, [r4, #12]
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	4298      	cmp	r0, r3
 8006218:	bfb8      	it	lt
 800621a:	4618      	movlt	r0, r3
 800621c:	e7a6      	b.n	800616c <_printf_i+0x160>
 800621e:	2301      	movs	r3, #1
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d09d      	beq.n	8006168 <_printf_i+0x15c>
 800622c:	3501      	adds	r5, #1
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	9903      	ldr	r1, [sp, #12]
 8006232:	1a5b      	subs	r3, r3, r1
 8006234:	42ab      	cmp	r3, r5
 8006236:	dcf2      	bgt.n	800621e <_printf_i+0x212>
 8006238:	e7eb      	b.n	8006212 <_printf_i+0x206>
 800623a:	2500      	movs	r5, #0
 800623c:	f104 0619 	add.w	r6, r4, #25
 8006240:	e7f5      	b.n	800622e <_printf_i+0x222>
 8006242:	bf00      	nop
 8006244:	08006879 	.word	0x08006879
 8006248:	0800688a 	.word	0x0800688a

0800624c <__sflush_r>:
 800624c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	0716      	lsls	r6, r2, #28
 8006256:	4605      	mov	r5, r0
 8006258:	460c      	mov	r4, r1
 800625a:	d454      	bmi.n	8006306 <__sflush_r+0xba>
 800625c:	684b      	ldr	r3, [r1, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	dc02      	bgt.n	8006268 <__sflush_r+0x1c>
 8006262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd48      	ble.n	80062fa <__sflush_r+0xae>
 8006268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800626a:	2e00      	cmp	r6, #0
 800626c:	d045      	beq.n	80062fa <__sflush_r+0xae>
 800626e:	2300      	movs	r3, #0
 8006270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006274:	682f      	ldr	r7, [r5, #0]
 8006276:	6a21      	ldr	r1, [r4, #32]
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	d030      	beq.n	80062de <__sflush_r+0x92>
 800627c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	0759      	lsls	r1, r3, #29
 8006282:	d505      	bpl.n	8006290 <__sflush_r+0x44>
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800628a:	b10b      	cbz	r3, 8006290 <__sflush_r+0x44>
 800628c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006294:	6a21      	ldr	r1, [r4, #32]
 8006296:	4628      	mov	r0, r5
 8006298:	47b0      	blx	r6
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	d106      	bne.n	80062ae <__sflush_r+0x62>
 80062a0:	6829      	ldr	r1, [r5, #0]
 80062a2:	291d      	cmp	r1, #29
 80062a4:	d82b      	bhi.n	80062fe <__sflush_r+0xb2>
 80062a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006350 <__sflush_r+0x104>)
 80062a8:	410a      	asrs	r2, r1
 80062aa:	07d6      	lsls	r6, r2, #31
 80062ac:	d427      	bmi.n	80062fe <__sflush_r+0xb2>
 80062ae:	2200      	movs	r2, #0
 80062b0:	6062      	str	r2, [r4, #4]
 80062b2:	04d9      	lsls	r1, r3, #19
 80062b4:	6922      	ldr	r2, [r4, #16]
 80062b6:	6022      	str	r2, [r4, #0]
 80062b8:	d504      	bpl.n	80062c4 <__sflush_r+0x78>
 80062ba:	1c42      	adds	r2, r0, #1
 80062bc:	d101      	bne.n	80062c2 <__sflush_r+0x76>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	b903      	cbnz	r3, 80062c4 <__sflush_r+0x78>
 80062c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062c6:	602f      	str	r7, [r5, #0]
 80062c8:	b1b9      	cbz	r1, 80062fa <__sflush_r+0xae>
 80062ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ce:	4299      	cmp	r1, r3
 80062d0:	d002      	beq.n	80062d8 <__sflush_r+0x8c>
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fa24 	bl	8006720 <_free_r>
 80062d8:	2300      	movs	r3, #0
 80062da:	6363      	str	r3, [r4, #52]	@ 0x34
 80062dc:	e00d      	b.n	80062fa <__sflush_r+0xae>
 80062de:	2301      	movs	r3, #1
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b0      	blx	r6
 80062e4:	4602      	mov	r2, r0
 80062e6:	1c50      	adds	r0, r2, #1
 80062e8:	d1c9      	bne.n	800627e <__sflush_r+0x32>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0c6      	beq.n	800627e <__sflush_r+0x32>
 80062f0:	2b1d      	cmp	r3, #29
 80062f2:	d001      	beq.n	80062f8 <__sflush_r+0xac>
 80062f4:	2b16      	cmp	r3, #22
 80062f6:	d11e      	bne.n	8006336 <__sflush_r+0xea>
 80062f8:	602f      	str	r7, [r5, #0]
 80062fa:	2000      	movs	r0, #0
 80062fc:	e022      	b.n	8006344 <__sflush_r+0xf8>
 80062fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006302:	b21b      	sxth	r3, r3
 8006304:	e01b      	b.n	800633e <__sflush_r+0xf2>
 8006306:	690f      	ldr	r7, [r1, #16]
 8006308:	2f00      	cmp	r7, #0
 800630a:	d0f6      	beq.n	80062fa <__sflush_r+0xae>
 800630c:	0793      	lsls	r3, r2, #30
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	bf08      	it	eq
 8006312:	694b      	ldreq	r3, [r1, #20]
 8006314:	600f      	str	r7, [r1, #0]
 8006316:	bf18      	it	ne
 8006318:	2300      	movne	r3, #0
 800631a:	eba6 0807 	sub.w	r8, r6, r7
 800631e:	608b      	str	r3, [r1, #8]
 8006320:	f1b8 0f00 	cmp.w	r8, #0
 8006324:	dde9      	ble.n	80062fa <__sflush_r+0xae>
 8006326:	6a21      	ldr	r1, [r4, #32]
 8006328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800632a:	4643      	mov	r3, r8
 800632c:	463a      	mov	r2, r7
 800632e:	4628      	mov	r0, r5
 8006330:	47b0      	blx	r6
 8006332:	2800      	cmp	r0, #0
 8006334:	dc08      	bgt.n	8006348 <__sflush_r+0xfc>
 8006336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	4407      	add	r7, r0
 800634a:	eba8 0800 	sub.w	r8, r8, r0
 800634e:	e7e7      	b.n	8006320 <__sflush_r+0xd4>
 8006350:	dfbffffe 	.word	0xdfbffffe

08006354 <_fflush_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b913      	cbnz	r3, 8006364 <_fflush_r+0x10>
 800635e:	2500      	movs	r5, #0
 8006360:	4628      	mov	r0, r5
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	b118      	cbz	r0, 800636e <_fflush_r+0x1a>
 8006366:	6a03      	ldr	r3, [r0, #32]
 8006368:	b90b      	cbnz	r3, 800636e <_fflush_r+0x1a>
 800636a:	f7ff fb23 	bl	80059b4 <__sinit>
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f3      	beq.n	800635e <_fflush_r+0xa>
 8006376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006378:	07d0      	lsls	r0, r2, #31
 800637a:	d404      	bmi.n	8006386 <_fflush_r+0x32>
 800637c:	0599      	lsls	r1, r3, #22
 800637e:	d402      	bmi.n	8006386 <_fflush_r+0x32>
 8006380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006382:	f7ff fbf0 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8006386:	4628      	mov	r0, r5
 8006388:	4621      	mov	r1, r4
 800638a:	f7ff ff5f 	bl	800624c <__sflush_r>
 800638e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006390:	07da      	lsls	r2, r3, #31
 8006392:	4605      	mov	r5, r0
 8006394:	d4e4      	bmi.n	8006360 <_fflush_r+0xc>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	059b      	lsls	r3, r3, #22
 800639a:	d4e1      	bmi.n	8006360 <_fflush_r+0xc>
 800639c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800639e:	f7ff fbe3 	bl	8005b68 <__retarget_lock_release_recursive>
 80063a2:	e7dd      	b.n	8006360 <_fflush_r+0xc>

080063a4 <__malloc_lock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	@ (80063ac <__malloc_lock+0x8>)
 80063a6:	f7ff bbde 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000340 	.word	0x20000340

080063b0 <__malloc_unlock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	@ (80063b8 <__malloc_unlock+0x8>)
 80063b2:	f7ff bbd9 	b.w	8005b68 <__retarget_lock_release_recursive>
 80063b6:	bf00      	nop
 80063b8:	20000340 	.word	0x20000340

080063bc <__sread>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	460c      	mov	r4, r1
 80063c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c4:	f000 f978 	bl	80066b8 <_read_r>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	bfab      	itete	ge
 80063cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063ce:	89a3      	ldrhlt	r3, [r4, #12]
 80063d0:	181b      	addge	r3, r3, r0
 80063d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063d6:	bfac      	ite	ge
 80063d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063da:	81a3      	strhlt	r3, [r4, #12]
 80063dc:	bd10      	pop	{r4, pc}

080063de <__swrite>:
 80063de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e2:	461f      	mov	r7, r3
 80063e4:	898b      	ldrh	r3, [r1, #12]
 80063e6:	05db      	lsls	r3, r3, #23
 80063e8:	4605      	mov	r5, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	4616      	mov	r6, r2
 80063ee:	d505      	bpl.n	80063fc <__swrite+0x1e>
 80063f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f4:	2302      	movs	r3, #2
 80063f6:	2200      	movs	r2, #0
 80063f8:	f000 f94c 	bl	8006694 <_lseek_r>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	4632      	mov	r2, r6
 800640a:	463b      	mov	r3, r7
 800640c:	4628      	mov	r0, r5
 800640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	f000 b973 	b.w	80066fc <_write_r>

08006416 <__sseek>:
 8006416:	b510      	push	{r4, lr}
 8006418:	460c      	mov	r4, r1
 800641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641e:	f000 f939 	bl	8006694 <_lseek_r>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	bf15      	itete	ne
 8006428:	6560      	strne	r0, [r4, #84]	@ 0x54
 800642a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800642e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006432:	81a3      	strheq	r3, [r4, #12]
 8006434:	bf18      	it	ne
 8006436:	81a3      	strhne	r3, [r4, #12]
 8006438:	bd10      	pop	{r4, pc}

0800643a <__sclose>:
 800643a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643e:	f000 b8f7 	b.w	8006630 <_close_r>

08006442 <__swbuf_r>:
 8006442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006444:	460e      	mov	r6, r1
 8006446:	4614      	mov	r4, r2
 8006448:	4605      	mov	r5, r0
 800644a:	b118      	cbz	r0, 8006454 <__swbuf_r+0x12>
 800644c:	6a03      	ldr	r3, [r0, #32]
 800644e:	b90b      	cbnz	r3, 8006454 <__swbuf_r+0x12>
 8006450:	f7ff fab0 	bl	80059b4 <__sinit>
 8006454:	69a3      	ldr	r3, [r4, #24]
 8006456:	60a3      	str	r3, [r4, #8]
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	071a      	lsls	r2, r3, #28
 800645c:	d501      	bpl.n	8006462 <__swbuf_r+0x20>
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	b943      	cbnz	r3, 8006474 <__swbuf_r+0x32>
 8006462:	4621      	mov	r1, r4
 8006464:	4628      	mov	r0, r5
 8006466:	f000 f82b 	bl	80064c0 <__swsetup_r>
 800646a:	b118      	cbz	r0, 8006474 <__swbuf_r+0x32>
 800646c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006470:	4638      	mov	r0, r7
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	1a98      	subs	r0, r3, r2
 800647a:	6963      	ldr	r3, [r4, #20]
 800647c:	b2f6      	uxtb	r6, r6
 800647e:	4283      	cmp	r3, r0
 8006480:	4637      	mov	r7, r6
 8006482:	dc05      	bgt.n	8006490 <__swbuf_r+0x4e>
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f7ff ff64 	bl	8006354 <_fflush_r>
 800648c:	2800      	cmp	r0, #0
 800648e:	d1ed      	bne.n	800646c <__swbuf_r+0x2a>
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	60a3      	str	r3, [r4, #8]
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	6022      	str	r2, [r4, #0]
 800649c:	701e      	strb	r6, [r3, #0]
 800649e:	6962      	ldr	r2, [r4, #20]
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d004      	beq.n	80064b0 <__swbuf_r+0x6e>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	d5e1      	bpl.n	8006470 <__swbuf_r+0x2e>
 80064ac:	2e0a      	cmp	r6, #10
 80064ae:	d1df      	bne.n	8006470 <__swbuf_r+0x2e>
 80064b0:	4621      	mov	r1, r4
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7ff ff4e 	bl	8006354 <_fflush_r>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d0d9      	beq.n	8006470 <__swbuf_r+0x2e>
 80064bc:	e7d6      	b.n	800646c <__swbuf_r+0x2a>
	...

080064c0 <__swsetup_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4b29      	ldr	r3, [pc, #164]	@ (8006568 <__swsetup_r+0xa8>)
 80064c4:	4605      	mov	r5, r0
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	460c      	mov	r4, r1
 80064ca:	b118      	cbz	r0, 80064d4 <__swsetup_r+0x14>
 80064cc:	6a03      	ldr	r3, [r0, #32]
 80064ce:	b90b      	cbnz	r3, 80064d4 <__swsetup_r+0x14>
 80064d0:	f7ff fa70 	bl	80059b4 <__sinit>
 80064d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d8:	0719      	lsls	r1, r3, #28
 80064da:	d422      	bmi.n	8006522 <__swsetup_r+0x62>
 80064dc:	06da      	lsls	r2, r3, #27
 80064de:	d407      	bmi.n	80064f0 <__swsetup_r+0x30>
 80064e0:	2209      	movs	r2, #9
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ee:	e033      	b.n	8006558 <__swsetup_r+0x98>
 80064f0:	0758      	lsls	r0, r3, #29
 80064f2:	d512      	bpl.n	800651a <__swsetup_r+0x5a>
 80064f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064f6:	b141      	cbz	r1, 800650a <__swsetup_r+0x4a>
 80064f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d002      	beq.n	8006506 <__swsetup_r+0x46>
 8006500:	4628      	mov	r0, r5
 8006502:	f000 f90d 	bl	8006720 <_free_r>
 8006506:	2300      	movs	r3, #0
 8006508:	6363      	str	r3, [r4, #52]	@ 0x34
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	2300      	movs	r3, #0
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f043 0308 	orr.w	r3, r3, #8
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	b94b      	cbnz	r3, 800653a <__swsetup_r+0x7a>
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800652c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006530:	d003      	beq.n	800653a <__swsetup_r+0x7a>
 8006532:	4621      	mov	r1, r4
 8006534:	4628      	mov	r0, r5
 8006536:	f000 f83f 	bl	80065b8 <__smakebuf_r>
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	f013 0201 	ands.w	r2, r3, #1
 8006542:	d00a      	beq.n	800655a <__swsetup_r+0x9a>
 8006544:	2200      	movs	r2, #0
 8006546:	60a2      	str	r2, [r4, #8]
 8006548:	6962      	ldr	r2, [r4, #20]
 800654a:	4252      	negs	r2, r2
 800654c:	61a2      	str	r2, [r4, #24]
 800654e:	6922      	ldr	r2, [r4, #16]
 8006550:	b942      	cbnz	r2, 8006564 <__swsetup_r+0xa4>
 8006552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006556:	d1c5      	bne.n	80064e4 <__swsetup_r+0x24>
 8006558:	bd38      	pop	{r3, r4, r5, pc}
 800655a:	0799      	lsls	r1, r3, #30
 800655c:	bf58      	it	pl
 800655e:	6962      	ldrpl	r2, [r4, #20]
 8006560:	60a2      	str	r2, [r4, #8]
 8006562:	e7f4      	b.n	800654e <__swsetup_r+0x8e>
 8006564:	2000      	movs	r0, #0
 8006566:	e7f7      	b.n	8006558 <__swsetup_r+0x98>
 8006568:	20000018 	.word	0x20000018

0800656c <__swhatbuf_r>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	460c      	mov	r4, r1
 8006570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006574:	2900      	cmp	r1, #0
 8006576:	b096      	sub	sp, #88	@ 0x58
 8006578:	4615      	mov	r5, r2
 800657a:	461e      	mov	r6, r3
 800657c:	da0d      	bge.n	800659a <__swhatbuf_r+0x2e>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006584:	f04f 0100 	mov.w	r1, #0
 8006588:	bf14      	ite	ne
 800658a:	2340      	movne	r3, #64	@ 0x40
 800658c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006590:	2000      	movs	r0, #0
 8006592:	6031      	str	r1, [r6, #0]
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	b016      	add	sp, #88	@ 0x58
 8006598:	bd70      	pop	{r4, r5, r6, pc}
 800659a:	466a      	mov	r2, sp
 800659c:	f000 f858 	bl	8006650 <_fstat_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	dbec      	blt.n	800657e <__swhatbuf_r+0x12>
 80065a4:	9901      	ldr	r1, [sp, #4]
 80065a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ae:	4259      	negs	r1, r3
 80065b0:	4159      	adcs	r1, r3
 80065b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065b6:	e7eb      	b.n	8006590 <__swhatbuf_r+0x24>

080065b8 <__smakebuf_r>:
 80065b8:	898b      	ldrh	r3, [r1, #12]
 80065ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065bc:	079d      	lsls	r5, r3, #30
 80065be:	4606      	mov	r6, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	d507      	bpl.n	80065d4 <__smakebuf_r+0x1c>
 80065c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	2301      	movs	r3, #1
 80065ce:	6163      	str	r3, [r4, #20]
 80065d0:	b003      	add	sp, #12
 80065d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d4:	ab01      	add	r3, sp, #4
 80065d6:	466a      	mov	r2, sp
 80065d8:	f7ff ffc8 	bl	800656c <__swhatbuf_r>
 80065dc:	9f00      	ldr	r7, [sp, #0]
 80065de:	4605      	mov	r5, r0
 80065e0:	4639      	mov	r1, r7
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7ff fc24 	bl	8005e30 <_malloc_r>
 80065e8:	b948      	cbnz	r0, 80065fe <__smakebuf_r+0x46>
 80065ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ee:	059a      	lsls	r2, r3, #22
 80065f0:	d4ee      	bmi.n	80065d0 <__smakebuf_r+0x18>
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	f043 0302 	orr.w	r3, r3, #2
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	e7e2      	b.n	80065c4 <__smakebuf_r+0xc>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	6020      	str	r0, [r4, #0]
 8006602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800660e:	b15b      	cbz	r3, 8006628 <__smakebuf_r+0x70>
 8006610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006614:	4630      	mov	r0, r6
 8006616:	f000 f82d 	bl	8006674 <_isatty_r>
 800661a:	b128      	cbz	r0, 8006628 <__smakebuf_r+0x70>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	431d      	orrs	r5, r3
 800662c:	81a5      	strh	r5, [r4, #12]
 800662e:	e7cf      	b.n	80065d0 <__smakebuf_r+0x18>

08006630 <_close_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	@ (800664c <_close_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fa fae1 	bl	8000c02 <_close>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_close_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_close_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	2000034c 	.word	0x2000034c

08006650 <_fstat_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d07      	ldr	r5, [pc, #28]	@ (8006670 <_fstat_r+0x20>)
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	f7fa fadc 	bl	8000c1a <_fstat>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d102      	bne.n	800666c <_fstat_r+0x1c>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	b103      	cbz	r3, 800666c <_fstat_r+0x1c>
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	2000034c 	.word	0x2000034c

08006674 <_isatty_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d06      	ldr	r5, [pc, #24]	@ (8006690 <_isatty_r+0x1c>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f7fa fadb 	bl	8000c3a <_isatty>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_isatty_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_isatty_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	2000034c 	.word	0x2000034c

08006694 <_lseek_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	@ (80066b4 <_lseek_r+0x20>)
 8006698:	4604      	mov	r4, r0
 800669a:	4608      	mov	r0, r1
 800669c:	4611      	mov	r1, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fa fad4 	bl	8000c50 <_lseek>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_lseek_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_lseek_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	2000034c 	.word	0x2000034c

080066b8 <_read_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	@ (80066d8 <_read_r+0x20>)
 80066bc:	4604      	mov	r4, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fa fa62 	bl	8000b90 <_read>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_read_r+0x1e>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_read_r+0x1e>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	2000034c 	.word	0x2000034c

080066dc <_sbrk_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	@ (80066f8 <_sbrk_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fac0 	bl	8000c6c <_sbrk>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_sbrk_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_sbrk_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	2000034c 	.word	0x2000034c

080066fc <_write_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	@ (800671c <_write_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fa5d 	bl	8000bca <_write>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_write_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_write_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	2000034c 	.word	0x2000034c

08006720 <_free_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4605      	mov	r5, r0
 8006724:	2900      	cmp	r1, #0
 8006726:	d041      	beq.n	80067ac <_free_r+0x8c>
 8006728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672c:	1f0c      	subs	r4, r1, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfb8      	it	lt
 8006732:	18e4      	addlt	r4, r4, r3
 8006734:	f7ff fe36 	bl	80063a4 <__malloc_lock>
 8006738:	4a1d      	ldr	r2, [pc, #116]	@ (80067b0 <_free_r+0x90>)
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	b933      	cbnz	r3, 800674c <_free_r+0x2c>
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	6014      	str	r4, [r2, #0]
 8006742:	4628      	mov	r0, r5
 8006744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006748:	f7ff be32 	b.w	80063b0 <__malloc_unlock>
 800674c:	42a3      	cmp	r3, r4
 800674e:	d908      	bls.n	8006762 <_free_r+0x42>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	1821      	adds	r1, r4, r0
 8006754:	428b      	cmp	r3, r1
 8006756:	bf01      	itttt	eq
 8006758:	6819      	ldreq	r1, [r3, #0]
 800675a:	685b      	ldreq	r3, [r3, #4]
 800675c:	1809      	addeq	r1, r1, r0
 800675e:	6021      	streq	r1, [r4, #0]
 8006760:	e7ed      	b.n	800673e <_free_r+0x1e>
 8006762:	461a      	mov	r2, r3
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b10b      	cbz	r3, 800676c <_free_r+0x4c>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d9fa      	bls.n	8006762 <_free_r+0x42>
 800676c:	6811      	ldr	r1, [r2, #0]
 800676e:	1850      	adds	r0, r2, r1
 8006770:	42a0      	cmp	r0, r4
 8006772:	d10b      	bne.n	800678c <_free_r+0x6c>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	4401      	add	r1, r0
 8006778:	1850      	adds	r0, r2, r1
 800677a:	4283      	cmp	r3, r0
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	d1e0      	bne.n	8006742 <_free_r+0x22>
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	6053      	str	r3, [r2, #4]
 8006786:	4408      	add	r0, r1
 8006788:	6010      	str	r0, [r2, #0]
 800678a:	e7da      	b.n	8006742 <_free_r+0x22>
 800678c:	d902      	bls.n	8006794 <_free_r+0x74>
 800678e:	230c      	movs	r3, #12
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	e7d6      	b.n	8006742 <_free_r+0x22>
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	1821      	adds	r1, r4, r0
 8006798:	428b      	cmp	r3, r1
 800679a:	bf04      	itt	eq
 800679c:	6819      	ldreq	r1, [r3, #0]
 800679e:	685b      	ldreq	r3, [r3, #4]
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	bf04      	itt	eq
 80067a4:	1809      	addeq	r1, r1, r0
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	6054      	str	r4, [r2, #4]
 80067aa:	e7ca      	b.n	8006742 <_free_r+0x22>
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	20000348 	.word	0x20000348

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
