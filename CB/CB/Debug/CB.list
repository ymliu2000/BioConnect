
CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c40  08007c40  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007c40  08007c40  00008c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c48  08007c48  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00008c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007c50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000060  08007cb0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08007cb0  0000946c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e04  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  00019e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad0  00000000  00000000  0001d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bb7  00000000  00000000  0001dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010030  00000000  00000000  000457ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb139  00000000  00000000  0005581f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004370  00000000  00000000  0015099c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00154d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007978 	.word	0x08007978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007978 	.word	0x08007978

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <moving_average_filter>:

static void UART_Send_IT(UART_HandleTypeDef *huart, const char *str);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);

/* Filters */
float moving_average_filter(float new_sample) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	ed87 0a01 	vstr	s0, [r7, #4]
    avgSum -= avgBuffer[avgIndex];
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <moving_average_filter+0x88>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <moving_average_filter+0x8c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <moving_average_filter+0x90>)
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <moving_average_filter+0x88>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
    avgBuffer[avgIndex] = new_sample;
 80005b8:	4b18      	ldr	r3, [pc, #96]	@ (800061c <moving_average_filter+0x8c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <moving_average_filter+0x90>)
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
    avgSum += new_sample;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <moving_average_filter+0x88>)
 80005c8:	ed93 7a00 	vldr	s14, [r3]
 80005cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <moving_average_filter+0x88>)
 80005d6:	edc3 7a00 	vstr	s15, [r3]
    avgIndex = (avgIndex + 1) % WINDOW_SIZE;
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <moving_average_filter+0x8c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1c59      	adds	r1, r3, #1
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <moving_average_filter+0x94>)
 80005e2:	fb83 2301 	smull	r2, r3, r3, r1
 80005e6:	105a      	asrs	r2, r3, #1
 80005e8:	17cb      	asrs	r3, r1, #31
 80005ea:	1ad2      	subs	r2, r2, r3
 80005ec:	4613      	mov	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	1aca      	subs	r2, r1, r3
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <moving_average_filter+0x8c>)
 80005f6:	601a      	str	r2, [r3, #0]
    return avgSum / WINDOW_SIZE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <moving_average_filter+0x88>)
 80005fa:	edd3 7a00 	vldr	s15, [r3]
 80005fe:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000606:	eef0 7a66 	vmov.f32	s15, s13
}
 800060a:	eeb0 0a67 	vmov.f32	s0, s15
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000314 	.word	0x20000314
 800061c:	20000310 	.word	0x20000310
 8000620:	200002fc 	.word	0x200002fc
 8000624:	66666667 	.word	0x66666667

08000628 <low_pass_filter>:

#define ALPHA 0.1f
float low_pass_filter(float input) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	ed87 0a01 	vstr	s0, [r7, #4]
    float output = ALPHA * input + (1.0f - ALPHA)*prevOutput;
 8000632:	edd7 7a01 	vldr	s15, [r7, #4]
 8000636:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000670 <low_pass_filter+0x48>
 800063a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <low_pass_filter+0x4c>)
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000678 <low_pass_filter+0x50>
 8000648:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800064c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000650:	edc7 7a03 	vstr	s15, [r7, #12]
    prevOutput = output;
 8000654:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <low_pass_filter+0x4c>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6013      	str	r3, [r2, #0]
    return output;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	ee07 3a90 	vmov	s15, r3
}
 8000660:	eeb0 0a67 	vmov.f32	s0, s15
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	3dcccccd 	.word	0x3dcccccd
 8000674:	20000318 	.word	0x20000318
 8000678:	3f666666 	.word	0x3f666666

0800067c <HAL_UART_RxCpltCallback>:

/**
 * @brief USART1 Rx complete callback
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_UART_RxCpltCallback+0x34>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10b      	bne.n	80006a6 <HAL_UART_RxCpltCallback+0x2a>
  {
    rxBuffer[RX_BUFFER_SIZE-1] = '\0';
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_UART_RxCpltCallback+0x38>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    rxReady = 1;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HAL_UART_RxCpltCallback+0x3c>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
    // Re-arm receive
    HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer, RX_BUFFER_SIZE-1);
 800069c:	227f      	movs	r2, #127	@ 0x7f
 800069e:	4905      	ldr	r1, [pc, #20]	@ (80006b4 <HAL_UART_RxCpltCallback+0x38>)
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <HAL_UART_RxCpltCallback+0x40>)
 80006a2:	f004 fc25 	bl	8004ef0 <HAL_UART_Receive_IT>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40013800 	.word	0x40013800
 80006b4:	200001f4 	.word	0x200001f4
 80006b8:	20000274 	.word	0x20000274
 80006bc:	200000e0 	.word	0x200000e0

080006c0 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART Tx complete callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <HAL_UART_TxCpltCallback+0x38>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d103      	bne.n	80006da <HAL_UART_TxCpltCallback+0x1a>
    uart1TxBusy = 0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <HAL_UART_TxCpltCallback+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  } else if(huart->Instance == USART2) {
    uart2TxBusy = 0;
  }
}
 80006d8:	e007      	b.n	80006ea <HAL_UART_TxCpltCallback+0x2a>
  } else if(huart->Instance == USART2) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_UART_TxCpltCallback+0x40>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d102      	bne.n	80006ea <HAL_UART_TxCpltCallback+0x2a>
    uart2TxBusy = 0;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <HAL_UART_TxCpltCallback+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40013800 	.word	0x40013800
 80006fc:	200002f8 	.word	0x200002f8
 8000700:	40004400 	.word	0x40004400
 8000704:	200002f9 	.word	0x200002f9

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0c4      	sub	sp, #272	@ 0x110
 800070c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fd70 	bl	80011f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 fa17 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 fb31 	bl	8000d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 800071a:	f000 fa59 	bl	8000bd0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800071e:	f000 facd 	bl	8000cbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000722:	f000 fafb 	bl	8000d1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Adjust interrupt priority so USART1 is high priority
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	2025      	movs	r0, #37	@ 0x25
 800072c:	f002 fd9d 	bl	800326a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	2026      	movs	r0, #38	@ 0x26
 8000736:	f002 fd98 	bl	800326a <HAL_NVIC_SetPriority>

  // Start receiving commands from processing board
  memset(rxBuffer,0,sizeof(rxBuffer));
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	2100      	movs	r1, #0
 800073e:	4840      	ldr	r0, [pc, #256]	@ (8000840 <main+0x138>)
 8000740:	f006 f81f 	bl	8006782 <memset>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,RX_BUFFER_SIZE-1);
 8000744:	227f      	movs	r2, #127	@ 0x7f
 8000746:	493e      	ldr	r1, [pc, #248]	@ (8000840 <main+0x138>)
 8000748:	483e      	ldr	r0, [pc, #248]	@ (8000844 <main+0x13c>)
 800074a:	f004 fbd1 	bl	8004ef0 <HAL_UART_Receive_IT>

  UART_Send_IT(&huart2,"Collector Board: Standby.\r\n");
 800074e:	493e      	ldr	r1, [pc, #248]	@ (8000848 <main+0x140>)
 8000750:	483e      	ldr	r0, [pc, #248]	@ (800084c <main+0x144>)
 8000752:	f000 f9b1 	bl	8000ab8 <UART_Send_IT>

  // Turn off IR/RED initially
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f002 ffe3 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f002 ffdd 	bl	8003728 <HAL_GPIO_WritePin>

  // Calibration ADC if needed
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800076e:	217f      	movs	r1, #127	@ 0x7f
 8000770:	4837      	ldr	r0, [pc, #220]	@ (8000850 <main+0x148>)
 8000772:	f002 fb5d 	bl	8002e30 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(isWorking)
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <main+0x14c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d034      	beq.n	80007ea <main+0xe2>
	    {
	      // Periodically read ADC and send DATA
	      uint16_t raw = ReadADC();
 8000780:	f000 f93c 	bl	80009fc <ReadADC>
 8000784:	4603      	mov	r3, r0
 8000786:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	      uint16_t proc = PreprocessData(raw, preMode);
 800078a:	4b33      	ldr	r3, [pc, #204]	@ (8000858 <main+0x150>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f94f 	bl	8000a38 <PreprocessData>
 800079a:	4603      	mov	r3, r0
 800079c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104

	      // Convert to ASCII and send DATA
	      // If no processing mode, we have converted to float inside PreprocessData.
	      snprintf(txBufferUart1, TX_BUFFER_SIZE, "DATA,%u,%u\r\n", raw, proc);
 80007a0:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 80007a4:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	4613      	mov	r3, r2
 80007ac:	4a2b      	ldr	r2, [pc, #172]	@ (800085c <main+0x154>)
 80007ae:	2180      	movs	r1, #128	@ 0x80
 80007b0:	482b      	ldr	r0, [pc, #172]	@ (8000860 <main+0x158>)
 80007b2:	f005 ff61 	bl	8006678 <sniprintf>
	      UART_Send_IT(&huart1, txBufferUart1);
 80007b6:	492a      	ldr	r1, [pc, #168]	@ (8000860 <main+0x158>)
 80007b8:	4822      	ldr	r0, [pc, #136]	@ (8000844 <main+0x13c>)
 80007ba:	f000 f97d 	bl	8000ab8 <UART_Send_IT>

	      char dbg[64];
	      snprintf(dbg,sizeof(dbg),"Send Data: raw=%u, pre=%u\r\n",raw,proc);
 80007be:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 80007c2:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 80007c6:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	4a25      	ldr	r2, [pc, #148]	@ (8000864 <main+0x15c>)
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	f005 ff51 	bl	8006678 <sniprintf>
	      UART_Send_IT(&huart2,dbg);
 80007d6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80007da:	4619      	mov	r1, r3
 80007dc:	481b      	ldr	r0, [pc, #108]	@ (800084c <main+0x144>)
 80007de:	f000 f96b 	bl	8000ab8 <UART_Send_IT>

	      HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	@ 0x64
 80007e4:	f000 fd7a 	bl	80012dc <HAL_Delay>
 80007e8:	e002      	b.n	80007f0 <main+0xe8>
	    }
	    else
	    {
	      // Standby
	      HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	@ 0x64
 80007ec:	f000 fd76 	bl	80012dc <HAL_Delay>
	    }

	    // Check if we got a new command line
	    if(rxReady) {
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <main+0x160>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0bd      	beq.n	8000776 <main+0x6e>
	      rxReady = 0;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <main+0x160>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	      char lineCopy[RX_BUFFER_SIZE];
	      strncpy(lineCopy, rxBuffer, RX_BUFFER_SIZE-1);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	227f      	movs	r2, #127	@ 0x7f
 8000804:	490e      	ldr	r1, [pc, #56]	@ (8000840 <main+0x138>)
 8000806:	4618      	mov	r0, r3
 8000808:	f005 ffa8 	bl	800675c <strncpy>
	      lineCopy[RX_BUFFER_SIZE-1] = '\0';
 800080c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000814:	2200      	movs	r2, #0
 8000816:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	      // Debug
	      char dbg[128];
	      snprintf(dbg,sizeof(dbg), "Recv CMD: %s\r\n", lineCopy);
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8000820:	4a12      	ldr	r2, [pc, #72]	@ (800086c <main+0x164>)
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	f005 ff28 	bl	8006678 <sniprintf>
	      UART_Send_IT(&huart2, dbg);
 8000828:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	@ (800084c <main+0x144>)
 8000830:	f000 f942 	bl	8000ab8 <UART_Send_IT>

	      ProcessUartCommand(lineCopy);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f81a 	bl	8000870 <ProcessUartCommand>
	    if(isWorking)
 800083c:	e79b      	b.n	8000776 <main+0x6e>
 800083e:	bf00      	nop
 8000840:	200001f4 	.word	0x200001f4
 8000844:	200000e0 	.word	0x200000e0
 8000848:	08007990 	.word	0x08007990
 800084c:	20000168 	.word	0x20000168
 8000850:	2000007c 	.word	0x2000007c
 8000854:	200001f0 	.word	0x200001f0
 8000858:	20000000 	.word	0x20000000
 800085c:	080079ac 	.word	0x080079ac
 8000860:	20000278 	.word	0x20000278
 8000864:	080079bc 	.word	0x080079bc
 8000868:	20000274 	.word	0x20000274
 800086c:	080079d8 	.word	0x080079d8

08000870 <ProcessUartCommand>:
 * @brief Process the command from Processing Board:
 * CMD:START,<IR/RED>,<preMode>,<advMode>
 * CMD:STOP
 */
void ProcessUartCommand(const char* cmd)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a8      	sub	sp, #160	@ 0xa0
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
  if(strncmp(cmd,"CMD:START",9)==0)
 8000878:	2209      	movs	r2, #9
 800087a:	494f      	ldr	r1, [pc, #316]	@ (80009b8 <ProcessUartCommand+0x148>)
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f005 ff5b 	bl	8006738 <strncmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d16b      	bne.n	8000960 <ProcessUartCommand+0xf0>
  {
    char wStr[8]={0};
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int p=0,a=0;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    sscanf(cmd,"CMD:START,%[^,],%d,%d", wStr,&p,&a);
 80008a0:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80008a4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80008a8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	460b      	mov	r3, r1
 80008b0:	4942      	ldr	r1, [pc, #264]	@ (80009bc <ProcessUartCommand+0x14c>)
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f005 ff14 	bl	80066e0 <siscanf>

    if(strcmp(wStr,"IR")==0){
 80008b8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008bc:	4940      	ldr	r1, [pc, #256]	@ (80009c0 <ProcessUartCommand+0x150>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fc8e 	bl	80001e0 <strcmp>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10f      	bne.n	80008ea <ProcessUartCommand+0x7a>
      workMode=0;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	@ (80009c4 <ProcessUartCommand+0x154>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IR on
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f002 ff26 	bl	8003728 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // RED off
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f002 ff20 	bl	8003728 <HAL_GPIO_WritePin>
 80008e8:	e00e      	b.n	8000908 <ProcessUartCommand+0x98>
    } else {
      workMode=1;
 80008ea:	4b36      	ldr	r3, [pc, #216]	@ (80009c4 <ProcessUartCommand+0x154>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f002 ff16 	bl	8003728 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f002 ff10 	bl	8003728 <HAL_GPIO_WritePin>
    }

    preMode = (uint8_t)p;
 8000908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <ProcessUartCommand+0x158>)
 8000910:	701a      	strb	r2, [r3, #0]
    advMode = (uint8_t)a;
 8000912:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <ProcessUartCommand+0x15c>)
 800091a:	701a      	strb	r2, [r3, #0]
    isWorking=1;
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <ProcessUartCommand+0x160>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]

    UART_Send_IT(&huart1,"ACK:START\r\n");
 8000922:	492c      	ldr	r1, [pc, #176]	@ (80009d4 <ProcessUartCommand+0x164>)
 8000924:	482c      	ldr	r0, [pc, #176]	@ (80009d8 <ProcessUartCommand+0x168>)
 8000926:	f000 f8c7 	bl	8000ab8 <UART_Send_IT>

    char dbg[128];
    snprintf(dbg,sizeof(dbg),"now running: workMode=%s, preMode=%d, advMode=%d\r\n",(workMode==0?"IR":"RED"),preMode,advMode);
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <ProcessUartCommand+0x154>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <ProcessUartCommand+0xc6>
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <ProcessUartCommand+0x150>)
 8000934:	e000      	b.n	8000938 <ProcessUartCommand+0xc8>
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <ProcessUartCommand+0x16c>)
 8000938:	4a23      	ldr	r2, [pc, #140]	@ (80009c8 <ProcessUartCommand+0x158>)
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	4611      	mov	r1, r2
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <ProcessUartCommand+0x15c>)
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	f107 0008 	add.w	r0, r7, #8
 8000946:	9201      	str	r2, [sp, #4]
 8000948:	9100      	str	r1, [sp, #0]
 800094a:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <ProcessUartCommand+0x170>)
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	f005 fe93 	bl	8006678 <sniprintf>
    UART_Send_IT(&huart2,dbg);
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4619      	mov	r1, r3
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <ProcessUartCommand+0x174>)
 800095a:	f000 f8ad 	bl	8000ab8 <UART_Send_IT>
  else
  {
    UART_Send_IT(&huart1,"ERROR:Unknown CMD\r\n");
    UART_Send_IT(&huart2,"Unknown CMD.\r\n");
  }
}
 800095e:	e027      	b.n	80009b0 <ProcessUartCommand+0x140>
  else if(strncmp(cmd,"CMD:STOP",7)==0)
 8000960:	2207      	movs	r2, #7
 8000962:	4921      	ldr	r1, [pc, #132]	@ (80009e8 <ProcessUartCommand+0x178>)
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f005 fee7 	bl	8006738 <strncmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d117      	bne.n	80009a0 <ProcessUartCommand+0x130>
    isWorking=0;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <ProcessUartCommand+0x160>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f002 fed3 	bl	8003728 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f002 fecd 	bl	8003728 <HAL_GPIO_WritePin>
    UART_Send_IT(&huart1,"ACK:STOP\r\n");
 800098e:	4917      	ldr	r1, [pc, #92]	@ (80009ec <ProcessUartCommand+0x17c>)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <ProcessUartCommand+0x168>)
 8000992:	f000 f891 	bl	8000ab8 <UART_Send_IT>
    UART_Send_IT(&huart2,"now stop\r\n");
 8000996:	4916      	ldr	r1, [pc, #88]	@ (80009f0 <ProcessUartCommand+0x180>)
 8000998:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <ProcessUartCommand+0x174>)
 800099a:	f000 f88d 	bl	8000ab8 <UART_Send_IT>
}
 800099e:	e007      	b.n	80009b0 <ProcessUartCommand+0x140>
    UART_Send_IT(&huart1,"ERROR:Unknown CMD\r\n");
 80009a0:	4914      	ldr	r1, [pc, #80]	@ (80009f4 <ProcessUartCommand+0x184>)
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <ProcessUartCommand+0x168>)
 80009a4:	f000 f888 	bl	8000ab8 <UART_Send_IT>
    UART_Send_IT(&huart2,"Unknown CMD.\r\n");
 80009a8:	4913      	ldr	r1, [pc, #76]	@ (80009f8 <ProcessUartCommand+0x188>)
 80009aa:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <ProcessUartCommand+0x174>)
 80009ac:	f000 f884 	bl	8000ab8 <UART_Send_IT>
}
 80009b0:	bf00      	nop
 80009b2:	3798      	adds	r7, #152	@ 0x98
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	080079e8 	.word	0x080079e8
 80009bc:	080079f4 	.word	0x080079f4
 80009c0:	08007a0c 	.word	0x08007a0c
 80009c4:	200001f1 	.word	0x200001f1
 80009c8:	20000000 	.word	0x20000000
 80009cc:	200001f2 	.word	0x200001f2
 80009d0:	200001f0 	.word	0x200001f0
 80009d4:	08007a10 	.word	0x08007a10
 80009d8:	200000e0 	.word	0x200000e0
 80009dc:	08007a1c 	.word	0x08007a1c
 80009e0:	08007a20 	.word	0x08007a20
 80009e4:	20000168 	.word	0x20000168
 80009e8:	08007a54 	.word	0x08007a54
 80009ec:	08007a60 	.word	0x08007a60
 80009f0:	08007a6c 	.word	0x08007a6c
 80009f4:	08007a78 	.word	0x08007a78
 80009f8:	08007a8c 	.word	0x08007a8c

080009fc <ReadADC>:

/** Read ADC once */
uint16_t ReadADC(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  uint16_t val=0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	80fb      	strh	r3, [r7, #6]
  HAL_ADC_Start(&hadc1);
 8000a06:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <ReadADC+0x38>)
 8000a08:	f001 f820 	bl	8001a4c <HAL_ADC_Start>
  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <ReadADC+0x38>)
 8000a10:	f001 f90a 	bl	8001c28 <HAL_ADC_PollForConversion>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d104      	bne.n	8000a24 <ReadADC+0x28>
  {
    val=HAL_ADC_GetValue(&hadc1);
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <ReadADC+0x38>)
 8000a1c:	f001 f9dc 	bl	8001dd8 <HAL_ADC_GetValue>
 8000a20:	4603      	mov	r3, r0
 8000a22:	80fb      	strh	r3, [r7, #6]
  }
  HAL_ADC_Stop(&hadc1);
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <ReadADC+0x38>)
 8000a26:	f001 f8cb 	bl	8001bc0 <HAL_ADC_Stop>
  return val;
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000007c 	.word	0x2000007c

08000a38 <PreprocessData>:
 * 1=no process: treat raw as float and just convert back to int after some trivial float operation
 * 2=sliding average
 * 3=low pass
 */
uint16_t PreprocessData(uint16_t raw, uint8_t mode)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	80fb      	strh	r3, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	717b      	strb	r3, [r7, #5]
  float input = (float)raw;
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	ee07 3a90 	vmov	s15, r3
 8000a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a52:	edc7 7a04 	vstr	s15, [r7, #16]
  float output=input;
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	617b      	str	r3, [r7, #20]

  switch(mode)
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d010      	beq.n	8000a82 <PreprocessData+0x4a>
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	dc15      	bgt.n	8000a90 <PreprocessData+0x58>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d002      	beq.n	8000a6e <PreprocessData+0x36>
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d003      	beq.n	8000a74 <PreprocessData+0x3c>
 8000a6c:	e010      	b.n	8000a90 <PreprocessData+0x58>
  {
    case 1:
      // No process, but still treat as float.
      // Just return (float)raw cast back to int for demonstration.
      output = input; // trivial, could do some scaling if needed
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	617b      	str	r3, [r7, #20]
      break;
 8000a72:	e010      	b.n	8000a96 <PreprocessData+0x5e>
    case 2:
      // Sliding average
      output = moving_average_filter(input);
 8000a74:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a78:	f7ff fd8a 	bl	8000590 <moving_average_filter>
 8000a7c:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8000a80:	e009      	b.n	8000a96 <PreprocessData+0x5e>
    case 3:
      // Low pass filter
      output = low_pass_filter(input);
 8000a82:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a86:	f7ff fdcf 	bl	8000628 <low_pass_filter>
 8000a8a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8000a8e:	e002      	b.n	8000a96 <PreprocessData+0x5e>
    default:
      output = input;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	617b      	str	r3, [r7, #20]
      break;
 8000a94:	bf00      	nop
  }

  // convert back to uint16_t
  uint16_t val = (uint16_t)(output + 0.5f);
 8000a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	81fb      	strh	r3, [r7, #14]
  return val;
 8000aac:	89fb      	ldrh	r3, [r7, #14]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <UART_Send_IT>:

/**
 * @brief Non-blocking send function using HAL_UART_Transmit_IT()
 */
static void UART_Send_IT(UART_HandleTypeDef *huart, const char *str)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  if(huart->Instance == USART1) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <UART_Send_IT+0x74>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d113      	bne.n	8000af4 <UART_Send_IT+0x3c>
    while(uart1TxBusy);
 8000acc:	bf00      	nop
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <UART_Send_IT+0x78>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1fa      	bne.n	8000ace <UART_Send_IT+0x16>
    uart1TxBusy=1;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <UART_Send_IT+0x78>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1,(uint8_t*)str,strlen(str));
 8000ade:	6838      	ldr	r0, [r7, #0]
 8000ae0:	f7ff fb76 	bl	80001d0 <strlen>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <UART_Send_IT+0x7c>)
 8000aee:	f004 f9a1 	bl	8004e34 <HAL_UART_Transmit_IT>
  } else if(huart->Instance == USART2) {
    while(uart2TxBusy);
    uart2TxBusy=1;
    HAL_UART_Transmit_IT(&huart2,(uint8_t*)str,strlen(str));
  }
}
 8000af2:	e017      	b.n	8000b24 <UART_Send_IT+0x6c>
  } else if(huart->Instance == USART2) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <UART_Send_IT+0x80>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d112      	bne.n	8000b24 <UART_Send_IT+0x6c>
    while(uart2TxBusy);
 8000afe:	bf00      	nop
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <UART_Send_IT+0x84>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1fa      	bne.n	8000b00 <UART_Send_IT+0x48>
    uart2TxBusy=1;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <UART_Send_IT+0x84>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2,(uint8_t*)str,strlen(str));
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f7ff fb5d 	bl	80001d0 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <UART_Send_IT+0x88>)
 8000b20:	f004 f988 	bl	8004e34 <HAL_UART_Transmit_IT>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	200002f8 	.word	0x200002f8
 8000b34:	200000e0 	.word	0x200000e0
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	200002f9 	.word	0x200002f9
 8000b40:	20000168 	.word	0x20000168

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	@ 0x58
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2244      	movs	r2, #68	@ 0x44
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 fe15 	bl	8006782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b6a:	f002 fe03 	bl	8003774 <HAL_PWREx_ControlVoltageScaling>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b74:	f000 f932 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b84:	2360      	movs	r3, #96	@ 0x60
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fe45 	bl	8003820 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 f91e 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fa0d 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bc4:	f000 f90a 	bl	8000ddc <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3758      	adds	r7, #88	@ 0x58
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <MX_ADC1_Init+0xe4>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c16:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c22:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c54:	f000 fdaa 	bl	80017ac <HAL_ADC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 f8bd 	bl	8000ddc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c6e:	f002 f971 	bl	8002f54 <HAL_ADCEx_MultiModeConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c78:	f000 f8b0 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_ADC1_Init+0xe8>)
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2306      	movs	r3, #6
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c88:	237f      	movs	r3, #127	@ 0x7f
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_ADC1_Init+0xe0>)
 8000c9a:	f001 fae3 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ca4:	f000 f89a 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000007c 	.word	0x2000007c
 8000cb4:	50040000 	.word	0x50040000
 8000cb8:	2a000400 	.word	0x2a000400

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART1_UART_Init+0x58>)
 8000d00:	f004 f84a 	bl	8004d98 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f867 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000e0 	.word	0x200000e0
 8000d18:	40013800 	.word	0x40013800

08000d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_USART2_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d60:	f004 f81a 	bl	8004d98 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f837 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000168 	.word	0x20000168
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_GPIO_Init+0x5c>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d94:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <MX_GPIO_Init+0x5c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_GPIO_Init+0x5c>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ground_RED_LED_Pin|Ground_IR_LED_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2103      	movs	r1, #3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db0:	f002 fcba 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ground_RED_LED_Pin Ground_IR_LED_Pin */
  GPIO_InitStruct.Pin = Ground_RED_LED_Pin|Ground_IR_LED_Pin;
 8000db4:	2303      	movs	r3, #3
 8000db6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dcc:	f002 fb02 	bl	80033d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0ac      	sub	sp, #176	@ 0xb0
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2288      	movs	r2, #136	@ 0x88
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fc96 	bl	8006782 <memset>
  if(hadc->Instance==ADC1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d14f      	bne.n	8000f00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000e76:	2310      	movs	r3, #16
 8000e78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fac5 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e9c:	f7ff ff9e 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a13      	ldr	r2, [pc, #76]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Analog_Output_Pin;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_Output_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f002 fa72 	bl	80033d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2012      	movs	r0, #18
 8000ef6:	f002 f9b8 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000efa:	2012      	movs	r0, #18
 8000efc:	f002 f9d1 	bl	80032a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f00:	bf00      	nop
 8000f02:	37b0      	adds	r7, #176	@ 0xb0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ae      	sub	sp, #184	@ 0xb8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2288      	movs	r2, #136	@ 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fc26 	bl	8006782 <memset>
  if(huart->Instance==USART1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001068 <HAL_UART_MspInit+0x158>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d145      	bne.n	8000fcc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fa67 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff ff40 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5c:	4b43      	ldr	r3, [pc, #268]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f60:	4a42      	ldr	r2, [pc, #264]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f66:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f68:	4b40      	ldr	r3, [pc, #256]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b3d      	ldr	r3, [pc, #244]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	4a3c      	ldr	r2, [pc, #240]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f80:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 fa0d 	bl	80033d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2025      	movs	r0, #37	@ 0x25
 8000fc0:	f002 f953 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fc4:	2025      	movs	r0, #37	@ 0x25
 8000fc6:	f002 f96c 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fca:	e048      	b.n	800105e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <HAL_UART_MspInit+0x160>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d143      	bne.n	800105e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fa1c 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000fee:	f7ff fef5 	bl	8000ddc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_UART_MspInit+0x15c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a17      	ldr	r2, [pc, #92]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_UART_MspInit+0x15c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001022:	230c      	movs	r3, #12
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103a:	2307      	movs	r3, #7
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f002 f9c3 	bl	80033d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2026      	movs	r0, #38	@ 0x26
 8001054:	f002 f909 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001058:	2026      	movs	r0, #38	@ 0x26
 800105a:	f002 f922 	bl	80032a2 <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	37b8      	adds	r7, #184	@ 0xb8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013800 	.word	0x40013800
 800106c:	40021000 	.word	0x40021000
 8001070:	40004400 	.word	0x40004400

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 f8e7 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <ADC1_2_IRQHandler+0x10>)
 80010da:	f000 fe8b 	bl	8001df4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000007c 	.word	0x2000007c

080010e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <USART1_IRQHandler+0x10>)
 80010ee:	f003 ff4b 	bl	8004f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000e0 	.word	0x200000e0

080010fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART2_IRQHandler+0x10>)
 8001102:	f003 ff41 	bl	8004f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000168 	.word	0x20000168

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f005 fb28 	bl	8006794 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20018000 	.word	0x20018000
 8001170:	00000400 	.word	0x00000400
 8001174:	2000031c 	.word	0x2000031c
 8001178:	20000470 	.word	0x20000470

0800117c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff ffea 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	@ (80011e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	@ (80011ec <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f005 fae7 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d2:	f7ff fa99 	bl	8000708 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011e4:	08007c50 	.word	0x08007c50
  ldr r2, =_sbss
 80011e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011ec:	2000046c 	.word	0x2000046c

080011f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC3_IRQHandler>

080011f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f002 f829 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f80e 	bl	8001224 <HAL_InitTick>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e001      	b.n	8001218 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001214:	f7ff fde8 	bl	8000de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001218:	79fb      	ldrb	r3, [r7, #7]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_InitTick+0x70>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f002 f835 	bl	80032be <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d809      	bhi.n	8001274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001268:	f001 ffff 	bl	800326a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_InitTick+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e007      	b.n	8001284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e004      	b.n	8001284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e001      	b.n	8001284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000004 	.word	0x20000004
 8001298:	20000008 	.word	0x20000008

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	20000320 	.word	0x20000320

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000320 	.word	0x20000320

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000000c 	.word	0x2000000c

08001324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3360      	adds	r3, #96	@ 0x60
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <LL_ADC_SetOffset+0x44>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	03fff000 	.word	0x03fff000

080013d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3360      	adds	r3, #96	@ 0x60
 80013e2:	461a      	mov	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3360      	adds	r3, #96	@ 0x60
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3330      	adds	r3, #48	@ 0x30
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	211f      	movs	r1, #31
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	f003 011f 	and.w	r1, r3, #31
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3314      	adds	r3, #20
 80014ea:	461a      	mov	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	0e5b      	lsrs	r3, r3, #25
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	4413      	add	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	0d1b      	lsrs	r3, r3, #20
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2107      	movs	r1, #7
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	0d1b      	lsrs	r3, r3, #20
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0318 	and.w	r3, r3, #24
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001554:	40d9      	lsrs	r1, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	400b      	ands	r3, r1
 800155a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	0007ffff 	.word	0x0007ffff

08001578 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 031f 	and.w	r3, r3, #31
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6093      	str	r3, [r2, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015e8:	d101      	bne.n	80015ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800160c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001638:	d101      	bne.n	800163e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800165c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001688:	f043 0202 	orr.w	r2, r3, #2
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_IsEnabled+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_IsEnabled+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d101      	bne.n	80016da <LL_ADC_IsDisableOngoing+0x18>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <LL_ADC_IsDisableOngoing+0x1a>
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b04      	cmp	r3, #4
 800174a:	d101      	bne.n	8001750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800176e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001772:	f043 0220 	orr.w	r2, r3, #32
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b08      	cmp	r3, #8
 8001798:	d101      	bne.n	800179e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e130      	b.n	8001a28 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fb2b 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fef1 	bl	80015d4 <LL_ADC_IsDeepPowerDownEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fed7 	bl	80015b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff0c 	bl	8001624 <LL_ADC_IsInternalRegulatorEnabled>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fef0 	bl	80015fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800181c:	4b84      	ldr	r3, [pc, #528]	@ (8001a30 <HAL_ADC_Init+0x284>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	4a84      	ldr	r2, [pc, #528]	@ (8001a34 <HAL_ADC_Init+0x288>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001830:	e002      	b.n	8001838 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff feee 	bl	8001624 <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff62 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8001874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 80c9 	bne.w	8001a16 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80c5 	bne.w	8001a16 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001890:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001894:	f043 0202 	orr.w	r2, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fefb 	bl	800169c <LL_ADC_IsEnabled>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d115      	bne.n	80018d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ac:	4862      	ldr	r0, [pc, #392]	@ (8001a38 <HAL_ADC_Init+0x28c>)
 80018ae:	f7ff fef5 	bl	800169c <LL_ADC_IsEnabled>
 80018b2:	4604      	mov	r4, r0
 80018b4:	4861      	ldr	r0, [pc, #388]	@ (8001a3c <HAL_ADC_Init+0x290>)
 80018b6:	f7ff fef1 	bl	800169c <LL_ADC_IsEnabled>
 80018ba:	4603      	mov	r3, r0
 80018bc:	431c      	orrs	r4, r3
 80018be:	4860      	ldr	r0, [pc, #384]	@ (8001a40 <HAL_ADC_Init+0x294>)
 80018c0:	f7ff feec 	bl	800169c <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	485c      	ldr	r0, [pc, #368]	@ (8001a44 <HAL_ADC_Init+0x298>)
 80018d4:	f7ff fd26 	bl	8001324 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7e5b      	ldrb	r3, [r3, #25]
 80018dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	045b      	lsls	r3, r3, #17
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <HAL_ADC_Init+0x29c>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	430b      	orrs	r3, r1
 8001942:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff1c 	bl	8001786 <LL_ADC_INJ_IsConversionOngoing>
 800194e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d13d      	bne.n	80019d2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d13a      	bne.n	80019d2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001960:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001968:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001978:	f023 0302 	bic.w	r3, r3, #2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	430b      	orrs	r3, r1
 8001984:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800198c:	2b01      	cmp	r3, #1
 800198e:	d118      	bne.n	80019c2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019b2:	430a      	orrs	r2, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	e007      	b.n	80019d2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10c      	bne.n	80019f4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	f023 010f 	bic.w	r1, r3, #15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f2:	e007      	b.n	8001a04 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020f 	bic.w	r2, r2, #15
 8001a02:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a08:	f023 0303 	bic.w	r3, r3, #3
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a14:	e007      	b.n	8001a26 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3724      	adds	r7, #36	@ 0x24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	20000004 	.word	0x20000004
 8001a34:	053e2d63 	.word	0x053e2d63
 8001a38:	50040000 	.word	0x50040000
 8001a3c:	50040100 	.word	0x50040100
 8001a40:	50040200 	.word	0x50040200
 8001a44:	50040300 	.word	0x50040300
 8001a48:	fff0c007 	.word	0xfff0c007

08001a4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a54:	4857      	ldr	r0, [pc, #348]	@ (8001bb4 <HAL_ADC_Start+0x168>)
 8001a56:	f7ff fd8f 	bl	8001578 <LL_ADC_GetMultimode>
 8001a5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fe69 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 809c 	bne.w	8001ba6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_Start+0x30>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e097      	b.n	8001bac <HAL_ADC_Start+0x160>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f001 f89b 	bl	8002bc0 <ADC_Enable>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 8083 	bne.w	8001b9c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <HAL_ADC_Start+0x16c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_Start+0x6e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e000      	b.n	8001abc <HAL_ADC_Start+0x70>
 8001aba:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_ADC_Start+0x170>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ace:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f023 0206 	bic.w	r2, r3, #6
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	221c      	movs	r2, #28
 8001afe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_ADC_Start+0x16c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d002      	beq.n	8001b18 <HAL_ADC_Start+0xcc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_Start+0xce>
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_ADC_Start+0x170>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d008      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d002      	beq.n	8001b34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d114      	bne.n	8001b5e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fdc6 	bl	80016e8 <LL_ADC_REG_StartConversion>
 8001b5c:	e025      	b.n	8001baa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <HAL_ADC_Start+0x16c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d002      	beq.n	8001b7a <HAL_ADC_Start+0x12e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e000      	b.n	8001b7c <HAL_ADC_Start+0x130>
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_ADC_Start+0x170>)
 8001b7c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00f      	beq.n	8001baa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b9a:	e006      	b.n	8001baa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001ba4:	e001      	b.n	8001baa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	50040300 	.word	0x50040300
 8001bb8:	50040100 	.word	0x50040100
 8001bbc:	50040000 	.word	0x50040000

08001bc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Stop+0x16>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e023      	b.n	8001c1e <HAL_ADC_Stop+0x5e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bde:	2103      	movs	r1, #3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 ff31 	bl	8002a48 <ADC_ConversionStop>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d111      	bne.n	8001c14 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f001 f86b 	bl	8002ccc <ADC_Disable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c32:	4866      	ldr	r0, [pc, #408]	@ (8001dcc <HAL_ADC_PollForConversion+0x1a4>)
 8001c34:	f7ff fca0 	bl	8001578 <LL_ADC_GetMultimode>
 8001c38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d102      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c42:	2308      	movs	r3, #8
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e02a      	b.n	8001c9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d002      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d111      	bne.n	8001c7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0a4      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c78:	2304      	movs	r3, #4
 8001c7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c7c:	e00f      	b.n	8001c9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c7e:	4853      	ldr	r0, [pc, #332]	@ (8001dcc <HAL_ADC_PollForConversion+0x1a4>)
 8001c80:	f7ff fc88 	bl	8001594 <LL_ADC_GetMultiDMATransfer>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	f043 0220 	orr.w	r2, r3, #32
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e093      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c9e:	f7ff fb11 	bl	80012c4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ca4:	e021      	b.n	8001cea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cac:	d01d      	beq.n	8001cea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001cae:	f7ff fb09 	bl	80012c4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d302      	bcc.n	8001cc4 <HAL_ADC_PollForConversion+0x9c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d112      	bne.n	8001cea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e06b      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0d6      	beq.n	8001ca6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fb94 	bl	8001436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01c      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d118      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <HAL_ADC_PollForConversion+0x1a8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x136>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e000      	b.n	8001d60 <HAL_ADC_PollForConversion+0x138>
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_ADC_PollForConversion+0x1ac>)
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d008      	beq.n	8001d7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d002      	beq.n	8001d7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d104      	bne.n	8001d84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	e00c      	b.n	8001d9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_ADC_PollForConversion+0x1a8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x16c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_PollForConversion+0x16e>
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_ADC_PollForConversion+0x1ac>)
 8001d96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d104      	bne.n	8001dae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2208      	movs	r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e008      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	50040300 	.word	0x50040300
 8001dd0:	50040100 	.word	0x50040100
 8001dd4:	50040000 	.word	0x50040000

08001dd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e10:	4882      	ldr	r0, [pc, #520]	@ (800201c <HAL_ADC_IRQHandler+0x228>)
 8001e12:	f7ff fbb1 	bl	8001578 <LL_ADC_GetMultimode>
 8001e16:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d017      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x5e>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d012      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f001 f87b 	bl	8002f40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x72>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8083 	beq.w	8001f78 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d07d      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff facc 	bl	8001436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d062      	beq.n	8001f6a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_ADC_IRQHandler+0x22c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0xc0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_IRQHandler+0xc2>
 8001eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8002024 <HAL_ADC_IRQHandler+0x230>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d008      	beq.n	8001ed0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d002      	beq.n	8001ed0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d104      	bne.n	8001eda <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	623b      	str	r3, [r7, #32]
 8001ed8:	e00c      	b.n	8001ef4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a50      	ldr	r2, [pc, #320]	@ (8002020 <HAL_ADC_IRQHandler+0x22c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d002      	beq.n	8001eea <HAL_ADC_IRQHandler+0xf6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e000      	b.n	8001eec <HAL_ADC_IRQHandler+0xf8>
 8001eea:	4b4e      	ldr	r3, [pc, #312]	@ (8002024 <HAL_ADC_IRQHandler+0x230>)
 8001eec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d135      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d12e      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fc11 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11a      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020c 	bic.w	r2, r2, #12
 8001f2a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d112      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f50:	e00b      	b.n	8001f6a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f95c 	bl	8002228 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	220c      	movs	r2, #12
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x198>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 809f 	beq.w	80020d6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8099 	beq.w	80020d6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fa77 	bl	80014b4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fc6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fa32 	bl	8001436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_ADC_IRQHandler+0x22c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d002      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x1f0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e000      	b.n	8001fe6 <HAL_ADC_IRQHandler+0x1f2>
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <HAL_ADC_IRQHandler+0x230>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d008      	beq.n	8002000 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d002      	beq.n	8002000 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b07      	cmp	r3, #7
 8001ffe:	d104      	bne.n	800200a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	e013      	b.n	8002032 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_ADC_IRQHandler+0x22c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_ADC_IRQHandler+0x234>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e007      	b.n	800202a <HAL_ADC_IRQHandler+0x236>
 800201a:	bf00      	nop
 800201c:	50040300 	.word	0x50040300
 8002020:	50040100 	.word	0x50040100
 8002024:	50040000 	.word	0x50040000
 8002028:	4b7d      	ldr	r3, [pc, #500]	@ (8002220 <HAL_ADC_IRQHandler+0x42c>)
 800202a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d047      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_ADC_IRQHandler+0x25e>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03f      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d13a      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	2b40      	cmp	r3, #64	@ 0x40
 800205e:	d133      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12e      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fb89 	bl	8001786 <LL_ADC_INJ_IsConversionOngoing>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11a      	bne.n	80020b0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002088:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80020ae:	e00b      	b.n	80020c8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 ff11 	bl	8002ef0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2260      	movs	r2, #96	@ 0x60
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <HAL_ADC_IRQHandler+0x310>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8a0 	bl	800223c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2280      	movs	r2, #128	@ 0x80
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d012      	beq.n	8002134 <HAL_ADC_IRQHandler+0x340>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00d      	beq.n	8002134 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fef7 	bl	8002f18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_ADC_IRQHandler+0x370>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fee9 	bl	8002f2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d036      	beq.n	80021dc <HAL_ADC_IRQHandler+0x3e8>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d031      	beq.n	80021dc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
 8002184:	e014      	b.n	80021b0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800218c:	4825      	ldr	r0, [pc, #148]	@ (8002224 <HAL_ADC_IRQHandler+0x430>)
 800218e:	f7ff fa01 	bl	8001594 <LL_ADC_GetMultiDMATransfer>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
 800219c:	e008      	b.n	80021b0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ba:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f83e 	bl	8002250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2210      	movs	r2, #16
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d018      	beq.n	8002218 <HAL_ADC_IRQHandler+0x424>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	f043 0208 	orr.w	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002210:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fe76 	bl	8002f04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	50040000 	.word	0x50040000
 8002224:	50040300 	.word	0x50040300

08002228 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0b6      	sub	sp, #216	@ 0xd8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x22>
 8002282:	2302      	movs	r3, #2
 8002284:	e3c9      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x7b6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fa50 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 83aa 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d824      	bhi.n	80022fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	3b02      	subs	r3, #2
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d81b      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x8e>
 80022ba:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <HAL_ADC_ConfigChannel+0x5c>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022d9 	.word	0x080022d9
 80022c8:	080022e1 	.word	0x080022e1
 80022cc:	080022e9 	.word	0x080022e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022d0:	230c      	movs	r3, #12
 80022d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022d6:	e010      	b.n	80022fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022d8:	2312      	movs	r3, #18
 80022da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022de:	e00c      	b.n	80022fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022e0:	2318      	movs	r3, #24
 80022e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022e6:	e008      	b.n	80022fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022f2:	2306      	movs	r3, #6
 80022f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002308:	f7ff f8a8 	bl	800145c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fa11 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8002316:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fa31 	bl	8001786 <LL_ADC_INJ_IsConversionOngoing>
 8002324:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 81a4 	bne.w	800267a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 819f 	bne.w	800267a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	461a      	mov	r2, r3
 800234a:	f7ff f8c6 	bl	80014da <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	08db      	lsrs	r3, r3, #3
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00a      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002380:	f7ff f804 	bl	800138c <LL_ADC_SetOffset>
 8002384:	e179      	b.n	800267a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f821 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x14e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f816 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	e01e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x18c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f80b 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e004      	b.n	80023ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1a4>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	e018      	b.n	800243a <HAL_ADC_ConfigChannel+0x1d6>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800241c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e004      	b.n	800243a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002430:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe ffda 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe ffbe 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x214>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe ffb3 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e01e      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x252>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ffa8 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800249a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800249e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e004      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x26a>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e018      	b.n	8002500 <HAL_ADC_ConfigChannel+0x29c>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e004      	b.n	8002500 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80024f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe ff77 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff5b 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x2da>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2102      	movs	r1, #2
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe ff50 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	e01e      	b.n	800257c <HAL_ADC_ConfigChannel+0x318>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2102      	movs	r1, #2
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe ff45 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e004      	b.n	800257a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x330>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	e014      	b.n	80025be <HAL_ADC_ConfigChannel+0x35a>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e004      	b.n	80025be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025be:	429a      	cmp	r2, r3
 80025c0:	d106      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe ff18 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2103      	movs	r1, #3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fefc 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x398>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2103      	movs	r1, #3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fef1 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	e017      	b.n	800262c <HAL_ADC_ConfigChannel+0x3c8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2103      	movs	r1, #3
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fee6 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002616:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e003      	b.n	800262a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x3e0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	e011      	b.n	8002668 <HAL_ADC_ConfigChannel+0x404>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002654:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002668:	429a      	cmp	r2, r3
 800266a:	d106      	bne.n	800267a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	2103      	movs	r1, #3
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fec3 	bl	8001400 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f80c 	bl	800169c <LL_ADC_IsEnabled>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 8140 	bne.w	800290c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	461a      	mov	r2, r3
 800269a:	f7fe ff49 	bl	8001530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a8f      	ldr	r2, [pc, #572]	@ (80028e0 <HAL_ADC_ConfigChannel+0x67c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	f040 8131 	bne.w	800290c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10b      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x46e>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	bf94      	ite	ls
 80026ca:	2301      	movls	r3, #1
 80026cc:	2300      	movhi	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	e019      	b.n	8002706 <HAL_ADC_ConfigChannel+0x4a2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80026ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	bf94      	ite	ls
 8002700:	2301      	movls	r3, #1
 8002702:	2300      	movhi	r3, #0
 8002704:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002706:	2b00      	cmp	r3, #0
 8002708:	d079      	beq.n	80027fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x4c2>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	3301      	adds	r3, #1
 800271e:	069b      	lsls	r3, r3, #26
 8002720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002724:	e015      	b.n	8002752 <HAL_ADC_ConfigChannel+0x4ee>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002736:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	069b      	lsls	r3, r3, #26
 800274e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x50e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	e017      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x53e>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002782:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e003      	b.n	8002796 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800278e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	ea42 0103 	orr.w	r1, r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x564>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 021f 	and.w	r2, r3, #31
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	e018      	b.n	80027fa <HAL_ADC_ConfigChannel+0x596>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fa:	430b      	orrs	r3, r1
 80027fc:	e081      	b.n	8002902 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_ADC_ConfigChannel+0x5b6>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	3301      	adds	r3, #1
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002818:	e015      	b.n	8002846 <HAL_ADC_ConfigChannel+0x5e2>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	069b      	lsls	r3, r3, #26
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x602>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	3301      	adds	r3, #1
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	e017      	b.n	8002896 <HAL_ADC_ConfigChannel+0x632>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	61bb      	str	r3, [r7, #24]
  return result;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e003      	b.n	800288a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	ea42 0103 	orr.w	r1, r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x65e>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 021f 	and.w	r2, r3, #31
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	3b1e      	subs	r3, #30
 80028ba:	051b      	lsls	r3, r3, #20
 80028bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	e01e      	b.n	8002900 <HAL_ADC_ConfigChannel+0x69c>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  return result;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e006      	b.n	80028ec <HAL_ADC_ConfigChannel+0x688>
 80028de:	bf00      	nop
 80028e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	3b1e      	subs	r3, #30
 80028fa:	051b      	lsls	r3, r3, #20
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002900:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe fde7 	bl	80014da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d07a      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002918:	4843      	ldr	r0, [pc, #268]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7c4>)
 800291a:	f7fe fd29 	bl	8001370 <LL_ADC_GetCommonPathInternalCh>
 800291e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a41      	ldr	r2, [pc, #260]	@ (8002a2c <HAL_ADC_ConfigChannel+0x7c8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d12c      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800292c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002930:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d126      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a30 <HAL_ADC_ConfigChannel+0x7cc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_ADC_ConfigChannel+0x6e8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3b      	ldr	r2, [pc, #236]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7d0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d15d      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800294c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002950:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002954:	4619      	mov	r1, r3
 8002956:	4834      	ldr	r0, [pc, #208]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002958:	f7fe fcf7 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800295c:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <HAL_ADC_ConfigChannel+0x7d4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	4a36      	ldr	r2, [pc, #216]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7d8>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002976:	e002      	b.n	800297e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3b01      	subs	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002984:	e040      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a40 <HAL_ADC_ConfigChannel+0x7dc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d118      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d112      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a23      	ldr	r2, [pc, #140]	@ (8002a30 <HAL_ADC_ConfigChannel+0x7cc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x74c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <HAL_ADC_ConfigChannel+0x7d0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d12d      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b8:	4619      	mov	r1, r3
 80029ba:	481b      	ldr	r0, [pc, #108]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7c4>)
 80029bc:	f7fe fcc5 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c0:	e024      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7e0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d120      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11a      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <HAL_ADC_ConfigChannel+0x7cc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d115      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029ea:	4619      	mov	r1, r3
 80029ec:	480e      	ldr	r0, [pc, #56]	@ (8002a28 <HAL_ADC_ConfigChannel+0x7c4>)
 80029ee:	f7fe fcac 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
 80029f2:	e00c      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	37d8      	adds	r7, #216	@ 0xd8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	80080000 	.word	0x80080000
 8002a28:	50040300 	.word	0x50040300
 8002a2c:	c7520000 	.word	0xc7520000
 8002a30:	50040000 	.word	0x50040000
 8002a34:	50040200 	.word	0x50040200
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	053e2d63 	.word	0x053e2d63
 8002a40:	cb840000 	.word	0xcb840000
 8002a44:	80000001 	.word	0x80000001

08002a48 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fe6a 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8002a64:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fe8b 	bl	8001786 <LL_ADC_INJ_IsConversionOngoing>
 8002a70:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8098 	beq.w	8002bb0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02a      	beq.n	8002ae4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7e5b      	ldrb	r3, [r3, #25]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d126      	bne.n	8002ae4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7e1b      	ldrb	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d122      	bne.n	8002ae4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002aa2:	e014      	b.n	8002ace <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4a45      	ldr	r2, [pc, #276]	@ (8002bbc <ADC_ConversionStop+0x174>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d90d      	bls.n	8002ac8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	f043 0210 	orr.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e074      	b.n	8002bb2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b40      	cmp	r3, #64	@ 0x40
 8002ada:	d1e3      	bne.n	8002aa4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2240      	movs	r2, #64	@ 0x40
 8002ae2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d014      	beq.n	8002b14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fe22 	bl	8001738 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fddf 	bl	80016c2 <LL_ADC_IsDisableOngoing>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fdfe 	bl	8001710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d014      	beq.n	8002b44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fe31 	bl	8001786 <LL_ADC_INJ_IsConversionOngoing>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fdc7 	bl	80016c2 <LL_ADC_IsDisableOngoing>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d104      	bne.n	8002b44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fe0d 	bl	800175e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d005      	beq.n	8002b56 <ADC_ConversionStop+0x10e>
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d105      	bne.n	8002b5c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b50:	230c      	movs	r3, #12
 8002b52:	617b      	str	r3, [r7, #20]
        break;
 8002b54:	e005      	b.n	8002b62 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b56:	2308      	movs	r3, #8
 8002b58:	617b      	str	r3, [r7, #20]
        break;
 8002b5a:	e002      	b.n	8002b62 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	617b      	str	r3, [r7, #20]
        break;
 8002b60:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b62:	f7fe fbaf 	bl	80012c4 <HAL_GetTick>
 8002b66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b68:	e01b      	b.n	8002ba2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b6a:	f7fe fbab 	bl	80012c4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d914      	bls.n	8002ba2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1dc      	bne.n	8002b6a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	a33fffff 	.word	0xa33fffff

08002bc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fd63 	bl	800169c <LL_ADC_IsEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d169      	bne.n	8002cb0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <ADC_Enable+0xfc>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e055      	b.n	8002cb2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fd1e 	bl	800164c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c10:	482b      	ldr	r0, [pc, #172]	@ (8002cc0 <ADC_Enable+0x100>)
 8002c12:	f7fe fbad 	bl	8001370 <LL_ADC_GetCommonPathInternalCh>
 8002c16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c20:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <ADC_Enable+0x104>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	4a28      	ldr	r2, [pc, #160]	@ (8002cc8 <ADC_Enable+0x108>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c3a:	e002      	b.n	8002c42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f9      	bne.n	8002c3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fb3c 	bl	80012c4 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4e:	e028      	b.n	8002ca2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fd21 	bl	800169c <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fcf1 	bl	800164c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c6a:	f7fe fb2b 	bl	80012c4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d914      	bls.n	8002ca2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d00d      	beq.n	8002ca2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d1cf      	bne.n	8002c50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	8000003f 	.word	0x8000003f
 8002cc0:	50040300 	.word	0x50040300
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	053e2d63 	.word	0x053e2d63

08002ccc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fcf2 	bl	80016c2 <LL_ADC_IsDisableOngoing>
 8002cde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fcd9 	bl	800169c <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d047      	beq.n	8002d80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d144      	bne.n	8002d80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030d 	and.w	r3, r3, #13
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fcb3 	bl	8001674 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2203      	movs	r2, #3
 8002d14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fad5 	bl	80012c4 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d1c:	e029      	b.n	8002d72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e023      	b.n	8002d82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d3a:	f7fe fac3 	bl	80012c4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d914      	bls.n	8002d72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1dc      	bne.n	8002d3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <LL_ADC_IsEnabled>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <LL_ADC_IsEnabled+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_ADC_IsEnabled+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_StartCalibration>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002dc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002df6:	d101      	bne.n	8002dfc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_ADCEx_Calibration_Start+0x1c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e04d      	b.n	8002ee8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff39 	bl	8002ccc <ADC_Disable>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d136      	bne.n	8002ed2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e6c:	f023 0302 	bic.w	r3, r3, #2
 8002e70:	f043 0202 	orr.w	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff96 	bl	8002db0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e84:	e014      	b.n	8002eb0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e92:	d30d      	bcc.n	8002eb0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e98:	f023 0312 	bic.w	r3, r3, #18
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e01b      	b.n	8002ee8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff94 	bl	8002de2 <LL_ADC_IsCalibrationOnGoing>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e2      	bne.n	8002e86 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ed0:	e005      	b.n	8002ede <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b09f      	sub	sp, #124	@ 0x7c
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e093      	b.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a47      	ldr	r2, [pc, #284]	@ (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f8c:	4b46      	ldr	r3, [pc, #280]	@ (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	e001      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e072      	b.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff27 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8002fbc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ff21 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d154      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d151      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fd4:	4b35      	ldr	r3, [pc, #212]	@ (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02c      	beq.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ff2:	035b      	lsls	r3, r3, #13
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ffa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffc:	4829      	ldr	r0, [pc, #164]	@ (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ffe:	f7ff fec4 	bl	8002d8a <LL_ADC_IsEnabled>
 8003002:	4604      	mov	r4, r0
 8003004:	4828      	ldr	r0, [pc, #160]	@ (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003006:	f7ff fec0 	bl	8002d8a <LL_ADC_IsEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	431c      	orrs	r4, r3
 800300e:	4828      	ldr	r0, [pc, #160]	@ (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003010:	f7ff febb 	bl	8002d8a <LL_ADC_IsEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	4323      	orrs	r3, r4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d137      	bne.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800301c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003024:	f023 030f 	bic.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	6892      	ldr	r2, [r2, #8]
 8003030:	430a      	orrs	r2, r1
 8003032:	431a      	orrs	r2, r3
 8003034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003036:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003038:	e028      	b.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800303a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003044:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003046:	4817      	ldr	r0, [pc, #92]	@ (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003048:	f7ff fe9f 	bl	8002d8a <LL_ADC_IsEnabled>
 800304c:	4604      	mov	r4, r0
 800304e:	4816      	ldr	r0, [pc, #88]	@ (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003050:	f7ff fe9b 	bl	8002d8a <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	431c      	orrs	r4, r3
 8003058:	4815      	ldr	r0, [pc, #84]	@ (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800305a:	f7ff fe96 	bl	8002d8a <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	4323      	orrs	r3, r4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800306e:	f023 030f 	bic.w	r3, r3, #15
 8003072:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003074:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003076:	e009      	b.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800308a:	e000      	b.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800308c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003096:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800309a:	4618      	mov	r0, r3
 800309c:	377c      	adds	r7, #124	@ 0x7c
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	50040000 	.word	0x50040000
 80030a8:	50040100 	.word	0x50040100
 80030ac:	50040300 	.word	0x50040300
 80030b0:	50040200 	.word	0x50040200

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	@ (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	@ (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	@ (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	@ 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	@ 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003220:	d301      	bcc.n	8003226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <SysTick_Config+0x40>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322e:	210f      	movs	r1, #15
 8003230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003234:	f7ff ff8e 	bl	8003154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <SysTick_Config+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <SysTick_Config+0x40>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff29 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800327c:	f7ff ff3e 	bl	80030fc <__NVIC_GetPriorityGrouping>
 8003280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f7ff ff8e 	bl	80031a8 <NVIC_EncodePriority>
 800328c:	4602      	mov	r2, r0
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff5d 	bl	8003154 <__NVIC_SetPriority>
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff31 	bl	8003118 <__NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffa2 	bl	8003210 <SysTick_Config>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d008      	beq.n	8003300 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e022      	b.n	8003346 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 020e 	bic.w	r2, r2, #14
 800330e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	f003 021c 	and.w	r2, r3, #28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d005      	beq.n	8003376 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e029      	b.n	80033ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 020e 	bic.w	r2, r2, #14
 8003384:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 021c 	and.w	r2, r3, #28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    }
  }
  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	e17f      	b.n	80036e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8171 	beq.w	80036de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d005      	beq.n	8003414 <HAL_GPIO_Init+0x40>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d130      	bne.n	8003476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800344a:	2201      	movs	r2, #1
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 0201 	and.w	r2, r3, #1
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b03      	cmp	r3, #3
 8003480:	d118      	bne.n	80034b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d017      	beq.n	80034f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	6939      	ldr	r1, [r7, #16]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80ac 	beq.w	80036de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <HAL_GPIO_Init+0x330>)
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	4a5e      	ldr	r2, [pc, #376]	@ (8003704 <HAL_GPIO_Init+0x330>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6613      	str	r3, [r2, #96]	@ 0x60
 8003592:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <HAL_GPIO_Init+0x330>)
 8003594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800359e:	4a5a      	ldr	r2, [pc, #360]	@ (8003708 <HAL_GPIO_Init+0x334>)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035c8:	d025      	beq.n	8003616 <HAL_GPIO_Init+0x242>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	@ (800370c <HAL_GPIO_Init+0x338>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <HAL_GPIO_Init+0x23e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003710 <HAL_GPIO_Init+0x33c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d019      	beq.n	800360e <HAL_GPIO_Init+0x23a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003714 <HAL_GPIO_Init+0x340>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0x236>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003718 <HAL_GPIO_Init+0x344>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_GPIO_Init+0x232>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_GPIO_Init+0x348>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <HAL_GPIO_Init+0x22e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003720 <HAL_GPIO_Init+0x34c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_Init+0x22a>
 80035fa:	2306      	movs	r3, #6
 80035fc:	e00c      	b.n	8003618 <HAL_GPIO_Init+0x244>
 80035fe:	2307      	movs	r3, #7
 8003600:	e00a      	b.n	8003618 <HAL_GPIO_Init+0x244>
 8003602:	2305      	movs	r3, #5
 8003604:	e008      	b.n	8003618 <HAL_GPIO_Init+0x244>
 8003606:	2304      	movs	r3, #4
 8003608:	e006      	b.n	8003618 <HAL_GPIO_Init+0x244>
 800360a:	2303      	movs	r3, #3
 800360c:	e004      	b.n	8003618 <HAL_GPIO_Init+0x244>
 800360e:	2302      	movs	r3, #2
 8003610:	e002      	b.n	8003618 <HAL_GPIO_Init+0x244>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_GPIO_Init+0x244>
 8003616:	2300      	movs	r3, #0
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	f002 0203 	and.w	r2, r2, #3
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	4093      	lsls	r3, r2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003628:	4937      	ldr	r1, [pc, #220]	@ (8003708 <HAL_GPIO_Init+0x334>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3302      	adds	r3, #2
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_GPIO_Init+0x350>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800365a:	4a32      	ldr	r2, [pc, #200]	@ (8003724 <HAL_GPIO_Init+0x350>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003660:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <HAL_GPIO_Init+0x350>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003684:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <HAL_GPIO_Init+0x350>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800368a:	4b26      	ldr	r3, [pc, #152]	@ (8003724 <HAL_GPIO_Init+0x350>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <HAL_GPIO_Init+0x350>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <HAL_GPIO_Init+0x350>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036d8:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <HAL_GPIO_Init+0x350>)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f47f ae78 	bne.w	80033e4 <HAL_GPIO_Init+0x10>
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40010000 	.word	0x40010000
 800370c:	48000400 	.word	0x48000400
 8003710:	48000800 	.word	0x48000800
 8003714:	48000c00 	.word	0x48000c00
 8003718:	48001000 	.word	0x48001000
 800371c:	48001400 	.word	0x48001400
 8003720:	48001800 	.word	0x48001800
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003744:	e002      	b.n	800374c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <HAL_PWREx_GetVoltageRange+0x18>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40007000 	.word	0x40007000

08003774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003782:	d130      	bne.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003784:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d038      	beq.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800379a:	4a1e      	ldr	r2, [pc, #120]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2232      	movs	r2, #50	@ 0x32
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	4a1b      	ldr	r2, [pc, #108]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	3301      	adds	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b8:	e002      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c0:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037cc:	d102      	bne.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f2      	bne.n	80037ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	d110      	bne.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d007      	beq.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037f4:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037fc:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003802:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000
 8003818:	20000004 	.word	0x20000004
 800381c:	431bde83 	.word	0x431bde83

08003820 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3ca      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003832:	4b97      	ldr	r3, [pc, #604]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383c:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80e4 	beq.w	8003a1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x4a>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	f040 808b 	bne.w	8003978 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 8087 	bne.w	8003978 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800386a:	4b89      	ldr	r3, [pc, #548]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e3a2      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_RCC_OscConfig+0x7c>
 8003892:	4b7f      	ldr	r3, [pc, #508]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389a:	e005      	b.n	80038a8 <HAL_RCC_OscConfig+0x88>
 800389c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d223      	bcs.n	80038f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fd55 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e383      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	4b73      	ldr	r3, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a72      	ldr	r2, [pc, #456]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038c6:	f043 0308 	orr.w	r3, r3, #8
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b70      	ldr	r3, [pc, #448]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	496d      	ldr	r1, [pc, #436]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038de:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4968      	ldr	r1, [pc, #416]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
 80038f2:	e025      	b.n	8003940 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f4:	4b66      	ldr	r3, [pc, #408]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4960      	ldr	r1, [pc, #384]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003912:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	495b      	ldr	r1, [pc, #364]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fd15 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e343      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003940:	f000 fc4a 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b52      	ldr	r3, [pc, #328]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4950      	ldr	r1, [pc, #320]	@ (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a98 <HAL_RCC_OscConfig+0x278>)
 800395e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003960:	4b4e      	ldr	r3, [pc, #312]	@ (8003a9c <HAL_RCC_OscConfig+0x27c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fc5d 	bl	8001224 <HAL_InitTick>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d052      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	e327      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d032      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003980:	4b43      	ldr	r3, [pc, #268]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a42      	ldr	r2, [pc, #264]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398c:	f7fd fc9a 	bl	80012c4 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003994:	f7fd fc96 	bl	80012c4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e310      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b2:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4931      	ldr	r1, [pc, #196]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	492c      	ldr	r1, [pc, #176]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
 80039e4:	e01a      	b.n	8003a1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f2:	f7fd fc67 	bl	80012c4 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fa:	f7fd fc63 	bl	80012c4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e2dd      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x1da>
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d074      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x21a>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d10e      	bne.n	8003a52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d064      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d160      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e2ba      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x24a>
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e026      	b.n	8003ab8 <HAL_RCC_OscConfig+0x298>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a72:	d115      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x280>
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a02      	ldr	r2, [pc, #8]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x298>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08007aa8 	.word	0x08007aa8
 8003a98:	20000004 	.word	0x20000004
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a9f      	ldr	r2, [pc, #636]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b9d      	ldr	r3, [pc, #628]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a9c      	ldr	r2, [pc, #624]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fc00 	bl	80012c4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fbfc 	bl	80012c4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	@ 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e276      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2a8>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fbec 	bl	80012c4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fbe8 	bl	80012c4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e262      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2d0>
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d060      	beq.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x310>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d119      	bne.n	8003b5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d116      	bne.n	8003b5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b30:	4b7c      	ldr	r3, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_OscConfig+0x328>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e23f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b76      	ldr	r3, [pc, #472]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	4973      	ldr	r1, [pc, #460]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	e040      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b66:	4b6f      	ldr	r3, [pc, #444]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd fba7 	bl	80012c4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fba3 	bl	80012c4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e21d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b62      	ldr	r3, [pc, #392]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	495f      	ldr	r1, [pc, #380]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
 8003bac:	e018      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bae:	4b5d      	ldr	r3, [pc, #372]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fb83 	bl	80012c4 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fb7f 	bl	80012c4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1f9      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd4:	4b53      	ldr	r3, [pc, #332]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d03c      	beq.n	8003c66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fb5e 	bl	80012c4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fb5a 	bl	80012c4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1d4      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCC_OscConfig+0x3ec>
 8003c2c:	e01b      	b.n	8003c66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c34:	4a3b      	ldr	r2, [pc, #236]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fb41 	bl	80012c4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd fb3d 	bl	80012c4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1b7      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ef      	bne.n	8003c46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d118      	bne.n	8003cde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fb04 	bl	80012c4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fd fb00 	bl	80012c4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e17a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd2:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4d8>
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	4a0d      	ldr	r2, [pc, #52]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf6:	e029      	b.n	8003d4c <HAL_RCC_OscConfig+0x52c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d115      	bne.n	8003d2c <HAL_RCC_OscConfig+0x50c>
 8003d00:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	4a07      	ldr	r2, [pc, #28]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a03      	ldr	r2, [pc, #12]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d20:	e014      	b.n	8003d4c <HAL_RCC_OscConfig+0x52c>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a9b      	ldr	r2, [pc, #620]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d3c:	4b98      	ldr	r3, [pc, #608]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a97      	ldr	r2, [pc, #604]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd fab6 	bl	80012c4 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd fab2 	bl	80012c4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e12a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d72:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ed      	beq.n	8003d5c <HAL_RCC_OscConfig+0x53c>
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fd fa9f 	bl	80012c4 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fd fa9b 	bl	80012c4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e113      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ed      	bne.n	8003d8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	4a79      	ldr	r2, [pc, #484]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80fe 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	f040 80d0 	bne.w	8003f74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dd4:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d130      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	3b01      	subs	r3, #1
 8003df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d127      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d11f      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e14:	2a07      	cmp	r2, #7
 8003e16:	bf14      	ite	ne
 8003e18:	2201      	movne	r2, #1
 8003e1a:	2200      	moveq	r2, #0
 8003e1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d06e      	beq.n	8003f28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d069      	beq.n	8003f24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e50:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e5c:	4b50      	ldr	r3, [pc, #320]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0ad      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e78:	f7fd fa24 	bl	80012c4 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd fa20 	bl	80012c4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e09a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e92:	4b43      	ldr	r3, [pc, #268]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	4b40      	ldr	r3, [pc, #256]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <HAL_RCC_OscConfig+0x784>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eb8:	0212      	lsls	r2, r2, #8
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	0552      	lsls	r2, r2, #21
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ecc:	0852      	lsrs	r2, r2, #1
 8003ece:	3a01      	subs	r2, #1
 8003ed0:	0652      	lsls	r2, r2, #25
 8003ed2:	4311      	orrs	r1, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed8:	0912      	lsrs	r2, r2, #4
 8003eda:	0452      	lsls	r2, r2, #17
 8003edc:	430a      	orrs	r2, r1
 8003ede:	4930      	ldr	r1, [pc, #192]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003efc:	f7fd f9e2 	bl	80012c4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd f9de 	bl	80012c4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e058      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f22:	e050      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f28:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d148      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f4c:	f7fd f9ba 	bl	80012c4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd f9b6 	bl	80012c4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e030      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x734>
 8003f72:	e028      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d023      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd f99d 	bl	80012c4 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	e00c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd f999 	bl	80012c4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d905      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e013      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ec      	bne.n	8003f8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4905      	ldr	r1, [pc, #20]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_RCC_OscConfig+0x7b4>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
 8003fc0:	e001      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	feeefffc 	.word	0xfeeefffc

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0e7      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	4970      	ldr	r1, [pc, #448]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b6e      	ldr	r3, [pc, #440]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0cf      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b66      	ldr	r3, [pc, #408]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004034:	429a      	cmp	r2, r3
 8004036:	d908      	bls.n	800404a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b63      	ldr	r3, [pc, #396]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4960      	ldr	r1, [pc, #384]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04c      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d121      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0a6      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	4b54      	ldr	r3, [pc, #336]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d115      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e09a      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408e:	4b4e      	ldr	r3, [pc, #312]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e08e      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e086      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b46      	ldr	r3, [pc, #280]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4943      	ldr	r1, [pc, #268]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd f900 	bl	80012c4 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fd f8fc 	bl	80012c4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e06e      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b3a      	ldr	r3, [pc, #232]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	492b      	ldr	r1, [pc, #172]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411e:	4b29      	ldr	r3, [pc, #164]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d210      	bcs.n	800414e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 0207 	bic.w	r2, r3, #7
 8004134:	4923      	ldr	r1, [pc, #140]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413c:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e036      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4918      	ldr	r1, [pc, #96]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4910      	ldr	r1, [pc, #64]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418c:	f000 f824 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	490b      	ldr	r1, [pc, #44]	@ (80041cc <HAL_RCC_ClockConfig+0x1f4>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x1fc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd f837 	bl	8001224 <HAL_InitTick>
 80041b6:	4603      	mov	r3, r0
 80041b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
 80041cc:	08007aa8 	.word	0x08007aa8
 80041d0:	20000004 	.word	0x20000004
 80041d4:	20000008 	.word	0x20000008

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e6:	4b3e      	ldr	r3, [pc, #248]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d121      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d11e      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800420c:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e005      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004228:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004234:	4a2b      	ldr	r2, [pc, #172]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10d      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d102      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e004      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d101      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 800425e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d134      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0xa6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d003      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xac>
 800427c:	e005      	b.n	800428a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004280:	617b      	str	r3, [r7, #20]
      break;
 8004282:	e005      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e002      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	617b      	str	r3, [r7, #20]
      break;
 800428e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004290:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	3301      	adds	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	0e5b      	lsrs	r3, r3, #25
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	3301      	adds	r3, #1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042d0:	69bb      	ldr	r3, [r7, #24]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	@ 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	08007ac0 	.word	0x08007ac0
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000004 	.word	0x20000004

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	08007ab8 	.word	0x08007ab8

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004338:	f7ff ffda 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08007ab8 	.word	0x08007ab8

08004360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800436c:	4b2a      	ldr	r3, [pc, #168]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004378:	f7ff f9ee 	bl	8003758 <HAL_PWREx_GetVoltageRange>
 800437c:	6178      	str	r0, [r7, #20]
 800437e:	e014      	b.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004398:	f7ff f9de 	bl	8003758 <HAL_PWREx_GetVoltageRange>
 800439c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b0:	d10b      	bne.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d919      	bls.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80043bc:	d902      	bls.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043be:	2302      	movs	r3, #2
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	e013      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e010      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b80      	cmp	r3, #128	@ 0x80
 80043ce:	d902      	bls.n	80043d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043d0:	2303      	movs	r3, #3
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e00a      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b80      	cmp	r3, #128	@ 0x80
 80043da:	d102      	bne.n	80043e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043dc:	2302      	movs	r3, #2
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	e004      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b70      	cmp	r3, #112	@ 0x70
 80043e6:	d101      	bne.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e8:	2301      	movs	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 0207 	bic.w	r2, r3, #7
 80043f4:	4909      	ldr	r1, [pc, #36]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043fc:	4b07      	ldr	r3, [pc, #28]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d001      	beq.n	800440e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	40022000 	.word	0x40022000

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004428:	2300      	movs	r3, #0
 800442a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2300      	movs	r3, #0
 800442e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004438:	2b00      	cmp	r3, #0
 800443a:	d041      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004440:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004444:	d02a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004446:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800444a:	d824      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800444c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004456:	d81e      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004460:	d010      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004462:	e018      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004464:	4b86      	ldr	r3, [pc, #536]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a85      	ldr	r2, [pc, #532]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004470:	e015      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fabb 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004482:	e00c      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3320      	adds	r3, #32
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fba6 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004494:	e003      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	74fb      	strb	r3, [r7, #19]
      break;
 800449a:	e000      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800449c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a4:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b2:	4973      	ldr	r1, [pc, #460]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044ba:	e001      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044d4:	d02a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044da:	d824      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e0:	d008      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e6:	d81e      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f0:	d010      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044f2:	e018      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f4:	4b62      	ldr	r3, [pc, #392]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a61      	ldr	r2, [pc, #388]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004500:	e015      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fa73 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb5e 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	74fb      	strb	r3, [r7, #19]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004534:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004542:	494f      	ldr	r1, [pc, #316]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a0 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004562:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	4a40      	ldr	r2, [pc, #256]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	@ 0x58
 8004584:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004590:	2301      	movs	r3, #1
 8004592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004594:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3a      	ldr	r2, [pc, #232]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a0:	f7fc fe90 	bl	80012c4 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045a6:	e009      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a8:	f7fc fe8c 	bl	80012c4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d902      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ba:	e005      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045bc:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ef      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045c8:	7cfb      	ldrb	r3, [r7, #19]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d15c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d019      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ec:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045f8:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	4a20      	ldr	r2, [pc, #128]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004618:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fc fe4b 	bl	80012c4 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004630:	e00b      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fc fe47 	bl	80012c4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d902      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	74fb      	strb	r3, [r7, #19]
            break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ec      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466e:	4904      	ldr	r1, [pc, #16]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468c:	7c7b      	ldrb	r3, [r7, #17]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004692:	4b9e      	ldr	r3, [pc, #632]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	4a9d      	ldr	r2, [pc, #628]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046aa:	4b98      	ldr	r3, [pc, #608]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f023 0203 	bic.w	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	4994      	ldr	r1, [pc, #592]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046cc:	4b8f      	ldr	r3, [pc, #572]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d2:	f023 020c 	bic.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	498c      	ldr	r1, [pc, #560]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ee:	4b87      	ldr	r3, [pc, #540]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	4983      	ldr	r1, [pc, #524]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004710:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	497b      	ldr	r1, [pc, #492]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004732:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004740:	4972      	ldr	r1, [pc, #456]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004754:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	496a      	ldr	r1, [pc, #424]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004776:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	4961      	ldr	r1, [pc, #388]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004798:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a6:	4959      	ldr	r1, [pc, #356]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ba:	4b54      	ldr	r3, [pc, #336]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c8:	4950      	ldr	r1, [pc, #320]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	4948      	ldr	r1, [pc, #288]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047fe:	4b43      	ldr	r3, [pc, #268]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	493f      	ldr	r1, [pc, #252]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004820:	4b3a      	ldr	r3, [pc, #232]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482e:	4937      	ldr	r1, [pc, #220]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b32      	ldr	r3, [pc, #200]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a31      	ldr	r2, [pc, #196]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
 800484c:	e011      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004856:	d10c      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f8c8 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800487e:	4b23      	ldr	r3, [pc, #140]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	491f      	ldr	r1, [pc, #124]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4a1a      	ldr	r2, [pc, #104]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a8:	60d3      	str	r3, [r2, #12]
 80048aa:	e011      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f899 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d02b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ea:	4908      	ldr	r1, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a02      	ldr	r2, [pc, #8]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e014      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f867 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004940:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800494e:	4928      	ldr	r1, [pc, #160]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495e:	d10d      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f844 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d014      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	74bb      	strb	r3, [r7, #18]
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3320      	adds	r3, #32
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f925 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ba:	490d      	ldr	r1, [pc, #52]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ce:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049de:	4904      	ldr	r1, [pc, #16]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a02:	4b75      	ldr	r3, [pc, #468]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a0e:	4b72      	ldr	r3, [pc, #456]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0203 	and.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d10d      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
       ||
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a26:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
       ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d047      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e044      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d018      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x86>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d825      	bhi.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x62>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d009      	beq.n	8004a68 <RCCEx_PLLSAI1_Config+0x74>
 8004a54:	e020      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a56:	4b60      	ldr	r3, [pc, #384]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e01a      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e013      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7a:	4b57      	ldr	r3, [pc, #348]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a86:	4b54      	ldr	r3, [pc, #336]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e004      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aae:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	4944      	ldr	r1, [pc, #272]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d17d      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad0:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a40      	ldr	r2, [pc, #256]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fc fbf2 	bl	80012c4 <HAL_GetTick>
 8004ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae2:	e009      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae4:	f7fc fbee 	bl	80012c4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d902      	bls.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	73fb      	strb	r3, [r7, #15]
        break;
 8004af6:	e005      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af8:	4b37      	ldr	r3, [pc, #220]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d160      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d111      	bne.n	8004b34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b10:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6892      	ldr	r2, [r2, #8]
 8004b20:	0211      	lsls	r1, r2, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	0912      	lsrs	r2, r2, #4
 8004b28:	0452      	lsls	r2, r2, #17
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	492a      	ldr	r1, [pc, #168]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	610b      	str	r3, [r1, #16]
 8004b32:	e027      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d112      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3a:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
 8004b4a:	0211      	lsls	r1, r2, #8
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6912      	ldr	r2, [r2, #16]
 8004b50:	0852      	lsrs	r2, r2, #1
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0552      	lsls	r2, r2, #21
 8004b56:	430a      	orrs	r2, r1
 8004b58:	491f      	ldr	r1, [pc, #124]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]
 8004b5e:	e011      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b60:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	0211      	lsls	r1, r2, #8
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6952      	ldr	r2, [r2, #20]
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0652      	lsls	r2, r2, #25
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	4916      	ldr	r1, [pc, #88]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b84:	4b14      	ldr	r3, [pc, #80]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a13      	ldr	r2, [pc, #76]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fc fb98 	bl	80012c4 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b96:	e009      	b.n	8004bac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b98:	f7fc fb94 	bl	80012c4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d902      	bls.n	8004bac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8004baa:	e005      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bac:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ef      	beq.n	8004b98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000

08004bdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bea:	4b6a      	ldr	r3, [pc, #424]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bf6:	4b67      	ldr	r3, [pc, #412]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10d      	bne.n	8004c22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c0e:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d047      	beq.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e044      	b.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d018      	beq.n	8004c62 <RCCEx_PLLSAI2_Config+0x86>
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d825      	bhi.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d002      	beq.n	8004c3e <RCCEx_PLLSAI2_Config+0x62>
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d009      	beq.n	8004c50 <RCCEx_PLLSAI2_Config+0x74>
 8004c3c:	e020      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3e:	4b55      	ldr	r3, [pc, #340]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11d      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4e:	e01a      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	4b50      	ldr	r3, [pc, #320]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e013      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6e:	4b49      	ldr	r3, [pc, #292]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7e:	e006      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e004      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c96:	4b3f      	ldr	r3, [pc, #252]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	430b      	orrs	r3, r1
 8004cac:	4939      	ldr	r1, [pc, #228]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d167      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cb8:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a35      	ldr	r2, [pc, #212]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fc fafe 	bl	80012c4 <HAL_GetTick>
 8004cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cca:	e009      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ccc:	f7fc fafa 	bl	80012c4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cde:	e005      	b.n	8004cec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1ef      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d14a      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6892      	ldr	r2, [r2, #8]
 8004d08:	0211      	lsls	r1, r2, #8
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68d2      	ldr	r2, [r2, #12]
 8004d0e:	0912      	lsrs	r2, r2, #4
 8004d10:	0452      	lsls	r2, r2, #17
 8004d12:	430a      	orrs	r2, r1
 8004d14:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	614b      	str	r3, [r1, #20]
 8004d1a:	e011      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6912      	ldr	r2, [r2, #16]
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4916      	ldr	r1, [pc, #88]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fc faba 	bl	80012c4 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d54:	f7fc fab6 	bl	80012c4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
          break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4904      	ldr	r1, [pc, #16]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e040      	b.n	8004e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc f8a8 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fea6 	bl	8005b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fbeb 	bl	80055c0 <UART_SetConfig>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e01b      	b.n	8004e2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 ff25 	bl	8005c74 <UART_CheckIdleState>
 8004e2a:	4603      	mov	r3, r0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b08b      	sub	sp, #44	@ 0x2c
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d147      	bne.n	8004eda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_UART_Transmit_IT+0x22>
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e040      	b.n	8004edc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	@ 0x21
 8004e82:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8c:	d107      	bne.n	8004e9e <HAL_UART_Transmit_IT+0x6a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a13      	ldr	r2, [pc, #76]	@ (8004ee8 <HAL_UART_Transmit_IT+0xb4>)
 8004e9a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004e9c:	e002      	b.n	8004ea4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a12      	ldr	r2, [pc, #72]	@ (8004eec <HAL_UART_Transmit_IT+0xb8>)
 8004ea2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	372c      	adds	r7, #44	@ 0x2c
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	080061d7 	.word	0x080061d7
 8004eec:	08006121 	.word	0x08006121

08004ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d137      	bne.n	8004f78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Receive_IT+0x24>
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e030      	b.n	8004f7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a18      	ldr	r2, [pc, #96]	@ (8004f84 <HAL_UART_Receive_IT+0x94>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01f      	beq.n	8004f68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	613b      	str	r3, [r7, #16]
   return(result);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	69f9      	ldr	r1, [r7, #28]
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e6      	bne.n	8004f36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 ff96 	bl	8005ea0 <UART_Start_Receive_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	e000      	b.n	8004f7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3728      	adds	r7, #40	@ 0x28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40008000 	.word	0x40008000

08004f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004fb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00f      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 82ca 	beq.w	800557a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
      }
      return;
 8004fee:	e2c4      	b.n	800557a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8117 	beq.w	8005228 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800500a:	4b85      	ldr	r3, [pc, #532]	@ (8005220 <HAL_UART_IRQHandler+0x298>)
 800500c:	4013      	ands	r3, r2
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 810a 	beq.w	8005228 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_UART_IRQHandler+0xbc>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503a:	f043 0201 	orr.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_UART_IRQHandler+0xec>
 8005050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2202      	movs	r2, #2
 8005062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d011      	beq.n	80050a4 <HAL_UART_IRQHandler+0x11c>
 8005080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2204      	movs	r2, #4
 8005092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509a:	f043 0202 	orr.w	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2208      	movs	r2, #8
 80050ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d6:	f043 0208 	orr.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d012      	beq.n	8005112 <HAL_UART_IRQHandler+0x18a>
 80050ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8230 	beq.w	800557e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800512a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04f      	beq.n	800520a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 ff5e 	bl	800602c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b40      	cmp	r3, #64	@ 0x40
 800517c:	d141      	bne.n	8005202 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3308      	adds	r3, #8
 8005184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1d9      	bne.n	800517e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d013      	beq.n	80051fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d6:	4a13      	ldr	r2, [pc, #76]	@ (8005224 <HAL_UART_IRQHandler+0x29c>)
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe f8b7 	bl	8003352 <HAL_DMA_Abort_IT>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	e00f      	b.n	800521a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9ca 	bl	8005594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	e00b      	b.n	800521a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9c6 	bl	8005594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e007      	b.n	800521a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9c2 	bl	8005594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005218:	e1b1      	b.n	800557e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521a:	bf00      	nop
    return;
 800521c:	e1af      	b.n	800557e <HAL_UART_IRQHandler+0x5f6>
 800521e:	bf00      	nop
 8005220:	04000120 	.word	0x04000120
 8005224:	080060f5 	.word	0x080060f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 816a 	bne.w	8005506 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8163 	beq.w	8005506 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 815c 	beq.w	8005506 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2210      	movs	r2, #16
 8005254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005260:	2b40      	cmp	r3, #64	@ 0x40
 8005262:	f040 80d4 	bne.w	800540e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005272:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80ad 	beq.w	80053d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005286:	429a      	cmp	r2, r3
 8005288:	f080 80a5 	bcs.w	80053d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f040 8086 	bne.w	80053b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1da      	bne.n	80052a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3308      	adds	r3, #8
 8005312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005316:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800531a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800531e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e1      	bne.n	80052f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800533e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005352:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005354:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005358:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e3      	bne.n	800532e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005384:	f023 0310 	bic.w	r3, r3, #16
 8005388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005396:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005398:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800539c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e4      	bne.n	8005374 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fd ff91 	bl	80032d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8ea 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80053d4:	e0d5      	b.n	8005582 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e0:	429a      	cmp	r2, r3
 80053e2:	f040 80ce 	bne.w	8005582 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	f040 80c5 	bne.w	8005582 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8ce 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
      return;
 800540c:	e0b9      	b.n	8005582 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800541a:	b29b      	uxth	r3, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80ab 	beq.w	8005586 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80a6 	beq.w	8005586 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800544e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800545c:	647b      	str	r3, [r7, #68]	@ 0x44
 800545e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e4      	bne.n	800543a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	623b      	str	r3, [r7, #32]
   return(result);
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005494:	633a      	str	r2, [r7, #48]	@ 0x30
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e3      	bne.n	8005470 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	69b9      	ldr	r1, [r7, #24]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	617b      	str	r3, [r7, #20]
   return(result);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e4      	bne.n	80054bc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f852 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005504:	e03f      	b.n	8005586 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00e      	beq.n	8005530 <HAL_UART_IRQHandler+0x5a8>
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f89b 	bl	8006664 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800552e:	e02d      	b.n	800558c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800553c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01c      	beq.n	800558a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
    }
    return;
 8005558:	e017      	b.n	800558a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d012      	beq.n	800558c <HAL_UART_IRQHandler+0x604>
 8005566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800556a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00c      	beq.n	800558c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fe8f 	bl	8006296 <UART_EndTransmit_IT>
    return;
 8005578:	e008      	b.n	800558c <HAL_UART_IRQHandler+0x604>
      return;
 800557a:	bf00      	nop
 800557c:	e006      	b.n	800558c <HAL_UART_IRQHandler+0x604>
    return;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <HAL_UART_IRQHandler+0x604>
      return;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <HAL_UART_IRQHandler+0x604>
      return;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <HAL_UART_IRQHandler+0x604>
    return;
 800558a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800558c:	37e8      	adds	r7, #232	@ 0xe8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop

08005594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b08a      	sub	sp, #40	@ 0x28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	431a      	orrs	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4ba4      	ldr	r3, [pc, #656]	@ (8005880 <UART_SetConfig+0x2c0>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a99      	ldr	r2, [pc, #612]	@ (8005884 <UART_SetConfig+0x2c4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	4313      	orrs	r3, r2
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a90      	ldr	r2, [pc, #576]	@ (8005888 <UART_SetConfig+0x2c8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d126      	bne.n	8005698 <UART_SetConfig+0xd8>
 800564a:	4b90      	ldr	r3, [pc, #576]	@ (800588c <UART_SetConfig+0x2cc>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b03      	cmp	r3, #3
 8005656:	d81b      	bhi.n	8005690 <UART_SetConfig+0xd0>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0xa0>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	08005679 	.word	0x08005679
 800566c:	08005689 	.word	0x08005689
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005676:	e116      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005678:	2302      	movs	r3, #2
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567e:	e112      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e10e      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568e:	e10a      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005696:	e106      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a7c      	ldr	r2, [pc, #496]	@ (8005890 <UART_SetConfig+0x2d0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d138      	bne.n	8005714 <UART_SetConfig+0x154>
 80056a2:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <UART_SetConfig+0x2cc>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d82d      	bhi.n	800570c <UART_SetConfig+0x14c>
 80056b0:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <UART_SetConfig+0xf8>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	0800570d 	.word	0x0800570d
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	0800570d 	.word	0x0800570d
 80056d4:	0800570d 	.word	0x0800570d
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005705 	.word	0x08005705
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e0d8      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fa:	e0d4      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005702:	e0d0      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570a:	e0cc      	b.n	80058a6 <UART_SetConfig+0x2e6>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005712:	e0c8      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a5e      	ldr	r2, [pc, #376]	@ (8005894 <UART_SetConfig+0x2d4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d125      	bne.n	800576a <UART_SetConfig+0x1aa>
 800571e:	4b5b      	ldr	r3, [pc, #364]	@ (800588c <UART_SetConfig+0x2cc>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005724:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005728:	2b30      	cmp	r3, #48	@ 0x30
 800572a:	d016      	beq.n	800575a <UART_SetConfig+0x19a>
 800572c:	2b30      	cmp	r3, #48	@ 0x30
 800572e:	d818      	bhi.n	8005762 <UART_SetConfig+0x1a2>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d00a      	beq.n	800574a <UART_SetConfig+0x18a>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d814      	bhi.n	8005762 <UART_SetConfig+0x1a2>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <UART_SetConfig+0x182>
 800573c:	2b10      	cmp	r3, #16
 800573e:	d008      	beq.n	8005752 <UART_SetConfig+0x192>
 8005740:	e00f      	b.n	8005762 <UART_SetConfig+0x1a2>
 8005742:	2300      	movs	r3, #0
 8005744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005748:	e0ad      	b.n	80058a6 <UART_SetConfig+0x2e6>
 800574a:	2302      	movs	r3, #2
 800574c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005750:	e0a9      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005752:	2304      	movs	r3, #4
 8005754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005758:	e0a5      	b.n	80058a6 <UART_SetConfig+0x2e6>
 800575a:	2308      	movs	r3, #8
 800575c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005760:	e0a1      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005762:	2310      	movs	r3, #16
 8005764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005768:	e09d      	b.n	80058a6 <UART_SetConfig+0x2e6>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <UART_SetConfig+0x2d8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d125      	bne.n	80057c0 <UART_SetConfig+0x200>
 8005774:	4b45      	ldr	r3, [pc, #276]	@ (800588c <UART_SetConfig+0x2cc>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800577e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005780:	d016      	beq.n	80057b0 <UART_SetConfig+0x1f0>
 8005782:	2bc0      	cmp	r3, #192	@ 0xc0
 8005784:	d818      	bhi.n	80057b8 <UART_SetConfig+0x1f8>
 8005786:	2b80      	cmp	r3, #128	@ 0x80
 8005788:	d00a      	beq.n	80057a0 <UART_SetConfig+0x1e0>
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d814      	bhi.n	80057b8 <UART_SetConfig+0x1f8>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <UART_SetConfig+0x1d8>
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d008      	beq.n	80057a8 <UART_SetConfig+0x1e8>
 8005796:	e00f      	b.n	80057b8 <UART_SetConfig+0x1f8>
 8005798:	2300      	movs	r3, #0
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579e:	e082      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a6:	e07e      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ae:	e07a      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b6:	e076      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057be:	e072      	b.n	80058a6 <UART_SetConfig+0x2e6>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a35      	ldr	r2, [pc, #212]	@ (800589c <UART_SetConfig+0x2dc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d12a      	bne.n	8005820 <UART_SetConfig+0x260>
 80057ca:	4b30      	ldr	r3, [pc, #192]	@ (800588c <UART_SetConfig+0x2cc>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d8:	d01a      	beq.n	8005810 <UART_SetConfig+0x250>
 80057da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057de:	d81b      	bhi.n	8005818 <UART_SetConfig+0x258>
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e4:	d00c      	beq.n	8005800 <UART_SetConfig+0x240>
 80057e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ea:	d815      	bhi.n	8005818 <UART_SetConfig+0x258>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <UART_SetConfig+0x238>
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f4:	d008      	beq.n	8005808 <UART_SetConfig+0x248>
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x258>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fe:	e052      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005806:	e04e      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580e:	e04a      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005816:	e046      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581e:	e042      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a17      	ldr	r2, [pc, #92]	@ (8005884 <UART_SetConfig+0x2c4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d13a      	bne.n	80058a0 <UART_SetConfig+0x2e0>
 800582a:	4b18      	ldr	r3, [pc, #96]	@ (800588c <UART_SetConfig+0x2cc>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005838:	d01a      	beq.n	8005870 <UART_SetConfig+0x2b0>
 800583a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800583e:	d81b      	bhi.n	8005878 <UART_SetConfig+0x2b8>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005844:	d00c      	beq.n	8005860 <UART_SetConfig+0x2a0>
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584a:	d815      	bhi.n	8005878 <UART_SetConfig+0x2b8>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <UART_SetConfig+0x298>
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005854:	d008      	beq.n	8005868 <UART_SetConfig+0x2a8>
 8005856:	e00f      	b.n	8005878 <UART_SetConfig+0x2b8>
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e022      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005866:	e01e      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586e:	e01a      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005876:	e016      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587e:	e012      	b.n	80058a6 <UART_SetConfig+0x2e6>
 8005880:	efff69f3 	.word	0xefff69f3
 8005884:	40008000 	.word	0x40008000
 8005888:	40013800 	.word	0x40013800
 800588c:	40021000 	.word	0x40021000
 8005890:	40004400 	.word	0x40004400
 8005894:	40004800 	.word	0x40004800
 8005898:	40004c00 	.word	0x40004c00
 800589c:	40005000 	.word	0x40005000
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005b28 <UART_SetConfig+0x568>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d17a      	bne.n	80059a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d824      	bhi.n	8005902 <UART_SetConfig+0x342>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x300>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	08005903 	.word	0x08005903
 80058d0:	080058f3 	.word	0x080058f3
 80058d4:	08005903 	.word	0x08005903
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005903 	.word	0x08005903
 80058e0:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fe fd10 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 80058e8:	61f8      	str	r0, [r7, #28]
        break;
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b8f      	ldr	r3, [pc, #572]	@ (8005b2c <UART_SetConfig+0x56c>)
 80058ee:	61fb      	str	r3, [r7, #28]
        break;
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe fc71 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80058f6:	61f8      	str	r0, [r7, #28]
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058fe:	61fb      	str	r3, [r7, #28]
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800590c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80fb 	beq.w	8005b0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	429a      	cmp	r2, r3
 8005924:	d305      	bcc.n	8005932 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	429a      	cmp	r2, r3
 8005930:	d903      	bls.n	800593a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005938:	e0e8      	b.n	8005b0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2200      	movs	r2, #0
 800593e:	461c      	mov	r4, r3
 8005940:	4615      	mov	r5, r2
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	022b      	lsls	r3, r5, #8
 800594c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005950:	0222      	lsls	r2, r4, #8
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	6849      	ldr	r1, [r1, #4]
 8005956:	0849      	lsrs	r1, r1, #1
 8005958:	2000      	movs	r0, #0
 800595a:	4688      	mov	r8, r1
 800595c:	4681      	mov	r9, r0
 800595e:	eb12 0a08 	adds.w	sl, r2, r8
 8005962:	eb43 0b09 	adc.w	fp, r3, r9
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005974:	4650      	mov	r0, sl
 8005976:	4659      	mov	r1, fp
 8005978:	f7fa fc92 	bl	80002a0 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4613      	mov	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598a:	d308      	bcc.n	800599e <UART_SetConfig+0x3de>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d204      	bcs.n	800599e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	60da      	str	r2, [r3, #12]
 800599c:	e0b6      	b.n	8005b0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059a4:	e0b2      	b.n	8005b0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ae:	d15e      	bne.n	8005a6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d828      	bhi.n	8005a0a <UART_SetConfig+0x44a>
 80059b8:	a201      	add	r2, pc, #4	@ (adr r2, 80059c0 <UART_SetConfig+0x400>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	08005a0b 	.word	0x08005a0b
 80059d0:	080059fb 	.word	0x080059fb
 80059d4:	08005a0b 	.word	0x08005a0b
 80059d8:	08005a0b 	.word	0x08005a0b
 80059dc:	08005a0b 	.word	0x08005a0b
 80059e0:	08005a03 	.word	0x08005a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7fe fc90 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 80059e8:	61f8      	str	r0, [r7, #28]
        break;
 80059ea:	e014      	b.n	8005a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7fe fca2 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80059f0:	61f8      	str	r0, [r7, #28]
        break;
 80059f2:	e010      	b.n	8005a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b2c <UART_SetConfig+0x56c>)
 80059f6:	61fb      	str	r3, [r7, #28]
        break;
 80059f8:	e00d      	b.n	8005a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fa:	f7fe fbed 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80059fe:	61f8      	str	r0, [r7, #28]
        break;
 8005a00:	e009      	b.n	8005a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a06:	61fb      	str	r3, [r7, #28]
        break;
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d077      	beq.n	8005b0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005a      	lsls	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	441a      	add	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d916      	bls.n	8005a66 <UART_SetConfig+0x4a6>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3e:	d212      	bcs.n	8005a66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f023 030f 	bic.w	r3, r3, #15
 8005a48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	8afb      	ldrh	r3, [r7, #22]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	8afa      	ldrh	r2, [r7, #22]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e052      	b.n	8005b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a6c:	e04e      	b.n	8005b0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d827      	bhi.n	8005ac6 <UART_SetConfig+0x506>
 8005a76:	a201      	add	r2, pc, #4	@ (adr r2, 8005a7c <UART_SetConfig+0x4bc>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005aa9 	.word	0x08005aa9
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	08005ac7 	.word	0x08005ac7
 8005a8c:	08005ab7 	.word	0x08005ab7
 8005a90:	08005ac7 	.word	0x08005ac7
 8005a94:	08005ac7 	.word	0x08005ac7
 8005a98:	08005ac7 	.word	0x08005ac7
 8005a9c:	08005abf 	.word	0x08005abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa0:	f7fe fc32 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005aa4:	61f8      	str	r0, [r7, #28]
        break;
 8005aa6:	e014      	b.n	8005ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa8:	f7fe fc44 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005aac:	61f8      	str	r0, [r7, #28]
        break;
 8005aae:	e010      	b.n	8005ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b2c <UART_SetConfig+0x56c>)
 8005ab2:	61fb      	str	r3, [r7, #28]
        break;
 8005ab4:	e00d      	b.n	8005ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab6:	f7fe fb8f 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005aba:	61f8      	str	r0, [r7, #28]
        break;
 8005abc:	e009      	b.n	8005ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac2:	61fb      	str	r3, [r7, #28]
        break;
 8005ac4:	e005      	b.n	8005ad2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d019      	beq.n	8005b0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	085a      	lsrs	r2, r3, #1
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b0f      	cmp	r3, #15
 8005af0:	d909      	bls.n	8005b06 <UART_SetConfig+0x546>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af8:	d205      	bcs.n	8005b06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	e002      	b.n	8005b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3728      	adds	r7, #40	@ 0x28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b26:	bf00      	nop
 8005b28:	40008000 	.word	0x40008000
 8005b2c:	00f42400 	.word	0x00f42400

08005b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c2e:	d10a      	bne.n	8005c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b098      	sub	sp, #96	@ 0x60
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c84:	f7fb fb1e 	bl	80012c4 <HAL_GetTick>
 8005c88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d12e      	bne.n	8005cf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f88c 	bl	8005dc4 <UART_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d021      	beq.n	8005cf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e062      	b.n	8005dbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d149      	bne.n	8005d98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f856 	bl	8005dc4 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d03c      	beq.n	8005d98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e011      	b.n	8005dbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3758      	adds	r7, #88	@ 0x58
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd4:	e04f      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ddc:	d04b      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fb fa71 	bl	80012c4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e04e      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d037      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d034      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d031      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d110      	bne.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2208      	movs	r2, #8
 8005e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f8ff 	bl	800602c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2208      	movs	r2, #8
 8005e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e029      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e50:	d111      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f8e5 	bl	800602c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e00f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d0a0      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b097      	sub	sp, #92	@ 0x5c
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d10e      	bne.n	8005ef2 <UART_Start_Receive_IT+0x52>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <UART_Start_Receive_IT+0x48>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ee6:	e02d      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	22ff      	movs	r2, #255	@ 0xff
 8005eec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ef0:	e028      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10d      	bne.n	8005f16 <UART_Start_Receive_IT+0x76>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <UART_Start_Receive_IT+0x6c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	@ 0xff
 8005f06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f0a:	e01b      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	227f      	movs	r2, #127	@ 0x7f
 8005f10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f14:	e016      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1e:	d10d      	bne.n	8005f3c <UART_Start_Receive_IT+0x9c>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <UART_Start_Receive_IT+0x92>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	227f      	movs	r2, #127	@ 0x7f
 8005f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f30:	e008      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	223f      	movs	r2, #63	@ 0x3f
 8005f36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f3a:	e003      	b.n	8005f44 <UART_Start_Receive_IT+0xa4>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2222      	movs	r2, #34	@ 0x22
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e5      	bne.n	8005f54 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f90:	d107      	bne.n	8005fa2 <UART_Start_Receive_IT+0x102>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a21      	ldr	r2, [pc, #132]	@ (8006024 <UART_Start_Receive_IT+0x184>)
 8005f9e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005fa0:	e002      	b.n	8005fa8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a20      	ldr	r2, [pc, #128]	@ (8006028 <UART_Start_Receive_IT+0x188>)
 8005fa6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d019      	beq.n	8005fe4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e6      	bne.n	8005fb0 <UART_Start_Receive_IT+0x110>
 8005fe2:	e018      	b.n	8006016 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f043 0320 	orr.w	r3, r3, #32
 8005ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006002:	623b      	str	r3, [r7, #32]
 8006004:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	375c      	adds	r7, #92	@ 0x5c
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	080064a9 	.word	0x080064a9
 8006028:	080062ed 	.word	0x080062ed

0800602c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b095      	sub	sp, #84	@ 0x54
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006052:	643b      	str	r3, [r7, #64]	@ 0x40
 8006054:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	61fb      	str	r3, [r7, #28]
   return(result);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800608c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d118      	bne.n	80060d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0310 	bic.w	r3, r3, #16
 80060b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6979      	ldr	r1, [r7, #20]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	613b      	str	r3, [r7, #16]
   return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060e8:	bf00      	nop
 80060ea:	3754      	adds	r7, #84	@ 0x54
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fa3e 	bl	8005594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b08f      	sub	sp, #60	@ 0x3c
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800612c:	2b21      	cmp	r3, #33	@ 0x21
 800612e:	d14c      	bne.n	80061ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d132      	bne.n	80061a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	61fb      	str	r3, [r7, #28]
   return(result);
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e6      	bne.n	800613c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	60bb      	str	r3, [r7, #8]
   return(result);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80061a0:	e013      	b.n	80061ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80061ca:	bf00      	nop
 80061cc:	373c      	adds	r7, #60	@ 0x3c
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b091      	sub	sp, #68	@ 0x44
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e2:	2b21      	cmp	r3, #33	@ 0x21
 80061e4:	d151      	bne.n	800628a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d132      	bne.n	8006258 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	633b      	str	r3, [r7, #48]	@ 0x30
 8006212:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	60fb      	str	r3, [r7, #12]
   return(result);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	69b9      	ldr	r1, [r7, #24]
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	617b      	str	r3, [r7, #20]
   return(result);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e6      	bne.n	8006224 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006256:	e018      	b.n	800628a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800625e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626a:	b292      	uxth	r2, r2
 800626c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800628a:	bf00      	nop
 800628c:	3744      	adds	r7, #68	@ 0x44
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b088      	sub	sp, #32
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fa f9ef 	bl	80006c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e2:	bf00      	nop
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b09c      	sub	sp, #112	@ 0x70
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006304:	2b22      	cmp	r3, #34	@ 0x22
 8006306:	f040 80be 	bne.w	8006486 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006310:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006318:	b2d9      	uxtb	r1, r3
 800631a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800631e:	b2da      	uxtb	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	400a      	ands	r2, r1
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 80a3 	bne.w	800649a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006368:	66bb      	str	r3, [r7, #104]	@ 0x68
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006372:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006374:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006378:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e6      	bne.n	8006354 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	667b      	str	r3, [r7, #100]	@ 0x64
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80063a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80063a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a34      	ldr	r2, [pc, #208]	@ (80064a4 <UART_RxISR_8BIT+0x1b8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d01f      	beq.n	8006418 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	623b      	str	r3, [r7, #32]
   return(result);
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30
 8006406:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800640a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641c:	2b01      	cmp	r3, #1
 800641e:	d12e      	bne.n	800647e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	60fb      	str	r3, [r7, #12]
   return(result);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0310 	bic.w	r3, r3, #16
 800643a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	69b9      	ldr	r1, [r7, #24]
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	617b      	str	r3, [r7, #20]
   return(result);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d103      	bne.n	800646e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2210      	movs	r2, #16
 800646c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff f896 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800647c:	e00d      	b.n	800649a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fa f8fc 	bl	800067c <HAL_UART_RxCpltCallback>
}
 8006484:	e009      	b.n	800649a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	8b1b      	ldrh	r3, [r3, #24]
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	b292      	uxth	r2, r2
 8006498:	831a      	strh	r2, [r3, #24]
}
 800649a:	bf00      	nop
 800649c:	3770      	adds	r7, #112	@ 0x70
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40008000 	.word	0x40008000

080064a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b09c      	sub	sp, #112	@ 0x70
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c0:	2b22      	cmp	r3, #34	@ 0x22
 80064c2:	f040 80be 	bne.w	8006642 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80064d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80064da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80064de:	4013      	ands	r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 80a3 	bne.w	8006656 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800651e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006524:	667b      	str	r3, [r7, #100]	@ 0x64
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800652e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006530:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006534:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800653c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e6      	bne.n	8006510 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	663b      	str	r3, [r7, #96]	@ 0x60
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006562:	643a      	str	r2, [r7, #64]	@ 0x40
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e5      	bne.n	8006542 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a34      	ldr	r2, [pc, #208]	@ (8006660 <UART_RxISR_16BIT+0x1b8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01f      	beq.n	80065d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d12e      	bne.n	800663a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6979      	ldr	r1, [r7, #20]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	613b      	str	r3, [r7, #16]
   return(result);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b10      	cmp	r3, #16
 8006620:	d103      	bne.n	800662a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ffb8 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006638:	e00d      	b.n	8006656 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fa f81e 	bl	800067c <HAL_UART_RxCpltCallback>
}
 8006640:	e009      	b.n	8006656 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	8b1b      	ldrh	r3, [r3, #24]
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	b292      	uxth	r2, r2
 8006654:	831a      	strh	r2, [r3, #24]
}
 8006656:	bf00      	nop
 8006658:	3770      	adds	r7, #112	@ 0x70
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40008000 	.word	0x40008000

08006664 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <sniprintf>:
 8006678:	b40c      	push	{r2, r3}
 800667a:	b530      	push	{r4, r5, lr}
 800667c:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <sniprintf+0x64>)
 800667e:	1e0c      	subs	r4, r1, #0
 8006680:	681d      	ldr	r5, [r3, #0]
 8006682:	b09d      	sub	sp, #116	@ 0x74
 8006684:	da08      	bge.n	8006698 <sniprintf+0x20>
 8006686:	238b      	movs	r3, #139	@ 0x8b
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800668e:	b01d      	add	sp, #116	@ 0x74
 8006690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006694:	b002      	add	sp, #8
 8006696:	4770      	bx	lr
 8006698:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800669c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066a0:	bf14      	ite	ne
 80066a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80066a6:	4623      	moveq	r3, r4
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	9307      	str	r3, [sp, #28]
 80066ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066b0:	9002      	str	r0, [sp, #8]
 80066b2:	9006      	str	r0, [sp, #24]
 80066b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066ba:	ab21      	add	r3, sp, #132	@ 0x84
 80066bc:	a902      	add	r1, sp, #8
 80066be:	4628      	mov	r0, r5
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	f000 f939 	bl	8006938 <_svfiprintf_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	bfbc      	itt	lt
 80066ca:	238b      	movlt	r3, #139	@ 0x8b
 80066cc:	602b      	strlt	r3, [r5, #0]
 80066ce:	2c00      	cmp	r4, #0
 80066d0:	d0dd      	beq.n	800668e <sniprintf+0x16>
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e7d9      	b.n	800668e <sniprintf+0x16>
 80066da:	bf00      	nop
 80066dc:	20000010 	.word	0x20000010

080066e0 <siscanf>:
 80066e0:	b40e      	push	{r1, r2, r3}
 80066e2:	b530      	push	{r4, r5, lr}
 80066e4:	b09c      	sub	sp, #112	@ 0x70
 80066e6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80066e8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80066ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80066f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	9006      	str	r0, [sp, #24]
 80066f8:	f7f9 fd6a 	bl	80001d0 <strlen>
 80066fc:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <siscanf+0x4c>)
 80066fe:	9003      	str	r0, [sp, #12]
 8006700:	9007      	str	r0, [sp, #28]
 8006702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006704:	480a      	ldr	r0, [pc, #40]	@ (8006730 <siscanf+0x50>)
 8006706:	9401      	str	r4, [sp, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800670c:	9314      	str	r3, [sp, #80]	@ 0x50
 800670e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006712:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006716:	462a      	mov	r2, r5
 8006718:	4623      	mov	r3, r4
 800671a:	a902      	add	r1, sp, #8
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f000 fa5f 	bl	8006be0 <__ssvfiscanf_r>
 8006722:	b01c      	add	sp, #112	@ 0x70
 8006724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006728:	b003      	add	sp, #12
 800672a:	4770      	bx	lr
 800672c:	08006735 	.word	0x08006735
 8006730:	20000010 	.word	0x20000010

08006734 <__seofread>:
 8006734:	2000      	movs	r0, #0
 8006736:	4770      	bx	lr

08006738 <strncmp>:
 8006738:	b510      	push	{r4, lr}
 800673a:	b16a      	cbz	r2, 8006758 <strncmp+0x20>
 800673c:	3901      	subs	r1, #1
 800673e:	1884      	adds	r4, r0, r2
 8006740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006748:	429a      	cmp	r2, r3
 800674a:	d103      	bne.n	8006754 <strncmp+0x1c>
 800674c:	42a0      	cmp	r0, r4
 800674e:	d001      	beq.n	8006754 <strncmp+0x1c>
 8006750:	2a00      	cmp	r2, #0
 8006752:	d1f5      	bne.n	8006740 <strncmp+0x8>
 8006754:	1ad0      	subs	r0, r2, r3
 8006756:	bd10      	pop	{r4, pc}
 8006758:	4610      	mov	r0, r2
 800675a:	e7fc      	b.n	8006756 <strncmp+0x1e>

0800675c <strncpy>:
 800675c:	b510      	push	{r4, lr}
 800675e:	3901      	subs	r1, #1
 8006760:	4603      	mov	r3, r0
 8006762:	b132      	cbz	r2, 8006772 <strncpy+0x16>
 8006764:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006768:	f803 4b01 	strb.w	r4, [r3], #1
 800676c:	3a01      	subs	r2, #1
 800676e:	2c00      	cmp	r4, #0
 8006770:	d1f7      	bne.n	8006762 <strncpy+0x6>
 8006772:	441a      	add	r2, r3
 8006774:	2100      	movs	r1, #0
 8006776:	4293      	cmp	r3, r2
 8006778:	d100      	bne.n	800677c <strncpy+0x20>
 800677a:	bd10      	pop	{r4, pc}
 800677c:	f803 1b01 	strb.w	r1, [r3], #1
 8006780:	e7f9      	b.n	8006776 <strncpy+0x1a>

08006782 <memset>:
 8006782:	4402      	add	r2, r0
 8006784:	4603      	mov	r3, r0
 8006786:	4293      	cmp	r3, r2
 8006788:	d100      	bne.n	800678c <memset+0xa>
 800678a:	4770      	bx	lr
 800678c:	f803 1b01 	strb.w	r1, [r3], #1
 8006790:	e7f9      	b.n	8006786 <memset+0x4>
	...

08006794 <__errno>:
 8006794:	4b01      	ldr	r3, [pc, #4]	@ (800679c <__errno+0x8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000010 	.word	0x20000010

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	@ (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	@ (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	@ (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	@ (80067e4 <__libc_init_array+0x44>)
 80067b4:	f001 f8e0 	bl	8007978 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	08007c48 	.word	0x08007c48
 80067dc:	08007c48 	.word	0x08007c48
 80067e0:	08007c48 	.word	0x08007c48
 80067e4:	08007c4c 	.word	0x08007c4c

080067e8 <__retarget_lock_acquire_recursive>:
 80067e8:	4770      	bx	lr

080067ea <__retarget_lock_release_recursive>:
 80067ea:	4770      	bx	lr

080067ec <_free_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	2900      	cmp	r1, #0
 80067f2:	d041      	beq.n	8006878 <_free_r+0x8c>
 80067f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f8:	1f0c      	subs	r4, r1, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	18e4      	addlt	r4, r4, r3
 8006800:	f000 ff1a 	bl	8007638 <__malloc_lock>
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <_free_r+0x90>)
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	b933      	cbnz	r3, 8006818 <_free_r+0x2c>
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6014      	str	r4, [r2, #0]
 800680e:	4628      	mov	r0, r5
 8006810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006814:	f000 bf16 	b.w	8007644 <__malloc_unlock>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x42>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	1821      	adds	r1, r4, r0
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	e7ed      	b.n	800680a <_free_r+0x1e>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x4c>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x42>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1850      	adds	r0, r2, r1
 800683c:	42a0      	cmp	r0, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x6c>
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	4401      	add	r1, r0
 8006844:	1850      	adds	r0, r2, r1
 8006846:	4283      	cmp	r3, r0
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1e0      	bne.n	800680e <_free_r+0x22>
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4408      	add	r0, r1
 8006854:	6010      	str	r0, [r2, #0]
 8006856:	e7da      	b.n	800680e <_free_r+0x22>
 8006858:	d902      	bls.n	8006860 <_free_r+0x74>
 800685a:	230c      	movs	r3, #12
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	e7d6      	b.n	800680e <_free_r+0x22>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1821      	adds	r1, r4, r0
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1809      	addeq	r1, r1, r0
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7ca      	b.n	800680e <_free_r+0x22>
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	20000468 	.word	0x20000468

08006880 <__ssputs_r>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	688e      	ldr	r6, [r1, #8]
 8006886:	461f      	mov	r7, r3
 8006888:	42be      	cmp	r6, r7
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	4682      	mov	sl, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4690      	mov	r8, r2
 8006892:	d82d      	bhi.n	80068f0 <__ssputs_r+0x70>
 8006894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800689c:	d026      	beq.n	80068ec <__ssputs_r+0x6c>
 800689e:	6965      	ldr	r5, [r4, #20]
 80068a0:	6909      	ldr	r1, [r1, #16]
 80068a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068a6:	eba3 0901 	sub.w	r9, r3, r1
 80068aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068ae:	1c7b      	adds	r3, r7, #1
 80068b0:	444b      	add	r3, r9
 80068b2:	106d      	asrs	r5, r5, #1
 80068b4:	429d      	cmp	r5, r3
 80068b6:	bf38      	it	cc
 80068b8:	461d      	movcc	r5, r3
 80068ba:	0553      	lsls	r3, r2, #21
 80068bc:	d527      	bpl.n	800690e <__ssputs_r+0x8e>
 80068be:	4629      	mov	r1, r5
 80068c0:	f000 fb24 	bl	8006f0c <_malloc_r>
 80068c4:	4606      	mov	r6, r0
 80068c6:	b360      	cbz	r0, 8006922 <__ssputs_r+0xa2>
 80068c8:	6921      	ldr	r1, [r4, #16]
 80068ca:	464a      	mov	r2, r9
 80068cc:	f001 f83e 	bl	800794c <memcpy>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	6126      	str	r6, [r4, #16]
 80068de:	6165      	str	r5, [r4, #20]
 80068e0:	444e      	add	r6, r9
 80068e2:	eba5 0509 	sub.w	r5, r5, r9
 80068e6:	6026      	str	r6, [r4, #0]
 80068e8:	60a5      	str	r5, [r4, #8]
 80068ea:	463e      	mov	r6, r7
 80068ec:	42be      	cmp	r6, r7
 80068ee:	d900      	bls.n	80068f2 <__ssputs_r+0x72>
 80068f0:	463e      	mov	r6, r7
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	4632      	mov	r2, r6
 80068f6:	4641      	mov	r1, r8
 80068f8:	f000 fffe 	bl	80078f8 <memmove>
 80068fc:	68a3      	ldr	r3, [r4, #8]
 80068fe:	1b9b      	subs	r3, r3, r6
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	4433      	add	r3, r6
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	2000      	movs	r0, #0
 800690a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690e:	462a      	mov	r2, r5
 8006910:	f000 fed8 	bl	80076c4 <_realloc_r>
 8006914:	4606      	mov	r6, r0
 8006916:	2800      	cmp	r0, #0
 8006918:	d1e0      	bne.n	80068dc <__ssputs_r+0x5c>
 800691a:	6921      	ldr	r1, [r4, #16]
 800691c:	4650      	mov	r0, sl
 800691e:	f7ff ff65 	bl	80067ec <_free_r>
 8006922:	230c      	movs	r3, #12
 8006924:	f8ca 3000 	str.w	r3, [sl]
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006934:	e7e9      	b.n	800690a <__ssputs_r+0x8a>
	...

08006938 <_svfiprintf_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	4698      	mov	r8, r3
 800693e:	898b      	ldrh	r3, [r1, #12]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	b09d      	sub	sp, #116	@ 0x74
 8006944:	4607      	mov	r7, r0
 8006946:	460d      	mov	r5, r1
 8006948:	4614      	mov	r4, r2
 800694a:	d510      	bpl.n	800696e <_svfiprintf_r+0x36>
 800694c:	690b      	ldr	r3, [r1, #16]
 800694e:	b973      	cbnz	r3, 800696e <_svfiprintf_r+0x36>
 8006950:	2140      	movs	r1, #64	@ 0x40
 8006952:	f000 fadb 	bl	8006f0c <_malloc_r>
 8006956:	6028      	str	r0, [r5, #0]
 8006958:	6128      	str	r0, [r5, #16]
 800695a:	b930      	cbnz	r0, 800696a <_svfiprintf_r+0x32>
 800695c:	230c      	movs	r3, #12
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006964:	b01d      	add	sp, #116	@ 0x74
 8006966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696a:	2340      	movs	r3, #64	@ 0x40
 800696c:	616b      	str	r3, [r5, #20]
 800696e:	2300      	movs	r3, #0
 8006970:	9309      	str	r3, [sp, #36]	@ 0x24
 8006972:	2320      	movs	r3, #32
 8006974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006978:	f8cd 800c 	str.w	r8, [sp, #12]
 800697c:	2330      	movs	r3, #48	@ 0x30
 800697e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b1c <_svfiprintf_r+0x1e4>
 8006982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006986:	f04f 0901 	mov.w	r9, #1
 800698a:	4623      	mov	r3, r4
 800698c:	469a      	mov	sl, r3
 800698e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006992:	b10a      	cbz	r2, 8006998 <_svfiprintf_r+0x60>
 8006994:	2a25      	cmp	r2, #37	@ 0x25
 8006996:	d1f9      	bne.n	800698c <_svfiprintf_r+0x54>
 8006998:	ebba 0b04 	subs.w	fp, sl, r4
 800699c:	d00b      	beq.n	80069b6 <_svfiprintf_r+0x7e>
 800699e:	465b      	mov	r3, fp
 80069a0:	4622      	mov	r2, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff ff6b 	bl	8006880 <__ssputs_r>
 80069aa:	3001      	adds	r0, #1
 80069ac:	f000 80a7 	beq.w	8006afe <_svfiprintf_r+0x1c6>
 80069b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069b2:	445a      	add	r2, fp
 80069b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80069b6:	f89a 3000 	ldrb.w	r3, [sl]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 809f 	beq.w	8006afe <_svfiprintf_r+0x1c6>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ca:	f10a 0a01 	add.w	sl, sl, #1
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	9307      	str	r3, [sp, #28]
 80069d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80069d8:	4654      	mov	r4, sl
 80069da:	2205      	movs	r2, #5
 80069dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e0:	484e      	ldr	r0, [pc, #312]	@ (8006b1c <_svfiprintf_r+0x1e4>)
 80069e2:	f7f9 fc0d 	bl	8000200 <memchr>
 80069e6:	9a04      	ldr	r2, [sp, #16]
 80069e8:	b9d8      	cbnz	r0, 8006a22 <_svfiprintf_r+0xea>
 80069ea:	06d0      	lsls	r0, r2, #27
 80069ec:	bf44      	itt	mi
 80069ee:	2320      	movmi	r3, #32
 80069f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f4:	0711      	lsls	r1, r2, #28
 80069f6:	bf44      	itt	mi
 80069f8:	232b      	movmi	r3, #43	@ 0x2b
 80069fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a04:	d015      	beq.n	8006a32 <_svfiprintf_r+0xfa>
 8006a06:	9a07      	ldr	r2, [sp, #28]
 8006a08:	4654      	mov	r4, sl
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f04f 0c0a 	mov.w	ip, #10
 8006a10:	4621      	mov	r1, r4
 8006a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a16:	3b30      	subs	r3, #48	@ 0x30
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d94b      	bls.n	8006ab4 <_svfiprintf_r+0x17c>
 8006a1c:	b1b0      	cbz	r0, 8006a4c <_svfiprintf_r+0x114>
 8006a1e:	9207      	str	r2, [sp, #28]
 8006a20:	e014      	b.n	8006a4c <_svfiprintf_r+0x114>
 8006a22:	eba0 0308 	sub.w	r3, r0, r8
 8006a26:	fa09 f303 	lsl.w	r3, r9, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	46a2      	mov	sl, r4
 8006a30:	e7d2      	b.n	80069d8 <_svfiprintf_r+0xa0>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	9103      	str	r1, [sp, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfbb      	ittet	lt
 8006a3e:	425b      	neglt	r3, r3
 8006a40:	f042 0202 	orrlt.w	r2, r2, #2
 8006a44:	9307      	strge	r3, [sp, #28]
 8006a46:	9307      	strlt	r3, [sp, #28]
 8006a48:	bfb8      	it	lt
 8006a4a:	9204      	strlt	r2, [sp, #16]
 8006a4c:	7823      	ldrb	r3, [r4, #0]
 8006a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a50:	d10a      	bne.n	8006a68 <_svfiprintf_r+0x130>
 8006a52:	7863      	ldrb	r3, [r4, #1]
 8006a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a56:	d132      	bne.n	8006abe <_svfiprintf_r+0x186>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	9203      	str	r2, [sp, #12]
 8006a60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a64:	3402      	adds	r4, #2
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b2c <_svfiprintf_r+0x1f4>
 8006a6c:	7821      	ldrb	r1, [r4, #0]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	4650      	mov	r0, sl
 8006a72:	f7f9 fbc5 	bl	8000200 <memchr>
 8006a76:	b138      	cbz	r0, 8006a88 <_svfiprintf_r+0x150>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	eba0 000a 	sub.w	r0, r0, sl
 8006a7e:	2240      	movs	r2, #64	@ 0x40
 8006a80:	4082      	lsls	r2, r0
 8006a82:	4313      	orrs	r3, r2
 8006a84:	3401      	adds	r4, #1
 8006a86:	9304      	str	r3, [sp, #16]
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	4824      	ldr	r0, [pc, #144]	@ (8006b20 <_svfiprintf_r+0x1e8>)
 8006a8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a92:	2206      	movs	r2, #6
 8006a94:	f7f9 fbb4 	bl	8000200 <memchr>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d036      	beq.n	8006b0a <_svfiprintf_r+0x1d2>
 8006a9c:	4b21      	ldr	r3, [pc, #132]	@ (8006b24 <_svfiprintf_r+0x1ec>)
 8006a9e:	bb1b      	cbnz	r3, 8006ae8 <_svfiprintf_r+0x1b0>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	3307      	adds	r3, #7
 8006aa4:	f023 0307 	bic.w	r3, r3, #7
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aae:	4433      	add	r3, r6
 8006ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab2:	e76a      	b.n	800698a <_svfiprintf_r+0x52>
 8006ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab8:	460c      	mov	r4, r1
 8006aba:	2001      	movs	r0, #1
 8006abc:	e7a8      	b.n	8006a10 <_svfiprintf_r+0xd8>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	3401      	adds	r4, #1
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f04f 0c0a 	mov.w	ip, #10
 8006aca:	4620      	mov	r0, r4
 8006acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad0:	3a30      	subs	r2, #48	@ 0x30
 8006ad2:	2a09      	cmp	r2, #9
 8006ad4:	d903      	bls.n	8006ade <_svfiprintf_r+0x1a6>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0c6      	beq.n	8006a68 <_svfiprintf_r+0x130>
 8006ada:	9105      	str	r1, [sp, #20]
 8006adc:	e7c4      	b.n	8006a68 <_svfiprintf_r+0x130>
 8006ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e7f0      	b.n	8006aca <_svfiprintf_r+0x192>
 8006ae8:	ab03      	add	r3, sp, #12
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	462a      	mov	r2, r5
 8006aee:	4b0e      	ldr	r3, [pc, #56]	@ (8006b28 <_svfiprintf_r+0x1f0>)
 8006af0:	a904      	add	r1, sp, #16
 8006af2:	4638      	mov	r0, r7
 8006af4:	f3af 8000 	nop.w
 8006af8:	1c42      	adds	r2, r0, #1
 8006afa:	4606      	mov	r6, r0
 8006afc:	d1d6      	bne.n	8006aac <_svfiprintf_r+0x174>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	065b      	lsls	r3, r3, #25
 8006b02:	f53f af2d 	bmi.w	8006960 <_svfiprintf_r+0x28>
 8006b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b08:	e72c      	b.n	8006964 <_svfiprintf_r+0x2c>
 8006b0a:	ab03      	add	r3, sp, #12
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <_svfiprintf_r+0x1f0>)
 8006b12:	a904      	add	r1, sp, #16
 8006b14:	4638      	mov	r0, r7
 8006b16:	f000 fae7 	bl	80070e8 <_printf_i>
 8006b1a:	e7ed      	b.n	8006af8 <_svfiprintf_r+0x1c0>
 8006b1c:	08007af0 	.word	0x08007af0
 8006b20:	08007afa 	.word	0x08007afa
 8006b24:	00000000 	.word	0x00000000
 8006b28:	08006881 	.word	0x08006881
 8006b2c:	08007af6 	.word	0x08007af6

08006b30 <_sungetc_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	1c4b      	adds	r3, r1, #1
 8006b34:	4614      	mov	r4, r2
 8006b36:	d103      	bne.n	8006b40 <_sungetc_r+0x10>
 8006b38:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	8993      	ldrh	r3, [r2, #12]
 8006b42:	f023 0320 	bic.w	r3, r3, #32
 8006b46:	8193      	strh	r3, [r2, #12]
 8006b48:	6853      	ldr	r3, [r2, #4]
 8006b4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b4c:	b2cd      	uxtb	r5, r1
 8006b4e:	b18a      	cbz	r2, 8006b74 <_sungetc_r+0x44>
 8006b50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006b52:	429a      	cmp	r2, r3
 8006b54:	dd08      	ble.n	8006b68 <_sungetc_r+0x38>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	1e5a      	subs	r2, r3, #1
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	3301      	adds	r3, #1
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	e7e9      	b.n	8006b3c <_sungetc_r+0xc>
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f000 fd71 	bl	8007650 <__submore>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0f1      	beq.n	8006b56 <_sungetc_r+0x26>
 8006b72:	e7e1      	b.n	8006b38 <_sungetc_r+0x8>
 8006b74:	6921      	ldr	r1, [r4, #16]
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	b141      	cbz	r1, 8006b8c <_sungetc_r+0x5c>
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	d206      	bcs.n	8006b8c <_sungetc_r+0x5c>
 8006b7e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006b82:	42a9      	cmp	r1, r5
 8006b84:	d102      	bne.n	8006b8c <_sungetc_r+0x5c>
 8006b86:	3a01      	subs	r2, #1
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	e7ea      	b.n	8006b62 <_sungetc_r+0x32>
 8006b8c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b96:	2303      	movs	r3, #3
 8006b98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e7de      	b.n	8006b64 <_sungetc_r+0x34>

08006ba6 <__ssrefill_r>:
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	460c      	mov	r4, r1
 8006baa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006bac:	b169      	cbz	r1, 8006bca <__ssrefill_r+0x24>
 8006bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	d001      	beq.n	8006bba <__ssrefill_r+0x14>
 8006bb6:	f7ff fe19 	bl	80067ec <_free_r>
 8006bba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	6360      	str	r0, [r4, #52]	@ 0x34
 8006bc2:	b113      	cbz	r3, 8006bca <__ssrefill_r+0x24>
 8006bc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0320 	orr.w	r3, r3, #32
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bde:	e7f3      	b.n	8006bc8 <__ssrefill_r+0x22>

08006be0 <__ssvfiscanf_r>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006bea:	2100      	movs	r1, #0
 8006bec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006bf0:	49a5      	ldr	r1, [pc, #660]	@ (8006e88 <__ssvfiscanf_r+0x2a8>)
 8006bf2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006bf4:	f10d 0804 	add.w	r8, sp, #4
 8006bf8:	49a4      	ldr	r1, [pc, #656]	@ (8006e8c <__ssvfiscanf_r+0x2ac>)
 8006bfa:	4fa5      	ldr	r7, [pc, #660]	@ (8006e90 <__ssvfiscanf_r+0x2b0>)
 8006bfc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006c00:	4606      	mov	r6, r0
 8006c02:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	7813      	ldrb	r3, [r2, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8158 	beq.w	8006ebe <__ssvfiscanf_r+0x2de>
 8006c0e:	5cf9      	ldrb	r1, [r7, r3]
 8006c10:	f011 0108 	ands.w	r1, r1, #8
 8006c14:	f102 0501 	add.w	r5, r2, #1
 8006c18:	d019      	beq.n	8006c4e <__ssvfiscanf_r+0x6e>
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dd0f      	ble.n	8006c40 <__ssvfiscanf_r+0x60>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	5cba      	ldrb	r2, [r7, r2]
 8006c26:	0712      	lsls	r2, r2, #28
 8006c28:	d401      	bmi.n	8006c2e <__ssvfiscanf_r+0x4e>
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	e7eb      	b.n	8006c06 <__ssvfiscanf_r+0x26>
 8006c2e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006c30:	3201      	adds	r2, #1
 8006c32:	9245      	str	r2, [sp, #276]	@ 0x114
 8006c34:	6862      	ldr	r2, [r4, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	3a01      	subs	r2, #1
 8006c3a:	6062      	str	r2, [r4, #4]
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	e7ec      	b.n	8006c1a <__ssvfiscanf_r+0x3a>
 8006c40:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006c42:	4621      	mov	r1, r4
 8006c44:	4630      	mov	r0, r6
 8006c46:	4798      	blx	r3
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d0e9      	beq.n	8006c20 <__ssvfiscanf_r+0x40>
 8006c4c:	e7ed      	b.n	8006c2a <__ssvfiscanf_r+0x4a>
 8006c4e:	2b25      	cmp	r3, #37	@ 0x25
 8006c50:	d012      	beq.n	8006c78 <__ssvfiscanf_r+0x98>
 8006c52:	4699      	mov	r9, r3
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f340 8093 	ble.w	8006d82 <__ssvfiscanf_r+0x1a2>
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	7813      	ldrb	r3, [r2, #0]
 8006c60:	454b      	cmp	r3, r9
 8006c62:	f040 812c 	bne.w	8006ebe <__ssvfiscanf_r+0x2de>
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006c6e:	3201      	adds	r2, #1
 8006c70:	3301      	adds	r3, #1
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	9345      	str	r3, [sp, #276]	@ 0x114
 8006c76:	e7d8      	b.n	8006c2a <__ssvfiscanf_r+0x4a>
 8006c78:	9141      	str	r1, [sp, #260]	@ 0x104
 8006c7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006c7c:	7853      	ldrb	r3, [r2, #1]
 8006c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c80:	bf02      	ittt	eq
 8006c82:	2310      	moveq	r3, #16
 8006c84:	1c95      	addeq	r5, r2, #2
 8006c86:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006c88:	220a      	movs	r2, #10
 8006c8a:	46a9      	mov	r9, r5
 8006c8c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006c90:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d91e      	bls.n	8006cd6 <__ssvfiscanf_r+0xf6>
 8006c98:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006e94 <__ssvfiscanf_r+0x2b4>
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	f7f9 faae 	bl	8000200 <memchr>
 8006ca4:	b138      	cbz	r0, 8006cb6 <__ssvfiscanf_r+0xd6>
 8006ca6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ca8:	eba0 000a 	sub.w	r0, r0, sl
 8006cac:	2301      	movs	r3, #1
 8006cae:	4083      	lsls	r3, r0
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	9341      	str	r3, [sp, #260]	@ 0x104
 8006cb4:	464d      	mov	r5, r9
 8006cb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cba:	2b78      	cmp	r3, #120	@ 0x78
 8006cbc:	d806      	bhi.n	8006ccc <__ssvfiscanf_r+0xec>
 8006cbe:	2b57      	cmp	r3, #87	@ 0x57
 8006cc0:	d810      	bhi.n	8006ce4 <__ssvfiscanf_r+0x104>
 8006cc2:	2b25      	cmp	r3, #37	@ 0x25
 8006cc4:	d0c5      	beq.n	8006c52 <__ssvfiscanf_r+0x72>
 8006cc6:	d857      	bhi.n	8006d78 <__ssvfiscanf_r+0x198>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d065      	beq.n	8006d98 <__ssvfiscanf_r+0x1b8>
 8006ccc:	2303      	movs	r3, #3
 8006cce:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006cd0:	230a      	movs	r3, #10
 8006cd2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006cd4:	e078      	b.n	8006dc8 <__ssvfiscanf_r+0x1e8>
 8006cd6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006cd8:	fb02 1103 	mla	r1, r2, r3, r1
 8006cdc:	3930      	subs	r1, #48	@ 0x30
 8006cde:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006ce0:	464d      	mov	r5, r9
 8006ce2:	e7d2      	b.n	8006c8a <__ssvfiscanf_r+0xaa>
 8006ce4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006ce8:	2a20      	cmp	r2, #32
 8006cea:	d8ef      	bhi.n	8006ccc <__ssvfiscanf_r+0xec>
 8006cec:	a101      	add	r1, pc, #4	@ (adr r1, 8006cf4 <__ssvfiscanf_r+0x114>)
 8006cee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006da7 	.word	0x08006da7
 8006cf8:	08006ccd 	.word	0x08006ccd
 8006cfc:	08006ccd 	.word	0x08006ccd
 8006d00:	08006e01 	.word	0x08006e01
 8006d04:	08006ccd 	.word	0x08006ccd
 8006d08:	08006ccd 	.word	0x08006ccd
 8006d0c:	08006ccd 	.word	0x08006ccd
 8006d10:	08006ccd 	.word	0x08006ccd
 8006d14:	08006ccd 	.word	0x08006ccd
 8006d18:	08006ccd 	.word	0x08006ccd
 8006d1c:	08006ccd 	.word	0x08006ccd
 8006d20:	08006e17 	.word	0x08006e17
 8006d24:	08006dfd 	.word	0x08006dfd
 8006d28:	08006d7f 	.word	0x08006d7f
 8006d2c:	08006d7f 	.word	0x08006d7f
 8006d30:	08006d7f 	.word	0x08006d7f
 8006d34:	08006ccd 	.word	0x08006ccd
 8006d38:	08006db9 	.word	0x08006db9
 8006d3c:	08006ccd 	.word	0x08006ccd
 8006d40:	08006ccd 	.word	0x08006ccd
 8006d44:	08006ccd 	.word	0x08006ccd
 8006d48:	08006ccd 	.word	0x08006ccd
 8006d4c:	08006e27 	.word	0x08006e27
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006d9f 	.word	0x08006d9f
 8006d58:	08006ccd 	.word	0x08006ccd
 8006d5c:	08006ccd 	.word	0x08006ccd
 8006d60:	08006e23 	.word	0x08006e23
 8006d64:	08006ccd 	.word	0x08006ccd
 8006d68:	08006dfd 	.word	0x08006dfd
 8006d6c:	08006ccd 	.word	0x08006ccd
 8006d70:	08006ccd 	.word	0x08006ccd
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	3b45      	subs	r3, #69	@ 0x45
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d8a6      	bhi.n	8006ccc <__ssvfiscanf_r+0xec>
 8006d7e:	2305      	movs	r3, #5
 8006d80:	e021      	b.n	8006dc6 <__ssvfiscanf_r+0x1e6>
 8006d82:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006d84:	4621      	mov	r1, r4
 8006d86:	4630      	mov	r0, r6
 8006d88:	4798      	blx	r3
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f43f af66 	beq.w	8006c5c <__ssvfiscanf_r+0x7c>
 8006d90:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f040 808b 	bne.w	8006eae <__ssvfiscanf_r+0x2ce>
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d9c:	e08b      	b.n	8006eb6 <__ssvfiscanf_r+0x2d6>
 8006d9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006da0:	f042 0220 	orr.w	r2, r2, #32
 8006da4:	9241      	str	r2, [sp, #260]	@ 0x104
 8006da6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dac:	9241      	str	r2, [sp, #260]	@ 0x104
 8006dae:	2210      	movs	r2, #16
 8006db0:	2b6e      	cmp	r3, #110	@ 0x6e
 8006db2:	9242      	str	r2, [sp, #264]	@ 0x108
 8006db4:	d902      	bls.n	8006dbc <__ssvfiscanf_r+0x1dc>
 8006db6:	e005      	b.n	8006dc4 <__ssvfiscanf_r+0x1e4>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9342      	str	r3, [sp, #264]	@ 0x108
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e002      	b.n	8006dc6 <__ssvfiscanf_r+0x1e6>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dd39      	ble.n	8006e42 <__ssvfiscanf_r+0x262>
 8006dce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006dd0:	0659      	lsls	r1, r3, #25
 8006dd2:	d404      	bmi.n	8006dde <__ssvfiscanf_r+0x1fe>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	5cba      	ldrb	r2, [r7, r2]
 8006dda:	0712      	lsls	r2, r2, #28
 8006ddc:	d438      	bmi.n	8006e50 <__ssvfiscanf_r+0x270>
 8006dde:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	dc47      	bgt.n	8006e74 <__ssvfiscanf_r+0x294>
 8006de4:	466b      	mov	r3, sp
 8006de6:	4622      	mov	r2, r4
 8006de8:	a941      	add	r1, sp, #260	@ 0x104
 8006dea:	4630      	mov	r0, r6
 8006dec:	f000 fa9c 	bl	8007328 <_scanf_chars>
 8006df0:	2801      	cmp	r0, #1
 8006df2:	d064      	beq.n	8006ebe <__ssvfiscanf_r+0x2de>
 8006df4:	2802      	cmp	r0, #2
 8006df6:	f47f af18 	bne.w	8006c2a <__ssvfiscanf_r+0x4a>
 8006dfa:	e7c9      	b.n	8006d90 <__ssvfiscanf_r+0x1b0>
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	e7d7      	b.n	8006db0 <__ssvfiscanf_r+0x1d0>
 8006e00:	4629      	mov	r1, r5
 8006e02:	4640      	mov	r0, r8
 8006e04:	f000 fbde 	bl	80075c4 <__sccl>
 8006e08:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006e10:	4605      	mov	r5, r0
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7d7      	b.n	8006dc6 <__ssvfiscanf_r+0x1e6>
 8006e16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1c:	9341      	str	r3, [sp, #260]	@ 0x104
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e7d1      	b.n	8006dc6 <__ssvfiscanf_r+0x1e6>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e7cf      	b.n	8006dc6 <__ssvfiscanf_r+0x1e6>
 8006e26:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006e28:	06c3      	lsls	r3, r0, #27
 8006e2a:	f53f aefe 	bmi.w	8006c2a <__ssvfiscanf_r+0x4a>
 8006e2e:	9b00      	ldr	r3, [sp, #0]
 8006e30:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006e32:	1d19      	adds	r1, r3, #4
 8006e34:	9100      	str	r1, [sp, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	07c0      	lsls	r0, r0, #31
 8006e3a:	bf4c      	ite	mi
 8006e3c:	801a      	strhmi	r2, [r3, #0]
 8006e3e:	601a      	strpl	r2, [r3, #0]
 8006e40:	e6f3      	b.n	8006c2a <__ssvfiscanf_r+0x4a>
 8006e42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006e44:	4621      	mov	r1, r4
 8006e46:	4630      	mov	r0, r6
 8006e48:	4798      	blx	r3
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d0bf      	beq.n	8006dce <__ssvfiscanf_r+0x1ee>
 8006e4e:	e79f      	b.n	8006d90 <__ssvfiscanf_r+0x1b0>
 8006e50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006e52:	3201      	adds	r2, #1
 8006e54:	9245      	str	r2, [sp, #276]	@ 0x114
 8006e56:	6862      	ldr	r2, [r4, #4]
 8006e58:	3a01      	subs	r2, #1
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	6062      	str	r2, [r4, #4]
 8006e5e:	dd02      	ble.n	8006e66 <__ssvfiscanf_r+0x286>
 8006e60:	3301      	adds	r3, #1
 8006e62:	6023      	str	r3, [r4, #0]
 8006e64:	e7b6      	b.n	8006dd4 <__ssvfiscanf_r+0x1f4>
 8006e66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4798      	blx	r3
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0b0      	beq.n	8006dd4 <__ssvfiscanf_r+0x1f4>
 8006e72:	e78d      	b.n	8006d90 <__ssvfiscanf_r+0x1b0>
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	dc0f      	bgt.n	8006e98 <__ssvfiscanf_r+0x2b8>
 8006e78:	466b      	mov	r3, sp
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	a941      	add	r1, sp, #260	@ 0x104
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 faac 	bl	80073dc <_scanf_i>
 8006e84:	e7b4      	b.n	8006df0 <__ssvfiscanf_r+0x210>
 8006e86:	bf00      	nop
 8006e88:	08006b31 	.word	0x08006b31
 8006e8c:	08006ba7 	.word	0x08006ba7
 8006e90:	08007b3f 	.word	0x08007b3f
 8006e94:	08007af6 	.word	0x08007af6
 8006e98:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec4 <__ssvfiscanf_r+0x2e4>)
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f43f aec5 	beq.w	8006c2a <__ssvfiscanf_r+0x4a>
 8006ea0:	466b      	mov	r3, sp
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	a941      	add	r1, sp, #260	@ 0x104
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f3af 8000 	nop.w
 8006eac:	e7a0      	b.n	8006df0 <__ssvfiscanf_r+0x210>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	065b      	lsls	r3, r3, #25
 8006eb2:	f53f af71 	bmi.w	8006d98 <__ssvfiscanf_r+0x1b8>
 8006eb6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ec0:	e7f9      	b.n	8006eb6 <__ssvfiscanf_r+0x2d6>
 8006ec2:	bf00      	nop
 8006ec4:	00000000 	.word	0x00000000

08006ec8 <sbrk_aligned>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4e0f      	ldr	r6, [pc, #60]	@ (8006f08 <sbrk_aligned+0x40>)
 8006ecc:	460c      	mov	r4, r1
 8006ece:	6831      	ldr	r1, [r6, #0]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	b911      	cbnz	r1, 8006eda <sbrk_aligned+0x12>
 8006ed4:	f000 fd2a 	bl	800792c <_sbrk_r>
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 fd25 	bl	800792c <_sbrk_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d103      	bne.n	8006eee <sbrk_aligned+0x26>
 8006ee6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006eea:	4620      	mov	r0, r4
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	1cc4      	adds	r4, r0, #3
 8006ef0:	f024 0403 	bic.w	r4, r4, #3
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d0f8      	beq.n	8006eea <sbrk_aligned+0x22>
 8006ef8:	1a21      	subs	r1, r4, r0
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fd16 	bl	800792c <_sbrk_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1f2      	bne.n	8006eea <sbrk_aligned+0x22>
 8006f04:	e7ef      	b.n	8006ee6 <sbrk_aligned+0x1e>
 8006f06:	bf00      	nop
 8006f08:	20000464 	.word	0x20000464

08006f0c <_malloc_r>:
 8006f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f10:	1ccd      	adds	r5, r1, #3
 8006f12:	f025 0503 	bic.w	r5, r5, #3
 8006f16:	3508      	adds	r5, #8
 8006f18:	2d0c      	cmp	r5, #12
 8006f1a:	bf38      	it	cc
 8006f1c:	250c      	movcc	r5, #12
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	4606      	mov	r6, r0
 8006f22:	db01      	blt.n	8006f28 <_malloc_r+0x1c>
 8006f24:	42a9      	cmp	r1, r5
 8006f26:	d904      	bls.n	8006f32 <_malloc_r+0x26>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007008 <_malloc_r+0xfc>
 8006f36:	f000 fb7f 	bl	8007638 <__malloc_lock>
 8006f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3e:	461c      	mov	r4, r3
 8006f40:	bb44      	cbnz	r4, 8006f94 <_malloc_r+0x88>
 8006f42:	4629      	mov	r1, r5
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff ffbf 	bl	8006ec8 <sbrk_aligned>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	d158      	bne.n	8007002 <_malloc_r+0xf6>
 8006f50:	f8d8 4000 	ldr.w	r4, [r8]
 8006f54:	4627      	mov	r7, r4
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	d143      	bne.n	8006fe2 <_malloc_r+0xd6>
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	d04b      	beq.n	8006ff6 <_malloc_r+0xea>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	4639      	mov	r1, r7
 8006f62:	4630      	mov	r0, r6
 8006f64:	eb04 0903 	add.w	r9, r4, r3
 8006f68:	f000 fce0 	bl	800792c <_sbrk_r>
 8006f6c:	4581      	cmp	r9, r0
 8006f6e:	d142      	bne.n	8006ff6 <_malloc_r+0xea>
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	1a6d      	subs	r5, r5, r1
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ffa6 	bl	8006ec8 <sbrk_aligned>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d03a      	beq.n	8006ff6 <_malloc_r+0xea>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	442b      	add	r3, r5
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	f8d8 3000 	ldr.w	r3, [r8]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	bb62      	cbnz	r2, 8006fe8 <_malloc_r+0xdc>
 8006f8e:	f8c8 7000 	str.w	r7, [r8]
 8006f92:	e00f      	b.n	8006fb4 <_malloc_r+0xa8>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	1b52      	subs	r2, r2, r5
 8006f98:	d420      	bmi.n	8006fdc <_malloc_r+0xd0>
 8006f9a:	2a0b      	cmp	r2, #11
 8006f9c:	d917      	bls.n	8006fce <_malloc_r+0xc2>
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	6025      	str	r5, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	6059      	strne	r1, [r3, #4]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	bf08      	it	eq
 8006fac:	f8c8 1000 	streq.w	r1, [r8]
 8006fb0:	5162      	str	r2, [r4, r5]
 8006fb2:	604b      	str	r3, [r1, #4]
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 fb45 	bl	8007644 <__malloc_unlock>
 8006fba:	f104 000b 	add.w	r0, r4, #11
 8006fbe:	1d23      	adds	r3, r4, #4
 8006fc0:	f020 0007 	bic.w	r0, r0, #7
 8006fc4:	1ac2      	subs	r2, r0, r3
 8006fc6:	bf1c      	itt	ne
 8006fc8:	1a1b      	subne	r3, r3, r0
 8006fca:	50a3      	strne	r3, [r4, r2]
 8006fcc:	e7af      	b.n	8006f2e <_malloc_r+0x22>
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	bf0c      	ite	eq
 8006fd4:	f8c8 2000 	streq.w	r2, [r8]
 8006fd8:	605a      	strne	r2, [r3, #4]
 8006fda:	e7eb      	b.n	8006fb4 <_malloc_r+0xa8>
 8006fdc:	4623      	mov	r3, r4
 8006fde:	6864      	ldr	r4, [r4, #4]
 8006fe0:	e7ae      	b.n	8006f40 <_malloc_r+0x34>
 8006fe2:	463c      	mov	r4, r7
 8006fe4:	687f      	ldr	r7, [r7, #4]
 8006fe6:	e7b6      	b.n	8006f56 <_malloc_r+0x4a>
 8006fe8:	461a      	mov	r2, r3
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	d1fb      	bne.n	8006fe8 <_malloc_r+0xdc>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6053      	str	r3, [r2, #4]
 8006ff4:	e7de      	b.n	8006fb4 <_malloc_r+0xa8>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 fb22 	bl	8007644 <__malloc_unlock>
 8007000:	e794      	b.n	8006f2c <_malloc_r+0x20>
 8007002:	6005      	str	r5, [r0, #0]
 8007004:	e7d6      	b.n	8006fb4 <_malloc_r+0xa8>
 8007006:	bf00      	nop
 8007008:	20000468 	.word	0x20000468

0800700c <_printf_common>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	4616      	mov	r6, r2
 8007012:	4698      	mov	r8, r3
 8007014:	688a      	ldr	r2, [r1, #8]
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800701c:	4293      	cmp	r3, r2
 800701e:	bfb8      	it	lt
 8007020:	4613      	movlt	r3, r2
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007028:	4607      	mov	r7, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b10a      	cbz	r2, 8007032 <_printf_common+0x26>
 800702e:	3301      	adds	r3, #1
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	0699      	lsls	r1, r3, #26
 8007036:	bf42      	ittt	mi
 8007038:	6833      	ldrmi	r3, [r6, #0]
 800703a:	3302      	addmi	r3, #2
 800703c:	6033      	strmi	r3, [r6, #0]
 800703e:	6825      	ldr	r5, [r4, #0]
 8007040:	f015 0506 	ands.w	r5, r5, #6
 8007044:	d106      	bne.n	8007054 <_printf_common+0x48>
 8007046:	f104 0a19 	add.w	sl, r4, #25
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	6832      	ldr	r2, [r6, #0]
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	42ab      	cmp	r3, r5
 8007052:	dc26      	bgt.n	80070a2 <_printf_common+0x96>
 8007054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	3b00      	subs	r3, #0
 800705c:	bf18      	it	ne
 800705e:	2301      	movne	r3, #1
 8007060:	0692      	lsls	r2, r2, #26
 8007062:	d42b      	bmi.n	80070bc <_printf_common+0xb0>
 8007064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007068:	4641      	mov	r1, r8
 800706a:	4638      	mov	r0, r7
 800706c:	47c8      	blx	r9
 800706e:	3001      	adds	r0, #1
 8007070:	d01e      	beq.n	80070b0 <_printf_common+0xa4>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	f003 0306 	and.w	r3, r3, #6
 800707a:	2b04      	cmp	r3, #4
 800707c:	bf02      	ittt	eq
 800707e:	68e5      	ldreq	r5, [r4, #12]
 8007080:	6833      	ldreq	r3, [r6, #0]
 8007082:	1aed      	subeq	r5, r5, r3
 8007084:	68a3      	ldr	r3, [r4, #8]
 8007086:	bf0c      	ite	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	2500      	movne	r5, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	bfc4      	itt	gt
 8007092:	1a9b      	subgt	r3, r3, r2
 8007094:	18ed      	addgt	r5, r5, r3
 8007096:	2600      	movs	r6, #0
 8007098:	341a      	adds	r4, #26
 800709a:	42b5      	cmp	r5, r6
 800709c:	d11a      	bne.n	80070d4 <_printf_common+0xc8>
 800709e:	2000      	movs	r0, #0
 80070a0:	e008      	b.n	80070b4 <_printf_common+0xa8>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4652      	mov	r2, sl
 80070a6:	4641      	mov	r1, r8
 80070a8:	4638      	mov	r0, r7
 80070aa:	47c8      	blx	r9
 80070ac:	3001      	adds	r0, #1
 80070ae:	d103      	bne.n	80070b8 <_printf_common+0xac>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7c6      	b.n	800704a <_printf_common+0x3e>
 80070bc:	18e1      	adds	r1, r4, r3
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	2030      	movs	r0, #48	@ 0x30
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070c6:	4422      	add	r2, r4
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d0:	3302      	adds	r3, #2
 80070d2:	e7c7      	b.n	8007064 <_printf_common+0x58>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4622      	mov	r2, r4
 80070d8:	4641      	mov	r1, r8
 80070da:	4638      	mov	r0, r7
 80070dc:	47c8      	blx	r9
 80070de:	3001      	adds	r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa4>
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7d9      	b.n	800709a <_printf_common+0x8e>
	...

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f0:	2f78      	cmp	r7, #120	@ 0x78
 80070f2:	4691      	mov	r9, r2
 80070f4:	4680      	mov	r8, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	469a      	mov	sl, r3
 80070fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	@ 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d2 	beq.w	80072ae <_printf_i+0x1c6>
 800710a:	2f58      	cmp	r7, #88	@ 0x58
 800710c:	f000 80b9 	beq.w	8007282 <_printf_i+0x19a>
 8007110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	@ (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	08007295 	.word	0x08007295
 8007158:	080071bf 	.word	0x080071bf
 800715c:	0800724f 	.word	0x0800724f
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072b7 	.word	0x080072b7
 800716c:	08007111 	.word	0x08007111
 8007170:	080071bf 	.word	0x080071bf
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	08007257 	.word	0x08007257
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6032      	str	r2, [r6, #0]
 8007188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e09d      	b.n	80072d0 <_printf_i+0x1e8>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	6031      	str	r1, [r6, #0]
 800719c:	0606      	lsls	r6, r0, #24
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0xbc>
 80071a0:	681d      	ldr	r5, [r3, #0]
 80071a2:	e003      	b.n	80071ac <_printf_i+0xc4>
 80071a4:	0645      	lsls	r5, r0, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0xb8>
 80071a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	da03      	bge.n	80071b8 <_printf_i+0xd0>
 80071b0:	232d      	movs	r3, #45	@ 0x2d
 80071b2:	426d      	negs	r5, r5
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b8:	4859      	ldr	r0, [pc, #356]	@ (8007320 <_printf_i+0x238>)
 80071ba:	230a      	movs	r3, #10
 80071bc:	e011      	b.n	80071e2 <_printf_i+0xfa>
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	0608      	lsls	r0, r1, #24
 80071c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c8:	d402      	bmi.n	80071d0 <_printf_i+0xe8>
 80071ca:	0649      	lsls	r1, r1, #25
 80071cc:	bf48      	it	mi
 80071ce:	b2ad      	uxthmi	r5, r5
 80071d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d2:	4853      	ldr	r0, [pc, #332]	@ (8007320 <_printf_i+0x238>)
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	bf14      	ite	ne
 80071d8:	230a      	movne	r3, #10
 80071da:	2308      	moveq	r3, #8
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e2:	6866      	ldr	r6, [r4, #4]
 80071e4:	60a6      	str	r6, [r4, #8]
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	bfa2      	ittt	ge
 80071ea:	6821      	ldrge	r1, [r4, #0]
 80071ec:	f021 0104 	bicge.w	r1, r1, #4
 80071f0:	6021      	strge	r1, [r4, #0]
 80071f2:	b90d      	cbnz	r5, 80071f8 <_printf_i+0x110>
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	d04b      	beq.n	8007290 <_printf_i+0x1a8>
 80071f8:	4616      	mov	r6, r2
 80071fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80071fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007202:	5dc7      	ldrb	r7, [r0, r7]
 8007204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007208:	462f      	mov	r7, r5
 800720a:	42bb      	cmp	r3, r7
 800720c:	460d      	mov	r5, r1
 800720e:	d9f4      	bls.n	80071fa <_printf_i+0x112>
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10b      	bne.n	800722c <_printf_i+0x144>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	07df      	lsls	r7, r3, #31
 8007218:	d508      	bpl.n	800722c <_printf_i+0x144>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4299      	cmp	r1, r3
 8007220:	bfde      	ittt	le
 8007222:	2330      	movle	r3, #48	@ 0x30
 8007224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007228:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800722c:	1b92      	subs	r2, r2, r6
 800722e:	6122      	str	r2, [r4, #16]
 8007230:	f8cd a000 	str.w	sl, [sp]
 8007234:	464b      	mov	r3, r9
 8007236:	aa03      	add	r2, sp, #12
 8007238:	4621      	mov	r1, r4
 800723a:	4640      	mov	r0, r8
 800723c:	f7ff fee6 	bl	800700c <_printf_common>
 8007240:	3001      	adds	r0, #1
 8007242:	d14a      	bne.n	80072da <_printf_i+0x1f2>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007248:	b004      	add	sp, #16
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f043 0320 	orr.w	r3, r3, #32
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	4833      	ldr	r0, [pc, #204]	@ (8007324 <_printf_i+0x23c>)
 8007258:	2778      	movs	r7, #120	@ 0x78
 800725a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	6831      	ldr	r1, [r6, #0]
 8007262:	061f      	lsls	r7, r3, #24
 8007264:	f851 5b04 	ldr.w	r5, [r1], #4
 8007268:	d402      	bmi.n	8007270 <_printf_i+0x188>
 800726a:	065f      	lsls	r7, r3, #25
 800726c:	bf48      	it	mi
 800726e:	b2ad      	uxthmi	r5, r5
 8007270:	6031      	str	r1, [r6, #0]
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	bf44      	itt	mi
 8007276:	f043 0320 	orrmi.w	r3, r3, #32
 800727a:	6023      	strmi	r3, [r4, #0]
 800727c:	b11d      	cbz	r5, 8007286 <_printf_i+0x19e>
 800727e:	2310      	movs	r3, #16
 8007280:	e7ac      	b.n	80071dc <_printf_i+0xf4>
 8007282:	4827      	ldr	r0, [pc, #156]	@ (8007320 <_printf_i+0x238>)
 8007284:	e7e9      	b.n	800725a <_printf_i+0x172>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f023 0320 	bic.w	r3, r3, #32
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	e7f6      	b.n	800727e <_printf_i+0x196>
 8007290:	4616      	mov	r6, r2
 8007292:	e7bd      	b.n	8007210 <_printf_i+0x128>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	6961      	ldr	r1, [r4, #20]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6030      	str	r0, [r6, #0]
 800729e:	062e      	lsls	r6, r5, #24
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0x1c0>
 80072a4:	6019      	str	r1, [r3, #0]
 80072a6:	e002      	b.n	80072ae <_printf_i+0x1c6>
 80072a8:	0668      	lsls	r0, r5, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0x1bc>
 80072ac:	8019      	strh	r1, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	4616      	mov	r6, r2
 80072b4:	e7bc      	b.n	8007230 <_printf_i+0x148>
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	1d1a      	adds	r2, r3, #4
 80072ba:	6032      	str	r2, [r6, #0]
 80072bc:	681e      	ldr	r6, [r3, #0]
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	2100      	movs	r1, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7f8 ff9c 	bl	8000200 <memchr>
 80072c8:	b108      	cbz	r0, 80072ce <_printf_i+0x1e6>
 80072ca:	1b80      	subs	r0, r0, r6
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d8:	e7aa      	b.n	8007230 <_printf_i+0x148>
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d0ad      	beq.n	8007244 <_printf_i+0x15c>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	d413      	bmi.n	8007316 <_printf_i+0x22e>
 80072ee:	68e0      	ldr	r0, [r4, #12]
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	4298      	cmp	r0, r3
 80072f4:	bfb8      	it	lt
 80072f6:	4618      	movlt	r0, r3
 80072f8:	e7a6      	b.n	8007248 <_printf_i+0x160>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4632      	mov	r2, r6
 80072fe:	4649      	mov	r1, r9
 8007300:	4640      	mov	r0, r8
 8007302:	47d0      	blx	sl
 8007304:	3001      	adds	r0, #1
 8007306:	d09d      	beq.n	8007244 <_printf_i+0x15c>
 8007308:	3501      	adds	r5, #1
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	1a5b      	subs	r3, r3, r1
 8007310:	42ab      	cmp	r3, r5
 8007312:	dcf2      	bgt.n	80072fa <_printf_i+0x212>
 8007314:	e7eb      	b.n	80072ee <_printf_i+0x206>
 8007316:	2500      	movs	r5, #0
 8007318:	f104 0619 	add.w	r6, r4, #25
 800731c:	e7f5      	b.n	800730a <_printf_i+0x222>
 800731e:	bf00      	nop
 8007320:	08007b01 	.word	0x08007b01
 8007324:	08007b12 	.word	0x08007b12

08007328 <_scanf_chars>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	4615      	mov	r5, r2
 800732e:	688a      	ldr	r2, [r1, #8]
 8007330:	4680      	mov	r8, r0
 8007332:	460c      	mov	r4, r1
 8007334:	b932      	cbnz	r2, 8007344 <_scanf_chars+0x1c>
 8007336:	698a      	ldr	r2, [r1, #24]
 8007338:	2a00      	cmp	r2, #0
 800733a:	bf14      	ite	ne
 800733c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8007340:	2201      	moveq	r2, #1
 8007342:	608a      	str	r2, [r1, #8]
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80073d8 <_scanf_chars+0xb0>
 800734a:	06d1      	lsls	r1, r2, #27
 800734c:	bf5f      	itttt	pl
 800734e:	681a      	ldrpl	r2, [r3, #0]
 8007350:	1d11      	addpl	r1, r2, #4
 8007352:	6019      	strpl	r1, [r3, #0]
 8007354:	6816      	ldrpl	r6, [r2, #0]
 8007356:	2700      	movs	r7, #0
 8007358:	69a0      	ldr	r0, [r4, #24]
 800735a:	b188      	cbz	r0, 8007380 <_scanf_chars+0x58>
 800735c:	2801      	cmp	r0, #1
 800735e:	d107      	bne.n	8007370 <_scanf_chars+0x48>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	6963      	ldr	r3, [r4, #20]
 8007366:	5c9b      	ldrb	r3, [r3, r2]
 8007368:	b953      	cbnz	r3, 8007380 <_scanf_chars+0x58>
 800736a:	2f00      	cmp	r7, #0
 800736c:	d031      	beq.n	80073d2 <_scanf_chars+0xaa>
 800736e:	e022      	b.n	80073b6 <_scanf_chars+0x8e>
 8007370:	2802      	cmp	r0, #2
 8007372:	d120      	bne.n	80073b6 <_scanf_chars+0x8e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f819 3003 	ldrb.w	r3, [r9, r3]
 800737c:	071b      	lsls	r3, r3, #28
 800737e:	d41a      	bmi.n	80073b6 <_scanf_chars+0x8e>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	06da      	lsls	r2, r3, #27
 8007384:	bf5e      	ittt	pl
 8007386:	682b      	ldrpl	r3, [r5, #0]
 8007388:	781b      	ldrbpl	r3, [r3, #0]
 800738a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800738e:	682a      	ldr	r2, [r5, #0]
 8007390:	686b      	ldr	r3, [r5, #4]
 8007392:	3201      	adds	r2, #1
 8007394:	602a      	str	r2, [r5, #0]
 8007396:	68a2      	ldr	r2, [r4, #8]
 8007398:	3b01      	subs	r3, #1
 800739a:	3a01      	subs	r2, #1
 800739c:	606b      	str	r3, [r5, #4]
 800739e:	3701      	adds	r7, #1
 80073a0:	60a2      	str	r2, [r4, #8]
 80073a2:	b142      	cbz	r2, 80073b6 <_scanf_chars+0x8e>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dcd7      	bgt.n	8007358 <_scanf_chars+0x30>
 80073a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073ac:	4629      	mov	r1, r5
 80073ae:	4640      	mov	r0, r8
 80073b0:	4798      	blx	r3
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d0d0      	beq.n	8007358 <_scanf_chars+0x30>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	f013 0310 	ands.w	r3, r3, #16
 80073bc:	d105      	bne.n	80073ca <_scanf_chars+0xa2>
 80073be:	68e2      	ldr	r2, [r4, #12]
 80073c0:	3201      	adds	r2, #1
 80073c2:	60e2      	str	r2, [r4, #12]
 80073c4:	69a2      	ldr	r2, [r4, #24]
 80073c6:	b102      	cbz	r2, 80073ca <_scanf_chars+0xa2>
 80073c8:	7033      	strb	r3, [r6, #0]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	443b      	add	r3, r7
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	bf00      	nop
 80073d8:	08007b3f 	.word	0x08007b3f

080073dc <_scanf_i>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4698      	mov	r8, r3
 80073e2:	4b74      	ldr	r3, [pc, #464]	@ (80075b4 <_scanf_i+0x1d8>)
 80073e4:	460c      	mov	r4, r1
 80073e6:	4682      	mov	sl, r0
 80073e8:	4616      	mov	r6, r2
 80073ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073ee:	b087      	sub	sp, #28
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80073f6:	4b70      	ldr	r3, [pc, #448]	@ (80075b8 <_scanf_i+0x1dc>)
 80073f8:	69a1      	ldr	r1, [r4, #24]
 80073fa:	4a70      	ldr	r2, [pc, #448]	@ (80075bc <_scanf_i+0x1e0>)
 80073fc:	2903      	cmp	r1, #3
 80073fe:	bf08      	it	eq
 8007400:	461a      	moveq	r2, r3
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	9201      	str	r2, [sp, #4]
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800740c:	bf88      	it	hi
 800740e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007412:	4627      	mov	r7, r4
 8007414:	bf82      	ittt	hi
 8007416:	eb03 0905 	addhi.w	r9, r3, r5
 800741a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800741e:	60a3      	strhi	r3, [r4, #8]
 8007420:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007424:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007428:	bf98      	it	ls
 800742a:	f04f 0900 	movls.w	r9, #0
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	463d      	mov	r5, r7
 8007432:	f04f 0b00 	mov.w	fp, #0
 8007436:	6831      	ldr	r1, [r6, #0]
 8007438:	ab03      	add	r3, sp, #12
 800743a:	7809      	ldrb	r1, [r1, #0]
 800743c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007440:	2202      	movs	r2, #2
 8007442:	f7f8 fedd 	bl	8000200 <memchr>
 8007446:	b328      	cbz	r0, 8007494 <_scanf_i+0xb8>
 8007448:	f1bb 0f01 	cmp.w	fp, #1
 800744c:	d159      	bne.n	8007502 <_scanf_i+0x126>
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	b92a      	cbnz	r2, 800745e <_scanf_i+0x82>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	2108      	movs	r1, #8
 8007456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800745a:	6061      	str	r1, [r4, #4]
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007464:	6022      	str	r2, [r4, #0]
 8007466:	68a2      	ldr	r2, [r4, #8]
 8007468:	1e51      	subs	r1, r2, #1
 800746a:	60a1      	str	r1, [r4, #8]
 800746c:	b192      	cbz	r2, 8007494 <_scanf_i+0xb8>
 800746e:	6832      	ldr	r2, [r6, #0]
 8007470:	1c51      	adds	r1, r2, #1
 8007472:	6031      	str	r1, [r6, #0]
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	f805 2b01 	strb.w	r2, [r5], #1
 800747a:	6872      	ldr	r2, [r6, #4]
 800747c:	3a01      	subs	r2, #1
 800747e:	2a00      	cmp	r2, #0
 8007480:	6072      	str	r2, [r6, #4]
 8007482:	dc07      	bgt.n	8007494 <_scanf_i+0xb8>
 8007484:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007488:	4631      	mov	r1, r6
 800748a:	4650      	mov	r0, sl
 800748c:	4790      	blx	r2
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 8085 	bne.w	800759e <_scanf_i+0x1c2>
 8007494:	f10b 0b01 	add.w	fp, fp, #1
 8007498:	f1bb 0f03 	cmp.w	fp, #3
 800749c:	d1cb      	bne.n	8007436 <_scanf_i+0x5a>
 800749e:	6863      	ldr	r3, [r4, #4]
 80074a0:	b90b      	cbnz	r3, 80074a6 <_scanf_i+0xca>
 80074a2:	230a      	movs	r3, #10
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	4945      	ldr	r1, [pc, #276]	@ (80075c0 <_scanf_i+0x1e4>)
 80074aa:	6960      	ldr	r0, [r4, #20]
 80074ac:	1ac9      	subs	r1, r1, r3
 80074ae:	f000 f889 	bl	80075c4 <__sccl>
 80074b2:	f04f 0b00 	mov.w	fp, #0
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d03d      	beq.n	800753a <_scanf_i+0x15e>
 80074be:	6831      	ldr	r1, [r6, #0]
 80074c0:	6960      	ldr	r0, [r4, #20]
 80074c2:	f891 c000 	ldrb.w	ip, [r1]
 80074c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d035      	beq.n	800753a <_scanf_i+0x15e>
 80074ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80074d2:	d124      	bne.n	800751e <_scanf_i+0x142>
 80074d4:	0510      	lsls	r0, r2, #20
 80074d6:	d522      	bpl.n	800751e <_scanf_i+0x142>
 80074d8:	f10b 0b01 	add.w	fp, fp, #1
 80074dc:	f1b9 0f00 	cmp.w	r9, #0
 80074e0:	d003      	beq.n	80074ea <_scanf_i+0x10e>
 80074e2:	3301      	adds	r3, #1
 80074e4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	6873      	ldr	r3, [r6, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	6073      	str	r3, [r6, #4]
 80074f2:	dd1b      	ble.n	800752c <_scanf_i+0x150>
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	6033      	str	r3, [r6, #0]
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	e7d9      	b.n	80074b6 <_scanf_i+0xda>
 8007502:	f1bb 0f02 	cmp.w	fp, #2
 8007506:	d1ae      	bne.n	8007466 <_scanf_i+0x8a>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800750e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007512:	d1bf      	bne.n	8007494 <_scanf_i+0xb8>
 8007514:	2110      	movs	r1, #16
 8007516:	6061      	str	r1, [r4, #4]
 8007518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800751c:	e7a2      	b.n	8007464 <_scanf_i+0x88>
 800751e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	780b      	ldrb	r3, [r1, #0]
 8007526:	f805 3b01 	strb.w	r3, [r5], #1
 800752a:	e7de      	b.n	80074ea <_scanf_i+0x10e>
 800752c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007530:	4631      	mov	r1, r6
 8007532:	4650      	mov	r0, sl
 8007534:	4798      	blx	r3
 8007536:	2800      	cmp	r0, #0
 8007538:	d0df      	beq.n	80074fa <_scanf_i+0x11e>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	05d9      	lsls	r1, r3, #23
 800753e:	d50d      	bpl.n	800755c <_scanf_i+0x180>
 8007540:	42bd      	cmp	r5, r7
 8007542:	d909      	bls.n	8007558 <_scanf_i+0x17c>
 8007544:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007548:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800754c:	4632      	mov	r2, r6
 800754e:	4650      	mov	r0, sl
 8007550:	4798      	blx	r3
 8007552:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8007556:	464d      	mov	r5, r9
 8007558:	42bd      	cmp	r5, r7
 800755a:	d028      	beq.n	80075ae <_scanf_i+0x1d2>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	f012 0210 	ands.w	r2, r2, #16
 8007562:	d113      	bne.n	800758c <_scanf_i+0x1b0>
 8007564:	702a      	strb	r2, [r5, #0]
 8007566:	6863      	ldr	r3, [r4, #4]
 8007568:	9e01      	ldr	r6, [sp, #4]
 800756a:	4639      	mov	r1, r7
 800756c:	4650      	mov	r0, sl
 800756e:	47b0      	blx	r6
 8007570:	f8d8 3000 	ldr.w	r3, [r8]
 8007574:	6821      	ldr	r1, [r4, #0]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	f8c8 2000 	str.w	r2, [r8]
 800757c:	f011 0f20 	tst.w	r1, #32
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	d00f      	beq.n	80075a4 <_scanf_i+0x1c8>
 8007584:	6018      	str	r0, [r3, #0]
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	3301      	adds	r3, #1
 800758a:	60e3      	str	r3, [r4, #12]
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	1bed      	subs	r5, r5, r7
 8007590:	445d      	add	r5, fp
 8007592:	442b      	add	r3, r5
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	2000      	movs	r0, #0
 8007598:	b007      	add	sp, #28
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	f04f 0b00 	mov.w	fp, #0
 80075a2:	e7ca      	b.n	800753a <_scanf_i+0x15e>
 80075a4:	07ca      	lsls	r2, r1, #31
 80075a6:	bf4c      	ite	mi
 80075a8:	8018      	strhmi	r0, [r3, #0]
 80075aa:	6018      	strpl	r0, [r3, #0]
 80075ac:	e7eb      	b.n	8007586 <_scanf_i+0x1aa>
 80075ae:	2001      	movs	r0, #1
 80075b0:	e7f2      	b.n	8007598 <_scanf_i+0x1bc>
 80075b2:	bf00      	nop
 80075b4:	08007a9c 	.word	0x08007a9c
 80075b8:	08007815 	.word	0x08007815
 80075bc:	080078f5 	.word	0x080078f5
 80075c0:	08007b33 	.word	0x08007b33

080075c4 <__sccl>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	780b      	ldrb	r3, [r1, #0]
 80075c8:	4604      	mov	r4, r0
 80075ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80075cc:	bf0b      	itete	eq
 80075ce:	784b      	ldrbeq	r3, [r1, #1]
 80075d0:	1c4a      	addne	r2, r1, #1
 80075d2:	1c8a      	addeq	r2, r1, #2
 80075d4:	2100      	movne	r1, #0
 80075d6:	bf08      	it	eq
 80075d8:	2101      	moveq	r1, #1
 80075da:	3801      	subs	r0, #1
 80075dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80075e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80075e4:	42a8      	cmp	r0, r5
 80075e6:	d1fb      	bne.n	80075e0 <__sccl+0x1c>
 80075e8:	b90b      	cbnz	r3, 80075ee <__sccl+0x2a>
 80075ea:	1e50      	subs	r0, r2, #1
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	f081 0101 	eor.w	r1, r1, #1
 80075f2:	54e1      	strb	r1, [r4, r3]
 80075f4:	4610      	mov	r0, r2
 80075f6:	4602      	mov	r2, r0
 80075f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80075fe:	d005      	beq.n	800760c <__sccl+0x48>
 8007600:	2d5d      	cmp	r5, #93	@ 0x5d
 8007602:	d016      	beq.n	8007632 <__sccl+0x6e>
 8007604:	2d00      	cmp	r5, #0
 8007606:	d0f1      	beq.n	80075ec <__sccl+0x28>
 8007608:	462b      	mov	r3, r5
 800760a:	e7f2      	b.n	80075f2 <__sccl+0x2e>
 800760c:	7846      	ldrb	r6, [r0, #1]
 800760e:	2e5d      	cmp	r6, #93	@ 0x5d
 8007610:	d0fa      	beq.n	8007608 <__sccl+0x44>
 8007612:	42b3      	cmp	r3, r6
 8007614:	dcf8      	bgt.n	8007608 <__sccl+0x44>
 8007616:	3002      	adds	r0, #2
 8007618:	461a      	mov	r2, r3
 800761a:	3201      	adds	r2, #1
 800761c:	4296      	cmp	r6, r2
 800761e:	54a1      	strb	r1, [r4, r2]
 8007620:	dcfb      	bgt.n	800761a <__sccl+0x56>
 8007622:	1af2      	subs	r2, r6, r3
 8007624:	3a01      	subs	r2, #1
 8007626:	1c5d      	adds	r5, r3, #1
 8007628:	42b3      	cmp	r3, r6
 800762a:	bfa8      	it	ge
 800762c:	2200      	movge	r2, #0
 800762e:	18ab      	adds	r3, r5, r2
 8007630:	e7e1      	b.n	80075f6 <__sccl+0x32>
 8007632:	4610      	mov	r0, r2
 8007634:	e7da      	b.n	80075ec <__sccl+0x28>
	...

08007638 <__malloc_lock>:
 8007638:	4801      	ldr	r0, [pc, #4]	@ (8007640 <__malloc_lock+0x8>)
 800763a:	f7ff b8d5 	b.w	80067e8 <__retarget_lock_acquire_recursive>
 800763e:	bf00      	nop
 8007640:	20000460 	.word	0x20000460

08007644 <__malloc_unlock>:
 8007644:	4801      	ldr	r0, [pc, #4]	@ (800764c <__malloc_unlock+0x8>)
 8007646:	f7ff b8d0 	b.w	80067ea <__retarget_lock_release_recursive>
 800764a:	bf00      	nop
 800764c:	20000460 	.word	0x20000460

08007650 <__submore>:
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	460c      	mov	r4, r1
 8007656:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d11d      	bne.n	800769c <__submore+0x4c>
 8007660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007664:	f7ff fc52 	bl	8006f0c <_malloc_r>
 8007668:	b918      	cbnz	r0, 8007672 <__submore+0x22>
 800766a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800766e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007676:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007678:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800767c:	6360      	str	r0, [r4, #52]	@ 0x34
 800767e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007682:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007686:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800768a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800768e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007692:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	2000      	movs	r0, #0
 800769a:	e7e8      	b.n	800766e <__submore+0x1e>
 800769c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800769e:	0077      	lsls	r7, r6, #1
 80076a0:	463a      	mov	r2, r7
 80076a2:	f000 f80f 	bl	80076c4 <_realloc_r>
 80076a6:	4605      	mov	r5, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0de      	beq.n	800766a <__submore+0x1a>
 80076ac:	eb00 0806 	add.w	r8, r0, r6
 80076b0:	4601      	mov	r1, r0
 80076b2:	4632      	mov	r2, r6
 80076b4:	4640      	mov	r0, r8
 80076b6:	f000 f949 	bl	800794c <memcpy>
 80076ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80076be:	f8c4 8000 	str.w	r8, [r4]
 80076c2:	e7e9      	b.n	8007698 <__submore+0x48>

080076c4 <_realloc_r>:
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	4680      	mov	r8, r0
 80076ca:	4615      	mov	r5, r2
 80076cc:	460c      	mov	r4, r1
 80076ce:	b921      	cbnz	r1, 80076da <_realloc_r+0x16>
 80076d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	4611      	mov	r1, r2
 80076d6:	f7ff bc19 	b.w	8006f0c <_malloc_r>
 80076da:	b92a      	cbnz	r2, 80076e8 <_realloc_r+0x24>
 80076dc:	f7ff f886 	bl	80067ec <_free_r>
 80076e0:	2400      	movs	r4, #0
 80076e2:	4620      	mov	r0, r4
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e8:	f000 f93e 	bl	8007968 <_malloc_usable_size_r>
 80076ec:	4285      	cmp	r5, r0
 80076ee:	4606      	mov	r6, r0
 80076f0:	d802      	bhi.n	80076f8 <_realloc_r+0x34>
 80076f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076f6:	d8f4      	bhi.n	80076e2 <_realloc_r+0x1e>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fc06 	bl	8006f0c <_malloc_r>
 8007700:	4607      	mov	r7, r0
 8007702:	2800      	cmp	r0, #0
 8007704:	d0ec      	beq.n	80076e0 <_realloc_r+0x1c>
 8007706:	42b5      	cmp	r5, r6
 8007708:	462a      	mov	r2, r5
 800770a:	4621      	mov	r1, r4
 800770c:	bf28      	it	cs
 800770e:	4632      	movcs	r2, r6
 8007710:	f000 f91c 	bl	800794c <memcpy>
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff f868 	bl	80067ec <_free_r>
 800771c:	463c      	mov	r4, r7
 800771e:	e7e0      	b.n	80076e2 <_realloc_r+0x1e>

08007720 <_strtol_l.constprop.0>:
 8007720:	2b24      	cmp	r3, #36	@ 0x24
 8007722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007726:	4686      	mov	lr, r0
 8007728:	4690      	mov	r8, r2
 800772a:	d801      	bhi.n	8007730 <_strtol_l.constprop.0+0x10>
 800772c:	2b01      	cmp	r3, #1
 800772e:	d106      	bne.n	800773e <_strtol_l.constprop.0+0x1e>
 8007730:	f7ff f830 	bl	8006794 <__errno>
 8007734:	2316      	movs	r3, #22
 8007736:	6003      	str	r3, [r0, #0]
 8007738:	2000      	movs	r0, #0
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	4834      	ldr	r0, [pc, #208]	@ (8007810 <_strtol_l.constprop.0+0xf0>)
 8007740:	460d      	mov	r5, r1
 8007742:	462a      	mov	r2, r5
 8007744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007748:	5d06      	ldrb	r6, [r0, r4]
 800774a:	f016 0608 	ands.w	r6, r6, #8
 800774e:	d1f8      	bne.n	8007742 <_strtol_l.constprop.0+0x22>
 8007750:	2c2d      	cmp	r4, #45	@ 0x2d
 8007752:	d12d      	bne.n	80077b0 <_strtol_l.constprop.0+0x90>
 8007754:	782c      	ldrb	r4, [r5, #0]
 8007756:	2601      	movs	r6, #1
 8007758:	1c95      	adds	r5, r2, #2
 800775a:	f033 0210 	bics.w	r2, r3, #16
 800775e:	d109      	bne.n	8007774 <_strtol_l.constprop.0+0x54>
 8007760:	2c30      	cmp	r4, #48	@ 0x30
 8007762:	d12a      	bne.n	80077ba <_strtol_l.constprop.0+0x9a>
 8007764:	782a      	ldrb	r2, [r5, #0]
 8007766:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800776a:	2a58      	cmp	r2, #88	@ 0x58
 800776c:	d125      	bne.n	80077ba <_strtol_l.constprop.0+0x9a>
 800776e:	786c      	ldrb	r4, [r5, #1]
 8007770:	2310      	movs	r3, #16
 8007772:	3502      	adds	r5, #2
 8007774:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007778:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800777c:	2200      	movs	r2, #0
 800777e:	fbbc f9f3 	udiv	r9, ip, r3
 8007782:	4610      	mov	r0, r2
 8007784:	fb03 ca19 	mls	sl, r3, r9, ip
 8007788:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800778c:	2f09      	cmp	r7, #9
 800778e:	d81b      	bhi.n	80077c8 <_strtol_l.constprop.0+0xa8>
 8007790:	463c      	mov	r4, r7
 8007792:	42a3      	cmp	r3, r4
 8007794:	dd27      	ble.n	80077e6 <_strtol_l.constprop.0+0xc6>
 8007796:	1c57      	adds	r7, r2, #1
 8007798:	d007      	beq.n	80077aa <_strtol_l.constprop.0+0x8a>
 800779a:	4581      	cmp	r9, r0
 800779c:	d320      	bcc.n	80077e0 <_strtol_l.constprop.0+0xc0>
 800779e:	d101      	bne.n	80077a4 <_strtol_l.constprop.0+0x84>
 80077a0:	45a2      	cmp	sl, r4
 80077a2:	db1d      	blt.n	80077e0 <_strtol_l.constprop.0+0xc0>
 80077a4:	fb00 4003 	mla	r0, r0, r3, r4
 80077a8:	2201      	movs	r2, #1
 80077aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ae:	e7eb      	b.n	8007788 <_strtol_l.constprop.0+0x68>
 80077b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80077b2:	bf04      	itt	eq
 80077b4:	782c      	ldrbeq	r4, [r5, #0]
 80077b6:	1c95      	addeq	r5, r2, #2
 80077b8:	e7cf      	b.n	800775a <_strtol_l.constprop.0+0x3a>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1da      	bne.n	8007774 <_strtol_l.constprop.0+0x54>
 80077be:	2c30      	cmp	r4, #48	@ 0x30
 80077c0:	bf0c      	ite	eq
 80077c2:	2308      	moveq	r3, #8
 80077c4:	230a      	movne	r3, #10
 80077c6:	e7d5      	b.n	8007774 <_strtol_l.constprop.0+0x54>
 80077c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80077cc:	2f19      	cmp	r7, #25
 80077ce:	d801      	bhi.n	80077d4 <_strtol_l.constprop.0+0xb4>
 80077d0:	3c37      	subs	r4, #55	@ 0x37
 80077d2:	e7de      	b.n	8007792 <_strtol_l.constprop.0+0x72>
 80077d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077d8:	2f19      	cmp	r7, #25
 80077da:	d804      	bhi.n	80077e6 <_strtol_l.constprop.0+0xc6>
 80077dc:	3c57      	subs	r4, #87	@ 0x57
 80077de:	e7d8      	b.n	8007792 <_strtol_l.constprop.0+0x72>
 80077e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077e4:	e7e1      	b.n	80077aa <_strtol_l.constprop.0+0x8a>
 80077e6:	1c53      	adds	r3, r2, #1
 80077e8:	d108      	bne.n	80077fc <_strtol_l.constprop.0+0xdc>
 80077ea:	2322      	movs	r3, #34	@ 0x22
 80077ec:	f8ce 3000 	str.w	r3, [lr]
 80077f0:	4660      	mov	r0, ip
 80077f2:	f1b8 0f00 	cmp.w	r8, #0
 80077f6:	d0a0      	beq.n	800773a <_strtol_l.constprop.0+0x1a>
 80077f8:	1e69      	subs	r1, r5, #1
 80077fa:	e006      	b.n	800780a <_strtol_l.constprop.0+0xea>
 80077fc:	b106      	cbz	r6, 8007800 <_strtol_l.constprop.0+0xe0>
 80077fe:	4240      	negs	r0, r0
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	d099      	beq.n	800773a <_strtol_l.constprop.0+0x1a>
 8007806:	2a00      	cmp	r2, #0
 8007808:	d1f6      	bne.n	80077f8 <_strtol_l.constprop.0+0xd8>
 800780a:	f8c8 1000 	str.w	r1, [r8]
 800780e:	e794      	b.n	800773a <_strtol_l.constprop.0+0x1a>
 8007810:	08007b3f 	.word	0x08007b3f

08007814 <_strtol_r>:
 8007814:	f7ff bf84 	b.w	8007720 <_strtol_l.constprop.0>

08007818 <_strtoul_l.constprop.0>:
 8007818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800781c:	4e34      	ldr	r6, [pc, #208]	@ (80078f0 <_strtoul_l.constprop.0+0xd8>)
 800781e:	4686      	mov	lr, r0
 8007820:	460d      	mov	r5, r1
 8007822:	4628      	mov	r0, r5
 8007824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007828:	5d37      	ldrb	r7, [r6, r4]
 800782a:	f017 0708 	ands.w	r7, r7, #8
 800782e:	d1f8      	bne.n	8007822 <_strtoul_l.constprop.0+0xa>
 8007830:	2c2d      	cmp	r4, #45	@ 0x2d
 8007832:	d12f      	bne.n	8007894 <_strtoul_l.constprop.0+0x7c>
 8007834:	782c      	ldrb	r4, [r5, #0]
 8007836:	2701      	movs	r7, #1
 8007838:	1c85      	adds	r5, r0, #2
 800783a:	f033 0010 	bics.w	r0, r3, #16
 800783e:	d109      	bne.n	8007854 <_strtoul_l.constprop.0+0x3c>
 8007840:	2c30      	cmp	r4, #48	@ 0x30
 8007842:	d12c      	bne.n	800789e <_strtoul_l.constprop.0+0x86>
 8007844:	7828      	ldrb	r0, [r5, #0]
 8007846:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800784a:	2858      	cmp	r0, #88	@ 0x58
 800784c:	d127      	bne.n	800789e <_strtoul_l.constprop.0+0x86>
 800784e:	786c      	ldrb	r4, [r5, #1]
 8007850:	2310      	movs	r3, #16
 8007852:	3502      	adds	r5, #2
 8007854:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007858:	2600      	movs	r6, #0
 800785a:	fbb8 f8f3 	udiv	r8, r8, r3
 800785e:	fb03 f908 	mul.w	r9, r3, r8
 8007862:	ea6f 0909 	mvn.w	r9, r9
 8007866:	4630      	mov	r0, r6
 8007868:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800786c:	f1bc 0f09 	cmp.w	ip, #9
 8007870:	d81c      	bhi.n	80078ac <_strtoul_l.constprop.0+0x94>
 8007872:	4664      	mov	r4, ip
 8007874:	42a3      	cmp	r3, r4
 8007876:	dd2a      	ble.n	80078ce <_strtoul_l.constprop.0+0xb6>
 8007878:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800787c:	d007      	beq.n	800788e <_strtoul_l.constprop.0+0x76>
 800787e:	4580      	cmp	r8, r0
 8007880:	d322      	bcc.n	80078c8 <_strtoul_l.constprop.0+0xb0>
 8007882:	d101      	bne.n	8007888 <_strtoul_l.constprop.0+0x70>
 8007884:	45a1      	cmp	r9, r4
 8007886:	db1f      	blt.n	80078c8 <_strtoul_l.constprop.0+0xb0>
 8007888:	fb00 4003 	mla	r0, r0, r3, r4
 800788c:	2601      	movs	r6, #1
 800788e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007892:	e7e9      	b.n	8007868 <_strtoul_l.constprop.0+0x50>
 8007894:	2c2b      	cmp	r4, #43	@ 0x2b
 8007896:	bf04      	itt	eq
 8007898:	782c      	ldrbeq	r4, [r5, #0]
 800789a:	1c85      	addeq	r5, r0, #2
 800789c:	e7cd      	b.n	800783a <_strtoul_l.constprop.0+0x22>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1d8      	bne.n	8007854 <_strtoul_l.constprop.0+0x3c>
 80078a2:	2c30      	cmp	r4, #48	@ 0x30
 80078a4:	bf0c      	ite	eq
 80078a6:	2308      	moveq	r3, #8
 80078a8:	230a      	movne	r3, #10
 80078aa:	e7d3      	b.n	8007854 <_strtoul_l.constprop.0+0x3c>
 80078ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80078b0:	f1bc 0f19 	cmp.w	ip, #25
 80078b4:	d801      	bhi.n	80078ba <_strtoul_l.constprop.0+0xa2>
 80078b6:	3c37      	subs	r4, #55	@ 0x37
 80078b8:	e7dc      	b.n	8007874 <_strtoul_l.constprop.0+0x5c>
 80078ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80078be:	f1bc 0f19 	cmp.w	ip, #25
 80078c2:	d804      	bhi.n	80078ce <_strtoul_l.constprop.0+0xb6>
 80078c4:	3c57      	subs	r4, #87	@ 0x57
 80078c6:	e7d5      	b.n	8007874 <_strtoul_l.constprop.0+0x5c>
 80078c8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80078cc:	e7df      	b.n	800788e <_strtoul_l.constprop.0+0x76>
 80078ce:	1c73      	adds	r3, r6, #1
 80078d0:	d106      	bne.n	80078e0 <_strtoul_l.constprop.0+0xc8>
 80078d2:	2322      	movs	r3, #34	@ 0x22
 80078d4:	f8ce 3000 	str.w	r3, [lr]
 80078d8:	4630      	mov	r0, r6
 80078da:	b932      	cbnz	r2, 80078ea <_strtoul_l.constprop.0+0xd2>
 80078dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078e0:	b107      	cbz	r7, 80078e4 <_strtoul_l.constprop.0+0xcc>
 80078e2:	4240      	negs	r0, r0
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	d0f9      	beq.n	80078dc <_strtoul_l.constprop.0+0xc4>
 80078e8:	b106      	cbz	r6, 80078ec <_strtoul_l.constprop.0+0xd4>
 80078ea:	1e69      	subs	r1, r5, #1
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	e7f5      	b.n	80078dc <_strtoul_l.constprop.0+0xc4>
 80078f0:	08007b3f 	.word	0x08007b3f

080078f4 <_strtoul_r>:
 80078f4:	f7ff bf90 	b.w	8007818 <_strtoul_l.constprop.0>

080078f8 <memmove>:
 80078f8:	4288      	cmp	r0, r1
 80078fa:	b510      	push	{r4, lr}
 80078fc:	eb01 0402 	add.w	r4, r1, r2
 8007900:	d902      	bls.n	8007908 <memmove+0x10>
 8007902:	4284      	cmp	r4, r0
 8007904:	4623      	mov	r3, r4
 8007906:	d807      	bhi.n	8007918 <memmove+0x20>
 8007908:	1e43      	subs	r3, r0, #1
 800790a:	42a1      	cmp	r1, r4
 800790c:	d008      	beq.n	8007920 <memmove+0x28>
 800790e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007916:	e7f8      	b.n	800790a <memmove+0x12>
 8007918:	4402      	add	r2, r0
 800791a:	4601      	mov	r1, r0
 800791c:	428a      	cmp	r2, r1
 800791e:	d100      	bne.n	8007922 <memmove+0x2a>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800792a:	e7f7      	b.n	800791c <memmove+0x24>

0800792c <_sbrk_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_sbrk_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7f9 fbea 	bl	8001110 <_sbrk>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_sbrk_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_sbrk_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	2000045c 	.word	0x2000045c

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <_malloc_usable_size_r>:
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f18      	subs	r0, r3, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfbc      	itt	lt
 8007972:	580b      	ldrlt	r3, [r1, r0]
 8007974:	18c0      	addlt	r0, r0, r3
 8007976:	4770      	bx	lr

08007978 <_init>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr

08007984 <_fini>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr
